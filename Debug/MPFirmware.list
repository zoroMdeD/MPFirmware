
MPFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009288  08009288  00019288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ec  080096ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080096ec  080096ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096ec  080096ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080096f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  200001e0  080098d0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  080098d0  00020db8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156be  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b07  00000000  00000000  000358c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000393d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006da2  00000000  00000000  0003bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e596  00000000  00000000  000429f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000968bf  00000000  00000000  00060f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e4  00000000  00000000  000f7898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800926c 	.word	0x0800926c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800926c 	.word	0x0800926c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000a9a:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <MX_ADC1_Init+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac4:	481b      	ldr	r0, [pc, #108]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000ac6:	f001 ff57 	bl	8002978 <HAL_ADC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 fbc4 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000ae6:	f002 f90f 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000af0:	f000 fbb4 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000b02:	f002 f901 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000b0c:	f000 fba6 	bl	800125c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0xac>)
 8000b1e:	f002 f8f3 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000b28:	f000 fb98 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001fc 	.word	0x200001fc
 8000b38:	40012400 	.word	0x40012400

08000b3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <HAL_ADC_MspInit+0xbc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d149      	bne.n	8000bf0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_ADC_MspInit+0xc0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = A_Current_Pin|B_Current_Pin|C_Current_Pin;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b90:	2303      	movs	r3, #3
 8000b92:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4819      	ldr	r0, [pc, #100]	; (8000c00 <HAL_ADC_MspInit+0xc4>)
 8000b9c:	f002 fdaa 	bl	80036f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000ba2:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0xcc>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bca:	2220      	movs	r2, #32
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bd6:	f002 fb9f 	bl	8003318 <HAL_DMA_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000be0:	f000 fb3c 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000be8:	621a      	str	r2, [r3, #32]
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_ADC_MspInit+0xc8>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40012400 	.word	0x40012400
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	2000022c 	.word	0x2000022c
 8000c08:	40020008 	.word	0x40020008

08000c0c <USART_Tx>:
	*dst = 0;
}
//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TC));
 8000c16:	bf00      	nop
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <USART_Tx+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f9      	beq.n	8000c18 <USART_Tx+0xc>
	USART1->DR = Data;
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <USART_Tx+0x28>)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	6053      	str	r3, [r2, #4]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40013800 	.word	0x40013800

08000c38 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8000c44:	e009      	b.n	8000c5a <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffdc 	bl	8000c0c <USART_Tx>
		i++;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	3301      	adds	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1ef      	bne.n	8000c46 <SEND_str+0xe>
	}
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_DMA_Init+0x38>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <MX_DMA_Init+0x38>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_DMA_Init+0x38>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	200b      	movs	r0, #11
 8000c94:	f002 fb09 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c98:	200b      	movs	r0, #11
 8000c9a:	f002 fb22 	bl	80032e2 <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a60      	ldr	r2, [pc, #384]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0310 	and.w	r3, r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd8:	4b5b      	ldr	r3, [pc, #364]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a5a      	ldr	r2, [pc, #360]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b58      	ldr	r3, [pc, #352]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a54      	ldr	r2, [pc, #336]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b4f      	ldr	r3, [pc, #316]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <MX_GPIO_Init+0x19c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|mcuFAIL_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000d26:	4849      	ldr	r0, [pc, #292]	; (8000e4c <MX_GPIO_Init+0x1a0>)
 8000d28:	f002 fe68 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000d32:	4847      	ldr	r0, [pc, #284]	; (8000e50 <MX_GPIO_Init+0x1a4>)
 8000d34:	f002 fe62 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = distCLOSE_Pin|distSTOP_Pin;
 8000d38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <MX_GPIO_Init+0x1a8>)
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4840      	ldr	r0, [pc, #256]	; (8000e50 <MX_GPIO_Init+0x1a4>)
 8000d4e:	f002 fcd1 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = distINT_Pin|handOPEN_Pin|handCLOSE_Pin|handCTRL_Pin
 8000d52:	f248 031e 	movw	r3, #32798	; 0x801e
 8000d56:	613b      	str	r3, [r7, #16]
                          |CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	483a      	ldr	r0, [pc, #232]	; (8000e50 <MX_GPIO_Init+0x1a4>)
 8000d68:	f002 fcc4 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|mcuFAIL_Pin;
 8000d6c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	4831      	ldr	r0, [pc, #196]	; (8000e4c <MX_GPIO_Init+0x1a0>)
 8000d86:	f002 fcb5 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_GPIO_Init+0x1ac>)
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482f      	ldr	r0, [pc, #188]	; (8000e5c <MX_GPIO_Init+0x1b0>)
 8000d9e:	f002 fca9 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SELFP_CLOSEmcu_Pin|SELFP_OPENmcu_Pin|HIGHP_CLOSEmcu_Pin|HIGHP_OPENmcu_Pin;
 8000da2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	4829      	ldr	r0, [pc, #164]	; (8000e5c <MX_GPIO_Init+0x1b0>)
 8000db8:	f002 fc9c 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin;
 8000dbc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481e      	ldr	r0, [pc, #120]	; (8000e50 <MX_GPIO_Init+0x1a4>)
 8000dd6:	f002 fc8d 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLOSEmcu_Pin|OPENmcu_Pin;
 8000dda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_GPIO_Init+0x1a8>)
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4817      	ldr	r0, [pc, #92]	; (8000e4c <MX_GPIO_Init+0x1a0>)
 8000df0:	f002 fc80 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = distOPEN_Pin;
 8000df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_GPIO_Init+0x1a8>)
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(distOPEN_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <MX_GPIO_Init+0x1b0>)
 8000e0a:	f002 fc73 	bl	80036f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2006      	movs	r0, #6
 8000e14:	f002 fa49 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f002 fa62 	bl	80032e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2007      	movs	r0, #7
 8000e24:	f002 fa41 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e28:	2007      	movs	r0, #7
 8000e2a:	f002 fa5a 	bl	80032e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2008      	movs	r0, #8
 8000e34:	f002 fa39 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f002 fa52 	bl	80032e2 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40011000 	.word	0x40011000
 8000e54:	10110000 	.word	0x10110000
 8000e58:	10210000 	.word	0x10210000
 8000e5c:	40010c00 	.word	0x40010c00

08000e60 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_I2C2_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_I2C2_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C2_Init+0x50>)
 8000e9e:	f002 fddd 	bl	8003a5c <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 f9d8 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000270 	.word	0x20000270
 8000eb4:	40005800 	.word	0x40005800
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_I2C_MspInit+0x74>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d124      	bne.n	8000f26 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000ef4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efa:	2312      	movs	r3, #18
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HAL_I2C_MspInit+0x7c>)
 8000f0a:	f002 fbf3 	bl	80036f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000f14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_I2C_MspInit+0x78>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40005800 	.word	0x40005800
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010c00 	.word	0x40010c00

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f001 fc94 	bl	800286c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f83e 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f7ff feb0 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f7ff fe90 	bl	8000c70 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f50:	f7ff fd9a 	bl	8000a88 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f54:	f000 fb8a 	bl	800166c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f58:	f000 fc26 	bl	80017a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f5c:	f000 fcc8 	bl	80018f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f60:	f000 fd60 	bl	8001a24 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000f64:	f7ff ff7c 	bl	8000e60 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f68:	f000 f97e 	bl	8001268 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f6c:	f000 ff68 	bl	8001e40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f70:	f000 ff90 	bl	8001e94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	time = 200;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <main+0x70>)
 8000f76:	22c8      	movs	r2, #200	; 0xc8
 8000f78:	701a      	strb	r2, [r3, #0]

	EN_Interrupt();		//Для дебага/Конфигурации по USART1
 8000f7a:	f001 f859 	bl	8002030 <EN_Interrupt>

  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c2) != 0)
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <main+0x74>)
 8000f80:	f001 fa76 	bl	8002470 <ssd1306_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <main+0x52>
  {
	  Error_Handler();
 8000f8a:	f000 f967 	bl	800125c <Error_Handler>
  }
	//----------------ADC-----------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);		//Стартуем АЦП
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <main+0x78>)
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <main+0x7c>)
 8000f94:	f001 fdc8 	bl	8002b28 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <main+0x80>)
 8000f9c:	f004 f9fc 	bl	8005398 <HAL_TIM_OC_Start>
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 8000fa0:	f001 f87b 	bl	800209a <my_init_card>
	SEND_str("Init sd card -> success\n");
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <main+0x84>)
 8000fa6:	f7ff fe47 	bl	8000c38 <SEND_str>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0x6e>
 8000fac:	20000307 	.word	0x20000307
 8000fb0:	20000270 	.word	0x20000270
 8000fb4:	20000320 	.word	0x20000320
 8000fb8:	200001fc 	.word	0x200001fc
 8000fbc:	200003a8 	.word	0x200003a8
 8000fc0:	08009288 	.word	0x08009288

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2228      	movs	r2, #40	; 0x28
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fa4c 	bl	8006470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001010:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f978 	bl	8004310 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001026:	f000 f919 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fbe4 	bl	8004814 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001052:	f000 f903 	bl	800125c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001056:	2302      	movs	r3, #2
 8001058:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800105a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fd6e 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106e:	f000 f8f5 	bl	800125c <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10f      	bne.n	80010ac <HAL_GPIO_EXTI_Callback+0x30>
	{
		if((GPIOB->IDR & GPIO_PIN_0) == 0)
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d130      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
		{
			if((GPIOB->IDR & GPIO_PIN_0) == 0)
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d12a      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
				LEFT_NUM_DOWN = true;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_GPIO_EXTI_Callback+0x8c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
	else
	{
		__NOP();
	}
//	What_Time = 0;
}
 80010aa:	e026      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
	else if (GPIO_Pin == GPIO_PIN_1)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d10f      	bne.n	80010d2 <HAL_GPIO_EXTI_Callback+0x56>
		if((GPIOB->IDR & GPIO_PIN_1) == 0)
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11d      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
			if((GPIOB->IDR & GPIO_PIN_1) == 0)
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d117      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
				LEFT_NUM_UP = true;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_GPIO_EXTI_Callback+0x90>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	e013      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
	else if (GPIO_Pin == GPIO_PIN_2)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d10f      	bne.n	80010f8 <HAL_GPIO_EXTI_Callback+0x7c>
		if((GPIOB->IDR & GPIO_PIN_2) == 0)
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
			if((GPIOB->IDR & GPIO_PIN_2) == 0)
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <HAL_GPIO_EXTI_Callback+0x88>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
				RIGHT_NUM = true;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_GPIO_EXTI_Callback+0x94>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x7e>
		__NOP();
 80010f8:	bf00      	nop
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40010c00 	.word	0x40010c00
 8001108:	20000305 	.word	0x20000305
 800110c:	20000304 	.word	0x20000304
 8001110:	20000306 	.word	0x20000306

08001114 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a46      	ldr	r2, [pc, #280]	; (800123c <HAL_ADC_ConvCpltCallback+0x128>)
 8001122:	4293      	cmp	r3, r2
 8001124:	f040 8086 	bne.w	8001234 <HAL_ADC_ConvCpltCallback+0x120>
    {
    	cnt++;
 8001128:	4b45      	ldr	r3, [pc, #276]	; (8001240 <HAL_ADC_ConvCpltCallback+0x12c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001132:	701a      	strb	r2, [r3, #0]
    	adcValue[0] += Conversion_ADC1((uint16_t)adc[0]);
 8001134:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_ADC_ConvCpltCallback+0x130>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fb0c 	bl	8002758 <Conversion_ADC1>
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff f811 	bl	800016c <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	493e      	ldr	r1, [pc, #248]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001150:	e9c1 2300 	strd	r2, r3, [r1]
        adcValue[1] += Conversion_ADC1((uint16_t)adc[1]);
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_ADC_ConvCpltCallback+0x130>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fafc 	bl	8002758 <Conversion_ADC1>
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001162:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001166:	f7ff f801 	bl	800016c <__adddf3>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4936      	ldr	r1, [pc, #216]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001170:	e9c1 2302 	strd	r2, r3, [r1, #8]
        adcValue[2] += Conversion_ADC1((uint16_t)adc[2]);
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <HAL_ADC_ConvCpltCallback+0x130>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f001 faec 	bl	8002758 <Conversion_ADC1>
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001182:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001186:	f7fe fff1 	bl	800016c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	492e      	ldr	r1, [pc, #184]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001190:	e9c1 2304 	strd	r2, r3, [r1, #16]
        if(cnt == 20)
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b14      	cmp	r3, #20
 800119a:	d14b      	bne.n	8001234 <HAL_ADC_ConvCpltCallback+0x120>
        {
        	Amps[0] = adcValue[0]/20;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_ADC_ConvCpltCallback+0x138>)
 80011a8:	f7ff fac0 	bl	800072c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_ADC_ConvCpltCallback+0x13c>)
 80011b2:	e9c1 2300 	strd	r2, r3, [r1]
        	Amps[1] = adcValue[1]/20;
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 80011b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_ADC_ConvCpltCallback+0x138>)
 80011c2:	f7ff fab3 	bl	800072c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4921      	ldr	r1, [pc, #132]	; (8001250 <HAL_ADC_ConvCpltCallback+0x13c>)
 80011cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        	Amps[2] = adcValue[2]/20;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 80011d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_ADC_ConvCpltCallback+0x138>)
 80011dc:	f7ff faa6 	bl	800072c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	491a      	ldr	r1, [pc, #104]	; (8001250 <HAL_ADC_ConvCpltCallback+0x13c>)
 80011e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        	adcValue[0] = 0.0;
 80011ea:	4917      	ldr	r1, [pc, #92]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
        	adcValue[1] = 0.0;
 80011f8:	4913      	ldr	r1, [pc, #76]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	e9c1 2302 	strd	r2, r3, [r1, #8]
        	adcValue[2] = 0.0;
 8001206:	4910      	ldr	r1, [pc, #64]	; (8001248 <HAL_ADC_ConvCpltCallback+0x134>)
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c1 2304 	strd	r2, r3, [r1, #16]
    		snprintf(trans_str, 63, "%.2fA\n", Amps[0]);
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_ADC_ConvCpltCallback+0x13c>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	e9cd 2300 	strd	r2, r3, [sp]
 800121e:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_ADC_ConvCpltCallback+0x140>)
 8001220:	213f      	movs	r1, #63	; 0x3f
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_ADC_ConvCpltCallback+0x144>)
 8001224:	f005 fe78 	bl	8006f18 <sniprintf>
    		SEND_str(trans_str);
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HAL_ADC_ConvCpltCallback+0x144>)
 800122a:	f7ff fd05 	bl	8000c38 <SEND_str>
        	cnt = 0;
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012400 	.word	0x40012400
 8001240:	20000348 	.word	0x20000348
 8001244:	20000320 	.word	0x20000320
 8001248:	20000330 	.word	0x20000330
 800124c:	40340000 	.word	0x40340000
 8001250:	20000308 	.word	0x20000308
 8001254:	080092a4 	.word	0x080092a4
 8001258:	200002c4 	.word	0x200002c4

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_SPI1_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <MX_SPI1_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_SPI1_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_SPI1_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SPI1_Init+0x64>)
 800129c:	2208      	movs	r2, #8
 800129e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_SPI1_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_SPI1_Init+0x64>)
 80012ba:	f003 fcf9 	bl	8004cb0 <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c4:	f7ff ffca 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000034c 	.word	0x2000034c
 80012d0:	40013000 	.word	0x40013000

080012d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <HAL_SPI_MspInit+0x88>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d12f      	bne.n	8001354 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x8c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8001324:	23a0      	movs	r3, #160	; 0xa0
 8001326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_SPI_MspInit+0x90>)
 8001338:	f002 f9dc 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 800133c:	2340      	movs	r3, #64	; 0x40
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspInit+0x90>)
 8001350:	f002 f9d0 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40013000 	.word	0x40013000
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001412:	f001 fa71 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}

0800141a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 800141e:	2001      	movs	r0, #1
 8001420:	f002 fb04 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 800142c:	2002      	movs	r0, #2
 800142e:	f002 fafd 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}

08001436 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT3_Pin);
 800143a:	2004      	movs	r0, #4
 800143c:	f002 faf6 	bl	8003a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Channel1_IRQHandler+0x10>)
 800144a:	f002 f81f 	bl	800348c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000022c 	.word	0x2000022c

08001458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <USART1_IRQHandler+0x74>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b00      	cmp	r3, #0
 800146a:	d029      	beq.n	80014c0 <USART1_IRQHandler+0x68>
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <USART1_IRQHandler+0x74>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d022      	beq.n	80014c0 <USART1_IRQHandler+0x68>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <USART1_IRQHandler+0x74>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <USART1_IRQHandler+0x78>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	3301      	adds	r3, #1
 800148a:	b29b      	uxth	r3, r3
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <USART1_IRQHandler+0x7c>)
 800148e:	fba2 1203 	umull	r1, r2, r2, r3
 8001492:	0a52      	lsrs	r2, r2, #9
 8001494:	f240 4106 	movw	r1, #1030	; 0x406
 8001498:	fb01 f202 	mul.w	r2, r1, r2
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <USART1_IRQHandler+0x80>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	88ba      	ldrh	r2, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d009      	beq.n	80014c0 <USART1_IRQHandler+0x68>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <USART1_IRQHandler+0x78>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	4a09      	ldr	r2, [pc, #36]	; (80014dc <USART1_IRQHandler+0x84>)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <USART1_IRQHandler+0x78>)
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 80014c0:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200004c8 	.word	0x200004c8
 80014d0:	20000550 	.word	0x20000550
 80014d4:	7f411e53 	.word	0x7f411e53
 80014d8:	20000552 	.word	0x20000552
 80014dc:	20000554 	.word	0x20000554

080014e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <_kill>:

int _kill(int pid, int sig)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f8:	f004 ff7a 	bl	80063f0 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2216      	movs	r2, #22
 8001500:	601a      	str	r2, [r3, #0]
	return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_exit>:

void _exit (int status)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001516:	f04f 31ff 	mov.w	r1, #4294967295
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffe7 	bl	80014ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8001520:	e7fe      	b.n	8001520 <_exit+0x12>

08001522 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e00a      	b.n	800154a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001534:	f3af 8000 	nop.w
 8001538:	4601      	mov	r1, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	60ba      	str	r2, [r7, #8]
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf0      	blt.n	8001534 <_read+0x12>
	}

return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e009      	b.n	8001582 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbf1      	blt.n	800156e <_write+0x12>
	}
	return len;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_close>:

int _close(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <_isatty>:

int _isatty(int file)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f004 fee4 	bl	80063f0 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20005000 	.word	0x20005000
 8001654:	00000400 	.word	0x00000400
 8001658:	200003a4 	.word	0x200003a4
 800165c:	20000db8 	.word	0x20000db8

08001660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2220      	movs	r2, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fee3 	bl	8006470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016ac:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <MX_TIM1_Init+0x138>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80016b0:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016b2:	2247      	movs	r2, #71	; 0x47
 80016b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016be:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d6:	4832      	ldr	r0, [pc, #200]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016d8:	f003 fdb6 	bl	8005248 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016e2:	f7ff fdbb 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f0:	4619      	mov	r1, r3
 80016f2:	482b      	ldr	r0, [pc, #172]	; (80017a0 <MX_TIM1_Init+0x134>)
 80016f4:	f004 f8ba 	bl	800586c <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016fe:	f7ff fdad 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <MX_TIM1_Init+0x134>)
 8001704:	f003 fdef 	bl	80052e6 <HAL_TIM_OC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800170e:	f7ff fda5 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800171a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171e:	4619      	mov	r1, r3
 8001720:	481f      	ldr	r0, [pc, #124]	; (80017a0 <MX_TIM1_Init+0x134>)
 8001722:	f004 fcdb 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800172c:	f7ff fd96 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001730:	2330      	movs	r3, #48	; 0x30
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_TIM1_Init+0x134>)
 8001756:	f003 ff73 	bl	8005640 <HAL_TIM_OC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001760:	f7ff fd7c 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM1_Init+0x134>)
 8001788:	f004 fd06 	bl	8006198 <HAL_TIMEx_ConfigBreakDeadTime>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001792:	f7ff fd63 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3758      	adds	r7, #88	; 0x58
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003a8 	.word	0x200003a8
 80017a4:	40012c00 	.word	0x40012c00

080017a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b092      	sub	sp, #72	; 0x48
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <MX_TIM2_Init+0x144>)
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <MX_TIM2_Init+0x144>)
 80017f2:	2247      	movs	r2, #71	; 0x47
 80017f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <MX_TIM2_Init+0x144>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000;
 80017fc:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <MX_TIM2_Init+0x144>)
 80017fe:	f242 3228 	movw	r2, #9000	; 0x2328
 8001802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <MX_TIM2_Init+0x144>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <MX_TIM2_Init+0x144>)
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001810:	4836      	ldr	r0, [pc, #216]	; (80018ec <MX_TIM2_Init+0x144>)
 8001812:	f003 fd19 	bl	8005248 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800181c:	f7ff fd1e 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800182a:	4619      	mov	r1, r3
 800182c:	482f      	ldr	r0, [pc, #188]	; (80018ec <MX_TIM2_Init+0x144>)
 800182e:	f004 f81d 	bl	800586c <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001838:	f7ff fd10 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800183c:	482b      	ldr	r0, [pc, #172]	; (80018ec <MX_TIM2_Init+0x144>)
 800183e:	f003 fe4d 	bl	80054dc <HAL_TIM_PWM_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001848:	f7ff fd08 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800184c:	2108      	movs	r1, #8
 800184e:	4827      	ldr	r0, [pc, #156]	; (80018ec <MX_TIM2_Init+0x144>)
 8001850:	f003 fe9c 	bl	800558c <HAL_TIM_OnePulse_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800185a:	f7ff fcff 	bl	800125c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800185e:	2306      	movs	r3, #6
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001866:	2302      	movs	r3, #2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	481d      	ldr	r0, [pc, #116]	; (80018ec <MX_TIM2_Init+0x144>)
 8001876:	f004 f8bd 	bl	80059f4 <HAL_TIM_SlaveConfigSynchro>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001880:	f7ff fcec 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <MX_TIM2_Init+0x144>)
 8001894:	f004 fc22 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800189e:	f7ff fcdd 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018a2:	2370      	movs	r3, #112	; 0x70
 80018a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_TIM2_Init+0x144>)
 80018ba:	f003 ff19 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80018c4:	f7ff fcca 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	220c      	movs	r2, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_TIM2_Init+0x144>)
 80018d0:	f003 ff0e 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 80018da:	f7ff fcbf 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_TIM2_Init+0x144>)
 80018e0:	f000 fa14 	bl	8001d0c <HAL_TIM_MspPostInit>

}
 80018e4:	bf00      	nop
 80018e6:	3748      	adds	r7, #72	; 0x48
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200003f0 	.word	0x200003f0

080018f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b092      	sub	sp, #72	; 0x48
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <MX_TIM3_Init+0x130>)
 8001934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001938:	2247      	movs	r2, #71	; 0x47
 800193a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_TIM3_Init+0x12c>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001944:	f242 3228 	movw	r2, #9000	; 0x2328
 8001948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <MX_TIM3_Init+0x12c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001956:	4831      	ldr	r0, [pc, #196]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001958:	f003 fc76 	bl	8005248 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001962:	f7ff fc7b 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001970:	4619      	mov	r1, r3
 8001972:	482a      	ldr	r0, [pc, #168]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001974:	f003 ff7a 	bl	800586c <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800197e:	f7ff fc6d 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001982:	4826      	ldr	r0, [pc, #152]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001984:	f003 fdaa 	bl	80054dc <HAL_TIM_PWM_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800198e:	f7ff fc65 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001992:	2108      	movs	r1, #8
 8001994:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001996:	f003 fdf9 	bl	800558c <HAL_TIM_OnePulse_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80019a0:	f7ff fc5c 	bl	800125c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80019a4:	2306      	movs	r3, #6
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80019a8:	2360      	movs	r3, #96	; 0x60
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM3_Init+0x12c>)
 80019bc:	f004 f81a 	bl	80059f4 <HAL_TIM_SlaveConfigSynchro>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80019c6:	f7ff fc49 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MX_TIM3_Init+0x12c>)
 80019da:	f004 fb7f 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80019e4:	f7ff fc3a 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019e8:	2370      	movs	r3, #112	; 0x70
 80019ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001a00:	f003 fe76 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8001a0a:	f7ff fc27 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM3_Init+0x12c>)
 8001a10:	f000 f97c 	bl	8001d0c <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3748      	adds	r7, #72	; 0x48
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000438 	.word	0x20000438
 8001a20:	40000400 	.word	0x40000400

08001a24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b092      	sub	sp, #72	; 0x48
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a66:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <MX_TIM4_Init+0x148>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a6c:	2247      	movs	r2, #71	; 0x47
 8001a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a78:	f242 3228 	movw	r2, #9000	; 0x2328
 8001a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8a:	4837      	ldr	r0, [pc, #220]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001a8c:	f003 fbdc 	bl	8005248 <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a96:	f7ff fbe1 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4830      	ldr	r0, [pc, #192]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001aa8:	f003 fee0 	bl	800586c <HAL_TIM_ConfigClockSource>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ab2:	f7ff fbd3 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ab6:	482c      	ldr	r0, [pc, #176]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001ab8:	f003 fd10 	bl	80054dc <HAL_TIM_PWM_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001ac2:	f7ff fbcb 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ac6:	2108      	movs	r1, #8
 8001ac8:	4827      	ldr	r0, [pc, #156]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001aca:	f003 fd5f 	bl	800558c <HAL_TIM_OnePulse_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001ad4:	f7ff fbc2 	bl	800125c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001ad8:	2306      	movs	r3, #6
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	481e      	ldr	r0, [pc, #120]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001af0:	f003 ff80 	bl	80059f4 <HAL_TIM_SlaveConfigSynchro>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001afa:	f7ff fbaf 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001b0e:	f004 fae5 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8001b18:	f7ff fba0 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b1c:	2370      	movs	r3, #112	; 0x70
 8001b1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001b34:	f003 fddc 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x11e>
  {
    Error_Handler();
 8001b3e:	f7ff fb8d 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	220c      	movs	r2, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001b4a:	f003 fdd1 	bl	80056f0 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0x134>
  {
    Error_Handler();
 8001b54:	f7ff fb82 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM4_Init+0x144>)
 8001b5a:	f000 f8d7 	bl	8001d0c <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3748      	adds	r7, #72	; 0x48
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000480 	.word	0x20000480
 8001b6c:	40000800 	.word	0x40000800

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b090      	sub	sp, #64	; 0x40
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_TIM_Base_MspInit+0x184>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d10c      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001b96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ba8:	e0a0      	b.n	8001cec <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d136      	bne.n	8001c22 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = A_ZeroCross_Pin;
 8001be4:	2308      	movs	r3, #8
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(A_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4841      	ldr	r0, [pc, #260]	; (8001cfc <HAL_TIM_Base_MspInit+0x18c>)
 8001bf8:	f001 fd7c 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_TIM_Base_MspInit+0x190>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c1a:	4a39      	ldr	r2, [pc, #228]	; (8001d00 <HAL_TIM_Base_MspInit+0x190>)
 8001c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c1e:	6053      	str	r3, [r2, #4]
}
 8001c20:	e064      	b.n	8001cec <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM3)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <HAL_TIM_Base_MspInit+0x194>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d136      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a31      	ldr	r2, [pc, #196]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = B_ZeroCross_Pin;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(B_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <HAL_TIM_Base_MspInit+0x18c>)
 8001c70:	f001 fd40 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_TIM_Base_MspInit+0x190>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_Base_MspInit+0x190>)
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	6053      	str	r3, [r2, #4]
}
 8001c98:	e028      	b.n	8001cec <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM4)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <HAL_TIM_Base_MspInit+0x198>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d123      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	61d3      	str	r3, [r2, #28]
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_TIM_Base_MspInit+0x188>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = C_ZeroCross_Pin;
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(C_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_TIM_Base_MspInit+0x18c>)
 8001ce8:	f001 fd04 	bl	80036f4 <HAL_GPIO_Init>
}
 8001cec:	bf00      	nop
 8001cee:	3740      	adds	r7, #64	; 0x40
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40012c00 	.word	0x40012c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800

08001d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2a:	d12b      	bne.n	8001d84 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a3d      	ldr	r2, [pc, #244]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = AREV_Pin|AFWD_Pin;
 8001d44:	f248 0308 	movw	r3, #32776	; 0x8008
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4834      	ldr	r0, [pc, #208]	; (8001e2c <HAL_TIM_MspPostInit+0x120>)
 8001d5a:	f001 fccb 	bl	80036f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_TIM_MspPostInit+0x124>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <HAL_TIM_MspPostInit+0x124>)
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d82:	e04d      	b.n	8001e20 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_TIM_MspPostInit+0x128>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12a      	bne.n	8001de4 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BFWD_Pin;
 8001da6:	2310      	movs	r3, #16
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2302      	movs	r3, #2
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BFWD_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	4619      	mov	r1, r3
 8001db8:	481f      	ldr	r0, [pc, #124]	; (8001e38 <HAL_TIM_MspPostInit+0x12c>)
 8001dba:	f001 fc9b 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_TIM_MspPostInit+0x124>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_TIM_MspPostInit+0x124>)
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	6053      	str	r3, [r2, #4]
}
 8001de2:	e01d      	b.n	8001e20 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM4)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_TIM_MspPostInit+0x130>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d118      	bne.n	8001e20 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_TIM_MspPostInit+0x11c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CFWD_Pin|CREV_Pin;
 8001e06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2302      	movs	r3, #2
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <HAL_TIM_MspPostInit+0x12c>)
 8001e1c:	f001 fc6a 	bl	80036f4 <HAL_GPIO_Init>
}
 8001e20:	bf00      	nop
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010800 	.word	0x40010800
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40000800 	.word	0x40000800

08001e40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART1_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e78:	f004 f9df 	bl	800623a <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f7ff f9eb 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200004c8 	.word	0x200004c8
 8001e90:	40013800 	.word	0x40013800

08001e94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_USART3_UART_Init+0x50>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_USART3_UART_Init+0x4c>)
 8001ecc:	f004 f9b5 	bl	800623a <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed6:	f7ff f9c1 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000050c 	.word	0x2000050c
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	; 0x30
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a45      	ldr	r2, [pc, #276]	; (8002018 <HAL_UART_MspInit+0x130>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d13a      	bne.n	8001f7e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a3d      	ldr	r2, [pc, #244]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TxD_Pin;
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TxD_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4834      	ldr	r0, [pc, #208]	; (8002020 <HAL_UART_MspInit+0x138>)
 8001f4e:	f001 fbd1 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxD_Pin;
 8001f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RxD_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	482e      	ldr	r0, [pc, #184]	; (8002020 <HAL_UART_MspInit+0x138>)
 8001f68:	f001 fbc4 	bl	80036f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2025      	movs	r0, #37	; 0x25
 8001f72:	f001 f99a 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f76:	2025      	movs	r0, #37	; 0x25
 8001f78:	f001 f9b3 	bl	80032e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f7c:	e048      	b.n	8002010 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <HAL_UART_MspInit+0x13c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d143      	bne.n	8002010 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_UART_MspInit+0x134>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_UART_MspInit+0x134>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <HAL_UART_MspInit+0x134>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <HAL_UART_MspInit+0x134>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIRE_TxD_Pin;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(WIRE_TxD_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4816      	ldr	r0, [pc, #88]	; (8002028 <HAL_UART_MspInit+0x140>)
 8001fce:	f001 fb91 	bl	80036f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIRE_RxD_Pin;
 8001fd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIRE_RxD_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4810      	ldr	r0, [pc, #64]	; (8002028 <HAL_UART_MspInit+0x140>)
 8001fe8:	f001 fb84 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_UART_MspInit+0x144>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_UART_MspInit+0x144>)
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	6053      	str	r3, [r2, #4]
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013800 	.word	0x40013800
 800201c:	40021000 	.word	0x40021000
 8002020:	40010800 	.word	0x40010800
 8002024:	40004800 	.word	0x40004800
 8002028:	40011000 	.word	0x40011000
 800202c:	40010000 	.word	0x40010000

08002030 <EN_Interrupt>:
		return c;
	}
}
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <EN_Interrupt+0x1c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <EN_Interrupt+0x1c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	60da      	str	r2, [r3, #12]
	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	200004c8 	.word	0x200004c8

08002050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002052:	490d      	ldr	r1, [pc, #52]	; (8002088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002068:	4c0a      	ldr	r4, [pc, #40]	; (8002094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002076:	f7ff faf3 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207a:	f004 f9bf 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207e:	f7fe ff5d 	bl	8000f3c <main>
  bx lr
 8002082:	4770      	bx	lr
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800208c:	080096f4 	.word	0x080096f4
  ldr r2, =_sbss
 8002090:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002094:	20000db8 	.word	0x20000db8

08002098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC1_2_IRQHandler>

0800209a <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 800209e:	f000 f8b9 	bl	8002214 <sd_ini>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	LD_ON;
 80020ac:	2200      	movs	r2, #0
 80020ae:	2101      	movs	r1, #1
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <Error+0x14>)
 80020b2:	f001 fca3 	bl	80039fc <HAL_GPIO_WritePin>
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40010800 	.word	0x40010800

080020c0 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 80020ce:	f107 020f 	add.w	r2, r7, #15
 80020d2:	1df9      	adds	r1, r7, #7
 80020d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	4806      	ldr	r0, [pc, #24]	; (80020f8 <SPIx_WriteRead+0x38>)
 80020de:	f002 fe6b 	bl	8004db8 <HAL_SPI_TransmitReceive>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <SPIx_WriteRead+0x2c>
	{
		Error();
 80020e8:	f7ff ffde 	bl	80020a8 <Error>
  	}
  	return receivedbyte;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000034c 	.word	0x2000034c

080020fc <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffd9 	bl	80020c0 <SPIx_WriteRead>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 800211c:	20ff      	movs	r0, #255	; 0xff
 800211e:	f7ff ffcf 	bl	80020c0 <SPIx_WriteRead>
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	return bt;
 8002126:	79fb      	ldrb	r3, [r7, #7]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8002134:	20ff      	movs	r0, #255	; 0xff
 8002136:	f7ff ffc3 	bl	80020c0 <SPIx_WriteRead>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	da0e      	bge.n	8002172 <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800215a:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 800215c:	2100      	movs	r1, #0
 800215e:	2077      	movs	r0, #119	; 0x77
 8002160:	f7ff ffee 	bl	8002140 <SD_cmd>
 8002164:	4603      	mov	r3, r0
 8002166:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d901      	bls.n	8002172 <SD_cmd+0x32>
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	e049      	b.n	8002206 <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 8002172:	2201      	movs	r2, #1
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	4826      	ldr	r0, [pc, #152]	; (8002210 <SD_cmd+0xd0>)
 8002178:	f001 fc40 	bl	80039fc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 800217c:	f7ff ffcb 	bl	8002116 <SPI_ReceiveByte>
	SS_SD_SELECT();
 8002180:	2200      	movs	r2, #0
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	4822      	ldr	r0, [pc, #136]	; (8002210 <SD_cmd+0xd0>)
 8002186:	f001 fc39 	bl	80039fc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 800218a:	f7ff ffc4 	bl	8002116 <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ffb3 	bl	80020fc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	0e1b      	lsrs	r3, r3, #24
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ffad 	bl	80020fc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ffa7 	bl	80020fc <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ffa1 	bl	80020fc <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff9c 	bl	80020fc <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d101      	bne.n	80021d2 <SD_cmd+0x92>
 80021ce:	2395      	movs	r3, #149	; 0x95
 80021d0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b48      	cmp	r3, #72	; 0x48
 80021d6:	d101      	bne.n	80021dc <SD_cmd+0x9c>
 80021d8:	2387      	movs	r3, #135	; 0x87
 80021da:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff8c 	bl	80020fc <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 80021e4:	230a      	movs	r3, #10
 80021e6:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 80021e8:	f7ff ff95 	bl	8002116 <SPI_ReceiveByte>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 80021f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da05      	bge.n	8002204 <SD_cmd+0xc4>
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f1      	bne.n	80021e8 <SD_cmd+0xa8>

	return res;
 8002204:	7bbb      	ldrb	r3, [r7, #14]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010c00 	.word	0x40010c00

08002214 <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 800221a:	2201      	movs	r2, #1
 800221c:	2101      	movs	r1, #1
 800221e:	4881      	ldr	r0, [pc, #516]	; (8002424 <sd_ini+0x210>)
 8002220:	f001 fbec 	bl	80039fc <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <sd_ini+0x214>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 800222a:	4b80      	ldr	r3, [pc, #512]	; (800242c <sd_ini+0x218>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8002230:	4b7e      	ldr	r3, [pc, #504]	; (800242c <sd_ini+0x218>)
 8002232:	2238      	movs	r2, #56	; 0x38
 8002234:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8002236:	487d      	ldr	r0, [pc, #500]	; (800242c <sd_ini+0x218>)
 8002238:	f002 fd3a 	bl	8004cb0 <HAL_SPI_Init>
	SS_SD_DESELECT();
 800223c:	2201      	movs	r2, #1
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	487b      	ldr	r0, [pc, #492]	; (8002430 <sd_ini+0x21c>)
 8002242:	f001 fbdb 	bl	80039fc <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e004      	b.n	8002256 <sd_ini+0x42>
		SPI_Release();
 800224c:	f7ff ff70 	bl	8002130 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d9f7      	bls.n	800224c <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 800225c:	4a73      	ldr	r2, [pc, #460]	; (800242c <sd_ini+0x218>)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8002262:	4872      	ldr	r0, [pc, #456]	; (800242c <sd_ini+0x218>)
 8002264:	f002 fd24 	bl	8004cb0 <HAL_SPI_Init>
	SS_SD_SELECT();
 8002268:	2200      	movs	r2, #0
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4870      	ldr	r0, [pc, #448]	; (8002430 <sd_ini+0x21c>)
 800226e:	f001 fbc5 	bl	80039fc <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8002272:	2100      	movs	r1, #0
 8002274:	2040      	movs	r0, #64	; 0x40
 8002276:	f7ff ff63 	bl	8002140 <SD_cmd>
 800227a:	4603      	mov	r3, r0
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 80be 	bne.w	80023fe <sd_ini+0x1ea>
	{
		SPI_Release();
 8002282:	f7ff ff55 	bl	8002130 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002286:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800228a:	2048      	movs	r0, #72	; 0x48
 800228c:	f7ff ff58 	bl	8002140 <SD_cmd>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d17b      	bne.n	800238e <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e00c      	b.n	80022b6 <sd_ini+0xa2>
 800229c:	7bfc      	ldrb	r4, [r7, #15]
 800229e:	f7ff ff3a 	bl	8002116 <SPI_ReceiveByte>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	f104 0310 	add.w	r3, r4, #16
 80022aa:	443b      	add	r3, r7
 80022ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	3301      	adds	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d9ef      	bls.n	800229c <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 80022bc:	793b      	ldrb	r3, [r7, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	797b      	ldrb	r3, [r7, #5]
 80022c2:	4618      	mov	r0, r3
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	79fa      	ldrb	r2, [r7, #7]
 80022c8:	9201      	str	r2, [sp, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4603      	mov	r3, r0
 80022ce:	460a      	mov	r2, r1
 80022d0:	4958      	ldr	r1, [pc, #352]	; (8002434 <sd_ini+0x220>)
 80022d2:	4859      	ldr	r0, [pc, #356]	; (8002438 <sd_ini+0x224>)
 80022d4:	f004 fe54 	bl	8006f80 <siprintf>
			SEND_str(str1);
 80022d8:	4857      	ldr	r0, [pc, #348]	; (8002438 <sd_ini+0x224>)
 80022da:	f7fe fcad 	bl	8000c38 <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 808e 	bne.w	8002402 <sd_ini+0x1ee>
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2baa      	cmp	r3, #170	; 0xaa
 80022ea:	f040 808a 	bne.w	8002402 <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 80022ee:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80022f2:	81bb      	strh	r3, [r7, #12]
 80022f4:	e005      	b.n	8002302 <sd_ini+0xee>
 80022f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	81bb      	strh	r3, [r7, #12]
 8002302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <sd_ini+0x106>
 800230a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800230e:	20e9      	movs	r0, #233	; 0xe9
 8002310:	f7ff ff16 	bl	8002140 <SD_cmd>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1ed      	bne.n	80022f6 <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 800231a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d06f      	beq.n	8002402 <sd_ini+0x1ee>
 8002322:	2100      	movs	r1, #0
 8002324:	207a      	movs	r0, #122	; 0x7a
 8002326:	f7ff ff0b 	bl	8002140 <SD_cmd>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d168      	bne.n	8002402 <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e00c      	b.n	8002350 <sd_ini+0x13c>
 8002336:	7bfc      	ldrb	r4, [r7, #15]
 8002338:	f7ff feed 	bl	8002116 <SPI_ReceiveByte>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	f104 0310 	add.w	r3, r4, #16
 8002344:	443b      	add	r3, r7
 8002346:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d9ef      	bls.n	8002336 <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8002356:	793b      	ldrb	r3, [r7, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	797b      	ldrb	r3, [r7, #5]
 800235c:	4618      	mov	r0, r3
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	9201      	str	r2, [sp, #4]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	460a      	mov	r2, r1
 800236a:	4932      	ldr	r1, [pc, #200]	; (8002434 <sd_ini+0x220>)
 800236c:	4832      	ldr	r0, [pc, #200]	; (8002438 <sd_ini+0x224>)
 800236e:	f004 fe07 	bl	8006f80 <siprintf>
				SEND_str(str1);
 8002372:	4831      	ldr	r0, [pc, #196]	; (8002438 <sd_ini+0x224>)
 8002374:	f7fe fc60 	bl	8000c38 <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <sd_ini+0x172>
 8002382:	220c      	movs	r2, #12
 8002384:	e000      	b.n	8002388 <sd_ini+0x174>
 8002386:	2204      	movs	r2, #4
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <sd_ini+0x214>)
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e039      	b.n	8002402 <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 800238e:	2100      	movs	r1, #0
 8002390:	20e9      	movs	r0, #233	; 0xe9
 8002392:	f7ff fed5 	bl	8002140 <SD_cmd>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d805      	bhi.n	80023a8 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <sd_ini+0x214>)
 800239e:	2202      	movs	r2, #2
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	23e9      	movs	r3, #233	; 0xe9
 80023a4:	73bb      	strb	r3, [r7, #14]
 80023a6:	e004      	b.n	80023b2 <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <sd_ini+0x214>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	2341      	movs	r3, #65	; 0x41
 80023b0:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 80023b2:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80023b6:	81bb      	strh	r3, [r7, #12]
 80023b8:	e005      	b.n	80023c6 <sd_ini+0x1b2>
 80023ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	81bb      	strh	r3, [r7, #12]
 80023c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <sd_ini+0x1ca>
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff feb4 	bl	8002140 <SD_cmd>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ed      	bne.n	80023ba <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 80023de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <sd_ini+0x1e2>
 80023e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ea:	2050      	movs	r0, #80	; 0x50
 80023ec:	f7ff fea8 	bl	8002140 <SD_cmd>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <sd_ini+0x1ee>
				sdinfo.type = 0;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <sd_ini+0x214>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e001      	b.n	8002402 <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00b      	b.n	800241a <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <sd_ini+0x214>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	490c      	ldr	r1, [pc, #48]	; (800243c <sd_ini+0x228>)
 800240c:	480a      	ldr	r0, [pc, #40]	; (8002438 <sd_ini+0x224>)
 800240e:	f004 fdb7 	bl	8006f80 <siprintf>
	SEND_str(str1);
 8002412:	4809      	ldr	r0, [pc, #36]	; (8002438 <sd_ini+0x224>)
 8002414:	f7fe fc10 	bl	8000c38 <SEND_str>
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	40010800 	.word	0x40010800
 8002428:	2000095c 	.word	0x2000095c
 800242c:	2000034c 	.word	0x2000034c
 8002430:	40010c00 	.word	0x40010c00
 8002434:	080092ac 	.word	0x080092ac
 8002438:	20000960 	.word	0x20000960
 800243c:	080092d0 	.word	0x080092d0

08002440 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af04      	add	r7, sp, #16
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800244c:	230a      	movs	r3, #10
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2301      	movs	r3, #1
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	1cfb      	adds	r3, r7, #3
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2301      	movs	r3, #1
 800245a:	2200      	movs	r2, #0
 800245c:	2178      	movs	r1, #120	; 0x78
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f001 fc40 	bl	8003ce4 <HAL_I2C_Mem_Write>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8002478:	2064      	movs	r0, #100	; 0x64
 800247a:	f000 fa59 	bl	8002930 <HAL_Delay>
    int status = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8002482:	21ae      	movs	r1, #174	; 0xae
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffdb 	bl	8002440 <ssd1306_WriteCommand>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8002494:	2120      	movs	r1, #32
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffd2 	bl	8002440 <ssd1306_WriteCommand>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80024a6:	2110      	movs	r1, #16
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffc9 	bl	8002440 <ssd1306_WriteCommand>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80024b8:	21b0      	movs	r1, #176	; 0xb0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffc0 	bl	8002440 <ssd1306_WriteCommand>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80024ca:	21c8      	movs	r1, #200	; 0xc8
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffb7 	bl	8002440 <ssd1306_WriteCommand>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80024dc:	2100      	movs	r1, #0
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffae 	bl	8002440 <ssd1306_WriteCommand>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80024ee:	2110      	movs	r1, #16
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffa5 	bl	8002440 <ssd1306_WriteCommand>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002500:	2140      	movs	r1, #64	; 0x40
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff9c 	bl	8002440 <ssd1306_WriteCommand>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8002512:	2181      	movs	r1, #129	; 0x81
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff93 	bl	8002440 <ssd1306_WriteCommand>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8002524:	21ff      	movs	r1, #255	; 0xff
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff8a 	bl	8002440 <ssd1306_WriteCommand>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8002536:	21a1      	movs	r1, #161	; 0xa1
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff81 	bl	8002440 <ssd1306_WriteCommand>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8002548:	21a6      	movs	r1, #166	; 0xa6
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff78 	bl	8002440 <ssd1306_WriteCommand>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800255a:	21a8      	movs	r1, #168	; 0xa8
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff6f 	bl	8002440 <ssd1306_WriteCommand>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800256c:	213f      	movs	r1, #63	; 0x3f
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff66 	bl	8002440 <ssd1306_WriteCommand>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800257e:	21a4      	movs	r1, #164	; 0xa4
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff5d 	bl	8002440 <ssd1306_WriteCommand>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002590:	21d3      	movs	r1, #211	; 0xd3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff54 	bl	8002440 <ssd1306_WriteCommand>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80025a2:	2100      	movs	r1, #0
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff4b 	bl	8002440 <ssd1306_WriteCommand>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80025b4:	21d5      	movs	r1, #213	; 0xd5
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff42 	bl	8002440 <ssd1306_WriteCommand>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80025c6:	21f0      	movs	r1, #240	; 0xf0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff39 	bl	8002440 <ssd1306_WriteCommand>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80025d8:	21d9      	movs	r1, #217	; 0xd9
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff30 	bl	8002440 <ssd1306_WriteCommand>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80025ea:	2122      	movs	r1, #34	; 0x22
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff27 	bl	8002440 <ssd1306_WriteCommand>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80025fc:	21da      	movs	r1, #218	; 0xda
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff1e 	bl	8002440 <ssd1306_WriteCommand>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 800260e:	2112      	movs	r1, #18
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff15 	bl	8002440 <ssd1306_WriteCommand>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002620:	21db      	movs	r1, #219	; 0xdb
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff0c 	bl	8002440 <ssd1306_WriteCommand>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8002632:	2120      	movs	r1, #32
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff03 	bl	8002440 <ssd1306_WriteCommand>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002644:	218d      	movs	r1, #141	; 0x8d
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fefa 	bl	8002440 <ssd1306_WriteCommand>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002656:	2114      	movs	r1, #20
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fef1 	bl	8002440 <ssd1306_WriteCommand>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002668:	21af      	movs	r1, #175	; 0xaf
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fee8 	bl	8002440 <ssd1306_WriteCommand>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <ssd1306_Init+0x214>
        return 1;
 8002680:	2301      	movs	r3, #1
 8002682:	e00f      	b.n	80026a4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002684:	2000      	movs	r0, #0
 8002686:	f000 f813 	bl	80026b0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f832 	bl	80026f4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <ssd1306_Init+0x23c>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <ssd1306_Init+0x23c>)
 8002698:	2200      	movs	r2, #0
 800269a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <ssd1306_Init+0x23c>)
 800269e:	2201      	movs	r2, #1
 80026a0:	715a      	strb	r2, [r3, #5]

    return 0;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000d9c 	.word	0x20000d9c

080026b0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e00d      	b.n	80026dc <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <ssd1306_Fill+0x1a>
 80026c6:	2100      	movs	r1, #0
 80026c8:	e000      	b.n	80026cc <ssd1306_Fill+0x1c>
 80026ca:	21ff      	movs	r1, #255	; 0xff
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <ssd1306_Fill+0x40>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	460a      	mov	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d3ed      	bcc.n	80026c0 <ssd1306_Fill+0x10>
    }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	2000099c 	.word	0x2000099c

080026f4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e020      	b.n	8002744 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3b50      	subs	r3, #80	; 0x50
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe98 	bl	8002440 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002710:	2100      	movs	r1, #0
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fe94 	bl	8002440 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8002718:	2110      	movs	r1, #16
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fe90 	bl	8002440 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <ssd1306_UpdateScreen+0x60>)
 8002726:	4413      	add	r3, r2
 8002728:	2264      	movs	r2, #100	; 0x64
 800272a:	9202      	str	r2, [sp, #8]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	9201      	str	r2, [sp, #4]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2301      	movs	r3, #1
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	2178      	movs	r1, #120	; 0x78
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f001 fad3 	bl	8003ce4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b07      	cmp	r3, #7
 8002748:	d9db      	bls.n	8002702 <ssd1306_UpdateScreen+0xe>
    }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000099c 	.word	0x2000099c

08002758 <Conversion_ADC1>:

//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Возвращает преобразованное значение в амперах
double Conversion_ADC1(uint16_t ADC_value)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
	//The average point is 1605mV
	//Sensitivity 66mV
	//Gain 1.56

	double Amps = 0;
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Voltage = 0;
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.8056640625;
 800277a:	a335      	add	r3, pc, #212	; (adr r3, 8002850 <Conversion_ADC1+0xf8>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Voltage = ADC_value * Resolution;
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fe3c 	bl	8000404 <__aeabi_i2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002794:	f7fd fea0 	bl	80004d8 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	(Voltage >= 1605) ? (Amps += ((Voltage - 1605)/66)*1.56) : (Amps += ((1605 - Voltage)/66)*1.56);
 80027a0:	a32d      	add	r3, pc, #180	; (adr r3, 8002858 <Conversion_ADC1+0x100>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027aa:	f7fe f91b 	bl	80009e4 <__aeabi_dcmpge>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <Conversion_ADC1+0xa4>
 80027b4:	a328      	add	r3, pc, #160	; (adr r3, 8002858 <Conversion_ADC1+0x100>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027be:	f7fd fcd3 	bl	8000168 <__aeabi_dsub>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <Conversion_ADC1+0x110>)
 80027d0:	f7fd ffac 	bl	800072c <__aeabi_ddiv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	a320      	add	r3, pc, #128	; (adr r3, 8002860 <Conversion_ADC1+0x108>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fd fe79 	bl	80004d8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ee:	f7fd fcbd 	bl	800016c <__adddf3>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80027fa:	e022      	b.n	8002842 <Conversion_ADC1+0xea>
 80027fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002800:	a115      	add	r1, pc, #84	; (adr r1, 8002858 <Conversion_ADC1+0x100>)
 8002802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002806:	f7fd fcaf 	bl	8000168 <__aeabi_dsub>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <Conversion_ADC1+0x110>)
 8002818:	f7fd ff88 	bl	800072c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	a30e      	add	r3, pc, #56	; (adr r3, 8002860 <Conversion_ADC1+0x108>)
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	f7fd fe55 	bl	80004d8 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002836:	f7fd fc99 	bl	800016c <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return Amps;
 8002842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00000000 	.word	0x00000000
 8002854:	3fe9c800 	.word	0x3fe9c800
 8002858:	00000000 	.word	0x00000000
 800285c:	40991400 	.word	0x40991400
 8002860:	8f5c28f6 	.word	0x8f5c28f6
 8002864:	3ff8f5c2 	.word	0x3ff8f5c2
 8002868:	40508000 	.word	0x40508000

0800286c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_Init+0x28>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_Init+0x28>)
 8002876:	f043 0310 	orr.w	r3, r3, #16
 800287a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287c:	2003      	movs	r0, #3
 800287e:	f000 fd09 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002882:	200f      	movs	r0, #15
 8002884:	f000 f808 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002888:	f7fe fd6e 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fd21 	bl	80032fe <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 fce9 	bl	80032aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_IncTick+0x1c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_IncTick+0x20>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_IncTick+0x20>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000008 	.word	0x20000008
 8002918:	20000da4 	.word	0x20000da4

0800291c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_GetTick+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000da4 	.word	0x20000da4

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fff0 	bl	800291c <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffe0 	bl	800291c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008

08002978 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0be      	b.n	8002b18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe f8c0 	bl	8000b3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 faf5 	bl	8002fac <ADC_ConversionStop_Disable>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 8099 	bne.w	8002b06 <HAL_ADC_Init+0x18e>
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8095 	bne.w	8002b06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029e4:	f023 0302 	bic.w	r3, r3, #2
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7b1b      	ldrb	r3, [r3, #12]
 80029fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d003      	beq.n	8002a1a <HAL_ADC_Init+0xa2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_ADC_Init+0xa8>
 8002a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_Init+0xaa>
 8002a20:	2300      	movs	r3, #0
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7d1b      	ldrb	r3, [r3, #20]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d119      	bne.n	8002a64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7b1b      	ldrb	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	035a      	lsls	r2, r3, #13
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e00b      	b.n	8002a64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_ADC_Init+0x1a8>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a94:	d003      	beq.n	8002a9e <HAL_ADC_Init+0x126>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d104      	bne.n	8002aa8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	051b      	lsls	r3, r3, #20
 8002aa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_ADC_Init+0x1ac>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10b      	bne.n	8002ae4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae2:	e018      	b.n	8002b16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f023 0312 	bic.w	r3, r3, #18
 8002aec:	f043 0210 	orr.w	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b04:	e007      	b.n	8002b16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	ffe1f7fd 	.word	0xffe1f7fd
 8002b24:	ff1f0efe 	.word	0xff1f0efe

08002b28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_Start_DMA+0x24>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d106      	bne.n	8002b5a <HAL_ADC_Start_DMA+0x32>
 8002b4c:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 80b3 	bne.w	8002cc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_Start_DMA+0x40>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0ae      	b.n	8002cc6 <HAL_ADC_Start_DMA+0x19e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9c1 	bl	8002ef8 <ADC_Enable>
 8002b76:	4603      	mov	r3, r0
 8002b78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 809a 	bne.w	8002cb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a4e      	ldr	r2, [pc, #312]	; (8002cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_Start_DMA+0x84>
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d115      	bne.n	8002bd8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d026      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bd6:	e01d      	b.n	8002c14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a39      	ldr	r2, [pc, #228]	; (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0xd0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10d      	bne.n	8002c14 <HAL_ADC_Start_DMA+0xec>
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f023 0206 	bic.w	r2, r3, #6
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <HAL_ADC_Start_DMA+0x1b0>)
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <HAL_ADC_Start_DMA+0x1b4>)
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_ADC_Start_DMA+0x1b8>)
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a18      	ldr	r0, [r3, #32]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	334c      	adds	r3, #76	; 0x4c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f000 fba5 	bl	80033cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c90:	d108      	bne.n	8002ca4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ca0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ca2:	e00f      	b.n	8002cc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cb4:	e006      	b.n	8002cc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40012400 	.word	0x40012400
 8002cd4:	40012800 	.word	0x40012800
 8002cd8:	0800302f 	.word	0x0800302f
 8002cdc:	080030ab 	.word	0x080030ab
 8002ce0:	080030c7 	.word	0x080030c7

08002ce4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x20>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0dc      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x1da>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d81c      	bhi.n	8002d72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b05      	subs	r3, #5
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4019      	ands	r1, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b05      	subs	r3, #5
 8002d64:	fa00 f203 	lsl.w	r2, r0, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d70:	e03c      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d81c      	bhi.n	8002db4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b23      	subs	r3, #35	; 0x23
 8002d8c:	221f      	movs	r2, #31
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	4019      	ands	r1, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b23      	subs	r3, #35	; 0x23
 8002da6:	fa00 f203 	lsl.w	r2, r0, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
 8002db2:	e01b      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b41      	subs	r3, #65	; 0x41
 8002dc6:	221f      	movs	r2, #31
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	4019      	ands	r1, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b41      	subs	r3, #65	; 0x41
 8002de0:	fa00 f203 	lsl.w	r2, r0, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d91c      	bls.n	8002e2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	3b1e      	subs	r3, #30
 8002e06:	2207      	movs	r2, #7
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4019      	ands	r1, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6898      	ldr	r0, [r3, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b1e      	subs	r3, #30
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e019      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6919      	ldr	r1, [r3, #16]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	2207      	movs	r2, #7
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4019      	ands	r1, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6898      	ldr	r0, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d132      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_ADC_ConfigChannel+0x1e4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d125      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d126      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	0c9a      	lsrs	r2, r3, #18
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x1b2>
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012400 	.word	0x40012400
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	431bde83 	.word	0x431bde83

08002ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d040      	beq.n	8002f98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <ADC_Enable+0xac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <ADC_Enable+0xb0>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f34:	e002      	b.n	8002f3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f42:	f7ff fceb 	bl	800291c <HAL_GetTick>
 8002f46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f48:	e01f      	b.n	8002f8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f4a:	f7ff fce7 	bl	800291c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d918      	bls.n	8002f8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d011      	beq.n	8002f8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1d8      	bne.n	8002f4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12e      	bne.n	8003024 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fd6:	f7ff fca1 	bl	800291c <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fdc:	e01b      	b.n	8003016 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fde:	f7ff fc9d 	bl	800291c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d914      	bls.n	8003016 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d0dc      	beq.n	8002fde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003044:	2b00      	cmp	r3, #0
 8003046:	d127      	bne.n	8003098 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800305e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003062:	d115      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7fe f83f 	bl	8001114 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003096:	e004      	b.n	80030a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fe13 	bl	8002ce4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fe02 	bl	8002cf6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4906      	ldr	r1, [pc, #24]	; (8003194 <__NVIC_EnableIRQ+0x34>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff90 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff2d 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff42 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff90 	bl	80031ec <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5f 	bl	8003198 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff35 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa2 	bl	8003250 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e043      	b.n	80033b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <HAL_DMA_Init+0xa8>)
 8003336:	4413      	add	r3, r2
 8003338:	4a22      	ldr	r2, [pc, #136]	; (80033c4 <HAL_DMA_Init+0xac>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	009a      	lsls	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1f      	ldr	r2, [pc, #124]	; (80033c8 <HAL_DMA_Init+0xb0>)
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003362:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	bffdfff8 	.word	0xbffdfff8
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	40020000 	.word	0x40020000

080033cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_DMA_Start_IT+0x20>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e04a      	b.n	8003482 <HAL_DMA_Start_IT+0xb6>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d13a      	bne.n	8003474 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f938 	bl	8003698 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 020e 	orr.w	r2, r2, #14
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e00f      	b.n	8003462 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0204 	bic.w	r2, r2, #4
 8003450:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 020a 	orr.w	r2, r2, #10
 8003460:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e005      	b.n	8003480 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2204      	movs	r2, #4
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d04f      	beq.n	8003554 <HAL_DMA_IRQHandler+0xc8>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04a      	beq.n	8003554 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d107      	bne.n	80034dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0204 	bic.w	r2, r2, #4
 80034da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a66      	ldr	r2, [pc, #408]	; (800367c <HAL_DMA_IRQHandler+0x1f0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d029      	beq.n	800353a <HAL_DMA_IRQHandler+0xae>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a65      	ldr	r2, [pc, #404]	; (8003680 <HAL_DMA_IRQHandler+0x1f4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0xaa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_DMA_IRQHandler+0x1f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA_IRQHandler+0xa4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a62      	ldr	r2, [pc, #392]	; (8003688 <HAL_DMA_IRQHandler+0x1fc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d012      	beq.n	800352a <HAL_DMA_IRQHandler+0x9e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a60      	ldr	r2, [pc, #384]	; (800368c <HAL_DMA_IRQHandler+0x200>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00a      	beq.n	8003524 <HAL_DMA_IRQHandler+0x98>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5f      	ldr	r2, [pc, #380]	; (8003690 <HAL_DMA_IRQHandler+0x204>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_DMA_IRQHandler+0x92>
 8003518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800351c:	e00e      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 800351e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003522:	e00b      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 8003524:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003528:	e008      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 800352a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800352e:	e005      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 8003530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003534:	e002      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	e000      	b.n	800353c <HAL_DMA_IRQHandler+0xb0>
 800353a:	2304      	movs	r3, #4
 800353c:	4a55      	ldr	r2, [pc, #340]	; (8003694 <HAL_DMA_IRQHandler+0x208>)
 800353e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8094 	beq.w	8003672 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003552:	e08e      	b.n	8003672 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2202      	movs	r2, #2
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d056      	beq.n	8003612 <HAL_DMA_IRQHandler+0x186>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d051      	beq.n	8003612 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 020a 	bic.w	r2, r2, #10
 800358a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a38      	ldr	r2, [pc, #224]	; (800367c <HAL_DMA_IRQHandler+0x1f0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d029      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x166>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_DMA_IRQHandler+0x1f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_IRQHandler+0x162>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a35      	ldr	r2, [pc, #212]	; (8003684 <HAL_DMA_IRQHandler+0x1f8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01a      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x15c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a34      	ldr	r2, [pc, #208]	; (8003688 <HAL_DMA_IRQHandler+0x1fc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d012      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x156>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a32      	ldr	r2, [pc, #200]	; (800368c <HAL_DMA_IRQHandler+0x200>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00a      	beq.n	80035dc <HAL_DMA_IRQHandler+0x150>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a31      	ldr	r2, [pc, #196]	; (8003690 <HAL_DMA_IRQHandler+0x204>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x14a>
 80035d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035d4:	e00e      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035da:	e00b      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e0:	e008      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e6:	e005      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ec:	e002      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035ee:	2320      	movs	r3, #32
 80035f0:	e000      	b.n	80035f4 <HAL_DMA_IRQHandler+0x168>
 80035f2:	2302      	movs	r3, #2
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_DMA_IRQHandler+0x208>)
 80035f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d034      	beq.n	8003672 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003610:	e02f      	b.n	8003672 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2208      	movs	r2, #8
 8003618:	409a      	lsls	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_DMA_IRQHandler+0x1e8>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d023      	beq.n	8003674 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 020e 	bic.w	r2, r2, #14
 800363a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
    }
  }
  return;
 8003672:	bf00      	nop
 8003674:	bf00      	nop
}
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40020008 	.word	0x40020008
 8003680:	4002001c 	.word	0x4002001c
 8003684:	40020030 	.word	0x40020030
 8003688:	40020044 	.word	0x40020044
 800368c:	40020058 	.word	0x40020058
 8003690:	4002006c 	.word	0x4002006c
 8003694:	40020000 	.word	0x40020000

08003698 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d108      	bne.n	80036d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036d6:	e007      	b.n	80036e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	60da      	str	r2, [r3, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003706:	e169      	b.n	80039dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003708:	2201      	movs	r2, #1
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	429a      	cmp	r2, r3
 8003722:	f040 8158 	bne.w	80039d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a9a      	ldr	r2, [pc, #616]	; (8003994 <HAL_GPIO_Init+0x2a0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d05e      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
 8003730:	4a98      	ldr	r2, [pc, #608]	; (8003994 <HAL_GPIO_Init+0x2a0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d875      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 8003736:	4a98      	ldr	r2, [pc, #608]	; (8003998 <HAL_GPIO_Init+0x2a4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d058      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
 800373c:	4a96      	ldr	r2, [pc, #600]	; (8003998 <HAL_GPIO_Init+0x2a4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d86f      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 8003742:	4a96      	ldr	r2, [pc, #600]	; (800399c <HAL_GPIO_Init+0x2a8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d052      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
 8003748:	4a94      	ldr	r2, [pc, #592]	; (800399c <HAL_GPIO_Init+0x2a8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d869      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 800374e:	4a94      	ldr	r2, [pc, #592]	; (80039a0 <HAL_GPIO_Init+0x2ac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04c      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
 8003754:	4a92      	ldr	r2, [pc, #584]	; (80039a0 <HAL_GPIO_Init+0x2ac>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d863      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 800375a:	4a92      	ldr	r2, [pc, #584]	; (80039a4 <HAL_GPIO_Init+0x2b0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d046      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
 8003760:	4a90      	ldr	r2, [pc, #576]	; (80039a4 <HAL_GPIO_Init+0x2b0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d85d      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 8003766:	2b12      	cmp	r3, #18
 8003768:	d82a      	bhi.n	80037c0 <HAL_GPIO_Init+0xcc>
 800376a:	2b12      	cmp	r3, #18
 800376c:	d859      	bhi.n	8003822 <HAL_GPIO_Init+0x12e>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <HAL_GPIO_Init+0x80>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	080037ef 	.word	0x080037ef
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037db 	.word	0x080037db
 8003780:	0800381d 	.word	0x0800381d
 8003784:	08003823 	.word	0x08003823
 8003788:	08003823 	.word	0x08003823
 800378c:	08003823 	.word	0x08003823
 8003790:	08003823 	.word	0x08003823
 8003794:	08003823 	.word	0x08003823
 8003798:	08003823 	.word	0x08003823
 800379c:	08003823 	.word	0x08003823
 80037a0:	08003823 	.word	0x08003823
 80037a4:	08003823 	.word	0x08003823
 80037a8:	08003823 	.word	0x08003823
 80037ac:	08003823 	.word	0x08003823
 80037b0:	08003823 	.word	0x08003823
 80037b4:	08003823 	.word	0x08003823
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037e5 	.word	0x080037e5
 80037c0:	4a79      	ldr	r2, [pc, #484]	; (80039a8 <HAL_GPIO_Init+0x2b4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037c6:	e02c      	b.n	8003822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	623b      	str	r3, [r7, #32]
          break;
 80037ce:	e029      	b.n	8003824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	3304      	adds	r3, #4
 80037d6:	623b      	str	r3, [r7, #32]
          break;
 80037d8:	e024      	b.n	8003824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	3308      	adds	r3, #8
 80037e0:	623b      	str	r3, [r7, #32]
          break;
 80037e2:	e01f      	b.n	8003824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	330c      	adds	r3, #12
 80037ea:	623b      	str	r3, [r7, #32]
          break;
 80037ec:	e01a      	b.n	8003824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037f6:	2304      	movs	r3, #4
 80037f8:	623b      	str	r3, [r7, #32]
          break;
 80037fa:	e013      	b.n	8003824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003804:	2308      	movs	r3, #8
 8003806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	611a      	str	r2, [r3, #16]
          break;
 800380e:	e009      	b.n	8003824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003810:	2308      	movs	r3, #8
 8003812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	615a      	str	r2, [r3, #20]
          break;
 800381a:	e003      	b.n	8003824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800381c:	2300      	movs	r3, #0
 800381e:	623b      	str	r3, [r7, #32]
          break;
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x130>
          break;
 8003822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	d801      	bhi.n	800382e <HAL_GPIO_Init+0x13a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	e001      	b.n	8003832 <HAL_GPIO_Init+0x13e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2bff      	cmp	r3, #255	; 0xff
 8003838:	d802      	bhi.n	8003840 <HAL_GPIO_Init+0x14c>
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	e002      	b.n	8003846 <HAL_GPIO_Init+0x152>
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	3b08      	subs	r3, #8
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	210f      	movs	r1, #15
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	fa01 f303 	lsl.w	r3, r1, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	401a      	ands	r2, r3
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	431a      	orrs	r2, r3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80b1 	beq.w	80039d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003874:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <HAL_GPIO_Init+0x2b8>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4a4c      	ldr	r2, [pc, #304]	; (80039ac <HAL_GPIO_Init+0x2b8>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6193      	str	r3, [r2, #24]
 8003880:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_GPIO_Init+0x2b8>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800388c:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <HAL_GPIO_Init+0x2bc>)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <HAL_GPIO_Init+0x2c0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3f      	ldr	r2, [pc, #252]	; (80039b8 <HAL_GPIO_Init+0x2c4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_GPIO_Init+0x1e8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <HAL_GPIO_Init+0x2c8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <HAL_GPIO_Init+0x1e4>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3d      	ldr	r2, [pc, #244]	; (80039c0 <HAL_GPIO_Init+0x2cc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_GPIO_Init+0x1e0>
 80038d0:	2303      	movs	r3, #3
 80038d2:	e006      	b.n	80038e2 <HAL_GPIO_Init+0x1ee>
 80038d4:	2304      	movs	r3, #4
 80038d6:	e004      	b.n	80038e2 <HAL_GPIO_Init+0x1ee>
 80038d8:	2302      	movs	r3, #2
 80038da:	e002      	b.n	80038e2 <HAL_GPIO_Init+0x1ee>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_GPIO_Init+0x1ee>
 80038e0:	2300      	movs	r3, #0
 80038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e4:	f002 0203 	and.w	r2, r2, #3
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	4093      	lsls	r3, r2
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038f2:	492f      	ldr	r1, [pc, #188]	; (80039b0 <HAL_GPIO_Init+0x2bc>)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	492c      	ldr	r1, [pc, #176]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800391a:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	43db      	mvns	r3, r3
 8003922:	4928      	ldr	r1, [pc, #160]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003924:	4013      	ands	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003934:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4922      	ldr	r1, [pc, #136]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	43db      	mvns	r3, r3
 800394a:	491e      	ldr	r1, [pc, #120]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800394c:	4013      	ands	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	4918      	ldr	r1, [pc, #96]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	608b      	str	r3, [r1, #8]
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	43db      	mvns	r3, r3
 8003972:	4914      	ldr	r1, [pc, #80]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003974:	4013      	ands	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d021      	beq.n	80039c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
 8003990:	e021      	b.n	80039d6 <HAL_GPIO_Init+0x2e2>
 8003992:	bf00      	nop
 8003994:	10320000 	.word	0x10320000
 8003998:	10310000 	.word	0x10310000
 800399c:	10220000 	.word	0x10220000
 80039a0:	10210000 	.word	0x10210000
 80039a4:	10120000 	.word	0x10120000
 80039a8:	10110000 	.word	0x10110000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010800 	.word	0x40010800
 80039b8:	40010c00 	.word	0x40010c00
 80039bc:	40011000 	.word	0x40011000
 80039c0:	40011400 	.word	0x40011400
 80039c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_GPIO_Init+0x304>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	4909      	ldr	r1, [pc, #36]	; (80039f8 <HAL_GPIO_Init+0x304>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f47f ae8e 	bne.w	8003708 <HAL_GPIO_Init+0x14>
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	372c      	adds	r7, #44	; 0x2c
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fb16 	bl	800107c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40010400 	.word	0x40010400

08003a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e12b      	b.n	8003cc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fa1a 	bl	8000ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f000 fffa 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a81      	ldr	r2, [pc, #516]	; (8003cd0 <HAL_I2C_Init+0x274>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d807      	bhi.n	8003ae0 <HAL_I2C_Init+0x84>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a80      	ldr	r2, [pc, #512]	; (8003cd4 <HAL_I2C_Init+0x278>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bf94      	ite	ls
 8003ad8:	2301      	movls	r3, #1
 8003ada:	2300      	movhi	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e006      	b.n	8003aee <HAL_I2C_Init+0x92>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a7d      	ldr	r2, [pc, #500]	; (8003cd8 <HAL_I2C_Init+0x27c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bf94      	ite	ls
 8003ae8:	2301      	movls	r3, #1
 8003aea:	2300      	movhi	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0e7      	b.n	8003cc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a78      	ldr	r2, [pc, #480]	; (8003cdc <HAL_I2C_Init+0x280>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0c9b      	lsrs	r3, r3, #18
 8003b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a6a      	ldr	r2, [pc, #424]	; (8003cd0 <HAL_I2C_Init+0x274>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d802      	bhi.n	8003b30 <HAL_I2C_Init+0xd4>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	e009      	b.n	8003b44 <HAL_I2C_Init+0xe8>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <HAL_I2C_Init+0x284>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	3301      	adds	r3, #1
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	495c      	ldr	r1, [pc, #368]	; (8003cd0 <HAL_I2C_Init+0x274>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d819      	bhi.n	8003b98 <HAL_I2C_Init+0x13c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e59      	subs	r1, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b78:	400b      	ands	r3, r1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_I2C_Init+0x138>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1e59      	subs	r1, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b92:	e051      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003b94:	2304      	movs	r3, #4
 8003b96:	e04f      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <HAL_I2C_Init+0x168>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1e58      	subs	r0, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	440b      	add	r3, r1
 8003bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e012      	b.n	8003bea <HAL_I2C_Init+0x18e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e58      	subs	r0, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	0099      	lsls	r1, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x196>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e022      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10e      	bne.n	8003c18 <HAL_I2C_Init+0x1bc>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e58      	subs	r0, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	440b      	add	r3, r1
 8003c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	e00f      	b.n	8003c38 <HAL_I2C_Init+0x1dc>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	0099      	lsls	r1, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	6809      	ldr	r1, [r1, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6911      	ldr	r1, [r2, #16]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	000186a0 	.word	0x000186a0
 8003cd4:	001e847f 	.word	0x001e847f
 8003cd8:	003d08ff 	.word	0x003d08ff
 8003cdc:	431bde83 	.word	0x431bde83
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	813b      	strh	r3, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cfe:	f7fe fe0d 	bl	800291c <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	f040 80d9 	bne.w	8003ec4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2319      	movs	r3, #25
 8003d18:	2201      	movs	r2, #1
 8003d1a:	496d      	ldr	r1, [pc, #436]	; (8003ed0 <HAL_I2C_Mem_Write+0x1ec>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f971 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Mem_Write+0x56>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0c5      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2221      	movs	r2, #33	; 0x21
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <HAL_I2C_Mem_Write+0x1f0>)
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da2:	88f8      	ldrh	r0, [r7, #6]
 8003da4:	893a      	ldrh	r2, [r7, #8]
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4603      	mov	r3, r0
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f890 	bl	8003ed8 <I2C_RequestMemoryWrite>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d052      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e081      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f9f2 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_I2C_Mem_Write+0x180>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1aa      	bne.n	8003dc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9de 	bl	8004232 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d107      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e016      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f878 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f28:	d103      	bne.n	8003f32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e05f      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	492d      	ldr	r1, [pc, #180]	; (8004000 <I2C_RequestMemoryWrite+0x128>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f8b0 	bl	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e04c      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f91a 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d107      	bne.n	8003f9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e02b      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	e021      	b.n	8003ff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb0:	893b      	ldrh	r3, [r7, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f8f4 	bl	80041b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e005      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e025      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d021      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe fc7d 	bl	800291c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d116      	bne.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e023      	b.n	80040aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10d      	bne.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x84>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	e00c      	b.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4013      	ands	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d0b6      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c0:	e051      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d123      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e046      	b.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d021      	beq.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe fbfb 	bl	800291c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e020      	b.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e00b      	b.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d18d      	bne.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041bc:	e02d      	b.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f878 	bl	80042b4 <I2C_IsAcknowledgeFailed>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e02d      	b.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d021      	beq.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fe fba1 	bl	800291c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d116      	bne.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d1ca      	bne.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423e:	e02d      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f837 	bl	80042b4 <I2C_IsAcknowledgeFailed>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e02d      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d021      	beq.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fe fb60 	bl	800291c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d116      	bne.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e007      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d1ca      	bne.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ca:	d11b      	bne.n	8004304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e272      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8087 	beq.w	800443e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004330:	4b92      	ldr	r3, [pc, #584]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b04      	cmp	r3, #4
 800433a:	d00c      	beq.n	8004356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800433c:	4b8f      	ldr	r3, [pc, #572]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b08      	cmp	r3, #8
 8004346:	d112      	bne.n	800436e <HAL_RCC_OscConfig+0x5e>
 8004348:	4b8c      	ldr	r3, [pc, #560]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d10b      	bne.n	800436e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004356:	4b89      	ldr	r3, [pc, #548]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d06c      	beq.n	800443c <HAL_RCC_OscConfig+0x12c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d168      	bne.n	800443c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e24c      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x76>
 8004378:	4b80      	ldr	r3, [pc, #512]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7f      	ldr	r2, [pc, #508]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e02e      	b.n	80043e4 <HAL_RCC_OscConfig+0xd4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x98>
 800438e:	4b7b      	ldr	r3, [pc, #492]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7a      	ldr	r2, [pc, #488]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b78      	ldr	r3, [pc, #480]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a77      	ldr	r2, [pc, #476]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xd4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0xbc>
 80043b2:	4b72      	ldr	r3, [pc, #456]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a71      	ldr	r2, [pc, #452]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b6f      	ldr	r3, [pc, #444]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6e      	ldr	r2, [pc, #440]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xd4>
 80043cc:	4b6b      	ldr	r3, [pc, #428]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6a      	ldr	r2, [pc, #424]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a67      	ldr	r2, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fe fa96 	bl	800291c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fe fa92 	bl	800291c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e200      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe4>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fa82 	bl	800291c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe fa7e 	bl	800291c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1ec      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x10c>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800444a:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004456:	4b49      	ldr	r3, [pc, #292]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x18c>
 8004462:	4b46      	ldr	r3, [pc, #280]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b43      	ldr	r3, [pc, #268]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x176>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1c0      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b3d      	ldr	r3, [pc, #244]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4939      	ldr	r1, [pc, #228]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe fa37 	bl	800291c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fe fa33 	bl	800291c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1a1      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	4b2d      	ldr	r3, [pc, #180]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4927      	ldr	r1, [pc, #156]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <HAL_RCC_OscConfig+0x270>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe fa16 	bl	800291c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fe fa12 	bl	800291c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e180      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03a      	beq.n	8004594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d019      	beq.n	800455a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_RCC_OscConfig+0x274>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452c:	f7fe f9f6 	bl	800291c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004534:	f7fe f9f2 	bl	800291c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e160      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_RCC_OscConfig+0x26c>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004552:	2001      	movs	r0, #1
 8004554:	f000 fad8 	bl	8004b08 <RCC_Delay>
 8004558:	e01c      	b.n	8004594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_RCC_OscConfig+0x274>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004560:	f7fe f9dc 	bl	800291c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004566:	e00f      	b.n	8004588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004568:	f7fe f9d8 	bl	800291c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d908      	bls.n	8004588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e146      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
 8004580:	42420000 	.word	0x42420000
 8004584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b92      	ldr	r3, [pc, #584]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e9      	bne.n	8004568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a6 	beq.w	80046ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b8b      	ldr	r3, [pc, #556]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4a87      	ldr	r2, [pc, #540]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045bc:	61d3      	str	r3, [r2, #28]
 80045be:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b82      	ldr	r3, [pc, #520]	; (80047d8 <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b7f      	ldr	r3, [pc, #508]	; (80047d8 <HAL_RCC_OscConfig+0x4c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7e      	ldr	r2, [pc, #504]	; (80047d8 <HAL_RCC_OscConfig+0x4c8>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fe f999 	bl	800291c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fe f995 	bl	800291c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e103      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <HAL_RCC_OscConfig+0x4c8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x312>
 8004614:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a6e      	ldr	r2, [pc, #440]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6213      	str	r3, [r2, #32]
 8004620:	e02d      	b.n	800467e <HAL_RCC_OscConfig+0x36e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x334>
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a69      	ldr	r2, [pc, #420]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6213      	str	r3, [r2, #32]
 8004636:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	4a66      	ldr	r2, [pc, #408]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6213      	str	r3, [r2, #32]
 8004642:	e01c      	b.n	800467e <HAL_RCC_OscConfig+0x36e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0x356>
 800464c:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a60      	ldr	r2, [pc, #384]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	6213      	str	r3, [r2, #32]
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4a5d      	ldr	r2, [pc, #372]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6213      	str	r3, [r2, #32]
 8004664:	e00b      	b.n	800467e <HAL_RCC_OscConfig+0x36e>
 8004666:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6213      	str	r3, [r2, #32]
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4a57      	ldr	r2, [pc, #348]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d015      	beq.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004686:	f7fe f949 	bl	800291c <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f945 	bl	800291c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0b1      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ee      	beq.n	800468e <HAL_RCC_OscConfig+0x37e>
 80046b0:	e014      	b.n	80046dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b2:	f7fe f933 	bl	800291c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fe f92f 	bl	800291c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e09b      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d0:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e2:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4a3b      	ldr	r2, [pc, #236]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8087 	beq.w	8004806 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d061      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d146      	bne.n	800479a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470c:	4b33      	ldr	r3, [pc, #204]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004712:	f7fe f903 	bl	800291c <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7fe f8ff 	bl	800291c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e06d      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f0      	bne.n	800471a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d108      	bne.n	8004754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4921      	ldr	r1, [pc, #132]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a19      	ldr	r1, [r3, #32]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	430b      	orrs	r3, r1
 8004766:	491b      	ldr	r1, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fe f8d3 	bl	800291c <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fe f8cf 	bl	800291c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e03d      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x46a>
 8004798:	e035      	b.n	8004806 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe f8bc 	bl	800291c <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fe f8b8 	bl	800291c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e026      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x498>
 80047c6:	e01e      	b.n	8004806 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e019      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40007000 	.word	0x40007000
 80047dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_OscConfig+0x500>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40021000 	.word	0x40021000

08004814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0d0      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d910      	bls.n	8004858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	4965      	ldr	r1, [pc, #404]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b63      	ldr	r3, [pc, #396]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0b8      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004870:	4b59      	ldr	r3, [pc, #356]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800487a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a52      	ldr	r2, [pc, #328]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	494d      	ldr	r1, [pc, #308]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d040      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d115      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e073      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06b      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4936      	ldr	r1, [pc, #216]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fe f80a 	bl	800291c <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fe f806 	bl	800291c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e053      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d210      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0207 	bic.w	r2, r3, #7
 800494a:	4922      	ldr	r1, [pc, #136]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e032      	b.n	80049ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4916      	ldr	r1, [pc, #88]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	490e      	ldr	r1, [pc, #56]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049a2:	f000 f821 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	490a      	ldr	r1, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	5ccb      	ldrb	r3, [r1, r3]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1cc>)
 80049bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1d0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd ff68 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40021000 	.word	0x40021000
 80049dc:	080092f4 	.word	0x080092f4
 80049e0:	20000000 	.word	0x20000000
 80049e4:	20000004 	.word	0x20000004

080049e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	b490      	push	{r4, r7}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049ee:	4b29      	ldr	r3, [pc, #164]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xac>)
 80049f0:	1d3c      	adds	r4, r7, #4
 80049f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049f8:	f240 2301 	movw	r3, #513	; 0x201
 80049fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a12:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x40>
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x46>
 8004a26:	e02b      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a2a:	623b      	str	r3, [r7, #32]
      break;
 8004a2c:	e02b      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	0c9b      	lsrs	r3, r3, #18
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3328      	adds	r3, #40	; 0x28
 8004a38:	443b      	add	r3, r7
 8004a3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d012      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	0c5b      	lsrs	r3, r3, #17
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	3328      	adds	r3, #40	; 0x28
 8004a56:	443b      	add	r3, r7
 8004a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a62:	fb03 f202 	mul.w	r2, r3, r2
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e004      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	623b      	str	r3, [r7, #32]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a82:	623b      	str	r3, [r7, #32]
      break;
 8004a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a86:	6a3b      	ldr	r3, [r7, #32]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc90      	pop	{r4, r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	080092e4 	.word	0x080092e4
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	003d0900 	.word	0x003d0900

08004aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004abc:	f7ff fff2 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08009304 	.word	0x08009304

08004ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ae4:	f7ff ffde 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	0adb      	lsrs	r3, r3, #11
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000
 8004b04:	08009304 	.word	0x08009304

08004b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <RCC_Delay+0x34>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <RCC_Delay+0x38>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	0a5b      	lsrs	r3, r3, #9
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b24:	bf00      	nop
  }
  while (Delay --);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	60fa      	str	r2, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f9      	bne.n	8004b24 <RCC_Delay+0x1c>
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	10624dd3 	.word	0x10624dd3

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d07d      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b60:	2300      	movs	r3, #0
 8004b62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b64:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	61d3      	str	r3, [r2, #28]
 8004b7c:	4b49      	ldr	r3, [pc, #292]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d118      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b98:	4b43      	ldr	r3, [pc, #268]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a42      	ldr	r2, [pc, #264]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba4:	f7fd feba 	bl	800291c <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	e008      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fd feb6 	bl	800291c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e06d      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbe:	4b3a      	ldr	r3, [pc, #232]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02e      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d027      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004be8:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf2:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf8:	4b2c      	ldr	r3, [pc, #176]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bfe:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d014      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd fe85 	bl	800291c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd fe81 	bl	800291c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e036      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ee      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4917      	ldr	r1, [pc, #92]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	490b      	ldr	r1, [pc, #44]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42420440 	.word	0x42420440

08004cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e076      	b.n	8004db0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d009      	beq.n	8004ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	61da      	str	r2, [r3, #28]
 8004cda:	e005      	b.n	8004ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fae6 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	ea42 0103 	orr.w	r1, r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	0c1a      	lsrs	r2, r3, #16
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f002 0204 	and.w	r2, r2, #4
 8004d8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x26>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e18a      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x33c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de6:	f7fd fd99 	bl	800291c <HAL_GetTick>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d00f      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x70>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0e:	d107      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x68>
 8004e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d003      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e26:	e15b      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x82>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x82>
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e40:	e14e      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d003      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2205      	movs	r2, #5
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	887a      	ldrh	r2, [r7, #2]
 8004e7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d007      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d178      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x10a>
 8004ebc:	8b7b      	ldrh	r3, [r7, #26]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d166      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee6:	e053      	b.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d11b      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d016      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d113      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d119      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x1b8>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d014      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	b292      	uxth	r2, r2
 8004f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f70:	f7fd fcd4 	bl	800291c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d807      	bhi.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d003      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f8e:	e0a7      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1a6      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x130>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1a1      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x130>
 8004fa4:	e07c      	b.n	80050a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x1fc>
 8004fae:	8b7b      	ldrh	r3, [r7, #26]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d16b      	bne.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e057      	b.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d11c      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d114      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d119      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x2ae>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d014      	beq.n	8005066 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005066:	f7fd fc59 	bl	800291c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005072:	429a      	cmp	r2, r3
 8005074:	d803      	bhi.n	800507e <HAL_SPI_TransmitReceive+0x2c6>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d102      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x2cc>
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800508a:	e029      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1a2      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x224>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d19d      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f8b1 	bl	800520c <SPI_EndRxTxTransaction>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050bc:	e010      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	e000      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3730      	adds	r7, #48	; 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fd fc06 	bl	800291c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800511c:	f7fd fbfe 	bl	800291c <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	015b      	lsls	r3, r3, #5
 8005128:	0d1b      	lsrs	r3, r3, #20
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	e054      	b.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d050      	beq.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513c:	f7fd fbee 	bl	800291c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d902      	bls.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d13d      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516a:	d111      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d004      	beq.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d107      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005198:	d10f      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e017      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3b01      	subs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d19b      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000

0800520c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	2180      	movs	r1, #128	; 0x80
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff ff6a 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e000      	b.n	8005240 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e041      	b.n	80052de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fc7e 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fbf6 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e041      	b.n	800537c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f839 	bl	8005384 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fba7 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr
	...

08005398 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_OC_Start+0x24>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e022      	b.n	8005402 <HAL_TIM_OC_Start+0x6a>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d109      	bne.n	80053d6 <HAL_TIM_OC_Start+0x3e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e015      	b.n	8005402 <HAL_TIM_OC_Start+0x6a>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_OC_Start+0x58>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <HAL_TIM_OC_Start+0x6a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e05e      	b.n	80054c8 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <HAL_TIM_OC_Start+0x82>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005418:	e013      	b.n	8005442 <HAL_TIM_OC_Start+0xaa>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d104      	bne.n	800542a <HAL_TIM_OC_Start+0x92>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	e00b      	b.n	8005442 <HAL_TIM_OC_Start+0xaa>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d104      	bne.n	800543a <HAL_TIM_OC_Start+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	e003      	b.n	8005442 <HAL_TIM_OC_Start+0xaa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2201      	movs	r2, #1
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fe22 	bl	8006094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_TIM_OC_Start+0x138>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d107      	bne.n	800546a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_TIM_OC_Start+0x138>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIM_OC_Start+0xfa>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d009      	beq.n	8005492 <HAL_TIM_OC_Start+0xfa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <HAL_TIM_OC_Start+0x13c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_OC_Start+0xfa>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <HAL_TIM_OC_Start+0x140>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d111      	bne.n	80054b6 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d010      	beq.n	80054c6 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	e007      	b.n	80054c6 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800

080054dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f839 	bl	800557a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 faac 	bl	8005a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e041      	b.n	8005624 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f839 	bl	800562c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fa53 	bl	8005a78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0208 	bic.w	r2, r2, #8
 80055e0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6819      	ldr	r1, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
	...

08005640 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005656:	2302      	movs	r3, #2
 8005658:	e046      	b.n	80056e8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d839      	bhi.n	80056dc <HAL_TIM_OC_ConfigChannel+0x9c>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_TIM_OC_ConfigChannel+0x30>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080056dd 	.word	0x080056dd
 8005678:	080056dd 	.word	0x080056dd
 800567c:	080056dd 	.word	0x080056dd
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056dd 	.word	0x080056dd
 800568c:	080056dd 	.word	0x080056dd
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056dd 	.word	0x080056dd
 8005698:	080056dd 	.word	0x080056dd
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056cf 	.word	0x080056cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa46 	bl	8005b3c <TIM_OC1_SetConfig>
      break;
 80056b0:	e015      	b.n	80056de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 faa5 	bl	8005c08 <TIM_OC2_SetConfig>
      break;
 80056be:	e00e      	b.n	80056de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fb08 	bl	8005cdc <TIM_OC3_SetConfig>
      break;
 80056cc:	e007      	b.n	80056de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fb6b 	bl	8005db0 <TIM_OC4_SetConfig>
      break;
 80056da:	e000      	b.n	80056de <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80056dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005706:	2302      	movs	r3, #2
 8005708:	e0ac      	b.n	8005864 <HAL_TIM_PWM_ConfigChannel+0x174>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b0c      	cmp	r3, #12
 8005716:	f200 809f 	bhi.w	8005858 <HAL_TIM_PWM_ConfigChannel+0x168>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005755 	.word	0x08005755
 8005724:	08005859 	.word	0x08005859
 8005728:	08005859 	.word	0x08005859
 800572c:	08005859 	.word	0x08005859
 8005730:	08005795 	.word	0x08005795
 8005734:	08005859 	.word	0x08005859
 8005738:	08005859 	.word	0x08005859
 800573c:	08005859 	.word	0x08005859
 8005740:	080057d7 	.word	0x080057d7
 8005744:	08005859 	.word	0x08005859
 8005748:	08005859 	.word	0x08005859
 800574c:	08005859 	.word	0x08005859
 8005750:	08005817 	.word	0x08005817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f9ee 	bl	8005b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0208 	orr.w	r2, r2, #8
 800576e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0204 	bic.w	r2, r2, #4
 800577e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6999      	ldr	r1, [r3, #24]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	619a      	str	r2, [r3, #24]
      break;
 8005792:	e062      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa34 	bl	8005c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6999      	ldr	r1, [r3, #24]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	021a      	lsls	r2, r3, #8
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	619a      	str	r2, [r3, #24]
      break;
 80057d4:	e041      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fa7d 	bl	8005cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0208 	orr.w	r2, r2, #8
 80057f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0204 	bic.w	r2, r2, #4
 8005800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69d9      	ldr	r1, [r3, #28]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	61da      	str	r2, [r3, #28]
      break;
 8005814:	e021      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fac7 	bl	8005db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	021a      	lsls	r2, r3, #8
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	61da      	str	r2, [r3, #28]
      break;
 8005856:	e000      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIM_ConfigClockSource+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e0b3      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x180>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058bc:	d03e      	beq.n	800593c <HAL_TIM_ConfigClockSource+0xd0>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c2:	f200 8087 	bhi.w	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ca:	f000 8085 	beq.w	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d2:	d87f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058d4:	2b70      	cmp	r3, #112	; 0x70
 80058d6:	d01a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xa2>
 80058d8:	2b70      	cmp	r3, #112	; 0x70
 80058da:	d87b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058dc:	2b60      	cmp	r3, #96	; 0x60
 80058de:	d050      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x116>
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d877      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058e4:	2b50      	cmp	r3, #80	; 0x50
 80058e6:	d03c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xf6>
 80058e8:	2b50      	cmp	r3, #80	; 0x50
 80058ea:	d873      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d058      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x136>
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d86f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058f4:	2b30      	cmp	r3, #48	; 0x30
 80058f6:	d064      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d86b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d060      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d867      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05c      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d05a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800590c:	e062      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f000 fb9a 	bl	8006056 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005930:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	609a      	str	r2, [r3, #8]
      break;
 800593a:	e04e      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6899      	ldr	r1, [r3, #8]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f000 fb83 	bl	8006056 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595e:	609a      	str	r2, [r3, #8]
      break;
 8005960:	e03b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	461a      	mov	r2, r3
 8005970:	f000 fafa 	bl	8005f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2150      	movs	r1, #80	; 0x50
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fb51 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 8005980:	e02b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	461a      	mov	r2, r3
 8005990:	f000 fb18 	bl	8005fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2160      	movs	r1, #96	; 0x60
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fb41 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e01b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 fada 	bl	8005f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fb31 	bl	8006022 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e00b      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f000 fb28 	bl	8006022 <TIM_ITRx_SetConfig>
        break;
 80059d2:	e002      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e031      	b.n	8005a70 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa14 	bl	8005e4c <TIM_SlaveTimer_SetConfig>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e018      	b.n	8005a70 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a5c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <TIM_Base_SetConfig+0xb8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x30>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x30>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <TIM_Base_SetConfig+0xbc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x30>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a25      	ldr	r2, [pc, #148]	; (8005b38 <TIM_Base_SetConfig+0xc0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <TIM_Base_SetConfig+0xb8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0x62>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0x62>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <TIM_Base_SetConfig+0xbc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0x62>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <TIM_Base_SetConfig+0xc0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <TIM_Base_SetConfig+0xb8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	615a      	str	r2, [r3, #20]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800

08005b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 0302 	bic.w	r3, r3, #2
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <TIM_OC1_SetConfig+0xc8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d10c      	bne.n	8005bb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0308 	bic.w	r3, r3, #8
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <TIM_OC1_SetConfig+0xc8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00

08005c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0320 	bic.w	r3, r3, #32
 8005c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <TIM_OC2_SetConfig+0xd0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10d      	bne.n	8005c84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <TIM_OC2_SetConfig+0xd0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00

08005cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <TIM_OC3_SetConfig+0xd0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10d      	bne.n	8005d56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a14      	ldr	r2, [pc, #80]	; (8005dac <TIM_OC3_SetConfig+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00

08005db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a0f      	ldr	r2, [pc, #60]	; (8005e48 <TIM_OC4_SetConfig+0x98>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d109      	bne.n	8005e24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	019b      	lsls	r3, r3, #6
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	40012c00 	.word	0x40012c00

08005e4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b70      	cmp	r3, #112	; 0x70
 8005e90:	d01a      	beq.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x7c>
 8005e92:	2b70      	cmp	r3, #112	; 0x70
 8005e94:	d860      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e96:	2b60      	cmp	r3, #96	; 0x60
 8005e98:	d054      	beq.n	8005f44 <TIM_SlaveTimer_SetConfig+0xf8>
 8005e9a:	2b60      	cmp	r3, #96	; 0x60
 8005e9c:	d85c      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e9e:	2b50      	cmp	r3, #80	; 0x50
 8005ea0:	d046      	beq.n	8005f30 <TIM_SlaveTimer_SetConfig+0xe4>
 8005ea2:	2b50      	cmp	r3, #80	; 0x50
 8005ea4:	d858      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d019      	beq.n	8005ede <TIM_SlaveTimer_SetConfig+0x92>
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d854      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d054      	beq.n	8005f5c <TIM_SlaveTimer_SetConfig+0x110>
 8005eb2:	2b30      	cmp	r3, #48	; 0x30
 8005eb4:	d850      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d050      	beq.n	8005f5c <TIM_SlaveTimer_SetConfig+0x110>
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d84c      	bhi.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04c      	beq.n	8005f5c <TIM_SlaveTimer_SetConfig+0x110>
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d04a      	beq.n	8005f5c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005ec6:	e047      	b.n	8005f58 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f000 f8bd 	bl	8006056 <TIM_ETR_SetConfig>
      break;
 8005edc:	e03f      	b.n	8005f5e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d101      	bne.n	8005eea <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e03a      	b.n	8005f60 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0201 	bic.w	r2, r2, #1
 8005f00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
      break;
 8005f2e:	e016      	b.n	8005f5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6899      	ldr	r1, [r3, #8]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f000 f813 	bl	8005f68 <TIM_TI1_ConfigInputStage>
      break;
 8005f42:	e00c      	b.n	8005f5e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6899      	ldr	r1, [r3, #8]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f000 f837 	bl	8005fc4 <TIM_TI2_ConfigInputStage>
      break;
 8005f56:	e002      	b.n	8005f5e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005f5c:	bf00      	nop
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 030a 	bic.w	r3, r3, #10
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f023 0210 	bic.w	r2, r3, #16
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	031b      	lsls	r3, r3, #12
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	f043 0307 	orr.w	r3, r3, #7
 8006044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	021a      	lsls	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	431a      	orrs	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	609a      	str	r2, [r3, #8]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2201      	movs	r2, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	401a      	ands	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e046      	b.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d009      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a12      	ldr	r2, [pc, #72]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a10      	ldr	r2, [pc, #64]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10c      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800

08006198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e03d      	b.n	8006230 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e03f      	b.n	80062cc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fb fe41 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2224      	movs	r2, #36	; 0x24
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f828 	bl	80062d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006292:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800630e:	f023 030c 	bic.w	r3, r3, #12
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	430b      	orrs	r3, r1
 800631a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2c      	ldr	r2, [pc, #176]	; (80063e8 <UART_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fe fbd0 	bl	8004ae0 <HAL_RCC_GetPCLK2Freq>
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	e002      	b.n	800634a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006344:	f7fe fbb8 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 8006348:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009a      	lsls	r2, r3, #2
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <UART_SetConfig+0x118>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	0119      	lsls	r1, r3, #4
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009a      	lsls	r2, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006380:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <UART_SetConfig+0x118>)
 8006382:	fba3 0302 	umull	r0, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2064      	movs	r0, #100	; 0x64
 800638a:	fb00 f303 	mul.w	r3, r0, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <UART_SetConfig+0x118>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a0:	4419      	add	r1, r3
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009a      	lsls	r2, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <UART_SetConfig+0x118>)
 80063ba:	fba3 0302 	umull	r0, r3, r3, r2
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	2064      	movs	r0, #100	; 0x64
 80063c2:	fb00 f303 	mul.w	r3, r0, r3
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	3332      	adds	r3, #50	; 0x32
 80063cc:	4a07      	ldr	r2, [pc, #28]	; (80063ec <UART_SetConfig+0x118>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	f003 020f 	and.w	r2, r3, #15
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	440a      	add	r2, r1
 80063de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40013800 	.word	0x40013800
 80063ec:	51eb851f 	.word	0x51eb851f

080063f0 <__errno>:
 80063f0:	4b01      	ldr	r3, [pc, #4]	; (80063f8 <__errno+0x8>)
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	2000000c 	.word	0x2000000c

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	2600      	movs	r6, #0
 8006400:	4d0c      	ldr	r5, [pc, #48]	; (8006434 <__libc_init_array+0x38>)
 8006402:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006404:	1b64      	subs	r4, r4, r5
 8006406:	10a4      	asrs	r4, r4, #2
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	f002 ff2e 	bl	800926c <_init>
 8006410:	2600      	movs	r6, #0
 8006412:	4d0a      	ldr	r5, [pc, #40]	; (800643c <__libc_init_array+0x40>)
 8006414:	4c0a      	ldr	r4, [pc, #40]	; (8006440 <__libc_init_array+0x44>)
 8006416:	1b64      	subs	r4, r4, r5
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	080096ec 	.word	0x080096ec
 8006438:	080096ec 	.word	0x080096ec
 800643c:	080096ec 	.word	0x080096ec
 8006440:	080096f0 	.word	0x080096f0

08006444 <malloc>:
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <malloc+0xc>)
 8006446:	4601      	mov	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f000 b881 	b.w	8006550 <_malloc_r>
 800644e:	bf00      	nop
 8006450:	2000000c 	.word	0x2000000c

08006454 <memcpy>:
 8006454:	440a      	add	r2, r1
 8006456:	4291      	cmp	r1, r2
 8006458:	f100 33ff 	add.w	r3, r0, #4294967295
 800645c:	d100      	bne.n	8006460 <memcpy+0xc>
 800645e:	4770      	bx	lr
 8006460:	b510      	push	{r4, lr}
 8006462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006466:	4291      	cmp	r1, r2
 8006468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800646c:	d1f9      	bne.n	8006462 <memcpy+0xe>
 800646e:	bd10      	pop	{r4, pc}

08006470 <memset>:
 8006470:	4603      	mov	r3, r0
 8006472:	4402      	add	r2, r0
 8006474:	4293      	cmp	r3, r2
 8006476:	d100      	bne.n	800647a <memset+0xa>
 8006478:	4770      	bx	lr
 800647a:	f803 1b01 	strb.w	r1, [r3], #1
 800647e:	e7f9      	b.n	8006474 <memset+0x4>

08006480 <_free_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4605      	mov	r5, r0
 8006484:	2900      	cmp	r1, #0
 8006486:	d040      	beq.n	800650a <_free_r+0x8a>
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f0c      	subs	r4, r1, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	18e4      	addlt	r4, r4, r3
 8006494:	f001 fc20 	bl	8007cd8 <__malloc_lock>
 8006498:	4a1c      	ldr	r2, [pc, #112]	; (800650c <_free_r+0x8c>)
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	b933      	cbnz	r3, 80064ac <_free_r+0x2c>
 800649e:	6063      	str	r3, [r4, #4]
 80064a0:	6014      	str	r4, [r2, #0]
 80064a2:	4628      	mov	r0, r5
 80064a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a8:	f001 bc1c 	b.w	8007ce4 <__malloc_unlock>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d908      	bls.n	80064c2 <_free_r+0x42>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	1821      	adds	r1, r4, r0
 80064b4:	428b      	cmp	r3, r1
 80064b6:	bf01      	itttt	eq
 80064b8:	6819      	ldreq	r1, [r3, #0]
 80064ba:	685b      	ldreq	r3, [r3, #4]
 80064bc:	1809      	addeq	r1, r1, r0
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	e7ed      	b.n	800649e <_free_r+0x1e>
 80064c2:	461a      	mov	r2, r3
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b10b      	cbz	r3, 80064cc <_free_r+0x4c>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x42>
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	1850      	adds	r0, r2, r1
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x6c>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	4401      	add	r1, r0
 80064d8:	1850      	adds	r0, r2, r1
 80064da:	4283      	cmp	r3, r0
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	d1e0      	bne.n	80064a2 <_free_r+0x22>
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4401      	add	r1, r0
 80064e6:	6011      	str	r1, [r2, #0]
 80064e8:	6053      	str	r3, [r2, #4]
 80064ea:	e7da      	b.n	80064a2 <_free_r+0x22>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x74>
 80064ee:	230c      	movs	r3, #12
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	e7d6      	b.n	80064a2 <_free_r+0x22>
 80064f4:	6820      	ldr	r0, [r4, #0]
 80064f6:	1821      	adds	r1, r4, r0
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf01      	itttt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	1809      	addeq	r1, r1, r0
 8006502:	6021      	streq	r1, [r4, #0]
 8006504:	6063      	str	r3, [r4, #4]
 8006506:	6054      	str	r4, [r2, #4]
 8006508:	e7cb      	b.n	80064a2 <_free_r+0x22>
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000da8 	.word	0x20000da8

08006510 <sbrk_aligned>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4e0e      	ldr	r6, [pc, #56]	; (800654c <sbrk_aligned+0x3c>)
 8006514:	460c      	mov	r4, r1
 8006516:	6831      	ldr	r1, [r6, #0]
 8006518:	4605      	mov	r5, r0
 800651a:	b911      	cbnz	r1, 8006522 <sbrk_aligned+0x12>
 800651c:	f000 fcec 	bl	8006ef8 <_sbrk_r>
 8006520:	6030      	str	r0, [r6, #0]
 8006522:	4621      	mov	r1, r4
 8006524:	4628      	mov	r0, r5
 8006526:	f000 fce7 	bl	8006ef8 <_sbrk_r>
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d00a      	beq.n	8006544 <sbrk_aligned+0x34>
 800652e:	1cc4      	adds	r4, r0, #3
 8006530:	f024 0403 	bic.w	r4, r4, #3
 8006534:	42a0      	cmp	r0, r4
 8006536:	d007      	beq.n	8006548 <sbrk_aligned+0x38>
 8006538:	1a21      	subs	r1, r4, r0
 800653a:	4628      	mov	r0, r5
 800653c:	f000 fcdc 	bl	8006ef8 <_sbrk_r>
 8006540:	3001      	adds	r0, #1
 8006542:	d101      	bne.n	8006548 <sbrk_aligned+0x38>
 8006544:	f04f 34ff 	mov.w	r4, #4294967295
 8006548:	4620      	mov	r0, r4
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	20000dac 	.word	0x20000dac

08006550 <_malloc_r>:
 8006550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006554:	1ccd      	adds	r5, r1, #3
 8006556:	f025 0503 	bic.w	r5, r5, #3
 800655a:	3508      	adds	r5, #8
 800655c:	2d0c      	cmp	r5, #12
 800655e:	bf38      	it	cc
 8006560:	250c      	movcc	r5, #12
 8006562:	2d00      	cmp	r5, #0
 8006564:	4607      	mov	r7, r0
 8006566:	db01      	blt.n	800656c <_malloc_r+0x1c>
 8006568:	42a9      	cmp	r1, r5
 800656a:	d905      	bls.n	8006578 <_malloc_r+0x28>
 800656c:	230c      	movs	r3, #12
 800656e:	2600      	movs	r6, #0
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4630      	mov	r0, r6
 8006574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006578:	4e2e      	ldr	r6, [pc, #184]	; (8006634 <_malloc_r+0xe4>)
 800657a:	f001 fbad 	bl	8007cd8 <__malloc_lock>
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	461c      	mov	r4, r3
 8006582:	bb34      	cbnz	r4, 80065d2 <_malloc_r+0x82>
 8006584:	4629      	mov	r1, r5
 8006586:	4638      	mov	r0, r7
 8006588:	f7ff ffc2 	bl	8006510 <sbrk_aligned>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	4604      	mov	r4, r0
 8006590:	d14d      	bne.n	800662e <_malloc_r+0xde>
 8006592:	6834      	ldr	r4, [r6, #0]
 8006594:	4626      	mov	r6, r4
 8006596:	2e00      	cmp	r6, #0
 8006598:	d140      	bne.n	800661c <_malloc_r+0xcc>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	4631      	mov	r1, r6
 800659e:	4638      	mov	r0, r7
 80065a0:	eb04 0803 	add.w	r8, r4, r3
 80065a4:	f000 fca8 	bl	8006ef8 <_sbrk_r>
 80065a8:	4580      	cmp	r8, r0
 80065aa:	d13a      	bne.n	8006622 <_malloc_r+0xd2>
 80065ac:	6821      	ldr	r1, [r4, #0]
 80065ae:	3503      	adds	r5, #3
 80065b0:	1a6d      	subs	r5, r5, r1
 80065b2:	f025 0503 	bic.w	r5, r5, #3
 80065b6:	3508      	adds	r5, #8
 80065b8:	2d0c      	cmp	r5, #12
 80065ba:	bf38      	it	cc
 80065bc:	250c      	movcc	r5, #12
 80065be:	4638      	mov	r0, r7
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7ff ffa5 	bl	8006510 <sbrk_aligned>
 80065c6:	3001      	adds	r0, #1
 80065c8:	d02b      	beq.n	8006622 <_malloc_r+0xd2>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	442b      	add	r3, r5
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	e00e      	b.n	80065f0 <_malloc_r+0xa0>
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	1b52      	subs	r2, r2, r5
 80065d6:	d41e      	bmi.n	8006616 <_malloc_r+0xc6>
 80065d8:	2a0b      	cmp	r2, #11
 80065da:	d916      	bls.n	800660a <_malloc_r+0xba>
 80065dc:	1961      	adds	r1, r4, r5
 80065de:	42a3      	cmp	r3, r4
 80065e0:	6025      	str	r5, [r4, #0]
 80065e2:	bf18      	it	ne
 80065e4:	6059      	strne	r1, [r3, #4]
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	bf08      	it	eq
 80065ea:	6031      	streq	r1, [r6, #0]
 80065ec:	5162      	str	r2, [r4, r5]
 80065ee:	604b      	str	r3, [r1, #4]
 80065f0:	4638      	mov	r0, r7
 80065f2:	f104 060b 	add.w	r6, r4, #11
 80065f6:	f001 fb75 	bl	8007ce4 <__malloc_unlock>
 80065fa:	f026 0607 	bic.w	r6, r6, #7
 80065fe:	1d23      	adds	r3, r4, #4
 8006600:	1af2      	subs	r2, r6, r3
 8006602:	d0b6      	beq.n	8006572 <_malloc_r+0x22>
 8006604:	1b9b      	subs	r3, r3, r6
 8006606:	50a3      	str	r3, [r4, r2]
 8006608:	e7b3      	b.n	8006572 <_malloc_r+0x22>
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	42a3      	cmp	r3, r4
 800660e:	bf0c      	ite	eq
 8006610:	6032      	streq	r2, [r6, #0]
 8006612:	605a      	strne	r2, [r3, #4]
 8006614:	e7ec      	b.n	80065f0 <_malloc_r+0xa0>
 8006616:	4623      	mov	r3, r4
 8006618:	6864      	ldr	r4, [r4, #4]
 800661a:	e7b2      	b.n	8006582 <_malloc_r+0x32>
 800661c:	4634      	mov	r4, r6
 800661e:	6876      	ldr	r6, [r6, #4]
 8006620:	e7b9      	b.n	8006596 <_malloc_r+0x46>
 8006622:	230c      	movs	r3, #12
 8006624:	4638      	mov	r0, r7
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	f001 fb5c 	bl	8007ce4 <__malloc_unlock>
 800662c:	e7a1      	b.n	8006572 <_malloc_r+0x22>
 800662e:	6025      	str	r5, [r4, #0]
 8006630:	e7de      	b.n	80065f0 <_malloc_r+0xa0>
 8006632:	bf00      	nop
 8006634:	20000da8 	.word	0x20000da8

08006638 <__cvt>:
 8006638:	2b00      	cmp	r3, #0
 800663a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663e:	461f      	mov	r7, r3
 8006640:	bfbb      	ittet	lt
 8006642:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006646:	461f      	movlt	r7, r3
 8006648:	2300      	movge	r3, #0
 800664a:	232d      	movlt	r3, #45	; 0x2d
 800664c:	b088      	sub	sp, #32
 800664e:	4614      	mov	r4, r2
 8006650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006652:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006654:	7013      	strb	r3, [r2, #0]
 8006656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006658:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800665c:	f023 0820 	bic.w	r8, r3, #32
 8006660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006664:	d005      	beq.n	8006672 <__cvt+0x3a>
 8006666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800666a:	d100      	bne.n	800666e <__cvt+0x36>
 800666c:	3501      	adds	r5, #1
 800666e:	2302      	movs	r3, #2
 8006670:	e000      	b.n	8006674 <__cvt+0x3c>
 8006672:	2303      	movs	r3, #3
 8006674:	aa07      	add	r2, sp, #28
 8006676:	9204      	str	r2, [sp, #16]
 8006678:	aa06      	add	r2, sp, #24
 800667a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800667e:	e9cd 3500 	strd	r3, r5, [sp]
 8006682:	4622      	mov	r2, r4
 8006684:	463b      	mov	r3, r7
 8006686:	f000 fd27 	bl	80070d8 <_dtoa_r>
 800668a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800668e:	4606      	mov	r6, r0
 8006690:	d102      	bne.n	8006698 <__cvt+0x60>
 8006692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006694:	07db      	lsls	r3, r3, #31
 8006696:	d522      	bpl.n	80066de <__cvt+0xa6>
 8006698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800669c:	eb06 0905 	add.w	r9, r6, r5
 80066a0:	d110      	bne.n	80066c4 <__cvt+0x8c>
 80066a2:	7833      	ldrb	r3, [r6, #0]
 80066a4:	2b30      	cmp	r3, #48	; 0x30
 80066a6:	d10a      	bne.n	80066be <__cvt+0x86>
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	4620      	mov	r0, r4
 80066ae:	4639      	mov	r1, r7
 80066b0:	f7fa f97a 	bl	80009a8 <__aeabi_dcmpeq>
 80066b4:	b918      	cbnz	r0, 80066be <__cvt+0x86>
 80066b6:	f1c5 0501 	rsb	r5, r5, #1
 80066ba:	f8ca 5000 	str.w	r5, [sl]
 80066be:	f8da 3000 	ldr.w	r3, [sl]
 80066c2:	4499      	add	r9, r3
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	4620      	mov	r0, r4
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80066d0:	b108      	cbz	r0, 80066d6 <__cvt+0x9e>
 80066d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80066d6:	2230      	movs	r2, #48	; 0x30
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	454b      	cmp	r3, r9
 80066dc:	d307      	bcc.n	80066ee <__cvt+0xb6>
 80066de:	4630      	mov	r0, r6
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066e4:	1b9b      	subs	r3, r3, r6
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	b008      	add	sp, #32
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	9107      	str	r1, [sp, #28]
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	e7f0      	b.n	80066d8 <__cvt+0xa0>

080066f6 <__exponent>:
 80066f6:	4603      	mov	r3, r0
 80066f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066fa:	2900      	cmp	r1, #0
 80066fc:	f803 2b02 	strb.w	r2, [r3], #2
 8006700:	bfb6      	itet	lt
 8006702:	222d      	movlt	r2, #45	; 0x2d
 8006704:	222b      	movge	r2, #43	; 0x2b
 8006706:	4249      	neglt	r1, r1
 8006708:	2909      	cmp	r1, #9
 800670a:	7042      	strb	r2, [r0, #1]
 800670c:	dd2b      	ble.n	8006766 <__exponent+0x70>
 800670e:	f10d 0407 	add.w	r4, sp, #7
 8006712:	46a4      	mov	ip, r4
 8006714:	270a      	movs	r7, #10
 8006716:	fb91 f6f7 	sdiv	r6, r1, r7
 800671a:	460a      	mov	r2, r1
 800671c:	46a6      	mov	lr, r4
 800671e:	fb07 1516 	mls	r5, r7, r6, r1
 8006722:	2a63      	cmp	r2, #99	; 0x63
 8006724:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006728:	4631      	mov	r1, r6
 800672a:	f104 34ff 	add.w	r4, r4, #4294967295
 800672e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006732:	dcf0      	bgt.n	8006716 <__exponent+0x20>
 8006734:	3130      	adds	r1, #48	; 0x30
 8006736:	f1ae 0502 	sub.w	r5, lr, #2
 800673a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800673e:	4629      	mov	r1, r5
 8006740:	1c44      	adds	r4, r0, #1
 8006742:	4561      	cmp	r1, ip
 8006744:	d30a      	bcc.n	800675c <__exponent+0x66>
 8006746:	f10d 0209 	add.w	r2, sp, #9
 800674a:	eba2 020e 	sub.w	r2, r2, lr
 800674e:	4565      	cmp	r5, ip
 8006750:	bf88      	it	hi
 8006752:	2200      	movhi	r2, #0
 8006754:	4413      	add	r3, r2
 8006756:	1a18      	subs	r0, r3, r0
 8006758:	b003      	add	sp, #12
 800675a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006760:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006764:	e7ed      	b.n	8006742 <__exponent+0x4c>
 8006766:	2330      	movs	r3, #48	; 0x30
 8006768:	3130      	adds	r1, #48	; 0x30
 800676a:	7083      	strb	r3, [r0, #2]
 800676c:	70c1      	strb	r1, [r0, #3]
 800676e:	1d03      	adds	r3, r0, #4
 8006770:	e7f1      	b.n	8006756 <__exponent+0x60>
	...

08006774 <_printf_float>:
 8006774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006778:	b091      	sub	sp, #68	; 0x44
 800677a:	460c      	mov	r4, r1
 800677c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006780:	4616      	mov	r6, r2
 8006782:	461f      	mov	r7, r3
 8006784:	4605      	mov	r5, r0
 8006786:	f001 fa95 	bl	8007cb4 <_localeconv_r>
 800678a:	6803      	ldr	r3, [r0, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	9309      	str	r3, [sp, #36]	; 0x24
 8006790:	f7f9 fcde 	bl	8000150 <strlen>
 8006794:	2300      	movs	r3, #0
 8006796:	930e      	str	r3, [sp, #56]	; 0x38
 8006798:	f8d8 3000 	ldr.w	r3, [r8]
 800679c:	900a      	str	r0, [sp, #40]	; 0x28
 800679e:	3307      	adds	r3, #7
 80067a0:	f023 0307 	bic.w	r3, r3, #7
 80067a4:	f103 0208 	add.w	r2, r3, #8
 80067a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80067ac:	f8d4 b000 	ldr.w	fp, [r4]
 80067b0:	f8c8 2000 	str.w	r2, [r8]
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80067bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80067c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80067c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	4640      	mov	r0, r8
 80067cc:	4b9c      	ldr	r3, [pc, #624]	; (8006a40 <_printf_float+0x2cc>)
 80067ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067d0:	f7fa f91c 	bl	8000a0c <__aeabi_dcmpun>
 80067d4:	bb70      	cbnz	r0, 8006834 <_printf_float+0xc0>
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	4640      	mov	r0, r8
 80067dc:	4b98      	ldr	r3, [pc, #608]	; (8006a40 <_printf_float+0x2cc>)
 80067de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067e0:	f7fa f8f6 	bl	80009d0 <__aeabi_dcmple>
 80067e4:	bb30      	cbnz	r0, 8006834 <_printf_float+0xc0>
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	4640      	mov	r0, r8
 80067ec:	4651      	mov	r1, sl
 80067ee:	f7fa f8e5 	bl	80009bc <__aeabi_dcmplt>
 80067f2:	b110      	cbz	r0, 80067fa <_printf_float+0x86>
 80067f4:	232d      	movs	r3, #45	; 0x2d
 80067f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fa:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <_printf_float+0x2d0>)
 80067fc:	4892      	ldr	r0, [pc, #584]	; (8006a48 <_printf_float+0x2d4>)
 80067fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006802:	bf94      	ite	ls
 8006804:	4698      	movls	r8, r3
 8006806:	4680      	movhi	r8, r0
 8006808:	2303      	movs	r3, #3
 800680a:	f04f 0a00 	mov.w	sl, #0
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	f02b 0304 	bic.w	r3, fp, #4
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	4633      	mov	r3, r6
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	9700      	str	r7, [sp, #0]
 800681e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006820:	f000 f9d4 	bl	8006bcc <_printf_common>
 8006824:	3001      	adds	r0, #1
 8006826:	f040 8090 	bne.w	800694a <_printf_float+0x1d6>
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b011      	add	sp, #68	; 0x44
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	4642      	mov	r2, r8
 8006836:	4653      	mov	r3, sl
 8006838:	4640      	mov	r0, r8
 800683a:	4651      	mov	r1, sl
 800683c:	f7fa f8e6 	bl	8000a0c <__aeabi_dcmpun>
 8006840:	b148      	cbz	r0, 8006856 <_printf_float+0xe2>
 8006842:	f1ba 0f00 	cmp.w	sl, #0
 8006846:	bfb8      	it	lt
 8006848:	232d      	movlt	r3, #45	; 0x2d
 800684a:	4880      	ldr	r0, [pc, #512]	; (8006a4c <_printf_float+0x2d8>)
 800684c:	bfb8      	it	lt
 800684e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006852:	4b7f      	ldr	r3, [pc, #508]	; (8006a50 <_printf_float+0x2dc>)
 8006854:	e7d3      	b.n	80067fe <_printf_float+0x8a>
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	d142      	bne.n	80068e6 <_printf_float+0x172>
 8006860:	2306      	movs	r3, #6
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	9206      	str	r2, [sp, #24]
 8006868:	aa0e      	add	r2, sp, #56	; 0x38
 800686a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800686e:	aa0d      	add	r2, sp, #52	; 0x34
 8006870:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006874:	9203      	str	r2, [sp, #12]
 8006876:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800687a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	4642      	mov	r2, r8
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4628      	mov	r0, r5
 8006888:	4653      	mov	r3, sl
 800688a:	910b      	str	r1, [sp, #44]	; 0x2c
 800688c:	f7ff fed4 	bl	8006638 <__cvt>
 8006890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006892:	4680      	mov	r8, r0
 8006894:	2947      	cmp	r1, #71	; 0x47
 8006896:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006898:	d108      	bne.n	80068ac <_printf_float+0x138>
 800689a:	1cc8      	adds	r0, r1, #3
 800689c:	db02      	blt.n	80068a4 <_printf_float+0x130>
 800689e:	6863      	ldr	r3, [r4, #4]
 80068a0:	4299      	cmp	r1, r3
 80068a2:	dd40      	ble.n	8006926 <_printf_float+0x1b2>
 80068a4:	f1a9 0902 	sub.w	r9, r9, #2
 80068a8:	fa5f f989 	uxtb.w	r9, r9
 80068ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068b0:	d81f      	bhi.n	80068f2 <_printf_float+0x17e>
 80068b2:	464a      	mov	r2, r9
 80068b4:	3901      	subs	r1, #1
 80068b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068ba:	910d      	str	r1, [sp, #52]	; 0x34
 80068bc:	f7ff ff1b 	bl	80066f6 <__exponent>
 80068c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068c2:	4682      	mov	sl, r0
 80068c4:	1813      	adds	r3, r2, r0
 80068c6:	2a01      	cmp	r2, #1
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	dc02      	bgt.n	80068d2 <_printf_float+0x15e>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	07d2      	lsls	r2, r2, #31
 80068d0:	d501      	bpl.n	80068d6 <_printf_float+0x162>
 80068d2:	3301      	adds	r3, #1
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d09b      	beq.n	8006816 <_printf_float+0xa2>
 80068de:	232d      	movs	r3, #45	; 0x2d
 80068e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e4:	e797      	b.n	8006816 <_printf_float+0xa2>
 80068e6:	2947      	cmp	r1, #71	; 0x47
 80068e8:	d1bc      	bne.n	8006864 <_printf_float+0xf0>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ba      	bne.n	8006864 <_printf_float+0xf0>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e7b7      	b.n	8006862 <_printf_float+0xee>
 80068f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068f6:	d118      	bne.n	800692a <_printf_float+0x1b6>
 80068f8:	2900      	cmp	r1, #0
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	dd0b      	ble.n	8006916 <_printf_float+0x1a2>
 80068fe:	6121      	str	r1, [r4, #16]
 8006900:	b913      	cbnz	r3, 8006908 <_printf_float+0x194>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d0      	lsls	r0, r2, #31
 8006906:	d502      	bpl.n	800690e <_printf_float+0x19a>
 8006908:	3301      	adds	r3, #1
 800690a:	440b      	add	r3, r1
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	f04f 0a00 	mov.w	sl, #0
 8006912:	65a1      	str	r1, [r4, #88]	; 0x58
 8006914:	e7df      	b.n	80068d6 <_printf_float+0x162>
 8006916:	b913      	cbnz	r3, 800691e <_printf_float+0x1aa>
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	07d2      	lsls	r2, r2, #31
 800691c:	d501      	bpl.n	8006922 <_printf_float+0x1ae>
 800691e:	3302      	adds	r3, #2
 8006920:	e7f4      	b.n	800690c <_printf_float+0x198>
 8006922:	2301      	movs	r3, #1
 8006924:	e7f2      	b.n	800690c <_printf_float+0x198>
 8006926:	f04f 0967 	mov.w	r9, #103	; 0x67
 800692a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800692c:	4299      	cmp	r1, r3
 800692e:	db05      	blt.n	800693c <_printf_float+0x1c8>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	6121      	str	r1, [r4, #16]
 8006934:	07d8      	lsls	r0, r3, #31
 8006936:	d5ea      	bpl.n	800690e <_printf_float+0x19a>
 8006938:	1c4b      	adds	r3, r1, #1
 800693a:	e7e7      	b.n	800690c <_printf_float+0x198>
 800693c:	2900      	cmp	r1, #0
 800693e:	bfcc      	ite	gt
 8006940:	2201      	movgt	r2, #1
 8006942:	f1c1 0202 	rsble	r2, r1, #2
 8006946:	4413      	add	r3, r2
 8006948:	e7e0      	b.n	800690c <_printf_float+0x198>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	055a      	lsls	r2, r3, #21
 800694e:	d407      	bmi.n	8006960 <_printf_float+0x1ec>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	4642      	mov	r2, r8
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	d12b      	bne.n	80069b6 <_printf_float+0x242>
 800695e:	e764      	b.n	800682a <_printf_float+0xb6>
 8006960:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006964:	f240 80dd 	bls.w	8006b22 <_printf_float+0x3ae>
 8006968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800696c:	2200      	movs	r2, #0
 800696e:	2300      	movs	r3, #0
 8006970:	f7fa f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8006974:	2800      	cmp	r0, #0
 8006976:	d033      	beq.n	80069e0 <_printf_float+0x26c>
 8006978:	2301      	movs	r3, #1
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	4a35      	ldr	r2, [pc, #212]	; (8006a54 <_printf_float+0x2e0>)
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f af51 	beq.w	800682a <_printf_float+0xb6>
 8006988:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800698c:	429a      	cmp	r2, r3
 800698e:	db02      	blt.n	8006996 <_printf_float+0x222>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	07d8      	lsls	r0, r3, #31
 8006994:	d50f      	bpl.n	80069b6 <_printf_float+0x242>
 8006996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f af42 	beq.w	800682a <_printf_float+0xb6>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f104 091a 	add.w	r9, r4, #26
 80069ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069b0:	3b01      	subs	r3, #1
 80069b2:	4543      	cmp	r3, r8
 80069b4:	dc09      	bgt.n	80069ca <_printf_float+0x256>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	079b      	lsls	r3, r3, #30
 80069ba:	f100 8102 	bmi.w	8006bc2 <_printf_float+0x44e>
 80069be:	68e0      	ldr	r0, [r4, #12]
 80069c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c2:	4298      	cmp	r0, r3
 80069c4:	bfb8      	it	lt
 80069c6:	4618      	movlt	r0, r3
 80069c8:	e731      	b.n	800682e <_printf_float+0xba>
 80069ca:	2301      	movs	r3, #1
 80069cc:	464a      	mov	r2, r9
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f af28 	beq.w	800682a <_printf_float+0xb6>
 80069da:	f108 0801 	add.w	r8, r8, #1
 80069de:	e7e6      	b.n	80069ae <_printf_float+0x23a>
 80069e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dc38      	bgt.n	8006a58 <_printf_float+0x2e4>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <_printf_float+0x2e0>)
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f af1a 	beq.w	800682a <_printf_float+0xb6>
 80069f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d102      	bne.n	8006a04 <_printf_float+0x290>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	07d9      	lsls	r1, r3, #31
 8006a02:	d5d8      	bpl.n	80069b6 <_printf_float+0x242>
 8006a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f af0b 	beq.w	800682a <_printf_float+0xb6>
 8006a14:	f04f 0900 	mov.w	r9, #0
 8006a18:	f104 0a1a 	add.w	sl, r4, #26
 8006a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a1e:	425b      	negs	r3, r3
 8006a20:	454b      	cmp	r3, r9
 8006a22:	dc01      	bgt.n	8006a28 <_printf_float+0x2b4>
 8006a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a26:	e794      	b.n	8006952 <_printf_float+0x1de>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f aef9 	beq.w	800682a <_printf_float+0xb6>
 8006a38:	f109 0901 	add.w	r9, r9, #1
 8006a3c:	e7ee      	b.n	8006a1c <_printf_float+0x2a8>
 8006a3e:	bf00      	nop
 8006a40:	7fefffff 	.word	0x7fefffff
 8006a44:	08009414 	.word	0x08009414
 8006a48:	08009418 	.word	0x08009418
 8006a4c:	08009420 	.word	0x08009420
 8006a50:	0800941c 	.word	0x0800941c
 8006a54:	08009424 	.word	0x08009424
 8006a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	bfa8      	it	ge
 8006a60:	461a      	movge	r2, r3
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	4691      	mov	r9, r2
 8006a66:	dc37      	bgt.n	8006ad8 <_printf_float+0x364>
 8006a68:	f04f 0b00 	mov.w	fp, #0
 8006a6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a70:	f104 021a 	add.w	r2, r4, #26
 8006a74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a78:	ebaa 0309 	sub.w	r3, sl, r9
 8006a7c:	455b      	cmp	r3, fp
 8006a7e:	dc33      	bgt.n	8006ae8 <_printf_float+0x374>
 8006a80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a84:	429a      	cmp	r2, r3
 8006a86:	db3b      	blt.n	8006b00 <_printf_float+0x38c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07da      	lsls	r2, r3, #31
 8006a8c:	d438      	bmi.n	8006b00 <_printf_float+0x38c>
 8006a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a92:	eba3 020a 	sub.w	r2, r3, sl
 8006a96:	eba3 0901 	sub.w	r9, r3, r1
 8006a9a:	4591      	cmp	r9, r2
 8006a9c:	bfa8      	it	ge
 8006a9e:	4691      	movge	r9, r2
 8006aa0:	f1b9 0f00 	cmp.w	r9, #0
 8006aa4:	dc34      	bgt.n	8006b10 <_printf_float+0x39c>
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aae:	f104 0a1a 	add.w	sl, r4, #26
 8006ab2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	eba3 0309 	sub.w	r3, r3, r9
 8006abc:	4543      	cmp	r3, r8
 8006abe:	f77f af7a 	ble.w	80069b6 <_printf_float+0x242>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f aeac 	beq.w	800682a <_printf_float+0xb6>
 8006ad2:	f108 0801 	add.w	r8, r8, #1
 8006ad6:	e7ec      	b.n	8006ab2 <_printf_float+0x33e>
 8006ad8:	4613      	mov	r3, r2
 8006ada:	4631      	mov	r1, r6
 8006adc:	4642      	mov	r2, r8
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d1c0      	bne.n	8006a68 <_printf_float+0x2f4>
 8006ae6:	e6a0      	b.n	800682a <_printf_float+0xb6>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	920b      	str	r2, [sp, #44]	; 0x2c
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f ae99 	beq.w	800682a <_printf_float+0xb6>
 8006af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006afa:	f10b 0b01 	add.w	fp, fp, #1
 8006afe:	e7b9      	b.n	8006a74 <_printf_float+0x300>
 8006b00:	4631      	mov	r1, r6
 8006b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d1bf      	bne.n	8006a8e <_printf_float+0x31a>
 8006b0e:	e68c      	b.n	800682a <_printf_float+0xb6>
 8006b10:	464b      	mov	r3, r9
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	eb08 020a 	add.w	r2, r8, sl
 8006b1a:	47b8      	blx	r7
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1c2      	bne.n	8006aa6 <_printf_float+0x332>
 8006b20:	e683      	b.n	800682a <_printf_float+0xb6>
 8006b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b24:	2a01      	cmp	r2, #1
 8006b26:	dc01      	bgt.n	8006b2c <_printf_float+0x3b8>
 8006b28:	07db      	lsls	r3, r3, #31
 8006b2a:	d537      	bpl.n	8006b9c <_printf_float+0x428>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4642      	mov	r2, r8
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f ae77 	beq.w	800682a <_printf_float+0xb6>
 8006b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f ae6f 	beq.w	800682a <_printf_float+0xb6>
 8006b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	f7f9 ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8006b58:	b9d8      	cbnz	r0, 8006b92 <_printf_float+0x41e>
 8006b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b5c:	f108 0201 	add.w	r2, r8, #1
 8006b60:	3b01      	subs	r3, #1
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d10e      	bne.n	8006b8a <_printf_float+0x416>
 8006b6c:	e65d      	b.n	800682a <_printf_float+0xb6>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	464a      	mov	r2, r9
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f ae56 	beq.w	800682a <_printf_float+0xb6>
 8006b7e:	f108 0801 	add.w	r8, r8, #1
 8006b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b84:	3b01      	subs	r3, #1
 8006b86:	4543      	cmp	r3, r8
 8006b88:	dcf1      	bgt.n	8006b6e <_printf_float+0x3fa>
 8006b8a:	4653      	mov	r3, sl
 8006b8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b90:	e6e0      	b.n	8006954 <_printf_float+0x1e0>
 8006b92:	f04f 0800 	mov.w	r8, #0
 8006b96:	f104 091a 	add.w	r9, r4, #26
 8006b9a:	e7f2      	b.n	8006b82 <_printf_float+0x40e>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	e7df      	b.n	8006b62 <_printf_float+0x3ee>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	464a      	mov	r2, r9
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	f43f ae3c 	beq.w	800682a <_printf_float+0xb6>
 8006bb2:	f108 0801 	add.w	r8, r8, #1
 8006bb6:	68e3      	ldr	r3, [r4, #12]
 8006bb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bba:	1a5b      	subs	r3, r3, r1
 8006bbc:	4543      	cmp	r3, r8
 8006bbe:	dcf0      	bgt.n	8006ba2 <_printf_float+0x42e>
 8006bc0:	e6fd      	b.n	80069be <_printf_float+0x24a>
 8006bc2:	f04f 0800 	mov.w	r8, #0
 8006bc6:	f104 0919 	add.w	r9, r4, #25
 8006bca:	e7f4      	b.n	8006bb6 <_printf_float+0x442>

08006bcc <_printf_common>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	4699      	mov	r9, r3
 8006bd4:	688a      	ldr	r2, [r1, #8]
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	4607      	mov	r7, r0
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	bfb8      	it	lt
 8006bde:	4613      	movlt	r3, r2
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be6:	460c      	mov	r4, r1
 8006be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bec:	b10a      	cbz	r2, 8006bf2 <_printf_common+0x26>
 8006bee:	3301      	adds	r3, #1
 8006bf0:	6033      	str	r3, [r6, #0]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	0699      	lsls	r1, r3, #26
 8006bf6:	bf42      	ittt	mi
 8006bf8:	6833      	ldrmi	r3, [r6, #0]
 8006bfa:	3302      	addmi	r3, #2
 8006bfc:	6033      	strmi	r3, [r6, #0]
 8006bfe:	6825      	ldr	r5, [r4, #0]
 8006c00:	f015 0506 	ands.w	r5, r5, #6
 8006c04:	d106      	bne.n	8006c14 <_printf_common+0x48>
 8006c06:	f104 0a19 	add.w	sl, r4, #25
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	6832      	ldr	r2, [r6, #0]
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dc28      	bgt.n	8006c66 <_printf_common+0x9a>
 8006c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c18:	1e13      	subs	r3, r2, #0
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	bf18      	it	ne
 8006c1e:	2301      	movne	r3, #1
 8006c20:	0692      	lsls	r2, r2, #26
 8006c22:	d42d      	bmi.n	8006c80 <_printf_common+0xb4>
 8006c24:	4649      	mov	r1, r9
 8006c26:	4638      	mov	r0, r7
 8006c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c2c:	47c0      	blx	r8
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d020      	beq.n	8006c74 <_printf_common+0xa8>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	68e5      	ldr	r5, [r4, #12]
 8006c36:	f003 0306 	and.w	r3, r3, #6
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	bf18      	it	ne
 8006c3e:	2500      	movne	r5, #0
 8006c40:	6832      	ldr	r2, [r6, #0]
 8006c42:	f04f 0600 	mov.w	r6, #0
 8006c46:	68a3      	ldr	r3, [r4, #8]
 8006c48:	bf08      	it	eq
 8006c4a:	1aad      	subeq	r5, r5, r2
 8006c4c:	6922      	ldr	r2, [r4, #16]
 8006c4e:	bf08      	it	eq
 8006c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c54:	4293      	cmp	r3, r2
 8006c56:	bfc4      	itt	gt
 8006c58:	1a9b      	subgt	r3, r3, r2
 8006c5a:	18ed      	addgt	r5, r5, r3
 8006c5c:	341a      	adds	r4, #26
 8006c5e:	42b5      	cmp	r5, r6
 8006c60:	d11a      	bne.n	8006c98 <_printf_common+0xcc>
 8006c62:	2000      	movs	r0, #0
 8006c64:	e008      	b.n	8006c78 <_printf_common+0xac>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4652      	mov	r2, sl
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	47c0      	blx	r8
 8006c70:	3001      	adds	r0, #1
 8006c72:	d103      	bne.n	8006c7c <_printf_common+0xb0>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	e7c4      	b.n	8006c0a <_printf_common+0x3e>
 8006c80:	2030      	movs	r0, #48	; 0x30
 8006c82:	18e1      	adds	r1, r4, r3
 8006c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c8e:	4422      	add	r2, r4
 8006c90:	3302      	adds	r3, #2
 8006c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c96:	e7c5      	b.n	8006c24 <_printf_common+0x58>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	47c0      	blx	r8
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d0e6      	beq.n	8006c74 <_printf_common+0xa8>
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7d9      	b.n	8006c5e <_printf_common+0x92>
	...

08006cac <_printf_i>:
 8006cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	7e0f      	ldrb	r7, [r1, #24]
 8006cb2:	4691      	mov	r9, r2
 8006cb4:	2f78      	cmp	r7, #120	; 0x78
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	469a      	mov	sl, r3
 8006cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cc2:	d807      	bhi.n	8006cd4 <_printf_i+0x28>
 8006cc4:	2f62      	cmp	r7, #98	; 0x62
 8006cc6:	d80a      	bhi.n	8006cde <_printf_i+0x32>
 8006cc8:	2f00      	cmp	r7, #0
 8006cca:	f000 80d9 	beq.w	8006e80 <_printf_i+0x1d4>
 8006cce:	2f58      	cmp	r7, #88	; 0x58
 8006cd0:	f000 80a4 	beq.w	8006e1c <_printf_i+0x170>
 8006cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cdc:	e03a      	b.n	8006d54 <_printf_i+0xa8>
 8006cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ce2:	2b15      	cmp	r3, #21
 8006ce4:	d8f6      	bhi.n	8006cd4 <_printf_i+0x28>
 8006ce6:	a101      	add	r1, pc, #4	; (adr r1, 8006cec <_printf_i+0x40>)
 8006ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cec:	08006d45 	.word	0x08006d45
 8006cf0:	08006d59 	.word	0x08006d59
 8006cf4:	08006cd5 	.word	0x08006cd5
 8006cf8:	08006cd5 	.word	0x08006cd5
 8006cfc:	08006cd5 	.word	0x08006cd5
 8006d00:	08006cd5 	.word	0x08006cd5
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006cd5 	.word	0x08006cd5
 8006d0c:	08006cd5 	.word	0x08006cd5
 8006d10:	08006cd5 	.word	0x08006cd5
 8006d14:	08006cd5 	.word	0x08006cd5
 8006d18:	08006e67 	.word	0x08006e67
 8006d1c:	08006d89 	.word	0x08006d89
 8006d20:	08006e49 	.word	0x08006e49
 8006d24:	08006cd5 	.word	0x08006cd5
 8006d28:	08006cd5 	.word	0x08006cd5
 8006d2c:	08006e89 	.word	0x08006e89
 8006d30:	08006cd5 	.word	0x08006cd5
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006cd5 	.word	0x08006cd5
 8006d3c:	08006cd5 	.word	0x08006cd5
 8006d40:	08006e51 	.word	0x08006e51
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	1d1a      	adds	r2, r3, #4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	602a      	str	r2, [r5, #0]
 8006d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d54:	2301      	movs	r3, #1
 8006d56:	e0a4      	b.n	8006ea2 <_printf_i+0x1f6>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	6829      	ldr	r1, [r5, #0]
 8006d5c:	0606      	lsls	r6, r0, #24
 8006d5e:	f101 0304 	add.w	r3, r1, #4
 8006d62:	d50a      	bpl.n	8006d7a <_printf_i+0xce>
 8006d64:	680e      	ldr	r6, [r1, #0]
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	da03      	bge.n	8006d74 <_printf_i+0xc8>
 8006d6c:	232d      	movs	r3, #45	; 0x2d
 8006d6e:	4276      	negs	r6, r6
 8006d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d74:	230a      	movs	r3, #10
 8006d76:	485e      	ldr	r0, [pc, #376]	; (8006ef0 <_printf_i+0x244>)
 8006d78:	e019      	b.n	8006dae <_printf_i+0x102>
 8006d7a:	680e      	ldr	r6, [r1, #0]
 8006d7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	bf18      	it	ne
 8006d84:	b236      	sxthne	r6, r6
 8006d86:	e7ef      	b.n	8006d68 <_printf_i+0xbc>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	1d19      	adds	r1, r3, #4
 8006d8e:	6029      	str	r1, [r5, #0]
 8006d90:	0601      	lsls	r1, r0, #24
 8006d92:	d501      	bpl.n	8006d98 <_printf_i+0xec>
 8006d94:	681e      	ldr	r6, [r3, #0]
 8006d96:	e002      	b.n	8006d9e <_printf_i+0xf2>
 8006d98:	0646      	lsls	r6, r0, #25
 8006d9a:	d5fb      	bpl.n	8006d94 <_printf_i+0xe8>
 8006d9c:	881e      	ldrh	r6, [r3, #0]
 8006d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8006da0:	bf0c      	ite	eq
 8006da2:	2308      	moveq	r3, #8
 8006da4:	230a      	movne	r3, #10
 8006da6:	4852      	ldr	r0, [pc, #328]	; (8006ef0 <_printf_i+0x244>)
 8006da8:	2100      	movs	r1, #0
 8006daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dae:	6865      	ldr	r5, [r4, #4]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	bfa8      	it	ge
 8006db4:	6821      	ldrge	r1, [r4, #0]
 8006db6:	60a5      	str	r5, [r4, #8]
 8006db8:	bfa4      	itt	ge
 8006dba:	f021 0104 	bicge.w	r1, r1, #4
 8006dbe:	6021      	strge	r1, [r4, #0]
 8006dc0:	b90e      	cbnz	r6, 8006dc6 <_printf_i+0x11a>
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	d04d      	beq.n	8006e62 <_printf_i+0x1b6>
 8006dc6:	4615      	mov	r5, r2
 8006dc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dcc:	fb03 6711 	mls	r7, r3, r1, r6
 8006dd0:	5dc7      	ldrb	r7, [r0, r7]
 8006dd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dd6:	4637      	mov	r7, r6
 8006dd8:	42bb      	cmp	r3, r7
 8006dda:	460e      	mov	r6, r1
 8006ddc:	d9f4      	bls.n	8006dc8 <_printf_i+0x11c>
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d10b      	bne.n	8006dfa <_printf_i+0x14e>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07de      	lsls	r6, r3, #31
 8006de6:	d508      	bpl.n	8006dfa <_printf_i+0x14e>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	6861      	ldr	r1, [r4, #4]
 8006dec:	4299      	cmp	r1, r3
 8006dee:	bfde      	ittt	le
 8006df0:	2330      	movle	r3, #48	; 0x30
 8006df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dfa:	1b52      	subs	r2, r2, r5
 8006dfc:	6122      	str	r2, [r4, #16]
 8006dfe:	464b      	mov	r3, r9
 8006e00:	4621      	mov	r1, r4
 8006e02:	4640      	mov	r0, r8
 8006e04:	f8cd a000 	str.w	sl, [sp]
 8006e08:	aa03      	add	r2, sp, #12
 8006e0a:	f7ff fedf 	bl	8006bcc <_printf_common>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d14c      	bne.n	8006eac <_printf_i+0x200>
 8006e12:	f04f 30ff 	mov.w	r0, #4294967295
 8006e16:	b004      	add	sp, #16
 8006e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1c:	4834      	ldr	r0, [pc, #208]	; (8006ef0 <_printf_i+0x244>)
 8006e1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e22:	6829      	ldr	r1, [r5, #0]
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e2a:	6029      	str	r1, [r5, #0]
 8006e2c:	061d      	lsls	r5, r3, #24
 8006e2e:	d514      	bpl.n	8006e5a <_printf_i+0x1ae>
 8006e30:	07df      	lsls	r7, r3, #31
 8006e32:	bf44      	itt	mi
 8006e34:	f043 0320 	orrmi.w	r3, r3, #32
 8006e38:	6023      	strmi	r3, [r4, #0]
 8006e3a:	b91e      	cbnz	r6, 8006e44 <_printf_i+0x198>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	f023 0320 	bic.w	r3, r3, #32
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	2310      	movs	r3, #16
 8006e46:	e7af      	b.n	8006da8 <_printf_i+0xfc>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	f043 0320 	orr.w	r3, r3, #32
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	2378      	movs	r3, #120	; 0x78
 8006e52:	4828      	ldr	r0, [pc, #160]	; (8006ef4 <_printf_i+0x248>)
 8006e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e58:	e7e3      	b.n	8006e22 <_printf_i+0x176>
 8006e5a:	0659      	lsls	r1, r3, #25
 8006e5c:	bf48      	it	mi
 8006e5e:	b2b6      	uxthmi	r6, r6
 8006e60:	e7e6      	b.n	8006e30 <_printf_i+0x184>
 8006e62:	4615      	mov	r5, r2
 8006e64:	e7bb      	b.n	8006dde <_printf_i+0x132>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	6826      	ldr	r6, [r4, #0]
 8006e6a:	1d18      	adds	r0, r3, #4
 8006e6c:	6961      	ldr	r1, [r4, #20]
 8006e6e:	6028      	str	r0, [r5, #0]
 8006e70:	0635      	lsls	r5, r6, #24
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	d501      	bpl.n	8006e7a <_printf_i+0x1ce>
 8006e76:	6019      	str	r1, [r3, #0]
 8006e78:	e002      	b.n	8006e80 <_printf_i+0x1d4>
 8006e7a:	0670      	lsls	r0, r6, #25
 8006e7c:	d5fb      	bpl.n	8006e76 <_printf_i+0x1ca>
 8006e7e:	8019      	strh	r1, [r3, #0]
 8006e80:	2300      	movs	r3, #0
 8006e82:	4615      	mov	r5, r2
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	e7ba      	b.n	8006dfe <_printf_i+0x152>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	602a      	str	r2, [r5, #0]
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	6862      	ldr	r2, [r4, #4]
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 ff11 	bl	8007cbc <memchr>
 8006e9a:	b108      	cbz	r0, 8006ea0 <_printf_i+0x1f4>
 8006e9c:	1b40      	subs	r0, r0, r5
 8006e9e:	6060      	str	r0, [r4, #4]
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eaa:	e7a8      	b.n	8006dfe <_printf_i+0x152>
 8006eac:	462a      	mov	r2, r5
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	47d0      	blx	sl
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d0ab      	beq.n	8006e12 <_printf_i+0x166>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	079b      	lsls	r3, r3, #30
 8006ebe:	d413      	bmi.n	8006ee8 <_printf_i+0x23c>
 8006ec0:	68e0      	ldr	r0, [r4, #12]
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	4298      	cmp	r0, r3
 8006ec6:	bfb8      	it	lt
 8006ec8:	4618      	movlt	r0, r3
 8006eca:	e7a4      	b.n	8006e16 <_printf_i+0x16a>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4632      	mov	r2, r6
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	47d0      	blx	sl
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d09b      	beq.n	8006e12 <_printf_i+0x166>
 8006eda:	3501      	adds	r5, #1
 8006edc:	68e3      	ldr	r3, [r4, #12]
 8006ede:	9903      	ldr	r1, [sp, #12]
 8006ee0:	1a5b      	subs	r3, r3, r1
 8006ee2:	42ab      	cmp	r3, r5
 8006ee4:	dcf2      	bgt.n	8006ecc <_printf_i+0x220>
 8006ee6:	e7eb      	b.n	8006ec0 <_printf_i+0x214>
 8006ee8:	2500      	movs	r5, #0
 8006eea:	f104 0619 	add.w	r6, r4, #25
 8006eee:	e7f5      	b.n	8006edc <_printf_i+0x230>
 8006ef0:	08009426 	.word	0x08009426
 8006ef4:	08009437 	.word	0x08009437

08006ef8 <_sbrk_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	2300      	movs	r3, #0
 8006efc:	4d05      	ldr	r5, [pc, #20]	; (8006f14 <_sbrk_r+0x1c>)
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	f7fa fb76 	bl	80015f4 <_sbrk>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_sbrk_r+0x1a>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_sbrk_r+0x1a>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000db0 	.word	0x20000db0

08006f18 <sniprintf>:
 8006f18:	b40c      	push	{r2, r3}
 8006f1a:	b530      	push	{r4, r5, lr}
 8006f1c:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <sniprintf+0x64>)
 8006f1e:	1e0c      	subs	r4, r1, #0
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	b09d      	sub	sp, #116	; 0x74
 8006f24:	da08      	bge.n	8006f38 <sniprintf+0x20>
 8006f26:	238b      	movs	r3, #139	; 0x8b
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	b01d      	add	sp, #116	; 0x74
 8006f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f34:	b002      	add	sp, #8
 8006f36:	4770      	bx	lr
 8006f38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f40:	bf0c      	ite	eq
 8006f42:	4623      	moveq	r3, r4
 8006f44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	9006      	str	r0, [sp, #24]
 8006f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f58:	4628      	mov	r0, r5
 8006f5a:	ab21      	add	r3, sp, #132	; 0x84
 8006f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f5e:	a902      	add	r1, sp, #8
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	f001 fab7 	bl	80084d4 <_svfiprintf_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	bfbc      	itt	lt
 8006f6a:	238b      	movlt	r3, #139	; 0x8b
 8006f6c:	602b      	strlt	r3, [r5, #0]
 8006f6e:	2c00      	cmp	r4, #0
 8006f70:	d0dd      	beq.n	8006f2e <sniprintf+0x16>
 8006f72:	2200      	movs	r2, #0
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e7d9      	b.n	8006f2e <sniprintf+0x16>
 8006f7a:	bf00      	nop
 8006f7c:	2000000c 	.word	0x2000000c

08006f80 <siprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f86:	b500      	push	{lr}
 8006f88:	b09c      	sub	sp, #112	; 0x70
 8006f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	9006      	str	r0, [sp, #24]
 8006f90:	9107      	str	r1, [sp, #28]
 8006f92:	9104      	str	r1, [sp, #16]
 8006f94:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <siprintf+0x38>)
 8006f96:	4909      	ldr	r1, [pc, #36]	; (8006fbc <siprintf+0x3c>)
 8006f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	6800      	ldr	r0, [r0, #0]
 8006fa0:	a902      	add	r1, sp, #8
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	f001 fa96 	bl	80084d4 <_svfiprintf_r>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	9b02      	ldr	r3, [sp, #8]
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	b01c      	add	sp, #112	; 0x70
 8006fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb4:	b003      	add	sp, #12
 8006fb6:	4770      	bx	lr
 8006fb8:	2000000c 	.word	0x2000000c
 8006fbc:	ffff0208 	.word	0xffff0208

08006fc0 <quorem>:
 8006fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	6903      	ldr	r3, [r0, #16]
 8006fc6:	690c      	ldr	r4, [r1, #16]
 8006fc8:	4607      	mov	r7, r0
 8006fca:	42a3      	cmp	r3, r4
 8006fcc:	f2c0 8082 	blt.w	80070d4 <quorem+0x114>
 8006fd0:	3c01      	subs	r4, #1
 8006fd2:	f100 0514 	add.w	r5, r0, #20
 8006fd6:	f101 0814 	add.w	r8, r1, #20
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff8:	d331      	bcc.n	800705e <quorem+0x9e>
 8006ffa:	f04f 0e00 	mov.w	lr, #0
 8006ffe:	4640      	mov	r0, r8
 8007000:	46ac      	mov	ip, r5
 8007002:	46f2      	mov	sl, lr
 8007004:	f850 2b04 	ldr.w	r2, [r0], #4
 8007008:	b293      	uxth	r3, r2
 800700a:	fb06 e303 	mla	r3, r6, r3, lr
 800700e:	0c12      	lsrs	r2, r2, #16
 8007010:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007014:	b29b      	uxth	r3, r3
 8007016:	fb06 e202 	mla	r2, r6, r2, lr
 800701a:	ebaa 0303 	sub.w	r3, sl, r3
 800701e:	f8dc a000 	ldr.w	sl, [ip]
 8007022:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007026:	fa1f fa8a 	uxth.w	sl, sl
 800702a:	4453      	add	r3, sl
 800702c:	f8dc a000 	ldr.w	sl, [ip]
 8007030:	b292      	uxth	r2, r2
 8007032:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007036:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007040:	4581      	cmp	r9, r0
 8007042:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007046:	f84c 3b04 	str.w	r3, [ip], #4
 800704a:	d2db      	bcs.n	8007004 <quorem+0x44>
 800704c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007050:	b92b      	cbnz	r3, 800705e <quorem+0x9e>
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	3b04      	subs	r3, #4
 8007056:	429d      	cmp	r5, r3
 8007058:	461a      	mov	r2, r3
 800705a:	d32f      	bcc.n	80070bc <quorem+0xfc>
 800705c:	613c      	str	r4, [r7, #16]
 800705e:	4638      	mov	r0, r7
 8007060:	f001 f8c4 	bl	80081ec <__mcmp>
 8007064:	2800      	cmp	r0, #0
 8007066:	db25      	blt.n	80070b4 <quorem+0xf4>
 8007068:	4628      	mov	r0, r5
 800706a:	f04f 0c00 	mov.w	ip, #0
 800706e:	3601      	adds	r6, #1
 8007070:	f858 1b04 	ldr.w	r1, [r8], #4
 8007074:	f8d0 e000 	ldr.w	lr, [r0]
 8007078:	b28b      	uxth	r3, r1
 800707a:	ebac 0303 	sub.w	r3, ip, r3
 800707e:	fa1f f28e 	uxth.w	r2, lr
 8007082:	4413      	add	r3, r2
 8007084:	0c0a      	lsrs	r2, r1, #16
 8007086:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800708a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800708e:	b29b      	uxth	r3, r3
 8007090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007094:	45c1      	cmp	r9, r8
 8007096:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800709a:	f840 3b04 	str.w	r3, [r0], #4
 800709e:	d2e7      	bcs.n	8007070 <quorem+0xb0>
 80070a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a8:	b922      	cbnz	r2, 80070b4 <quorem+0xf4>
 80070aa:	3b04      	subs	r3, #4
 80070ac:	429d      	cmp	r5, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	d30a      	bcc.n	80070c8 <quorem+0x108>
 80070b2:	613c      	str	r4, [r7, #16]
 80070b4:	4630      	mov	r0, r6
 80070b6:	b003      	add	sp, #12
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	3b04      	subs	r3, #4
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d1cb      	bne.n	800705c <quorem+0x9c>
 80070c4:	3c01      	subs	r4, #1
 80070c6:	e7c6      	b.n	8007056 <quorem+0x96>
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	3b04      	subs	r3, #4
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	d1f0      	bne.n	80070b2 <quorem+0xf2>
 80070d0:	3c01      	subs	r4, #1
 80070d2:	e7eb      	b.n	80070ac <quorem+0xec>
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7ee      	b.n	80070b6 <quorem+0xf6>

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4616      	mov	r6, r2
 80070de:	461f      	mov	r7, r3
 80070e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070e2:	b099      	sub	sp, #100	; 0x64
 80070e4:	4605      	mov	r5, r0
 80070e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070ee:	b974      	cbnz	r4, 800710e <_dtoa_r+0x36>
 80070f0:	2010      	movs	r0, #16
 80070f2:	f7ff f9a7 	bl	8006444 <malloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6268      	str	r0, [r5, #36]	; 0x24
 80070fa:	b920      	cbnz	r0, 8007106 <_dtoa_r+0x2e>
 80070fc:	21ea      	movs	r1, #234	; 0xea
 80070fe:	4ba8      	ldr	r3, [pc, #672]	; (80073a0 <_dtoa_r+0x2c8>)
 8007100:	48a8      	ldr	r0, [pc, #672]	; (80073a4 <_dtoa_r+0x2cc>)
 8007102:	f001 fae7 	bl	80086d4 <__assert_func>
 8007106:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800710a:	6004      	str	r4, [r0, #0]
 800710c:	60c4      	str	r4, [r0, #12]
 800710e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	b151      	cbz	r1, 800712a <_dtoa_r+0x52>
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	2301      	movs	r3, #1
 8007118:	4093      	lsls	r3, r2
 800711a:	604a      	str	r2, [r1, #4]
 800711c:	608b      	str	r3, [r1, #8]
 800711e:	4628      	mov	r0, r5
 8007120:	f000 fe26 	bl	8007d70 <_Bfree>
 8007124:	2200      	movs	r2, #0
 8007126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	1e3b      	subs	r3, r7, #0
 800712c:	bfaf      	iteee	ge
 800712e:	2300      	movge	r3, #0
 8007130:	2201      	movlt	r2, #1
 8007132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007136:	9305      	strlt	r3, [sp, #20]
 8007138:	bfa8      	it	ge
 800713a:	f8c8 3000 	strge.w	r3, [r8]
 800713e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007142:	4b99      	ldr	r3, [pc, #612]	; (80073a8 <_dtoa_r+0x2d0>)
 8007144:	bfb8      	it	lt
 8007146:	f8c8 2000 	strlt.w	r2, [r8]
 800714a:	ea33 0309 	bics.w	r3, r3, r9
 800714e:	d119      	bne.n	8007184 <_dtoa_r+0xac>
 8007150:	f242 730f 	movw	r3, #9999	; 0x270f
 8007154:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800715c:	4333      	orrs	r3, r6
 800715e:	f000 857f 	beq.w	8007c60 <_dtoa_r+0xb88>
 8007162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007164:	b953      	cbnz	r3, 800717c <_dtoa_r+0xa4>
 8007166:	4b91      	ldr	r3, [pc, #580]	; (80073ac <_dtoa_r+0x2d4>)
 8007168:	e022      	b.n	80071b0 <_dtoa_r+0xd8>
 800716a:	4b91      	ldr	r3, [pc, #580]	; (80073b0 <_dtoa_r+0x2d8>)
 800716c:	9303      	str	r3, [sp, #12]
 800716e:	3308      	adds	r3, #8
 8007170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	9803      	ldr	r0, [sp, #12]
 8007176:	b019      	add	sp, #100	; 0x64
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	4b8b      	ldr	r3, [pc, #556]	; (80073ac <_dtoa_r+0x2d4>)
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	3303      	adds	r3, #3
 8007182:	e7f5      	b.n	8007170 <_dtoa_r+0x98>
 8007184:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007188:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800718c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	f7f9 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8007198:	4680      	mov	r8, r0
 800719a:	b158      	cbz	r0, 80071b4 <_dtoa_r+0xdc>
 800719c:	2301      	movs	r3, #1
 800719e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8558 	beq.w	8007c5a <_dtoa_r+0xb82>
 80071aa:	4882      	ldr	r0, [pc, #520]	; (80073b4 <_dtoa_r+0x2dc>)
 80071ac:	6018      	str	r0, [r3, #0]
 80071ae:	1e43      	subs	r3, r0, #1
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	e7df      	b.n	8007174 <_dtoa_r+0x9c>
 80071b4:	ab16      	add	r3, sp, #88	; 0x58
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	ab17      	add	r3, sp, #92	; 0x5c
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4628      	mov	r0, r5
 80071be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071c2:	f001 f8bb 	bl	800833c <__d2b>
 80071c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071ca:	4683      	mov	fp, r0
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d07f      	beq.n	80072d0 <_dtoa_r+0x1f8>
 80071d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80071e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80071e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071ea:	2200      	movs	r2, #0
 80071ec:	4b72      	ldr	r3, [pc, #456]	; (80073b8 <_dtoa_r+0x2e0>)
 80071ee:	f7f8 ffbb 	bl	8000168 <__aeabi_dsub>
 80071f2:	a365      	add	r3, pc, #404	; (adr r3, 8007388 <_dtoa_r+0x2b0>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f9 f96e 	bl	80004d8 <__aeabi_dmul>
 80071fc:	a364      	add	r3, pc, #400	; (adr r3, 8007390 <_dtoa_r+0x2b8>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffb3 	bl	800016c <__adddf3>
 8007206:	4606      	mov	r6, r0
 8007208:	4620      	mov	r0, r4
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 f8fa 	bl	8000404 <__aeabi_i2d>
 8007210:	a361      	add	r3, pc, #388	; (adr r3, 8007398 <_dtoa_r+0x2c0>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f95f 	bl	80004d8 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f8 ffa3 	bl	800016c <__adddf3>
 8007226:	4606      	mov	r6, r0
 8007228:	460f      	mov	r7, r1
 800722a:	f7f9 fc05 	bl	8000a38 <__aeabi_d2iz>
 800722e:	2200      	movs	r2, #0
 8007230:	4682      	mov	sl, r0
 8007232:	2300      	movs	r3, #0
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fbc0 	bl	80009bc <__aeabi_dcmplt>
 800723c:	b148      	cbz	r0, 8007252 <_dtoa_r+0x17a>
 800723e:	4650      	mov	r0, sl
 8007240:	f7f9 f8e0 	bl	8000404 <__aeabi_i2d>
 8007244:	4632      	mov	r2, r6
 8007246:	463b      	mov	r3, r7
 8007248:	f7f9 fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800724c:	b908      	cbnz	r0, 8007252 <_dtoa_r+0x17a>
 800724e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007252:	f1ba 0f16 	cmp.w	sl, #22
 8007256:	d858      	bhi.n	800730a <_dtoa_r+0x232>
 8007258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800725c:	4b57      	ldr	r3, [pc, #348]	; (80073bc <_dtoa_r+0x2e4>)
 800725e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 fba9 	bl	80009bc <__aeabi_dcmplt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d04f      	beq.n	800730e <_dtoa_r+0x236>
 800726e:	2300      	movs	r3, #0
 8007270:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007274:	930f      	str	r3, [sp, #60]	; 0x3c
 8007276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007278:	1b1c      	subs	r4, r3, r4
 800727a:	1e63      	subs	r3, r4, #1
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	bf49      	itett	mi
 8007280:	f1c4 0301 	rsbmi	r3, r4, #1
 8007284:	2300      	movpl	r3, #0
 8007286:	9306      	strmi	r3, [sp, #24]
 8007288:	2300      	movmi	r3, #0
 800728a:	bf54      	ite	pl
 800728c:	9306      	strpl	r3, [sp, #24]
 800728e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007290:	f1ba 0f00 	cmp.w	sl, #0
 8007294:	db3d      	blt.n	8007312 <_dtoa_r+0x23a>
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800729c:	4453      	add	r3, sl
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	2300      	movs	r3, #0
 80072a2:	930a      	str	r3, [sp, #40]	; 0x28
 80072a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	f200 808c 	bhi.w	80073c4 <_dtoa_r+0x2ec>
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	bfc4      	itt	gt
 80072b0:	3b04      	subgt	r3, #4
 80072b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80072b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072b6:	bfc8      	it	gt
 80072b8:	2400      	movgt	r4, #0
 80072ba:	f1a3 0302 	sub.w	r3, r3, #2
 80072be:	bfd8      	it	le
 80072c0:	2401      	movle	r4, #1
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	f200 808a 	bhi.w	80073dc <_dtoa_r+0x304>
 80072c8:	e8df f003 	tbb	[pc, r3]
 80072cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80072d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072d4:	441c      	add	r4, r3
 80072d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072da:	2b20      	cmp	r3, #32
 80072dc:	bfc3      	ittte	gt
 80072de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80072e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80072ea:	f1c3 0320 	rsble	r3, r3, #32
 80072ee:	bfc6      	itte	gt
 80072f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072f4:	4318      	orrgt	r0, r3
 80072f6:	fa06 f003 	lslle.w	r0, r6, r3
 80072fa:	f7f9 f873 	bl	80003e4 <__aeabi_ui2d>
 80072fe:	2301      	movs	r3, #1
 8007300:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007304:	3c01      	subs	r4, #1
 8007306:	9313      	str	r3, [sp, #76]	; 0x4c
 8007308:	e76f      	b.n	80071ea <_dtoa_r+0x112>
 800730a:	2301      	movs	r3, #1
 800730c:	e7b2      	b.n	8007274 <_dtoa_r+0x19c>
 800730e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007310:	e7b1      	b.n	8007276 <_dtoa_r+0x19e>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	eba3 030a 	sub.w	r3, r3, sl
 8007318:	9306      	str	r3, [sp, #24]
 800731a:	f1ca 0300 	rsb	r3, sl, #0
 800731e:	930a      	str	r3, [sp, #40]	; 0x28
 8007320:	2300      	movs	r3, #0
 8007322:	930e      	str	r3, [sp, #56]	; 0x38
 8007324:	e7be      	b.n	80072a4 <_dtoa_r+0x1cc>
 8007326:	2300      	movs	r3, #0
 8007328:	930b      	str	r3, [sp, #44]	; 0x2c
 800732a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800732c:	2b00      	cmp	r3, #0
 800732e:	dc58      	bgt.n	80073e2 <_dtoa_r+0x30a>
 8007330:	f04f 0901 	mov.w	r9, #1
 8007334:	464b      	mov	r3, r9
 8007336:	f8cd 9020 	str.w	r9, [sp, #32]
 800733a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800733e:	2200      	movs	r2, #0
 8007340:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007342:	6042      	str	r2, [r0, #4]
 8007344:	2204      	movs	r2, #4
 8007346:	f102 0614 	add.w	r6, r2, #20
 800734a:	429e      	cmp	r6, r3
 800734c:	6841      	ldr	r1, [r0, #4]
 800734e:	d94e      	bls.n	80073ee <_dtoa_r+0x316>
 8007350:	4628      	mov	r0, r5
 8007352:	f000 fccd 	bl	8007cf0 <_Balloc>
 8007356:	9003      	str	r0, [sp, #12]
 8007358:	2800      	cmp	r0, #0
 800735a:	d14c      	bne.n	80073f6 <_dtoa_r+0x31e>
 800735c:	4602      	mov	r2, r0
 800735e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007362:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <_dtoa_r+0x2e8>)
 8007364:	e6cc      	b.n	8007100 <_dtoa_r+0x28>
 8007366:	2301      	movs	r3, #1
 8007368:	e7de      	b.n	8007328 <_dtoa_r+0x250>
 800736a:	2300      	movs	r3, #0
 800736c:	930b      	str	r3, [sp, #44]	; 0x2c
 800736e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007370:	eb0a 0903 	add.w	r9, sl, r3
 8007374:	f109 0301 	add.w	r3, r9, #1
 8007378:	2b01      	cmp	r3, #1
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	bfb8      	it	lt
 800737e:	2301      	movlt	r3, #1
 8007380:	e7dd      	b.n	800733e <_dtoa_r+0x266>
 8007382:	2301      	movs	r3, #1
 8007384:	e7f2      	b.n	800736c <_dtoa_r+0x294>
 8007386:	bf00      	nop
 8007388:	636f4361 	.word	0x636f4361
 800738c:	3fd287a7 	.word	0x3fd287a7
 8007390:	8b60c8b3 	.word	0x8b60c8b3
 8007394:	3fc68a28 	.word	0x3fc68a28
 8007398:	509f79fb 	.word	0x509f79fb
 800739c:	3fd34413 	.word	0x3fd34413
 80073a0:	08009455 	.word	0x08009455
 80073a4:	0800946c 	.word	0x0800946c
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	08009451 	.word	0x08009451
 80073b0:	08009448 	.word	0x08009448
 80073b4:	08009425 	.word	0x08009425
 80073b8:	3ff80000 	.word	0x3ff80000
 80073bc:	08009560 	.word	0x08009560
 80073c0:	080094c7 	.word	0x080094c7
 80073c4:	2401      	movs	r4, #1
 80073c6:	2300      	movs	r3, #0
 80073c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80073ca:	9322      	str	r3, [sp, #136]	; 0x88
 80073cc:	f04f 39ff 	mov.w	r9, #4294967295
 80073d0:	2200      	movs	r2, #0
 80073d2:	2312      	movs	r3, #18
 80073d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80073d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80073da:	e7b0      	b.n	800733e <_dtoa_r+0x266>
 80073dc:	2301      	movs	r3, #1
 80073de:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e0:	e7f4      	b.n	80073cc <_dtoa_r+0x2f4>
 80073e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80073e6:	464b      	mov	r3, r9
 80073e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80073ec:	e7a7      	b.n	800733e <_dtoa_r+0x266>
 80073ee:	3101      	adds	r1, #1
 80073f0:	6041      	str	r1, [r0, #4]
 80073f2:	0052      	lsls	r2, r2, #1
 80073f4:	e7a7      	b.n	8007346 <_dtoa_r+0x26e>
 80073f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073f8:	9a03      	ldr	r2, [sp, #12]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	2b0e      	cmp	r3, #14
 8007400:	f200 80a8 	bhi.w	8007554 <_dtoa_r+0x47c>
 8007404:	2c00      	cmp	r4, #0
 8007406:	f000 80a5 	beq.w	8007554 <_dtoa_r+0x47c>
 800740a:	f1ba 0f00 	cmp.w	sl, #0
 800740e:	dd34      	ble.n	800747a <_dtoa_r+0x3a2>
 8007410:	4a9a      	ldr	r2, [pc, #616]	; (800767c <_dtoa_r+0x5a4>)
 8007412:	f00a 030f 	and.w	r3, sl, #15
 8007416:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800741a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800741e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007422:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007426:	ea4f 142a 	mov.w	r4, sl, asr #4
 800742a:	d016      	beq.n	800745a <_dtoa_r+0x382>
 800742c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007430:	4b93      	ldr	r3, [pc, #588]	; (8007680 <_dtoa_r+0x5a8>)
 8007432:	2703      	movs	r7, #3
 8007434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007438:	f7f9 f978 	bl	800072c <__aeabi_ddiv>
 800743c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007440:	f004 040f 	and.w	r4, r4, #15
 8007444:	4e8e      	ldr	r6, [pc, #568]	; (8007680 <_dtoa_r+0x5a8>)
 8007446:	b954      	cbnz	r4, 800745e <_dtoa_r+0x386>
 8007448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800744c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007450:	f7f9 f96c 	bl	800072c <__aeabi_ddiv>
 8007454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007458:	e029      	b.n	80074ae <_dtoa_r+0x3d6>
 800745a:	2702      	movs	r7, #2
 800745c:	e7f2      	b.n	8007444 <_dtoa_r+0x36c>
 800745e:	07e1      	lsls	r1, r4, #31
 8007460:	d508      	bpl.n	8007474 <_dtoa_r+0x39c>
 8007462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007466:	e9d6 2300 	ldrd	r2, r3, [r6]
 800746a:	f7f9 f835 	bl	80004d8 <__aeabi_dmul>
 800746e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007472:	3701      	adds	r7, #1
 8007474:	1064      	asrs	r4, r4, #1
 8007476:	3608      	adds	r6, #8
 8007478:	e7e5      	b.n	8007446 <_dtoa_r+0x36e>
 800747a:	f000 80a5 	beq.w	80075c8 <_dtoa_r+0x4f0>
 800747e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007482:	f1ca 0400 	rsb	r4, sl, #0
 8007486:	4b7d      	ldr	r3, [pc, #500]	; (800767c <_dtoa_r+0x5a4>)
 8007488:	f004 020f 	and.w	r2, r4, #15
 800748c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f9 f820 	bl	80004d8 <__aeabi_dmul>
 8007498:	2702      	movs	r7, #2
 800749a:	2300      	movs	r3, #0
 800749c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a0:	4e77      	ldr	r6, [pc, #476]	; (8007680 <_dtoa_r+0x5a8>)
 80074a2:	1124      	asrs	r4, r4, #4
 80074a4:	2c00      	cmp	r4, #0
 80074a6:	f040 8084 	bne.w	80075b2 <_dtoa_r+0x4da>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d2      	bne.n	8007454 <_dtoa_r+0x37c>
 80074ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 808b 	beq.w	80075cc <_dtoa_r+0x4f4>
 80074b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074c2:	2200      	movs	r2, #0
 80074c4:	4b6f      	ldr	r3, [pc, #444]	; (8007684 <_dtoa_r+0x5ac>)
 80074c6:	f7f9 fa79 	bl	80009bc <__aeabi_dcmplt>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d07e      	beq.n	80075cc <_dtoa_r+0x4f4>
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d07b      	beq.n	80075cc <_dtoa_r+0x4f4>
 80074d4:	f1b9 0f00 	cmp.w	r9, #0
 80074d8:	dd38      	ble.n	800754c <_dtoa_r+0x474>
 80074da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074de:	2200      	movs	r2, #0
 80074e0:	4b69      	ldr	r3, [pc, #420]	; (8007688 <_dtoa_r+0x5b0>)
 80074e2:	f7f8 fff9 	bl	80004d8 <__aeabi_dmul>
 80074e6:	464c      	mov	r4, r9
 80074e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80074f0:	3701      	adds	r7, #1
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7f8 ff86 	bl	8000404 <__aeabi_i2d>
 80074f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fc:	f7f8 ffec 	bl	80004d8 <__aeabi_dmul>
 8007500:	2200      	movs	r2, #0
 8007502:	4b62      	ldr	r3, [pc, #392]	; (800768c <_dtoa_r+0x5b4>)
 8007504:	f7f8 fe32 	bl	800016c <__adddf3>
 8007508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800750c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007510:	9611      	str	r6, [sp, #68]	; 0x44
 8007512:	2c00      	cmp	r4, #0
 8007514:	d15d      	bne.n	80075d2 <_dtoa_r+0x4fa>
 8007516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751a:	2200      	movs	r2, #0
 800751c:	4b5c      	ldr	r3, [pc, #368]	; (8007690 <_dtoa_r+0x5b8>)
 800751e:	f7f8 fe23 	bl	8000168 <__aeabi_dsub>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800752a:	4633      	mov	r3, r6
 800752c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800752e:	f7f9 fa63 	bl	80009f8 <__aeabi_dcmpgt>
 8007532:	2800      	cmp	r0, #0
 8007534:	f040 829c 	bne.w	8007a70 <_dtoa_r+0x998>
 8007538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800753c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800753e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007542:	f7f9 fa3b 	bl	80009bc <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	f040 8290 	bne.w	8007a6c <_dtoa_r+0x994>
 800754c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007556:	2b00      	cmp	r3, #0
 8007558:	f2c0 8152 	blt.w	8007800 <_dtoa_r+0x728>
 800755c:	f1ba 0f0e 	cmp.w	sl, #14
 8007560:	f300 814e 	bgt.w	8007800 <_dtoa_r+0x728>
 8007564:	4b45      	ldr	r3, [pc, #276]	; (800767c <_dtoa_r+0x5a4>)
 8007566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800756a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800756e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f280 80db 	bge.w	8007730 <_dtoa_r+0x658>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f300 80d7 	bgt.w	8007730 <_dtoa_r+0x658>
 8007582:	f040 8272 	bne.w	8007a6a <_dtoa_r+0x992>
 8007586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758a:	2200      	movs	r2, #0
 800758c:	4b40      	ldr	r3, [pc, #256]	; (8007690 <_dtoa_r+0x5b8>)
 800758e:	f7f8 ffa3 	bl	80004d8 <__aeabi_dmul>
 8007592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007596:	f7f9 fa25 	bl	80009e4 <__aeabi_dcmpge>
 800759a:	9c08      	ldr	r4, [sp, #32]
 800759c:	4626      	mov	r6, r4
 800759e:	2800      	cmp	r0, #0
 80075a0:	f040 8248 	bne.w	8007a34 <_dtoa_r+0x95c>
 80075a4:	2331      	movs	r3, #49	; 0x31
 80075a6:	9f03      	ldr	r7, [sp, #12]
 80075a8:	f10a 0a01 	add.w	sl, sl, #1
 80075ac:	f807 3b01 	strb.w	r3, [r7], #1
 80075b0:	e244      	b.n	8007a3c <_dtoa_r+0x964>
 80075b2:	07e2      	lsls	r2, r4, #31
 80075b4:	d505      	bpl.n	80075c2 <_dtoa_r+0x4ea>
 80075b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075ba:	f7f8 ff8d 	bl	80004d8 <__aeabi_dmul>
 80075be:	2301      	movs	r3, #1
 80075c0:	3701      	adds	r7, #1
 80075c2:	1064      	asrs	r4, r4, #1
 80075c4:	3608      	adds	r6, #8
 80075c6:	e76d      	b.n	80074a4 <_dtoa_r+0x3cc>
 80075c8:	2702      	movs	r7, #2
 80075ca:	e770      	b.n	80074ae <_dtoa_r+0x3d6>
 80075cc:	46d0      	mov	r8, sl
 80075ce:	9c08      	ldr	r4, [sp, #32]
 80075d0:	e78f      	b.n	80074f2 <_dtoa_r+0x41a>
 80075d2:	9903      	ldr	r1, [sp, #12]
 80075d4:	4b29      	ldr	r3, [pc, #164]	; (800767c <_dtoa_r+0x5a4>)
 80075d6:	4421      	add	r1, r4
 80075d8:	9112      	str	r1, [sp, #72]	; 0x48
 80075da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	d055      	beq.n	8007698 <_dtoa_r+0x5c0>
 80075ec:	2000      	movs	r0, #0
 80075ee:	4929      	ldr	r1, [pc, #164]	; (8007694 <_dtoa_r+0x5bc>)
 80075f0:	f7f9 f89c 	bl	800072c <__aeabi_ddiv>
 80075f4:	463b      	mov	r3, r7
 80075f6:	4632      	mov	r2, r6
 80075f8:	f7f8 fdb6 	bl	8000168 <__aeabi_dsub>
 80075fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007600:	9f03      	ldr	r7, [sp, #12]
 8007602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007606:	f7f9 fa17 	bl	8000a38 <__aeabi_d2iz>
 800760a:	4604      	mov	r4, r0
 800760c:	f7f8 fefa 	bl	8000404 <__aeabi_i2d>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007618:	f7f8 fda6 	bl	8000168 <__aeabi_dsub>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	3430      	adds	r4, #48	; 0x30
 8007622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800762a:	f807 4b01 	strb.w	r4, [r7], #1
 800762e:	f7f9 f9c5 	bl	80009bc <__aeabi_dcmplt>
 8007632:	2800      	cmp	r0, #0
 8007634:	d174      	bne.n	8007720 <_dtoa_r+0x648>
 8007636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800763a:	2000      	movs	r0, #0
 800763c:	4911      	ldr	r1, [pc, #68]	; (8007684 <_dtoa_r+0x5ac>)
 800763e:	f7f8 fd93 	bl	8000168 <__aeabi_dsub>
 8007642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007646:	f7f9 f9b9 	bl	80009bc <__aeabi_dcmplt>
 800764a:	2800      	cmp	r0, #0
 800764c:	f040 80b7 	bne.w	80077be <_dtoa_r+0x6e6>
 8007650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007652:	429f      	cmp	r7, r3
 8007654:	f43f af7a 	beq.w	800754c <_dtoa_r+0x474>
 8007658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800765c:	2200      	movs	r2, #0
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <_dtoa_r+0x5b0>)
 8007660:	f7f8 ff3a 	bl	80004d8 <__aeabi_dmul>
 8007664:	2200      	movs	r2, #0
 8007666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800766a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <_dtoa_r+0x5b0>)
 8007670:	f7f8 ff32 	bl	80004d8 <__aeabi_dmul>
 8007674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007678:	e7c3      	b.n	8007602 <_dtoa_r+0x52a>
 800767a:	bf00      	nop
 800767c:	08009560 	.word	0x08009560
 8007680:	08009538 	.word	0x08009538
 8007684:	3ff00000 	.word	0x3ff00000
 8007688:	40240000 	.word	0x40240000
 800768c:	401c0000 	.word	0x401c0000
 8007690:	40140000 	.word	0x40140000
 8007694:	3fe00000 	.word	0x3fe00000
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 ff1c 	bl	80004d8 <__aeabi_dmul>
 80076a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076a6:	9c03      	ldr	r4, [sp, #12]
 80076a8:	9314      	str	r3, [sp, #80]	; 0x50
 80076aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ae:	f7f9 f9c3 	bl	8000a38 <__aeabi_d2iz>
 80076b2:	9015      	str	r0, [sp, #84]	; 0x54
 80076b4:	f7f8 fea6 	bl	8000404 <__aeabi_i2d>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c0:	f7f8 fd52 	bl	8000168 <__aeabi_dsub>
 80076c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076c6:	4606      	mov	r6, r0
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	f804 3b01 	strb.w	r3, [r4], #1
 80076ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d0:	460f      	mov	r7, r1
 80076d2:	429c      	cmp	r4, r3
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	d124      	bne.n	8007724 <_dtoa_r+0x64c>
 80076da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076de:	4bb0      	ldr	r3, [pc, #704]	; (80079a0 <_dtoa_r+0x8c8>)
 80076e0:	f7f8 fd44 	bl	800016c <__adddf3>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 f984 	bl	80009f8 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d163      	bne.n	80077bc <_dtoa_r+0x6e4>
 80076f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f8:	2000      	movs	r0, #0
 80076fa:	49a9      	ldr	r1, [pc, #676]	; (80079a0 <_dtoa_r+0x8c8>)
 80076fc:	f7f8 fd34 	bl	8000168 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f9 f958 	bl	80009bc <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f af1d 	beq.w	800754c <_dtoa_r+0x474>
 8007712:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007714:	1e7b      	subs	r3, r7, #1
 8007716:	9314      	str	r3, [sp, #80]	; 0x50
 8007718:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d0f8      	beq.n	8007712 <_dtoa_r+0x63a>
 8007720:	46c2      	mov	sl, r8
 8007722:	e03b      	b.n	800779c <_dtoa_r+0x6c4>
 8007724:	4b9f      	ldr	r3, [pc, #636]	; (80079a4 <_dtoa_r+0x8cc>)
 8007726:	f7f8 fed7 	bl	80004d8 <__aeabi_dmul>
 800772a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800772e:	e7bc      	b.n	80076aa <_dtoa_r+0x5d2>
 8007730:	9f03      	ldr	r7, [sp, #12]
 8007732:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 fff5 	bl	800072c <__aeabi_ddiv>
 8007742:	f7f9 f979 	bl	8000a38 <__aeabi_d2iz>
 8007746:	4604      	mov	r4, r0
 8007748:	f7f8 fe5c 	bl	8000404 <__aeabi_i2d>
 800774c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007750:	f7f8 fec2 	bl	80004d8 <__aeabi_dmul>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f8 fd04 	bl	8000168 <__aeabi_dsub>
 8007760:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007764:	f807 6b01 	strb.w	r6, [r7], #1
 8007768:	9e03      	ldr	r6, [sp, #12]
 800776a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800776e:	1bbe      	subs	r6, r7, r6
 8007770:	45b4      	cmp	ip, r6
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	d136      	bne.n	80077e6 <_dtoa_r+0x70e>
 8007778:	f7f8 fcf8 	bl	800016c <__adddf3>
 800777c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007780:	4680      	mov	r8, r0
 8007782:	4689      	mov	r9, r1
 8007784:	f7f9 f938 	bl	80009f8 <__aeabi_dcmpgt>
 8007788:	bb58      	cbnz	r0, 80077e2 <_dtoa_r+0x70a>
 800778a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f9 f909 	bl	80009a8 <__aeabi_dcmpeq>
 8007796:	b108      	cbz	r0, 800779c <_dtoa_r+0x6c4>
 8007798:	07e1      	lsls	r1, r4, #31
 800779a:	d422      	bmi.n	80077e2 <_dtoa_r+0x70a>
 800779c:	4628      	mov	r0, r5
 800779e:	4659      	mov	r1, fp
 80077a0:	f000 fae6 	bl	8007d70 <_Bfree>
 80077a4:	2300      	movs	r3, #0
 80077a6:	703b      	strb	r3, [r7, #0]
 80077a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077aa:	f10a 0001 	add.w	r0, sl, #1
 80077ae:	6018      	str	r0, [r3, #0]
 80077b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f43f acde 	beq.w	8007174 <_dtoa_r+0x9c>
 80077b8:	601f      	str	r7, [r3, #0]
 80077ba:	e4db      	b.n	8007174 <_dtoa_r+0x9c>
 80077bc:	4627      	mov	r7, r4
 80077be:	463b      	mov	r3, r7
 80077c0:	461f      	mov	r7, r3
 80077c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c6:	2a39      	cmp	r2, #57	; 0x39
 80077c8:	d107      	bne.n	80077da <_dtoa_r+0x702>
 80077ca:	9a03      	ldr	r2, [sp, #12]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d1f7      	bne.n	80077c0 <_dtoa_r+0x6e8>
 80077d0:	2230      	movs	r2, #48	; 0x30
 80077d2:	9903      	ldr	r1, [sp, #12]
 80077d4:	f108 0801 	add.w	r8, r8, #1
 80077d8:	700a      	strb	r2, [r1, #0]
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	3201      	adds	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e79e      	b.n	8007720 <_dtoa_r+0x648>
 80077e2:	46d0      	mov	r8, sl
 80077e4:	e7eb      	b.n	80077be <_dtoa_r+0x6e6>
 80077e6:	2200      	movs	r2, #0
 80077e8:	4b6e      	ldr	r3, [pc, #440]	; (80079a4 <_dtoa_r+0x8cc>)
 80077ea:	f7f8 fe75 	bl	80004d8 <__aeabi_dmul>
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	4680      	mov	r8, r0
 80077f4:	4689      	mov	r9, r1
 80077f6:	f7f9 f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d09b      	beq.n	8007736 <_dtoa_r+0x65e>
 80077fe:	e7cd      	b.n	800779c <_dtoa_r+0x6c4>
 8007800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007802:	2a00      	cmp	r2, #0
 8007804:	f000 80d0 	beq.w	80079a8 <_dtoa_r+0x8d0>
 8007808:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800780a:	2a01      	cmp	r2, #1
 800780c:	f300 80ae 	bgt.w	800796c <_dtoa_r+0x894>
 8007810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007812:	2a00      	cmp	r2, #0
 8007814:	f000 80a6 	beq.w	8007964 <_dtoa_r+0x88c>
 8007818:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800781c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800781e:	9f06      	ldr	r7, [sp, #24]
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2101      	movs	r1, #1
 8007824:	441a      	add	r2, r3
 8007826:	9206      	str	r2, [sp, #24]
 8007828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800782a:	4628      	mov	r0, r5
 800782c:	441a      	add	r2, r3
 800782e:	9209      	str	r2, [sp, #36]	; 0x24
 8007830:	f000 fb54 	bl	8007edc <__i2b>
 8007834:	4606      	mov	r6, r0
 8007836:	2f00      	cmp	r7, #0
 8007838:	dd0c      	ble.n	8007854 <_dtoa_r+0x77c>
 800783a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd09      	ble.n	8007854 <_dtoa_r+0x77c>
 8007840:	42bb      	cmp	r3, r7
 8007842:	bfa8      	it	ge
 8007844:	463b      	movge	r3, r7
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	1aff      	subs	r7, r7, r3
 800784a:	1ad2      	subs	r2, r2, r3
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007856:	b1f3      	cbz	r3, 8007896 <_dtoa_r+0x7be>
 8007858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80a8 	beq.w	80079b0 <_dtoa_r+0x8d8>
 8007860:	2c00      	cmp	r4, #0
 8007862:	dd10      	ble.n	8007886 <_dtoa_r+0x7ae>
 8007864:	4631      	mov	r1, r6
 8007866:	4622      	mov	r2, r4
 8007868:	4628      	mov	r0, r5
 800786a:	f000 fbf5 	bl	8008058 <__pow5mult>
 800786e:	465a      	mov	r2, fp
 8007870:	4601      	mov	r1, r0
 8007872:	4606      	mov	r6, r0
 8007874:	4628      	mov	r0, r5
 8007876:	f000 fb47 	bl	8007f08 <__multiply>
 800787a:	4680      	mov	r8, r0
 800787c:	4659      	mov	r1, fp
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fa76 	bl	8007d70 <_Bfree>
 8007884:	46c3      	mov	fp, r8
 8007886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007888:	1b1a      	subs	r2, r3, r4
 800788a:	d004      	beq.n	8007896 <_dtoa_r+0x7be>
 800788c:	4659      	mov	r1, fp
 800788e:	4628      	mov	r0, r5
 8007890:	f000 fbe2 	bl	8008058 <__pow5mult>
 8007894:	4683      	mov	fp, r0
 8007896:	2101      	movs	r1, #1
 8007898:	4628      	mov	r0, r5
 800789a:	f000 fb1f 	bl	8007edc <__i2b>
 800789e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a0:	4604      	mov	r4, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f340 8086 	ble.w	80079b4 <_dtoa_r+0x8dc>
 80078a8:	461a      	mov	r2, r3
 80078aa:	4601      	mov	r1, r0
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fbd3 	bl	8008058 <__pow5mult>
 80078b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b4:	4604      	mov	r4, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	dd7f      	ble.n	80079ba <_dtoa_r+0x8e2>
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078c4:	6918      	ldr	r0, [r3, #16]
 80078c6:	f000 fabb 	bl	8007e40 <__hi0bits>
 80078ca:	f1c0 0020 	rsb	r0, r0, #32
 80078ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d0:	4418      	add	r0, r3
 80078d2:	f010 001f 	ands.w	r0, r0, #31
 80078d6:	f000 8092 	beq.w	80079fe <_dtoa_r+0x926>
 80078da:	f1c0 0320 	rsb	r3, r0, #32
 80078de:	2b04      	cmp	r3, #4
 80078e0:	f340 808a 	ble.w	80079f8 <_dtoa_r+0x920>
 80078e4:	f1c0 001c 	rsb	r0, r0, #28
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	4407      	add	r7, r0
 80078ec:	4403      	add	r3, r0
 80078ee:	9306      	str	r3, [sp, #24]
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	4403      	add	r3, r0
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	9b06      	ldr	r3, [sp, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dd05      	ble.n	8007908 <_dtoa_r+0x830>
 80078fc:	4659      	mov	r1, fp
 80078fe:	461a      	mov	r2, r3
 8007900:	4628      	mov	r0, r5
 8007902:	f000 fc03 	bl	800810c <__lshift>
 8007906:	4683      	mov	fp, r0
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd05      	ble.n	800791a <_dtoa_r+0x842>
 800790e:	4621      	mov	r1, r4
 8007910:	461a      	mov	r2, r3
 8007912:	4628      	mov	r0, r5
 8007914:	f000 fbfa 	bl	800810c <__lshift>
 8007918:	4604      	mov	r4, r0
 800791a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d070      	beq.n	8007a02 <_dtoa_r+0x92a>
 8007920:	4621      	mov	r1, r4
 8007922:	4658      	mov	r0, fp
 8007924:	f000 fc62 	bl	80081ec <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	da6a      	bge.n	8007a02 <_dtoa_r+0x92a>
 800792c:	2300      	movs	r3, #0
 800792e:	4659      	mov	r1, fp
 8007930:	220a      	movs	r2, #10
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fa3e 	bl	8007db4 <__multadd>
 8007938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793a:	4683      	mov	fp, r0
 800793c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8194 	beq.w	8007c6e <_dtoa_r+0xb96>
 8007946:	4631      	mov	r1, r6
 8007948:	2300      	movs	r3, #0
 800794a:	220a      	movs	r2, #10
 800794c:	4628      	mov	r0, r5
 800794e:	f000 fa31 	bl	8007db4 <__multadd>
 8007952:	f1b9 0f00 	cmp.w	r9, #0
 8007956:	4606      	mov	r6, r0
 8007958:	f300 8093 	bgt.w	8007a82 <_dtoa_r+0x9aa>
 800795c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795e:	2b02      	cmp	r3, #2
 8007960:	dc57      	bgt.n	8007a12 <_dtoa_r+0x93a>
 8007962:	e08e      	b.n	8007a82 <_dtoa_r+0x9aa>
 8007964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800796a:	e757      	b.n	800781c <_dtoa_r+0x744>
 800796c:	9b08      	ldr	r3, [sp, #32]
 800796e:	1e5c      	subs	r4, r3, #1
 8007970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007972:	42a3      	cmp	r3, r4
 8007974:	bfb7      	itett	lt
 8007976:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007978:	1b1c      	subge	r4, r3, r4
 800797a:	1ae2      	sublt	r2, r4, r3
 800797c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800797e:	bfbe      	ittt	lt
 8007980:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007982:	189b      	addlt	r3, r3, r2
 8007984:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007986:	9b08      	ldr	r3, [sp, #32]
 8007988:	bfb8      	it	lt
 800798a:	2400      	movlt	r4, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfbb      	ittet	lt
 8007990:	9b06      	ldrlt	r3, [sp, #24]
 8007992:	9a08      	ldrlt	r2, [sp, #32]
 8007994:	9f06      	ldrge	r7, [sp, #24]
 8007996:	1a9f      	sublt	r7, r3, r2
 8007998:	bfac      	ite	ge
 800799a:	9b08      	ldrge	r3, [sp, #32]
 800799c:	2300      	movlt	r3, #0
 800799e:	e73f      	b.n	8007820 <_dtoa_r+0x748>
 80079a0:	3fe00000 	.word	0x3fe00000
 80079a4:	40240000 	.word	0x40240000
 80079a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079aa:	9f06      	ldr	r7, [sp, #24]
 80079ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079ae:	e742      	b.n	8007836 <_dtoa_r+0x75e>
 80079b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b2:	e76b      	b.n	800788c <_dtoa_r+0x7b4>
 80079b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	dc19      	bgt.n	80079ee <_dtoa_r+0x916>
 80079ba:	9b04      	ldr	r3, [sp, #16]
 80079bc:	b9bb      	cbnz	r3, 80079ee <_dtoa_r+0x916>
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c4:	b99b      	cbnz	r3, 80079ee <_dtoa_r+0x916>
 80079c6:	9b05      	ldr	r3, [sp, #20]
 80079c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	0d1b      	lsrs	r3, r3, #20
 80079ce:	051b      	lsls	r3, r3, #20
 80079d0:	b183      	cbz	r3, 80079f4 <_dtoa_r+0x91c>
 80079d2:	f04f 0801 	mov.w	r8, #1
 80079d6:	9b06      	ldr	r3, [sp, #24]
 80079d8:	3301      	adds	r3, #1
 80079da:	9306      	str	r3, [sp, #24]
 80079dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	9309      	str	r3, [sp, #36]	; 0x24
 80079e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f47f af6a 	bne.w	80078be <_dtoa_r+0x7e6>
 80079ea:	2001      	movs	r0, #1
 80079ec:	e76f      	b.n	80078ce <_dtoa_r+0x7f6>
 80079ee:	f04f 0800 	mov.w	r8, #0
 80079f2:	e7f6      	b.n	80079e2 <_dtoa_r+0x90a>
 80079f4:	4698      	mov	r8, r3
 80079f6:	e7f4      	b.n	80079e2 <_dtoa_r+0x90a>
 80079f8:	f43f af7d 	beq.w	80078f6 <_dtoa_r+0x81e>
 80079fc:	4618      	mov	r0, r3
 80079fe:	301c      	adds	r0, #28
 8007a00:	e772      	b.n	80078e8 <_dtoa_r+0x810>
 8007a02:	9b08      	ldr	r3, [sp, #32]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc36      	bgt.n	8007a76 <_dtoa_r+0x99e>
 8007a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	dd33      	ble.n	8007a76 <_dtoa_r+0x99e>
 8007a0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	d10d      	bne.n	8007a34 <_dtoa_r+0x95c>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f9c8 	bl	8007db4 <__multadd>
 8007a24:	4601      	mov	r1, r0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4658      	mov	r0, fp
 8007a2a:	f000 fbdf 	bl	80081ec <__mcmp>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f73f adb8 	bgt.w	80075a4 <_dtoa_r+0x4cc>
 8007a34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a36:	9f03      	ldr	r7, [sp, #12]
 8007a38:	ea6f 0a03 	mvn.w	sl, r3
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f994 	bl	8007d70 <_Bfree>
 8007a48:	2e00      	cmp	r6, #0
 8007a4a:	f43f aea7 	beq.w	800779c <_dtoa_r+0x6c4>
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	d005      	beq.n	8007a60 <_dtoa_r+0x988>
 8007a54:	45b0      	cmp	r8, r6
 8007a56:	d003      	beq.n	8007a60 <_dtoa_r+0x988>
 8007a58:	4641      	mov	r1, r8
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f988 	bl	8007d70 <_Bfree>
 8007a60:	4631      	mov	r1, r6
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f984 	bl	8007d70 <_Bfree>
 8007a68:	e698      	b.n	800779c <_dtoa_r+0x6c4>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	4626      	mov	r6, r4
 8007a6e:	e7e1      	b.n	8007a34 <_dtoa_r+0x95c>
 8007a70:	46c2      	mov	sl, r8
 8007a72:	4626      	mov	r6, r4
 8007a74:	e596      	b.n	80075a4 <_dtoa_r+0x4cc>
 8007a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80fd 	beq.w	8007c7c <_dtoa_r+0xba4>
 8007a82:	2f00      	cmp	r7, #0
 8007a84:	dd05      	ble.n	8007a92 <_dtoa_r+0x9ba>
 8007a86:	4631      	mov	r1, r6
 8007a88:	463a      	mov	r2, r7
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f000 fb3e 	bl	800810c <__lshift>
 8007a90:	4606      	mov	r6, r0
 8007a92:	f1b8 0f00 	cmp.w	r8, #0
 8007a96:	d05c      	beq.n	8007b52 <_dtoa_r+0xa7a>
 8007a98:	4628      	mov	r0, r5
 8007a9a:	6871      	ldr	r1, [r6, #4]
 8007a9c:	f000 f928 	bl	8007cf0 <_Balloc>
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	b928      	cbnz	r0, 8007ab0 <_dtoa_r+0x9d8>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007aaa:	4b7f      	ldr	r3, [pc, #508]	; (8007ca8 <_dtoa_r+0xbd0>)
 8007aac:	f7ff bb28 	b.w	8007100 <_dtoa_r+0x28>
 8007ab0:	6932      	ldr	r2, [r6, #16]
 8007ab2:	f106 010c 	add.w	r1, r6, #12
 8007ab6:	3202      	adds	r2, #2
 8007ab8:	0092      	lsls	r2, r2, #2
 8007aba:	300c      	adds	r0, #12
 8007abc:	f7fe fcca 	bl	8006454 <memcpy>
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 fb21 	bl	800810c <__lshift>
 8007aca:	46b0      	mov	r8, r6
 8007acc:	4606      	mov	r6, r0
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	444b      	add	r3, r9
 8007ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8007ada:	9b04      	ldr	r3, [sp, #16]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4658      	mov	r0, fp
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	f7ff fa68 	bl	8006fc0 <quorem>
 8007af0:	4603      	mov	r3, r0
 8007af2:	4641      	mov	r1, r8
 8007af4:	3330      	adds	r3, #48	; 0x30
 8007af6:	9006      	str	r0, [sp, #24]
 8007af8:	4658      	mov	r0, fp
 8007afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007afc:	f000 fb76 	bl	80081ec <__mcmp>
 8007b00:	4632      	mov	r2, r6
 8007b02:	4681      	mov	r9, r0
 8007b04:	4621      	mov	r1, r4
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fb8c 	bl	8008224 <__mdiff>
 8007b0c:	68c2      	ldr	r2, [r0, #12]
 8007b0e:	4607      	mov	r7, r0
 8007b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b12:	bb02      	cbnz	r2, 8007b56 <_dtoa_r+0xa7e>
 8007b14:	4601      	mov	r1, r0
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 fb68 	bl	80081ec <__mcmp>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b20:	4639      	mov	r1, r7
 8007b22:	4628      	mov	r0, r5
 8007b24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b28:	f000 f922 	bl	8007d70 <_Bfree>
 8007b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b30:	9f08      	ldr	r7, [sp, #32]
 8007b32:	ea43 0102 	orr.w	r1, r3, r2
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	d10d      	bne.n	8007b5a <_dtoa_r+0xa82>
 8007b3e:	2b39      	cmp	r3, #57	; 0x39
 8007b40:	d029      	beq.n	8007b96 <_dtoa_r+0xabe>
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	dd01      	ble.n	8007b4c <_dtoa_r+0xa74>
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	3331      	adds	r3, #49	; 0x31
 8007b4c:	9a04      	ldr	r2, [sp, #16]
 8007b4e:	7013      	strb	r3, [r2, #0]
 8007b50:	e776      	b.n	8007a40 <_dtoa_r+0x968>
 8007b52:	4630      	mov	r0, r6
 8007b54:	e7b9      	b.n	8007aca <_dtoa_r+0x9f2>
 8007b56:	2201      	movs	r2, #1
 8007b58:	e7e2      	b.n	8007b20 <_dtoa_r+0xa48>
 8007b5a:	f1b9 0f00 	cmp.w	r9, #0
 8007b5e:	db06      	blt.n	8007b6e <_dtoa_r+0xa96>
 8007b60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b62:	ea41 0909 	orr.w	r9, r1, r9
 8007b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b68:	ea59 0101 	orrs.w	r1, r9, r1
 8007b6c:	d120      	bne.n	8007bb0 <_dtoa_r+0xad8>
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	ddec      	ble.n	8007b4c <_dtoa_r+0xa74>
 8007b72:	4659      	mov	r1, fp
 8007b74:	2201      	movs	r2, #1
 8007b76:	4628      	mov	r0, r5
 8007b78:	9308      	str	r3, [sp, #32]
 8007b7a:	f000 fac7 	bl	800810c <__lshift>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4683      	mov	fp, r0
 8007b82:	f000 fb33 	bl	80081ec <__mcmp>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	dc02      	bgt.n	8007b92 <_dtoa_r+0xaba>
 8007b8c:	d1de      	bne.n	8007b4c <_dtoa_r+0xa74>
 8007b8e:	07da      	lsls	r2, r3, #31
 8007b90:	d5dc      	bpl.n	8007b4c <_dtoa_r+0xa74>
 8007b92:	2b39      	cmp	r3, #57	; 0x39
 8007b94:	d1d8      	bne.n	8007b48 <_dtoa_r+0xa70>
 8007b96:	2339      	movs	r3, #57	; 0x39
 8007b98:	9a04      	ldr	r2, [sp, #16]
 8007b9a:	7013      	strb	r3, [r2, #0]
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	2a39      	cmp	r2, #57	; 0x39
 8007ba8:	d050      	beq.n	8007c4c <_dtoa_r+0xb74>
 8007baa:	3201      	adds	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e747      	b.n	8007a40 <_dtoa_r+0x968>
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	dd03      	ble.n	8007bbc <_dtoa_r+0xae4>
 8007bb4:	2b39      	cmp	r3, #57	; 0x39
 8007bb6:	d0ee      	beq.n	8007b96 <_dtoa_r+0xabe>
 8007bb8:	3301      	adds	r3, #1
 8007bba:	e7c7      	b.n	8007b4c <_dtoa_r+0xa74>
 8007bbc:	9a08      	ldr	r2, [sp, #32]
 8007bbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007bc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d02a      	beq.n	8007c1e <_dtoa_r+0xb46>
 8007bc8:	4659      	mov	r1, fp
 8007bca:	2300      	movs	r3, #0
 8007bcc:	220a      	movs	r2, #10
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f8f0 	bl	8007db4 <__multadd>
 8007bd4:	45b0      	cmp	r8, r6
 8007bd6:	4683      	mov	fp, r0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	f04f 020a 	mov.w	r2, #10
 8007be0:	4641      	mov	r1, r8
 8007be2:	4628      	mov	r0, r5
 8007be4:	d107      	bne.n	8007bf6 <_dtoa_r+0xb1e>
 8007be6:	f000 f8e5 	bl	8007db4 <__multadd>
 8007bea:	4680      	mov	r8, r0
 8007bec:	4606      	mov	r6, r0
 8007bee:	9b08      	ldr	r3, [sp, #32]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	e775      	b.n	8007ae2 <_dtoa_r+0xa0a>
 8007bf6:	f000 f8dd 	bl	8007db4 <__multadd>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	220a      	movs	r2, #10
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f8d6 	bl	8007db4 <__multadd>
 8007c08:	4606      	mov	r6, r0
 8007c0a:	e7f0      	b.n	8007bee <_dtoa_r+0xb16>
 8007c0c:	f1b9 0f00 	cmp.w	r9, #0
 8007c10:	bfcc      	ite	gt
 8007c12:	464f      	movgt	r7, r9
 8007c14:	2701      	movle	r7, #1
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	9a03      	ldr	r2, [sp, #12]
 8007c1c:	4417      	add	r7, r2
 8007c1e:	4659      	mov	r1, fp
 8007c20:	2201      	movs	r2, #1
 8007c22:	4628      	mov	r0, r5
 8007c24:	9308      	str	r3, [sp, #32]
 8007c26:	f000 fa71 	bl	800810c <__lshift>
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4683      	mov	fp, r0
 8007c2e:	f000 fadd 	bl	80081ec <__mcmp>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	dcb2      	bgt.n	8007b9c <_dtoa_r+0xac4>
 8007c36:	d102      	bne.n	8007c3e <_dtoa_r+0xb66>
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	07db      	lsls	r3, r3, #31
 8007c3c:	d4ae      	bmi.n	8007b9c <_dtoa_r+0xac4>
 8007c3e:	463b      	mov	r3, r7
 8007c40:	461f      	mov	r7, r3
 8007c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c46:	2a30      	cmp	r2, #48	; 0x30
 8007c48:	d0fa      	beq.n	8007c40 <_dtoa_r+0xb68>
 8007c4a:	e6f9      	b.n	8007a40 <_dtoa_r+0x968>
 8007c4c:	9a03      	ldr	r2, [sp, #12]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d1a5      	bne.n	8007b9e <_dtoa_r+0xac6>
 8007c52:	2331      	movs	r3, #49	; 0x31
 8007c54:	f10a 0a01 	add.w	sl, sl, #1
 8007c58:	e779      	b.n	8007b4e <_dtoa_r+0xa76>
 8007c5a:	4b14      	ldr	r3, [pc, #80]	; (8007cac <_dtoa_r+0xbd4>)
 8007c5c:	f7ff baa8 	b.w	80071b0 <_dtoa_r+0xd8>
 8007c60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f47f aa81 	bne.w	800716a <_dtoa_r+0x92>
 8007c68:	4b11      	ldr	r3, [pc, #68]	; (8007cb0 <_dtoa_r+0xbd8>)
 8007c6a:	f7ff baa1 	b.w	80071b0 <_dtoa_r+0xd8>
 8007c6e:	f1b9 0f00 	cmp.w	r9, #0
 8007c72:	dc03      	bgt.n	8007c7c <_dtoa_r+0xba4>
 8007c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	f73f aecb 	bgt.w	8007a12 <_dtoa_r+0x93a>
 8007c7c:	9f03      	ldr	r7, [sp, #12]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4658      	mov	r0, fp
 8007c82:	f7ff f99d 	bl	8006fc0 <quorem>
 8007c86:	9a03      	ldr	r2, [sp, #12]
 8007c88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c8c:	f807 3b01 	strb.w	r3, [r7], #1
 8007c90:	1aba      	subs	r2, r7, r2
 8007c92:	4591      	cmp	r9, r2
 8007c94:	ddba      	ble.n	8007c0c <_dtoa_r+0xb34>
 8007c96:	4659      	mov	r1, fp
 8007c98:	2300      	movs	r3, #0
 8007c9a:	220a      	movs	r2, #10
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f889 	bl	8007db4 <__multadd>
 8007ca2:	4683      	mov	fp, r0
 8007ca4:	e7eb      	b.n	8007c7e <_dtoa_r+0xba6>
 8007ca6:	bf00      	nop
 8007ca8:	080094c7 	.word	0x080094c7
 8007cac:	08009424 	.word	0x08009424
 8007cb0:	08009448 	.word	0x08009448

08007cb4 <_localeconv_r>:
 8007cb4:	4800      	ldr	r0, [pc, #0]	; (8007cb8 <_localeconv_r+0x4>)
 8007cb6:	4770      	bx	lr
 8007cb8:	20000160 	.word	0x20000160

08007cbc <memchr>:
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	b2c9      	uxtb	r1, r1
 8007cc2:	4402      	add	r2, r0
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	d101      	bne.n	8007cce <memchr+0x12>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e003      	b.n	8007cd6 <memchr+0x1a>
 8007cce:	7804      	ldrb	r4, [r0, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	428c      	cmp	r4, r1
 8007cd4:	d1f6      	bne.n	8007cc4 <memchr+0x8>
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <__malloc_lock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__malloc_lock+0x8>)
 8007cda:	f000 bd2c 	b.w	8008736 <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000db4 	.word	0x20000db4

08007ce4 <__malloc_unlock>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__malloc_unlock+0x8>)
 8007ce6:	f000 bd27 	b.w	8008738 <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20000db4 	.word	0x20000db4

08007cf0 <_Balloc>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	b976      	cbnz	r6, 8007d18 <_Balloc+0x28>
 8007cfa:	2010      	movs	r0, #16
 8007cfc:	f7fe fba2 	bl	8006444 <malloc>
 8007d00:	4602      	mov	r2, r0
 8007d02:	6260      	str	r0, [r4, #36]	; 0x24
 8007d04:	b920      	cbnz	r0, 8007d10 <_Balloc+0x20>
 8007d06:	2166      	movs	r1, #102	; 0x66
 8007d08:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <_Balloc+0x78>)
 8007d0a:	4818      	ldr	r0, [pc, #96]	; (8007d6c <_Balloc+0x7c>)
 8007d0c:	f000 fce2 	bl	80086d4 <__assert_func>
 8007d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d14:	6006      	str	r6, [r0, #0]
 8007d16:	60c6      	str	r6, [r0, #12]
 8007d18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d1a:	68f3      	ldr	r3, [r6, #12]
 8007d1c:	b183      	cbz	r3, 8007d40 <_Balloc+0x50>
 8007d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d26:	b9b8      	cbnz	r0, 8007d58 <_Balloc+0x68>
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d2e:	1d72      	adds	r2, r6, #5
 8007d30:	4620      	mov	r0, r4
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	f000 fb5e 	bl	80083f4 <_calloc_r>
 8007d38:	b160      	cbz	r0, 8007d54 <_Balloc+0x64>
 8007d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d3e:	e00e      	b.n	8007d5e <_Balloc+0x6e>
 8007d40:	2221      	movs	r2, #33	; 0x21
 8007d42:	2104      	movs	r1, #4
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 fb55 	bl	80083f4 <_calloc_r>
 8007d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d4c:	60f0      	str	r0, [r6, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e4      	bne.n	8007d1e <_Balloc+0x2e>
 8007d54:	2000      	movs	r0, #0
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	6802      	ldr	r2, [r0, #0]
 8007d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d64:	e7f7      	b.n	8007d56 <_Balloc+0x66>
 8007d66:	bf00      	nop
 8007d68:	08009455 	.word	0x08009455
 8007d6c:	080094d8 	.word	0x080094d8

08007d70 <_Bfree>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d74:	4605      	mov	r5, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	b976      	cbnz	r6, 8007d98 <_Bfree+0x28>
 8007d7a:	2010      	movs	r0, #16
 8007d7c:	f7fe fb62 	bl	8006444 <malloc>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6268      	str	r0, [r5, #36]	; 0x24
 8007d84:	b920      	cbnz	r0, 8007d90 <_Bfree+0x20>
 8007d86:	218a      	movs	r1, #138	; 0x8a
 8007d88:	4b08      	ldr	r3, [pc, #32]	; (8007dac <_Bfree+0x3c>)
 8007d8a:	4809      	ldr	r0, [pc, #36]	; (8007db0 <_Bfree+0x40>)
 8007d8c:	f000 fca2 	bl	80086d4 <__assert_func>
 8007d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d94:	6006      	str	r6, [r0, #0]
 8007d96:	60c6      	str	r6, [r0, #12]
 8007d98:	b13c      	cbz	r4, 8007daa <_Bfree+0x3a>
 8007d9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d9c:	6862      	ldr	r2, [r4, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007da4:	6021      	str	r1, [r4, #0]
 8007da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	08009455 	.word	0x08009455
 8007db0:	080094d8 	.word	0x080094d8

08007db4 <__multadd>:
 8007db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db8:	4607      	mov	r7, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	461e      	mov	r6, r3
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	690d      	ldr	r5, [r1, #16]
 8007dc2:	f101 0c14 	add.w	ip, r1, #20
 8007dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8007dca:	3001      	adds	r0, #1
 8007dcc:	b299      	uxth	r1, r3
 8007dce:	fb02 6101 	mla	r1, r2, r1, r6
 8007dd2:	0c1e      	lsrs	r6, r3, #16
 8007dd4:	0c0b      	lsrs	r3, r1, #16
 8007dd6:	fb02 3306 	mla	r3, r2, r6, r3
 8007dda:	b289      	uxth	r1, r1
 8007ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007de0:	4285      	cmp	r5, r0
 8007de2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007de6:	f84c 1b04 	str.w	r1, [ip], #4
 8007dea:	dcec      	bgt.n	8007dc6 <__multadd+0x12>
 8007dec:	b30e      	cbz	r6, 8007e32 <__multadd+0x7e>
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	42ab      	cmp	r3, r5
 8007df2:	dc19      	bgt.n	8007e28 <__multadd+0x74>
 8007df4:	6861      	ldr	r1, [r4, #4]
 8007df6:	4638      	mov	r0, r7
 8007df8:	3101      	adds	r1, #1
 8007dfa:	f7ff ff79 	bl	8007cf0 <_Balloc>
 8007dfe:	4680      	mov	r8, r0
 8007e00:	b928      	cbnz	r0, 8007e0e <__multadd+0x5a>
 8007e02:	4602      	mov	r2, r0
 8007e04:	21b5      	movs	r1, #181	; 0xb5
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <__multadd+0x84>)
 8007e08:	480c      	ldr	r0, [pc, #48]	; (8007e3c <__multadd+0x88>)
 8007e0a:	f000 fc63 	bl	80086d4 <__assert_func>
 8007e0e:	6922      	ldr	r2, [r4, #16]
 8007e10:	f104 010c 	add.w	r1, r4, #12
 8007e14:	3202      	adds	r2, #2
 8007e16:	0092      	lsls	r2, r2, #2
 8007e18:	300c      	adds	r0, #12
 8007e1a:	f7fe fb1b 	bl	8006454 <memcpy>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7ff ffa5 	bl	8007d70 <_Bfree>
 8007e26:	4644      	mov	r4, r8
 8007e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	615e      	str	r6, [r3, #20]
 8007e30:	6125      	str	r5, [r4, #16]
 8007e32:	4620      	mov	r0, r4
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e38:	080094c7 	.word	0x080094c7
 8007e3c:	080094d8 	.word	0x080094d8

08007e40 <__hi0bits>:
 8007e40:	0c02      	lsrs	r2, r0, #16
 8007e42:	0412      	lsls	r2, r2, #16
 8007e44:	4603      	mov	r3, r0
 8007e46:	b9ca      	cbnz	r2, 8007e7c <__hi0bits+0x3c>
 8007e48:	0403      	lsls	r3, r0, #16
 8007e4a:	2010      	movs	r0, #16
 8007e4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e50:	bf04      	itt	eq
 8007e52:	021b      	lsleq	r3, r3, #8
 8007e54:	3008      	addeq	r0, #8
 8007e56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e5a:	bf04      	itt	eq
 8007e5c:	011b      	lsleq	r3, r3, #4
 8007e5e:	3004      	addeq	r0, #4
 8007e60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e64:	bf04      	itt	eq
 8007e66:	009b      	lsleq	r3, r3, #2
 8007e68:	3002      	addeq	r0, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	db05      	blt.n	8007e7a <__hi0bits+0x3a>
 8007e6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e72:	f100 0001 	add.w	r0, r0, #1
 8007e76:	bf08      	it	eq
 8007e78:	2020      	moveq	r0, #32
 8007e7a:	4770      	bx	lr
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e7e5      	b.n	8007e4c <__hi0bits+0xc>

08007e80 <__lo0bits>:
 8007e80:	6803      	ldr	r3, [r0, #0]
 8007e82:	4602      	mov	r2, r0
 8007e84:	f013 0007 	ands.w	r0, r3, #7
 8007e88:	d00b      	beq.n	8007ea2 <__lo0bits+0x22>
 8007e8a:	07d9      	lsls	r1, r3, #31
 8007e8c:	d421      	bmi.n	8007ed2 <__lo0bits+0x52>
 8007e8e:	0798      	lsls	r0, r3, #30
 8007e90:	bf49      	itett	mi
 8007e92:	085b      	lsrmi	r3, r3, #1
 8007e94:	089b      	lsrpl	r3, r3, #2
 8007e96:	2001      	movmi	r0, #1
 8007e98:	6013      	strmi	r3, [r2, #0]
 8007e9a:	bf5c      	itt	pl
 8007e9c:	2002      	movpl	r0, #2
 8007e9e:	6013      	strpl	r3, [r2, #0]
 8007ea0:	4770      	bx	lr
 8007ea2:	b299      	uxth	r1, r3
 8007ea4:	b909      	cbnz	r1, 8007eaa <__lo0bits+0x2a>
 8007ea6:	2010      	movs	r0, #16
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	b2d9      	uxtb	r1, r3
 8007eac:	b909      	cbnz	r1, 8007eb2 <__lo0bits+0x32>
 8007eae:	3008      	adds	r0, #8
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	0719      	lsls	r1, r3, #28
 8007eb4:	bf04      	itt	eq
 8007eb6:	091b      	lsreq	r3, r3, #4
 8007eb8:	3004      	addeq	r0, #4
 8007eba:	0799      	lsls	r1, r3, #30
 8007ebc:	bf04      	itt	eq
 8007ebe:	089b      	lsreq	r3, r3, #2
 8007ec0:	3002      	addeq	r0, #2
 8007ec2:	07d9      	lsls	r1, r3, #31
 8007ec4:	d403      	bmi.n	8007ece <__lo0bits+0x4e>
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	f100 0001 	add.w	r0, r0, #1
 8007ecc:	d003      	beq.n	8007ed6 <__lo0bits+0x56>
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	4770      	bx	lr
 8007ed6:	2020      	movs	r0, #32
 8007ed8:	4770      	bx	lr
	...

08007edc <__i2b>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	460c      	mov	r4, r1
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	f7ff ff05 	bl	8007cf0 <_Balloc>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	b928      	cbnz	r0, 8007ef6 <__i2b+0x1a>
 8007eea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__i2b+0x24>)
 8007ef0:	4804      	ldr	r0, [pc, #16]	; (8007f04 <__i2b+0x28>)
 8007ef2:	f000 fbef 	bl	80086d4 <__assert_func>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	6144      	str	r4, [r0, #20]
 8007efa:	6103      	str	r3, [r0, #16]
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	080094c7 	.word	0x080094c7
 8007f04:	080094d8 	.word	0x080094d8

08007f08 <__multiply>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4691      	mov	r9, r2
 8007f0e:	690a      	ldr	r2, [r1, #16]
 8007f10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f14:	460c      	mov	r4, r1
 8007f16:	429a      	cmp	r2, r3
 8007f18:	bfbe      	ittt	lt
 8007f1a:	460b      	movlt	r3, r1
 8007f1c:	464c      	movlt	r4, r9
 8007f1e:	4699      	movlt	r9, r3
 8007f20:	6927      	ldr	r7, [r4, #16]
 8007f22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f26:	68a3      	ldr	r3, [r4, #8]
 8007f28:	6861      	ldr	r1, [r4, #4]
 8007f2a:	eb07 060a 	add.w	r6, r7, sl
 8007f2e:	42b3      	cmp	r3, r6
 8007f30:	b085      	sub	sp, #20
 8007f32:	bfb8      	it	lt
 8007f34:	3101      	addlt	r1, #1
 8007f36:	f7ff fedb 	bl	8007cf0 <_Balloc>
 8007f3a:	b930      	cbnz	r0, 8007f4a <__multiply+0x42>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	f240 115d 	movw	r1, #349	; 0x15d
 8007f42:	4b43      	ldr	r3, [pc, #268]	; (8008050 <__multiply+0x148>)
 8007f44:	4843      	ldr	r0, [pc, #268]	; (8008054 <__multiply+0x14c>)
 8007f46:	f000 fbc5 	bl	80086d4 <__assert_func>
 8007f4a:	f100 0514 	add.w	r5, r0, #20
 8007f4e:	462b      	mov	r3, r5
 8007f50:	2200      	movs	r2, #0
 8007f52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f56:	4543      	cmp	r3, r8
 8007f58:	d321      	bcc.n	8007f9e <__multiply+0x96>
 8007f5a:	f104 0314 	add.w	r3, r4, #20
 8007f5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f62:	f109 0314 	add.w	r3, r9, #20
 8007f66:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f6a:	9202      	str	r2, [sp, #8]
 8007f6c:	1b3a      	subs	r2, r7, r4
 8007f6e:	3a15      	subs	r2, #21
 8007f70:	f022 0203 	bic.w	r2, r2, #3
 8007f74:	3204      	adds	r2, #4
 8007f76:	f104 0115 	add.w	r1, r4, #21
 8007f7a:	428f      	cmp	r7, r1
 8007f7c:	bf38      	it	cc
 8007f7e:	2204      	movcc	r2, #4
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9a02      	ldr	r2, [sp, #8]
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d80c      	bhi.n	8007fa4 <__multiply+0x9c>
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	dd03      	ble.n	8007f96 <__multiply+0x8e>
 8007f8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d059      	beq.n	800804a <__multiply+0x142>
 8007f96:	6106      	str	r6, [r0, #16]
 8007f98:	b005      	add	sp, #20
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9e:	f843 2b04 	str.w	r2, [r3], #4
 8007fa2:	e7d8      	b.n	8007f56 <__multiply+0x4e>
 8007fa4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	d023      	beq.n	8007ff6 <__multiply+0xee>
 8007fae:	46a9      	mov	r9, r5
 8007fb0:	f04f 0c00 	mov.w	ip, #0
 8007fb4:	f104 0e14 	add.w	lr, r4, #20
 8007fb8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fbc:	f8d9 1000 	ldr.w	r1, [r9]
 8007fc0:	fa1f fb82 	uxth.w	fp, r2
 8007fc4:	b289      	uxth	r1, r1
 8007fc6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fca:	4461      	add	r1, ip
 8007fcc:	f8d9 c000 	ldr.w	ip, [r9]
 8007fd0:	0c12      	lsrs	r2, r2, #16
 8007fd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007fd6:	fb0a c202 	mla	r2, sl, r2, ip
 8007fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fde:	b289      	uxth	r1, r1
 8007fe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fe4:	4577      	cmp	r7, lr
 8007fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fea:	f849 1b04 	str.w	r1, [r9], #4
 8007fee:	d8e3      	bhi.n	8007fb8 <__multiply+0xb0>
 8007ff0:	9a01      	ldr	r2, [sp, #4]
 8007ff2:	f845 c002 	str.w	ip, [r5, r2]
 8007ff6:	9a03      	ldr	r2, [sp, #12]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ffe:	f1b9 0f00 	cmp.w	r9, #0
 8008002:	d020      	beq.n	8008046 <__multiply+0x13e>
 8008004:	46ae      	mov	lr, r5
 8008006:	f04f 0a00 	mov.w	sl, #0
 800800a:	6829      	ldr	r1, [r5, #0]
 800800c:	f104 0c14 	add.w	ip, r4, #20
 8008010:	f8bc b000 	ldrh.w	fp, [ip]
 8008014:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008018:	b289      	uxth	r1, r1
 800801a:	fb09 220b 	mla	r2, r9, fp, r2
 800801e:	4492      	add	sl, r2
 8008020:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008024:	f84e 1b04 	str.w	r1, [lr], #4
 8008028:	f85c 2b04 	ldr.w	r2, [ip], #4
 800802c:	f8be 1000 	ldrh.w	r1, [lr]
 8008030:	0c12      	lsrs	r2, r2, #16
 8008032:	fb09 1102 	mla	r1, r9, r2, r1
 8008036:	4567      	cmp	r7, ip
 8008038:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800803c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008040:	d8e6      	bhi.n	8008010 <__multiply+0x108>
 8008042:	9a01      	ldr	r2, [sp, #4]
 8008044:	50a9      	str	r1, [r5, r2]
 8008046:	3504      	adds	r5, #4
 8008048:	e79b      	b.n	8007f82 <__multiply+0x7a>
 800804a:	3e01      	subs	r6, #1
 800804c:	e79d      	b.n	8007f8a <__multiply+0x82>
 800804e:	bf00      	nop
 8008050:	080094c7 	.word	0x080094c7
 8008054:	080094d8 	.word	0x080094d8

08008058 <__pow5mult>:
 8008058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800805c:	4615      	mov	r5, r2
 800805e:	f012 0203 	ands.w	r2, r2, #3
 8008062:	4606      	mov	r6, r0
 8008064:	460f      	mov	r7, r1
 8008066:	d007      	beq.n	8008078 <__pow5mult+0x20>
 8008068:	4c25      	ldr	r4, [pc, #148]	; (8008100 <__pow5mult+0xa8>)
 800806a:	3a01      	subs	r2, #1
 800806c:	2300      	movs	r3, #0
 800806e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008072:	f7ff fe9f 	bl	8007db4 <__multadd>
 8008076:	4607      	mov	r7, r0
 8008078:	10ad      	asrs	r5, r5, #2
 800807a:	d03d      	beq.n	80080f8 <__pow5mult+0xa0>
 800807c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800807e:	b97c      	cbnz	r4, 80080a0 <__pow5mult+0x48>
 8008080:	2010      	movs	r0, #16
 8008082:	f7fe f9df 	bl	8006444 <malloc>
 8008086:	4602      	mov	r2, r0
 8008088:	6270      	str	r0, [r6, #36]	; 0x24
 800808a:	b928      	cbnz	r0, 8008098 <__pow5mult+0x40>
 800808c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008090:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <__pow5mult+0xac>)
 8008092:	481d      	ldr	r0, [pc, #116]	; (8008108 <__pow5mult+0xb0>)
 8008094:	f000 fb1e 	bl	80086d4 <__assert_func>
 8008098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800809c:	6004      	str	r4, [r0, #0]
 800809e:	60c4      	str	r4, [r0, #12]
 80080a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080a8:	b94c      	cbnz	r4, 80080be <__pow5mult+0x66>
 80080aa:	f240 2171 	movw	r1, #625	; 0x271
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff ff14 	bl	8007edc <__i2b>
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	f04f 0900 	mov.w	r9, #0
 80080c2:	07eb      	lsls	r3, r5, #31
 80080c4:	d50a      	bpl.n	80080dc <__pow5mult+0x84>
 80080c6:	4639      	mov	r1, r7
 80080c8:	4622      	mov	r2, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	f7ff ff1c 	bl	8007f08 <__multiply>
 80080d0:	4680      	mov	r8, r0
 80080d2:	4639      	mov	r1, r7
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff fe4b 	bl	8007d70 <_Bfree>
 80080da:	4647      	mov	r7, r8
 80080dc:	106d      	asrs	r5, r5, #1
 80080de:	d00b      	beq.n	80080f8 <__pow5mult+0xa0>
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	b938      	cbnz	r0, 80080f4 <__pow5mult+0x9c>
 80080e4:	4622      	mov	r2, r4
 80080e6:	4621      	mov	r1, r4
 80080e8:	4630      	mov	r0, r6
 80080ea:	f7ff ff0d 	bl	8007f08 <__multiply>
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	f8c0 9000 	str.w	r9, [r0]
 80080f4:	4604      	mov	r4, r0
 80080f6:	e7e4      	b.n	80080c2 <__pow5mult+0x6a>
 80080f8:	4638      	mov	r0, r7
 80080fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fe:	bf00      	nop
 8008100:	08009628 	.word	0x08009628
 8008104:	08009455 	.word	0x08009455
 8008108:	080094d8 	.word	0x080094d8

0800810c <__lshift>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	460c      	mov	r4, r1
 8008112:	4607      	mov	r7, r0
 8008114:	4691      	mov	r9, r2
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6849      	ldr	r1, [r1, #4]
 800811a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008124:	f108 0601 	add.w	r6, r8, #1
 8008128:	42b3      	cmp	r3, r6
 800812a:	db0b      	blt.n	8008144 <__lshift+0x38>
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff fddf 	bl	8007cf0 <_Balloc>
 8008132:	4605      	mov	r5, r0
 8008134:	b948      	cbnz	r0, 800814a <__lshift+0x3e>
 8008136:	4602      	mov	r2, r0
 8008138:	f240 11d9 	movw	r1, #473	; 0x1d9
 800813c:	4b29      	ldr	r3, [pc, #164]	; (80081e4 <__lshift+0xd8>)
 800813e:	482a      	ldr	r0, [pc, #168]	; (80081e8 <__lshift+0xdc>)
 8008140:	f000 fac8 	bl	80086d4 <__assert_func>
 8008144:	3101      	adds	r1, #1
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	e7ee      	b.n	8008128 <__lshift+0x1c>
 800814a:	2300      	movs	r3, #0
 800814c:	f100 0114 	add.w	r1, r0, #20
 8008150:	f100 0210 	add.w	r2, r0, #16
 8008154:	4618      	mov	r0, r3
 8008156:	4553      	cmp	r3, sl
 8008158:	db37      	blt.n	80081ca <__lshift+0xbe>
 800815a:	6920      	ldr	r0, [r4, #16]
 800815c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008160:	f104 0314 	add.w	r3, r4, #20
 8008164:	f019 091f 	ands.w	r9, r9, #31
 8008168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800816c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008170:	d02f      	beq.n	80081d2 <__lshift+0xc6>
 8008172:	468a      	mov	sl, r1
 8008174:	f04f 0c00 	mov.w	ip, #0
 8008178:	f1c9 0e20 	rsb	lr, r9, #32
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	fa02 f209 	lsl.w	r2, r2, r9
 8008182:	ea42 020c 	orr.w	r2, r2, ip
 8008186:	f84a 2b04 	str.w	r2, [sl], #4
 800818a:	f853 2b04 	ldr.w	r2, [r3], #4
 800818e:	4298      	cmp	r0, r3
 8008190:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008194:	d8f2      	bhi.n	800817c <__lshift+0x70>
 8008196:	1b03      	subs	r3, r0, r4
 8008198:	3b15      	subs	r3, #21
 800819a:	f023 0303 	bic.w	r3, r3, #3
 800819e:	3304      	adds	r3, #4
 80081a0:	f104 0215 	add.w	r2, r4, #21
 80081a4:	4290      	cmp	r0, r2
 80081a6:	bf38      	it	cc
 80081a8:	2304      	movcc	r3, #4
 80081aa:	f841 c003 	str.w	ip, [r1, r3]
 80081ae:	f1bc 0f00 	cmp.w	ip, #0
 80081b2:	d001      	beq.n	80081b8 <__lshift+0xac>
 80081b4:	f108 0602 	add.w	r6, r8, #2
 80081b8:	3e01      	subs	r6, #1
 80081ba:	4638      	mov	r0, r7
 80081bc:	4621      	mov	r1, r4
 80081be:	612e      	str	r6, [r5, #16]
 80081c0:	f7ff fdd6 	bl	8007d70 <_Bfree>
 80081c4:	4628      	mov	r0, r5
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ce:	3301      	adds	r3, #1
 80081d0:	e7c1      	b.n	8008156 <__lshift+0x4a>
 80081d2:	3904      	subs	r1, #4
 80081d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d8:	4298      	cmp	r0, r3
 80081da:	f841 2f04 	str.w	r2, [r1, #4]!
 80081de:	d8f9      	bhi.n	80081d4 <__lshift+0xc8>
 80081e0:	e7ea      	b.n	80081b8 <__lshift+0xac>
 80081e2:	bf00      	nop
 80081e4:	080094c7 	.word	0x080094c7
 80081e8:	080094d8 	.word	0x080094d8

080081ec <__mcmp>:
 80081ec:	4603      	mov	r3, r0
 80081ee:	690a      	ldr	r2, [r1, #16]
 80081f0:	6900      	ldr	r0, [r0, #16]
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	1a80      	subs	r0, r0, r2
 80081f6:	d10d      	bne.n	8008214 <__mcmp+0x28>
 80081f8:	3314      	adds	r3, #20
 80081fa:	3114      	adds	r1, #20
 80081fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800820c:	4295      	cmp	r5, r2
 800820e:	d002      	beq.n	8008216 <__mcmp+0x2a>
 8008210:	d304      	bcc.n	800821c <__mcmp+0x30>
 8008212:	2001      	movs	r0, #1
 8008214:	bd30      	pop	{r4, r5, pc}
 8008216:	42a3      	cmp	r3, r4
 8008218:	d3f4      	bcc.n	8008204 <__mcmp+0x18>
 800821a:	e7fb      	b.n	8008214 <__mcmp+0x28>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e7f8      	b.n	8008214 <__mcmp+0x28>
	...

08008224 <__mdiff>:
 8008224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	460d      	mov	r5, r1
 800822a:	4607      	mov	r7, r0
 800822c:	4611      	mov	r1, r2
 800822e:	4628      	mov	r0, r5
 8008230:	4614      	mov	r4, r2
 8008232:	f7ff ffdb 	bl	80081ec <__mcmp>
 8008236:	1e06      	subs	r6, r0, #0
 8008238:	d111      	bne.n	800825e <__mdiff+0x3a>
 800823a:	4631      	mov	r1, r6
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff fd57 	bl	8007cf0 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__mdiff+0x2e>
 8008246:	f240 2132 	movw	r1, #562	; 0x232
 800824a:	4b3a      	ldr	r3, [pc, #232]	; (8008334 <__mdiff+0x110>)
 800824c:	483a      	ldr	r0, [pc, #232]	; (8008338 <__mdiff+0x114>)
 800824e:	f000 fa41 	bl	80086d4 <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008258:	4610      	mov	r0, r2
 800825a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825e:	bfa4      	itt	ge
 8008260:	4623      	movge	r3, r4
 8008262:	462c      	movge	r4, r5
 8008264:	4638      	mov	r0, r7
 8008266:	6861      	ldr	r1, [r4, #4]
 8008268:	bfa6      	itte	ge
 800826a:	461d      	movge	r5, r3
 800826c:	2600      	movge	r6, #0
 800826e:	2601      	movlt	r6, #1
 8008270:	f7ff fd3e 	bl	8007cf0 <_Balloc>
 8008274:	4602      	mov	r2, r0
 8008276:	b918      	cbnz	r0, 8008280 <__mdiff+0x5c>
 8008278:	f44f 7110 	mov.w	r1, #576	; 0x240
 800827c:	4b2d      	ldr	r3, [pc, #180]	; (8008334 <__mdiff+0x110>)
 800827e:	e7e5      	b.n	800824c <__mdiff+0x28>
 8008280:	f102 0814 	add.w	r8, r2, #20
 8008284:	46c2      	mov	sl, r8
 8008286:	f04f 0c00 	mov.w	ip, #0
 800828a:	6927      	ldr	r7, [r4, #16]
 800828c:	60c6      	str	r6, [r0, #12]
 800828e:	692e      	ldr	r6, [r5, #16]
 8008290:	f104 0014 	add.w	r0, r4, #20
 8008294:	f105 0914 	add.w	r9, r5, #20
 8008298:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800829c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082a0:	3410      	adds	r4, #16
 80082a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80082a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80082aa:	fa1f f18b 	uxth.w	r1, fp
 80082ae:	448c      	add	ip, r1
 80082b0:	b299      	uxth	r1, r3
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	ebac 0101 	sub.w	r1, ip, r1
 80082b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082c0:	b289      	uxth	r1, r1
 80082c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082c6:	454e      	cmp	r6, r9
 80082c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80082cc:	f84a 3b04 	str.w	r3, [sl], #4
 80082d0:	d8e7      	bhi.n	80082a2 <__mdiff+0x7e>
 80082d2:	1b73      	subs	r3, r6, r5
 80082d4:	3b15      	subs	r3, #21
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	3515      	adds	r5, #21
 80082dc:	3304      	adds	r3, #4
 80082de:	42ae      	cmp	r6, r5
 80082e0:	bf38      	it	cc
 80082e2:	2304      	movcc	r3, #4
 80082e4:	4418      	add	r0, r3
 80082e6:	4443      	add	r3, r8
 80082e8:	461e      	mov	r6, r3
 80082ea:	4605      	mov	r5, r0
 80082ec:	4575      	cmp	r5, lr
 80082ee:	d30e      	bcc.n	800830e <__mdiff+0xea>
 80082f0:	f10e 0103 	add.w	r1, lr, #3
 80082f4:	1a09      	subs	r1, r1, r0
 80082f6:	f021 0103 	bic.w	r1, r1, #3
 80082fa:	3803      	subs	r0, #3
 80082fc:	4586      	cmp	lr, r0
 80082fe:	bf38      	it	cc
 8008300:	2100      	movcc	r1, #0
 8008302:	4419      	add	r1, r3
 8008304:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008308:	b18b      	cbz	r3, 800832e <__mdiff+0x10a>
 800830a:	6117      	str	r7, [r2, #16]
 800830c:	e7a4      	b.n	8008258 <__mdiff+0x34>
 800830e:	f855 8b04 	ldr.w	r8, [r5], #4
 8008312:	fa1f f188 	uxth.w	r1, r8
 8008316:	4461      	add	r1, ip
 8008318:	140c      	asrs	r4, r1, #16
 800831a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800831e:	b289      	uxth	r1, r1
 8008320:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008324:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008328:	f846 1b04 	str.w	r1, [r6], #4
 800832c:	e7de      	b.n	80082ec <__mdiff+0xc8>
 800832e:	3f01      	subs	r7, #1
 8008330:	e7e8      	b.n	8008304 <__mdiff+0xe0>
 8008332:	bf00      	nop
 8008334:	080094c7 	.word	0x080094c7
 8008338:	080094d8 	.word	0x080094d8

0800833c <__d2b>:
 800833c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008340:	2101      	movs	r1, #1
 8008342:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008346:	4690      	mov	r8, r2
 8008348:	461d      	mov	r5, r3
 800834a:	f7ff fcd1 	bl	8007cf0 <_Balloc>
 800834e:	4604      	mov	r4, r0
 8008350:	b930      	cbnz	r0, 8008360 <__d2b+0x24>
 8008352:	4602      	mov	r2, r0
 8008354:	f240 310a 	movw	r1, #778	; 0x30a
 8008358:	4b24      	ldr	r3, [pc, #144]	; (80083ec <__d2b+0xb0>)
 800835a:	4825      	ldr	r0, [pc, #148]	; (80083f0 <__d2b+0xb4>)
 800835c:	f000 f9ba 	bl	80086d4 <__assert_func>
 8008360:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008364:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008368:	bb2d      	cbnz	r5, 80083b6 <__d2b+0x7a>
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	f1b8 0300 	subs.w	r3, r8, #0
 8008370:	d026      	beq.n	80083c0 <__d2b+0x84>
 8008372:	4668      	mov	r0, sp
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	f7ff fd83 	bl	8007e80 <__lo0bits>
 800837a:	9900      	ldr	r1, [sp, #0]
 800837c:	b1f0      	cbz	r0, 80083bc <__d2b+0x80>
 800837e:	9a01      	ldr	r2, [sp, #4]
 8008380:	f1c0 0320 	rsb	r3, r0, #32
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	430b      	orrs	r3, r1
 800838a:	40c2      	lsrs	r2, r0
 800838c:	6163      	str	r3, [r4, #20]
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	bf14      	ite	ne
 8008396:	2102      	movne	r1, #2
 8008398:	2101      	moveq	r1, #1
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	6121      	str	r1, [r4, #16]
 800839e:	b1c5      	cbz	r5, 80083d2 <__d2b+0x96>
 80083a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083a4:	4405      	add	r5, r0
 80083a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083aa:	603d      	str	r5, [r7, #0]
 80083ac:	6030      	str	r0, [r6, #0]
 80083ae:	4620      	mov	r0, r4
 80083b0:	b002      	add	sp, #8
 80083b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ba:	e7d6      	b.n	800836a <__d2b+0x2e>
 80083bc:	6161      	str	r1, [r4, #20]
 80083be:	e7e7      	b.n	8008390 <__d2b+0x54>
 80083c0:	a801      	add	r0, sp, #4
 80083c2:	f7ff fd5d 	bl	8007e80 <__lo0bits>
 80083c6:	2101      	movs	r1, #1
 80083c8:	9b01      	ldr	r3, [sp, #4]
 80083ca:	6121      	str	r1, [r4, #16]
 80083cc:	6163      	str	r3, [r4, #20]
 80083ce:	3020      	adds	r0, #32
 80083d0:	e7e5      	b.n	800839e <__d2b+0x62>
 80083d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80083d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083da:	6038      	str	r0, [r7, #0]
 80083dc:	6918      	ldr	r0, [r3, #16]
 80083de:	f7ff fd2f 	bl	8007e40 <__hi0bits>
 80083e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80083e6:	6031      	str	r1, [r6, #0]
 80083e8:	e7e1      	b.n	80083ae <__d2b+0x72>
 80083ea:	bf00      	nop
 80083ec:	080094c7 	.word	0x080094c7
 80083f0:	080094d8 	.word	0x080094d8

080083f4 <_calloc_r>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	fba1 5402 	umull	r5, r4, r1, r2
 80083fa:	b934      	cbnz	r4, 800840a <_calloc_r+0x16>
 80083fc:	4629      	mov	r1, r5
 80083fe:	f7fe f8a7 	bl	8006550 <_malloc_r>
 8008402:	4606      	mov	r6, r0
 8008404:	b928      	cbnz	r0, 8008412 <_calloc_r+0x1e>
 8008406:	4630      	mov	r0, r6
 8008408:	bd70      	pop	{r4, r5, r6, pc}
 800840a:	220c      	movs	r2, #12
 800840c:	2600      	movs	r6, #0
 800840e:	6002      	str	r2, [r0, #0]
 8008410:	e7f9      	b.n	8008406 <_calloc_r+0x12>
 8008412:	462a      	mov	r2, r5
 8008414:	4621      	mov	r1, r4
 8008416:	f7fe f82b 	bl	8006470 <memset>
 800841a:	e7f4      	b.n	8008406 <_calloc_r+0x12>

0800841c <__ssputs_r>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	688e      	ldr	r6, [r1, #8]
 8008422:	4682      	mov	sl, r0
 8008424:	429e      	cmp	r6, r3
 8008426:	460c      	mov	r4, r1
 8008428:	4690      	mov	r8, r2
 800842a:	461f      	mov	r7, r3
 800842c:	d838      	bhi.n	80084a0 <__ssputs_r+0x84>
 800842e:	898a      	ldrh	r2, [r1, #12]
 8008430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008434:	d032      	beq.n	800849c <__ssputs_r+0x80>
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	6909      	ldr	r1, [r1, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	eba5 0901 	sub.w	r9, r5, r1
 8008440:	6965      	ldr	r5, [r4, #20]
 8008442:	444b      	add	r3, r9
 8008444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800844c:	106d      	asrs	r5, r5, #1
 800844e:	429d      	cmp	r5, r3
 8008450:	bf38      	it	cc
 8008452:	461d      	movcc	r5, r3
 8008454:	0553      	lsls	r3, r2, #21
 8008456:	d531      	bpl.n	80084bc <__ssputs_r+0xa0>
 8008458:	4629      	mov	r1, r5
 800845a:	f7fe f879 	bl	8006550 <_malloc_r>
 800845e:	4606      	mov	r6, r0
 8008460:	b950      	cbnz	r0, 8008478 <__ssputs_r+0x5c>
 8008462:	230c      	movs	r3, #12
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	f8ca 3000 	str.w	r3, [sl]
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	464a      	mov	r2, r9
 800847a:	6921      	ldr	r1, [r4, #16]
 800847c:	f7fd ffea 	bl	8006454 <memcpy>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	6126      	str	r6, [r4, #16]
 800848e:	444e      	add	r6, r9
 8008490:	6026      	str	r6, [r4, #0]
 8008492:	463e      	mov	r6, r7
 8008494:	6165      	str	r5, [r4, #20]
 8008496:	eba5 0509 	sub.w	r5, r5, r9
 800849a:	60a5      	str	r5, [r4, #8]
 800849c:	42be      	cmp	r6, r7
 800849e:	d900      	bls.n	80084a2 <__ssputs_r+0x86>
 80084a0:	463e      	mov	r6, r7
 80084a2:	4632      	mov	r2, r6
 80084a4:	4641      	mov	r1, r8
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	f000 f959 	bl	800875e <memmove>
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	2000      	movs	r0, #0
 80084b0:	1b9b      	subs	r3, r3, r6
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	4433      	add	r3, r6
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	e7db      	b.n	8008474 <__ssputs_r+0x58>
 80084bc:	462a      	mov	r2, r5
 80084be:	f000 f968 	bl	8008792 <_realloc_r>
 80084c2:	4606      	mov	r6, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d1e1      	bne.n	800848c <__ssputs_r+0x70>
 80084c8:	4650      	mov	r0, sl
 80084ca:	6921      	ldr	r1, [r4, #16]
 80084cc:	f7fd ffd8 	bl	8006480 <_free_r>
 80084d0:	e7c7      	b.n	8008462 <__ssputs_r+0x46>
	...

080084d4 <_svfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4698      	mov	r8, r3
 80084da:	898b      	ldrh	r3, [r1, #12]
 80084dc:	4607      	mov	r7, r0
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	460d      	mov	r5, r1
 80084e2:	4614      	mov	r4, r2
 80084e4:	b09d      	sub	sp, #116	; 0x74
 80084e6:	d50e      	bpl.n	8008506 <_svfiprintf_r+0x32>
 80084e8:	690b      	ldr	r3, [r1, #16]
 80084ea:	b963      	cbnz	r3, 8008506 <_svfiprintf_r+0x32>
 80084ec:	2140      	movs	r1, #64	; 0x40
 80084ee:	f7fe f82f 	bl	8006550 <_malloc_r>
 80084f2:	6028      	str	r0, [r5, #0]
 80084f4:	6128      	str	r0, [r5, #16]
 80084f6:	b920      	cbnz	r0, 8008502 <_svfiprintf_r+0x2e>
 80084f8:	230c      	movs	r3, #12
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	e0d1      	b.n	80086a6 <_svfiprintf_r+0x1d2>
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	616b      	str	r3, [r5, #20]
 8008506:	2300      	movs	r3, #0
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	2320      	movs	r3, #32
 800850c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008510:	2330      	movs	r3, #48	; 0x30
 8008512:	f04f 0901 	mov.w	r9, #1
 8008516:	f8cd 800c 	str.w	r8, [sp, #12]
 800851a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086c0 <_svfiprintf_r+0x1ec>
 800851e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008522:	4623      	mov	r3, r4
 8008524:	469a      	mov	sl, r3
 8008526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852a:	b10a      	cbz	r2, 8008530 <_svfiprintf_r+0x5c>
 800852c:	2a25      	cmp	r2, #37	; 0x25
 800852e:	d1f9      	bne.n	8008524 <_svfiprintf_r+0x50>
 8008530:	ebba 0b04 	subs.w	fp, sl, r4
 8008534:	d00b      	beq.n	800854e <_svfiprintf_r+0x7a>
 8008536:	465b      	mov	r3, fp
 8008538:	4622      	mov	r2, r4
 800853a:	4629      	mov	r1, r5
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff6d 	bl	800841c <__ssputs_r>
 8008542:	3001      	adds	r0, #1
 8008544:	f000 80aa 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854a:	445a      	add	r2, fp
 800854c:	9209      	str	r2, [sp, #36]	; 0x24
 800854e:	f89a 3000 	ldrb.w	r3, [sl]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80a2 	beq.w	800869c <_svfiprintf_r+0x1c8>
 8008558:	2300      	movs	r3, #0
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008562:	f10a 0a01 	add.w	sl, sl, #1
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9307      	str	r3, [sp, #28]
 800856a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856e:	931a      	str	r3, [sp, #104]	; 0x68
 8008570:	4654      	mov	r4, sl
 8008572:	2205      	movs	r2, #5
 8008574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008578:	4851      	ldr	r0, [pc, #324]	; (80086c0 <_svfiprintf_r+0x1ec>)
 800857a:	f7ff fb9f 	bl	8007cbc <memchr>
 800857e:	9a04      	ldr	r2, [sp, #16]
 8008580:	b9d8      	cbnz	r0, 80085ba <_svfiprintf_r+0xe6>
 8008582:	06d0      	lsls	r0, r2, #27
 8008584:	bf44      	itt	mi
 8008586:	2320      	movmi	r3, #32
 8008588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800858c:	0711      	lsls	r1, r2, #28
 800858e:	bf44      	itt	mi
 8008590:	232b      	movmi	r3, #43	; 0x2b
 8008592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008596:	f89a 3000 	ldrb.w	r3, [sl]
 800859a:	2b2a      	cmp	r3, #42	; 0x2a
 800859c:	d015      	beq.n	80085ca <_svfiprintf_r+0xf6>
 800859e:	4654      	mov	r4, sl
 80085a0:	2000      	movs	r0, #0
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	9a07      	ldr	r2, [sp, #28]
 80085a8:	4621      	mov	r1, r4
 80085aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ae:	3b30      	subs	r3, #48	; 0x30
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d94e      	bls.n	8008652 <_svfiprintf_r+0x17e>
 80085b4:	b1b0      	cbz	r0, 80085e4 <_svfiprintf_r+0x110>
 80085b6:	9207      	str	r2, [sp, #28]
 80085b8:	e014      	b.n	80085e4 <_svfiprintf_r+0x110>
 80085ba:	eba0 0308 	sub.w	r3, r0, r8
 80085be:	fa09 f303 	lsl.w	r3, r9, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	46a2      	mov	sl, r4
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	e7d2      	b.n	8008570 <_svfiprintf_r+0x9c>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d19      	adds	r1, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9103      	str	r1, [sp, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfbb      	ittet	lt
 80085d6:	425b      	neglt	r3, r3
 80085d8:	f042 0202 	orrlt.w	r2, r2, #2
 80085dc:	9307      	strge	r3, [sp, #28]
 80085de:	9307      	strlt	r3, [sp, #28]
 80085e0:	bfb8      	it	lt
 80085e2:	9204      	strlt	r2, [sp, #16]
 80085e4:	7823      	ldrb	r3, [r4, #0]
 80085e6:	2b2e      	cmp	r3, #46	; 0x2e
 80085e8:	d10c      	bne.n	8008604 <_svfiprintf_r+0x130>
 80085ea:	7863      	ldrb	r3, [r4, #1]
 80085ec:	2b2a      	cmp	r3, #42	; 0x2a
 80085ee:	d135      	bne.n	800865c <_svfiprintf_r+0x188>
 80085f0:	9b03      	ldr	r3, [sp, #12]
 80085f2:	3402      	adds	r4, #2
 80085f4:	1d1a      	adds	r2, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9203      	str	r2, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfb8      	it	lt
 80085fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80086c4 <_svfiprintf_r+0x1f0>
 8008608:	2203      	movs	r2, #3
 800860a:	4650      	mov	r0, sl
 800860c:	7821      	ldrb	r1, [r4, #0]
 800860e:	f7ff fb55 	bl	8007cbc <memchr>
 8008612:	b140      	cbz	r0, 8008626 <_svfiprintf_r+0x152>
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	eba0 000a 	sub.w	r0, r0, sl
 800861a:	fa03 f000 	lsl.w	r0, r3, r0
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	3401      	adds	r4, #1
 8008622:	4303      	orrs	r3, r0
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	2206      	movs	r2, #6
 800862c:	4826      	ldr	r0, [pc, #152]	; (80086c8 <_svfiprintf_r+0x1f4>)
 800862e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008632:	f7ff fb43 	bl	8007cbc <memchr>
 8008636:	2800      	cmp	r0, #0
 8008638:	d038      	beq.n	80086ac <_svfiprintf_r+0x1d8>
 800863a:	4b24      	ldr	r3, [pc, #144]	; (80086cc <_svfiprintf_r+0x1f8>)
 800863c:	bb1b      	cbnz	r3, 8008686 <_svfiprintf_r+0x1b2>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	3307      	adds	r3, #7
 8008642:	f023 0307 	bic.w	r3, r3, #7
 8008646:	3308      	adds	r3, #8
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	4433      	add	r3, r6
 800864e:	9309      	str	r3, [sp, #36]	; 0x24
 8008650:	e767      	b.n	8008522 <_svfiprintf_r+0x4e>
 8008652:	460c      	mov	r4, r1
 8008654:	2001      	movs	r0, #1
 8008656:	fb0c 3202 	mla	r2, ip, r2, r3
 800865a:	e7a5      	b.n	80085a8 <_svfiprintf_r+0xd4>
 800865c:	2300      	movs	r3, #0
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	4619      	mov	r1, r3
 8008664:	3401      	adds	r4, #1
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	4620      	mov	r0, r4
 800866a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866e:	3a30      	subs	r2, #48	; 0x30
 8008670:	2a09      	cmp	r2, #9
 8008672:	d903      	bls.n	800867c <_svfiprintf_r+0x1a8>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0c5      	beq.n	8008604 <_svfiprintf_r+0x130>
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	e7c3      	b.n	8008604 <_svfiprintf_r+0x130>
 800867c:	4604      	mov	r4, r0
 800867e:	2301      	movs	r3, #1
 8008680:	fb0c 2101 	mla	r1, ip, r1, r2
 8008684:	e7f0      	b.n	8008668 <_svfiprintf_r+0x194>
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4638      	mov	r0, r7
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <_svfiprintf_r+0x1fc>)
 8008690:	a904      	add	r1, sp, #16
 8008692:	f7fe f86f 	bl	8006774 <_printf_float>
 8008696:	1c42      	adds	r2, r0, #1
 8008698:	4606      	mov	r6, r0
 800869a:	d1d6      	bne.n	800864a <_svfiprintf_r+0x176>
 800869c:	89ab      	ldrh	r3, [r5, #12]
 800869e:	065b      	lsls	r3, r3, #25
 80086a0:	f53f af2c 	bmi.w	80084fc <_svfiprintf_r+0x28>
 80086a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086a6:	b01d      	add	sp, #116	; 0x74
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4638      	mov	r0, r7
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <_svfiprintf_r+0x1fc>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	f7fe faf8 	bl	8006cac <_printf_i>
 80086bc:	e7eb      	b.n	8008696 <_svfiprintf_r+0x1c2>
 80086be:	bf00      	nop
 80086c0:	08009634 	.word	0x08009634
 80086c4:	0800963a 	.word	0x0800963a
 80086c8:	0800963e 	.word	0x0800963e
 80086cc:	08006775 	.word	0x08006775
 80086d0:	0800841d 	.word	0x0800841d

080086d4 <__assert_func>:
 80086d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d6:	4614      	mov	r4, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <__assert_func+0x2c>)
 80086dc:	4605      	mov	r5, r0
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68d8      	ldr	r0, [r3, #12]
 80086e2:	b14c      	cbz	r4, 80086f8 <__assert_func+0x24>
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <__assert_func+0x30>)
 80086e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086ea:	9100      	str	r1, [sp, #0]
 80086ec:	462b      	mov	r3, r5
 80086ee:	4906      	ldr	r1, [pc, #24]	; (8008708 <__assert_func+0x34>)
 80086f0:	f000 f80e 	bl	8008710 <fiprintf>
 80086f4:	f000 faa2 	bl	8008c3c <abort>
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <__assert_func+0x38>)
 80086fa:	461c      	mov	r4, r3
 80086fc:	e7f3      	b.n	80086e6 <__assert_func+0x12>
 80086fe:	bf00      	nop
 8008700:	2000000c 	.word	0x2000000c
 8008704:	08009645 	.word	0x08009645
 8008708:	08009652 	.word	0x08009652
 800870c:	08009680 	.word	0x08009680

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f000 f88d 	bl	8008840 <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	2000000c 	.word	0x2000000c

08008734 <__retarget_lock_init_recursive>:
 8008734:	4770      	bx	lr

08008736 <__retarget_lock_acquire_recursive>:
 8008736:	4770      	bx	lr

08008738 <__retarget_lock_release_recursive>:
 8008738:	4770      	bx	lr

0800873a <__ascii_mbtowc>:
 800873a:	b082      	sub	sp, #8
 800873c:	b901      	cbnz	r1, 8008740 <__ascii_mbtowc+0x6>
 800873e:	a901      	add	r1, sp, #4
 8008740:	b142      	cbz	r2, 8008754 <__ascii_mbtowc+0x1a>
 8008742:	b14b      	cbz	r3, 8008758 <__ascii_mbtowc+0x1e>
 8008744:	7813      	ldrb	r3, [r2, #0]
 8008746:	600b      	str	r3, [r1, #0]
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	1e10      	subs	r0, r2, #0
 800874c:	bf18      	it	ne
 800874e:	2001      	movne	r0, #1
 8008750:	b002      	add	sp, #8
 8008752:	4770      	bx	lr
 8008754:	4610      	mov	r0, r2
 8008756:	e7fb      	b.n	8008750 <__ascii_mbtowc+0x16>
 8008758:	f06f 0001 	mvn.w	r0, #1
 800875c:	e7f8      	b.n	8008750 <__ascii_mbtowc+0x16>

0800875e <memmove>:
 800875e:	4288      	cmp	r0, r1
 8008760:	b510      	push	{r4, lr}
 8008762:	eb01 0402 	add.w	r4, r1, r2
 8008766:	d902      	bls.n	800876e <memmove+0x10>
 8008768:	4284      	cmp	r4, r0
 800876a:	4623      	mov	r3, r4
 800876c:	d807      	bhi.n	800877e <memmove+0x20>
 800876e:	1e43      	subs	r3, r0, #1
 8008770:	42a1      	cmp	r1, r4
 8008772:	d008      	beq.n	8008786 <memmove+0x28>
 8008774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008778:	f803 2f01 	strb.w	r2, [r3, #1]!
 800877c:	e7f8      	b.n	8008770 <memmove+0x12>
 800877e:	4601      	mov	r1, r0
 8008780:	4402      	add	r2, r0
 8008782:	428a      	cmp	r2, r1
 8008784:	d100      	bne.n	8008788 <memmove+0x2a>
 8008786:	bd10      	pop	{r4, pc}
 8008788:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800878c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008790:	e7f7      	b.n	8008782 <memmove+0x24>

08008792 <_realloc_r>:
 8008792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008796:	4680      	mov	r8, r0
 8008798:	4614      	mov	r4, r2
 800879a:	460e      	mov	r6, r1
 800879c:	b921      	cbnz	r1, 80087a8 <_realloc_r+0x16>
 800879e:	4611      	mov	r1, r2
 80087a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a4:	f7fd bed4 	b.w	8006550 <_malloc_r>
 80087a8:	b92a      	cbnz	r2, 80087b6 <_realloc_r+0x24>
 80087aa:	f7fd fe69 	bl	8006480 <_free_r>
 80087ae:	4625      	mov	r5, r4
 80087b0:	4628      	mov	r0, r5
 80087b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b6:	f000 fc61 	bl	800907c <_malloc_usable_size_r>
 80087ba:	4284      	cmp	r4, r0
 80087bc:	4607      	mov	r7, r0
 80087be:	d802      	bhi.n	80087c6 <_realloc_r+0x34>
 80087c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087c4:	d812      	bhi.n	80087ec <_realloc_r+0x5a>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4640      	mov	r0, r8
 80087ca:	f7fd fec1 	bl	8006550 <_malloc_r>
 80087ce:	4605      	mov	r5, r0
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0ed      	beq.n	80087b0 <_realloc_r+0x1e>
 80087d4:	42bc      	cmp	r4, r7
 80087d6:	4622      	mov	r2, r4
 80087d8:	4631      	mov	r1, r6
 80087da:	bf28      	it	cs
 80087dc:	463a      	movcs	r2, r7
 80087de:	f7fd fe39 	bl	8006454 <memcpy>
 80087e2:	4631      	mov	r1, r6
 80087e4:	4640      	mov	r0, r8
 80087e6:	f7fd fe4b 	bl	8006480 <_free_r>
 80087ea:	e7e1      	b.n	80087b0 <_realloc_r+0x1e>
 80087ec:	4635      	mov	r5, r6
 80087ee:	e7df      	b.n	80087b0 <_realloc_r+0x1e>

080087f0 <__sfputc_r>:
 80087f0:	6893      	ldr	r3, [r2, #8]
 80087f2:	b410      	push	{r4}
 80087f4:	3b01      	subs	r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	6093      	str	r3, [r2, #8]
 80087fa:	da07      	bge.n	800880c <__sfputc_r+0x1c>
 80087fc:	6994      	ldr	r4, [r2, #24]
 80087fe:	42a3      	cmp	r3, r4
 8008800:	db01      	blt.n	8008806 <__sfputc_r+0x16>
 8008802:	290a      	cmp	r1, #10
 8008804:	d102      	bne.n	800880c <__sfputc_r+0x1c>
 8008806:	bc10      	pop	{r4}
 8008808:	f000 b94a 	b.w	8008aa0 <__swbuf_r>
 800880c:	6813      	ldr	r3, [r2, #0]
 800880e:	1c58      	adds	r0, r3, #1
 8008810:	6010      	str	r0, [r2, #0]
 8008812:	7019      	strb	r1, [r3, #0]
 8008814:	4608      	mov	r0, r1
 8008816:	bc10      	pop	{r4}
 8008818:	4770      	bx	lr

0800881a <__sfputs_r>:
 800881a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881c:	4606      	mov	r6, r0
 800881e:	460f      	mov	r7, r1
 8008820:	4614      	mov	r4, r2
 8008822:	18d5      	adds	r5, r2, r3
 8008824:	42ac      	cmp	r4, r5
 8008826:	d101      	bne.n	800882c <__sfputs_r+0x12>
 8008828:	2000      	movs	r0, #0
 800882a:	e007      	b.n	800883c <__sfputs_r+0x22>
 800882c:	463a      	mov	r2, r7
 800882e:	4630      	mov	r0, r6
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	f7ff ffdc 	bl	80087f0 <__sfputc_r>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d1f3      	bne.n	8008824 <__sfputs_r+0xa>
 800883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008840 <_vfiprintf_r>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	460d      	mov	r5, r1
 8008846:	4614      	mov	r4, r2
 8008848:	4698      	mov	r8, r3
 800884a:	4606      	mov	r6, r0
 800884c:	b09d      	sub	sp, #116	; 0x74
 800884e:	b118      	cbz	r0, 8008858 <_vfiprintf_r+0x18>
 8008850:	6983      	ldr	r3, [r0, #24]
 8008852:	b90b      	cbnz	r3, 8008858 <_vfiprintf_r+0x18>
 8008854:	f000 fb10 	bl	8008e78 <__sinit>
 8008858:	4b89      	ldr	r3, [pc, #548]	; (8008a80 <_vfiprintf_r+0x240>)
 800885a:	429d      	cmp	r5, r3
 800885c:	d11b      	bne.n	8008896 <_vfiprintf_r+0x56>
 800885e:	6875      	ldr	r5, [r6, #4]
 8008860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008862:	07d9      	lsls	r1, r3, #31
 8008864:	d405      	bmi.n	8008872 <_vfiprintf_r+0x32>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	059a      	lsls	r2, r3, #22
 800886a:	d402      	bmi.n	8008872 <_vfiprintf_r+0x32>
 800886c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800886e:	f7ff ff62 	bl	8008736 <__retarget_lock_acquire_recursive>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	071b      	lsls	r3, r3, #28
 8008876:	d501      	bpl.n	800887c <_vfiprintf_r+0x3c>
 8008878:	692b      	ldr	r3, [r5, #16]
 800887a:	b9eb      	cbnz	r3, 80088b8 <_vfiprintf_r+0x78>
 800887c:	4629      	mov	r1, r5
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f96e 	bl	8008b60 <__swsetup_r>
 8008884:	b1c0      	cbz	r0, 80088b8 <_vfiprintf_r+0x78>
 8008886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008888:	07dc      	lsls	r4, r3, #31
 800888a:	d50e      	bpl.n	80088aa <_vfiprintf_r+0x6a>
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	b01d      	add	sp, #116	; 0x74
 8008892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008896:	4b7b      	ldr	r3, [pc, #492]	; (8008a84 <_vfiprintf_r+0x244>)
 8008898:	429d      	cmp	r5, r3
 800889a:	d101      	bne.n	80088a0 <_vfiprintf_r+0x60>
 800889c:	68b5      	ldr	r5, [r6, #8]
 800889e:	e7df      	b.n	8008860 <_vfiprintf_r+0x20>
 80088a0:	4b79      	ldr	r3, [pc, #484]	; (8008a88 <_vfiprintf_r+0x248>)
 80088a2:	429d      	cmp	r5, r3
 80088a4:	bf08      	it	eq
 80088a6:	68f5      	ldreq	r5, [r6, #12]
 80088a8:	e7da      	b.n	8008860 <_vfiprintf_r+0x20>
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	0598      	lsls	r0, r3, #22
 80088ae:	d4ed      	bmi.n	800888c <_vfiprintf_r+0x4c>
 80088b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088b2:	f7ff ff41 	bl	8008738 <__retarget_lock_release_recursive>
 80088b6:	e7e9      	b.n	800888c <_vfiprintf_r+0x4c>
 80088b8:	2300      	movs	r3, #0
 80088ba:	9309      	str	r3, [sp, #36]	; 0x24
 80088bc:	2320      	movs	r3, #32
 80088be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088c2:	2330      	movs	r3, #48	; 0x30
 80088c4:	f04f 0901 	mov.w	r9, #1
 80088c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008a8c <_vfiprintf_r+0x24c>
 80088d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d4:	4623      	mov	r3, r4
 80088d6:	469a      	mov	sl, r3
 80088d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088dc:	b10a      	cbz	r2, 80088e2 <_vfiprintf_r+0xa2>
 80088de:	2a25      	cmp	r2, #37	; 0x25
 80088e0:	d1f9      	bne.n	80088d6 <_vfiprintf_r+0x96>
 80088e2:	ebba 0b04 	subs.w	fp, sl, r4
 80088e6:	d00b      	beq.n	8008900 <_vfiprintf_r+0xc0>
 80088e8:	465b      	mov	r3, fp
 80088ea:	4622      	mov	r2, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ff93 	bl	800881a <__sfputs_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	f000 80aa 	beq.w	8008a4e <_vfiprintf_r+0x20e>
 80088fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088fc:	445a      	add	r2, fp
 80088fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008900:	f89a 3000 	ldrb.w	r3, [sl]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80a2 	beq.w	8008a4e <_vfiprintf_r+0x20e>
 800890a:	2300      	movs	r3, #0
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008914:	f10a 0a01 	add.w	sl, sl, #1
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008920:	931a      	str	r3, [sp, #104]	; 0x68
 8008922:	4654      	mov	r4, sl
 8008924:	2205      	movs	r2, #5
 8008926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892a:	4858      	ldr	r0, [pc, #352]	; (8008a8c <_vfiprintf_r+0x24c>)
 800892c:	f7ff f9c6 	bl	8007cbc <memchr>
 8008930:	9a04      	ldr	r2, [sp, #16]
 8008932:	b9d8      	cbnz	r0, 800896c <_vfiprintf_r+0x12c>
 8008934:	06d1      	lsls	r1, r2, #27
 8008936:	bf44      	itt	mi
 8008938:	2320      	movmi	r3, #32
 800893a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893e:	0713      	lsls	r3, r2, #28
 8008940:	bf44      	itt	mi
 8008942:	232b      	movmi	r3, #43	; 0x2b
 8008944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008948:	f89a 3000 	ldrb.w	r3, [sl]
 800894c:	2b2a      	cmp	r3, #42	; 0x2a
 800894e:	d015      	beq.n	800897c <_vfiprintf_r+0x13c>
 8008950:	4654      	mov	r4, sl
 8008952:	2000      	movs	r0, #0
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	9a07      	ldr	r2, [sp, #28]
 800895a:	4621      	mov	r1, r4
 800895c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008960:	3b30      	subs	r3, #48	; 0x30
 8008962:	2b09      	cmp	r3, #9
 8008964:	d94e      	bls.n	8008a04 <_vfiprintf_r+0x1c4>
 8008966:	b1b0      	cbz	r0, 8008996 <_vfiprintf_r+0x156>
 8008968:	9207      	str	r2, [sp, #28]
 800896a:	e014      	b.n	8008996 <_vfiprintf_r+0x156>
 800896c:	eba0 0308 	sub.w	r3, r0, r8
 8008970:	fa09 f303 	lsl.w	r3, r9, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	46a2      	mov	sl, r4
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	e7d2      	b.n	8008922 <_vfiprintf_r+0xe2>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1d19      	adds	r1, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	9103      	str	r1, [sp, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfbb      	ittet	lt
 8008988:	425b      	neglt	r3, r3
 800898a:	f042 0202 	orrlt.w	r2, r2, #2
 800898e:	9307      	strge	r3, [sp, #28]
 8008990:	9307      	strlt	r3, [sp, #28]
 8008992:	bfb8      	it	lt
 8008994:	9204      	strlt	r2, [sp, #16]
 8008996:	7823      	ldrb	r3, [r4, #0]
 8008998:	2b2e      	cmp	r3, #46	; 0x2e
 800899a:	d10c      	bne.n	80089b6 <_vfiprintf_r+0x176>
 800899c:	7863      	ldrb	r3, [r4, #1]
 800899e:	2b2a      	cmp	r3, #42	; 0x2a
 80089a0:	d135      	bne.n	8008a0e <_vfiprintf_r+0x1ce>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	3402      	adds	r4, #2
 80089a6:	1d1a      	adds	r2, r3, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	9203      	str	r2, [sp, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfb8      	it	lt
 80089b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089b4:	9305      	str	r3, [sp, #20]
 80089b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008a90 <_vfiprintf_r+0x250>
 80089ba:	2203      	movs	r2, #3
 80089bc:	4650      	mov	r0, sl
 80089be:	7821      	ldrb	r1, [r4, #0]
 80089c0:	f7ff f97c 	bl	8007cbc <memchr>
 80089c4:	b140      	cbz	r0, 80089d8 <_vfiprintf_r+0x198>
 80089c6:	2340      	movs	r3, #64	; 0x40
 80089c8:	eba0 000a 	sub.w	r0, r0, sl
 80089cc:	fa03 f000 	lsl.w	r0, r3, r0
 80089d0:	9b04      	ldr	r3, [sp, #16]
 80089d2:	3401      	adds	r4, #1
 80089d4:	4303      	orrs	r3, r0
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	2206      	movs	r2, #6
 80089de:	482d      	ldr	r0, [pc, #180]	; (8008a94 <_vfiprintf_r+0x254>)
 80089e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e4:	f7ff f96a 	bl	8007cbc <memchr>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d03f      	beq.n	8008a6c <_vfiprintf_r+0x22c>
 80089ec:	4b2a      	ldr	r3, [pc, #168]	; (8008a98 <_vfiprintf_r+0x258>)
 80089ee:	bb1b      	cbnz	r3, 8008a38 <_vfiprintf_r+0x1f8>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	3307      	adds	r3, #7
 80089f4:	f023 0307 	bic.w	r3, r3, #7
 80089f8:	3308      	adds	r3, #8
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fe:	443b      	add	r3, r7
 8008a00:	9309      	str	r3, [sp, #36]	; 0x24
 8008a02:	e767      	b.n	80088d4 <_vfiprintf_r+0x94>
 8008a04:	460c      	mov	r4, r1
 8008a06:	2001      	movs	r0, #1
 8008a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0c:	e7a5      	b.n	800895a <_vfiprintf_r+0x11a>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4619      	mov	r1, r3
 8008a16:	3401      	adds	r4, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a20:	3a30      	subs	r2, #48	; 0x30
 8008a22:	2a09      	cmp	r2, #9
 8008a24:	d903      	bls.n	8008a2e <_vfiprintf_r+0x1ee>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0c5      	beq.n	80089b6 <_vfiprintf_r+0x176>
 8008a2a:	9105      	str	r1, [sp, #20]
 8008a2c:	e7c3      	b.n	80089b6 <_vfiprintf_r+0x176>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	2301      	movs	r3, #1
 8008a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a36:	e7f0      	b.n	8008a1a <_vfiprintf_r+0x1da>
 8008a38:	ab03      	add	r3, sp, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <_vfiprintf_r+0x25c>)
 8008a42:	a904      	add	r1, sp, #16
 8008a44:	f7fd fe96 	bl	8006774 <_printf_float>
 8008a48:	4607      	mov	r7, r0
 8008a4a:	1c78      	adds	r0, r7, #1
 8008a4c:	d1d6      	bne.n	80089fc <_vfiprintf_r+0x1bc>
 8008a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a50:	07d9      	lsls	r1, r3, #31
 8008a52:	d405      	bmi.n	8008a60 <_vfiprintf_r+0x220>
 8008a54:	89ab      	ldrh	r3, [r5, #12]
 8008a56:	059a      	lsls	r2, r3, #22
 8008a58:	d402      	bmi.n	8008a60 <_vfiprintf_r+0x220>
 8008a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5c:	f7ff fe6c 	bl	8008738 <__retarget_lock_release_recursive>
 8008a60:	89ab      	ldrh	r3, [r5, #12]
 8008a62:	065b      	lsls	r3, r3, #25
 8008a64:	f53f af12 	bmi.w	800888c <_vfiprintf_r+0x4c>
 8008a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a6a:	e711      	b.n	8008890 <_vfiprintf_r+0x50>
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4630      	mov	r0, r6
 8008a74:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <_vfiprintf_r+0x25c>)
 8008a76:	a904      	add	r1, sp, #16
 8008a78:	f7fe f918 	bl	8006cac <_printf_i>
 8008a7c:	e7e4      	b.n	8008a48 <_vfiprintf_r+0x208>
 8008a7e:	bf00      	nop
 8008a80:	080096ac 	.word	0x080096ac
 8008a84:	080096cc 	.word	0x080096cc
 8008a88:	0800968c 	.word	0x0800968c
 8008a8c:	08009634 	.word	0x08009634
 8008a90:	0800963a 	.word	0x0800963a
 8008a94:	0800963e 	.word	0x0800963e
 8008a98:	08006775 	.word	0x08006775
 8008a9c:	0800881b 	.word	0x0800881b

08008aa0 <__swbuf_r>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	460e      	mov	r6, r1
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b118      	cbz	r0, 8008ab2 <__swbuf_r+0x12>
 8008aaa:	6983      	ldr	r3, [r0, #24]
 8008aac:	b90b      	cbnz	r3, 8008ab2 <__swbuf_r+0x12>
 8008aae:	f000 f9e3 	bl	8008e78 <__sinit>
 8008ab2:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <__swbuf_r+0x98>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d12b      	bne.n	8008b10 <__swbuf_r+0x70>
 8008ab8:	686c      	ldr	r4, [r5, #4]
 8008aba:	69a3      	ldr	r3, [r4, #24]
 8008abc:	60a3      	str	r3, [r4, #8]
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	071a      	lsls	r2, r3, #28
 8008ac2:	d52f      	bpl.n	8008b24 <__swbuf_r+0x84>
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	b36b      	cbz	r3, 8008b24 <__swbuf_r+0x84>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	b2f6      	uxtb	r6, r6
 8008ace:	1ac0      	subs	r0, r0, r3
 8008ad0:	6963      	ldr	r3, [r4, #20]
 8008ad2:	4637      	mov	r7, r6
 8008ad4:	4283      	cmp	r3, r0
 8008ad6:	dc04      	bgt.n	8008ae2 <__swbuf_r+0x42>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4628      	mov	r0, r5
 8008adc:	f000 f938 	bl	8008d50 <_fflush_r>
 8008ae0:	bb30      	cbnz	r0, 8008b30 <__swbuf_r+0x90>
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	701e      	strb	r6, [r3, #0]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	4283      	cmp	r3, r0
 8008af6:	d004      	beq.n	8008b02 <__swbuf_r+0x62>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	d506      	bpl.n	8008b0c <__swbuf_r+0x6c>
 8008afe:	2e0a      	cmp	r6, #10
 8008b00:	d104      	bne.n	8008b0c <__swbuf_r+0x6c>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 f923 	bl	8008d50 <_fflush_r>
 8008b0a:	b988      	cbnz	r0, 8008b30 <__swbuf_r+0x90>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <__swbuf_r+0x9c>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swbuf_r+0x7a>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7cf      	b.n	8008aba <__swbuf_r+0x1a>
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <__swbuf_r+0xa0>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7ca      	b.n	8008aba <__swbuf_r+0x1a>
 8008b24:	4621      	mov	r1, r4
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f81a 	bl	8008b60 <__swsetup_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d0cb      	beq.n	8008ac8 <__swbuf_r+0x28>
 8008b30:	f04f 37ff 	mov.w	r7, #4294967295
 8008b34:	e7ea      	b.n	8008b0c <__swbuf_r+0x6c>
 8008b36:	bf00      	nop
 8008b38:	080096ac 	.word	0x080096ac
 8008b3c:	080096cc 	.word	0x080096cc
 8008b40:	0800968c 	.word	0x0800968c

08008b44 <__ascii_wctomb>:
 8008b44:	4603      	mov	r3, r0
 8008b46:	4608      	mov	r0, r1
 8008b48:	b141      	cbz	r1, 8008b5c <__ascii_wctomb+0x18>
 8008b4a:	2aff      	cmp	r2, #255	; 0xff
 8008b4c:	d904      	bls.n	8008b58 <__ascii_wctomb+0x14>
 8008b4e:	228a      	movs	r2, #138	; 0x8a
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	4770      	bx	lr
 8008b58:	2001      	movs	r0, #1
 8008b5a:	700a      	strb	r2, [r1, #0]
 8008b5c:	4770      	bx	lr
	...

08008b60 <__swsetup_r>:
 8008b60:	4b32      	ldr	r3, [pc, #200]	; (8008c2c <__swsetup_r+0xcc>)
 8008b62:	b570      	push	{r4, r5, r6, lr}
 8008b64:	681d      	ldr	r5, [r3, #0]
 8008b66:	4606      	mov	r6, r0
 8008b68:	460c      	mov	r4, r1
 8008b6a:	b125      	cbz	r5, 8008b76 <__swsetup_r+0x16>
 8008b6c:	69ab      	ldr	r3, [r5, #24]
 8008b6e:	b913      	cbnz	r3, 8008b76 <__swsetup_r+0x16>
 8008b70:	4628      	mov	r0, r5
 8008b72:	f000 f981 	bl	8008e78 <__sinit>
 8008b76:	4b2e      	ldr	r3, [pc, #184]	; (8008c30 <__swsetup_r+0xd0>)
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	d10f      	bne.n	8008b9c <__swsetup_r+0x3c>
 8008b7c:	686c      	ldr	r4, [r5, #4]
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b84:	0719      	lsls	r1, r3, #28
 8008b86:	d42c      	bmi.n	8008be2 <__swsetup_r+0x82>
 8008b88:	06dd      	lsls	r5, r3, #27
 8008b8a:	d411      	bmi.n	8008bb0 <__swsetup_r+0x50>
 8008b8c:	2309      	movs	r3, #9
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	e03e      	b.n	8008c1a <__swsetup_r+0xba>
 8008b9c:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <__swsetup_r+0xd4>)
 8008b9e:	429c      	cmp	r4, r3
 8008ba0:	d101      	bne.n	8008ba6 <__swsetup_r+0x46>
 8008ba2:	68ac      	ldr	r4, [r5, #8]
 8008ba4:	e7eb      	b.n	8008b7e <__swsetup_r+0x1e>
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <__swsetup_r+0xd8>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	bf08      	it	eq
 8008bac:	68ec      	ldreq	r4, [r5, #12]
 8008bae:	e7e6      	b.n	8008b7e <__swsetup_r+0x1e>
 8008bb0:	0758      	lsls	r0, r3, #29
 8008bb2:	d512      	bpl.n	8008bda <__swsetup_r+0x7a>
 8008bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bb6:	b141      	cbz	r1, 8008bca <__swsetup_r+0x6a>
 8008bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d002      	beq.n	8008bc6 <__swsetup_r+0x66>
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7fd fc5d 	bl	8006480 <_free_r>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0308 	orr.w	r3, r3, #8
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	b94b      	cbnz	r3, 8008bfa <__swsetup_r+0x9a>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf0:	d003      	beq.n	8008bfa <__swsetup_r+0x9a>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f000 fa01 	bl	8008ffc <__smakebuf_r>
 8008bfa:	89a0      	ldrh	r0, [r4, #12]
 8008bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c00:	f010 0301 	ands.w	r3, r0, #1
 8008c04:	d00a      	beq.n	8008c1c <__swsetup_r+0xbc>
 8008c06:	2300      	movs	r3, #0
 8008c08:	60a3      	str	r3, [r4, #8]
 8008c0a:	6963      	ldr	r3, [r4, #20]
 8008c0c:	425b      	negs	r3, r3
 8008c0e:	61a3      	str	r3, [r4, #24]
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	b943      	cbnz	r3, 8008c26 <__swsetup_r+0xc6>
 8008c14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c18:	d1ba      	bne.n	8008b90 <__swsetup_r+0x30>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	0781      	lsls	r1, r0, #30
 8008c1e:	bf58      	it	pl
 8008c20:	6963      	ldrpl	r3, [r4, #20]
 8008c22:	60a3      	str	r3, [r4, #8]
 8008c24:	e7f4      	b.n	8008c10 <__swsetup_r+0xb0>
 8008c26:	2000      	movs	r0, #0
 8008c28:	e7f7      	b.n	8008c1a <__swsetup_r+0xba>
 8008c2a:	bf00      	nop
 8008c2c:	2000000c 	.word	0x2000000c
 8008c30:	080096ac 	.word	0x080096ac
 8008c34:	080096cc 	.word	0x080096cc
 8008c38:	0800968c 	.word	0x0800968c

08008c3c <abort>:
 8008c3c:	2006      	movs	r0, #6
 8008c3e:	b508      	push	{r3, lr}
 8008c40:	f000 fa4c 	bl	80090dc <raise>
 8008c44:	2001      	movs	r0, #1
 8008c46:	f7f8 fc62 	bl	800150e <_exit>
	...

08008c4c <__sflush_r>:
 8008c4c:	898a      	ldrh	r2, [r1, #12]
 8008c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c50:	4605      	mov	r5, r0
 8008c52:	0710      	lsls	r0, r2, #28
 8008c54:	460c      	mov	r4, r1
 8008c56:	d457      	bmi.n	8008d08 <__sflush_r+0xbc>
 8008c58:	684b      	ldr	r3, [r1, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc04      	bgt.n	8008c68 <__sflush_r+0x1c>
 8008c5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc01      	bgt.n	8008c68 <__sflush_r+0x1c>
 8008c64:	2000      	movs	r0, #0
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c6a:	2e00      	cmp	r6, #0
 8008c6c:	d0fa      	beq.n	8008c64 <__sflush_r+0x18>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c74:	682f      	ldr	r7, [r5, #0]
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	d032      	beq.n	8008ce0 <__sflush_r+0x94>
 8008c7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	075a      	lsls	r2, r3, #29
 8008c80:	d505      	bpl.n	8008c8e <__sflush_r+0x42>
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	1ac0      	subs	r0, r0, r3
 8008c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c88:	b10b      	cbz	r3, 8008c8e <__sflush_r+0x42>
 8008c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c8c:	1ac0      	subs	r0, r0, r3
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4602      	mov	r2, r0
 8008c92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c94:	4628      	mov	r0, r5
 8008c96:	6a21      	ldr	r1, [r4, #32]
 8008c98:	47b0      	blx	r6
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	d106      	bne.n	8008cae <__sflush_r+0x62>
 8008ca0:	6829      	ldr	r1, [r5, #0]
 8008ca2:	291d      	cmp	r1, #29
 8008ca4:	d82c      	bhi.n	8008d00 <__sflush_r+0xb4>
 8008ca6:	4a29      	ldr	r2, [pc, #164]	; (8008d4c <__sflush_r+0x100>)
 8008ca8:	40ca      	lsrs	r2, r1
 8008caa:	07d6      	lsls	r6, r2, #31
 8008cac:	d528      	bpl.n	8008d00 <__sflush_r+0xb4>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	6062      	str	r2, [r4, #4]
 8008cb2:	6922      	ldr	r2, [r4, #16]
 8008cb4:	04d9      	lsls	r1, r3, #19
 8008cb6:	6022      	str	r2, [r4, #0]
 8008cb8:	d504      	bpl.n	8008cc4 <__sflush_r+0x78>
 8008cba:	1c42      	adds	r2, r0, #1
 8008cbc:	d101      	bne.n	8008cc2 <__sflush_r+0x76>
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	b903      	cbnz	r3, 8008cc4 <__sflush_r+0x78>
 8008cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8008cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc6:	602f      	str	r7, [r5, #0]
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d0cb      	beq.n	8008c64 <__sflush_r+0x18>
 8008ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	d002      	beq.n	8008cda <__sflush_r+0x8e>
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7fd fbd3 	bl	8006480 <_free_r>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cde:	e7c2      	b.n	8008c66 <__sflush_r+0x1a>
 8008ce0:	6a21      	ldr	r1, [r4, #32]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b0      	blx	r6
 8008ce8:	1c41      	adds	r1, r0, #1
 8008cea:	d1c7      	bne.n	8008c7c <__sflush_r+0x30>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0c4      	beq.n	8008c7c <__sflush_r+0x30>
 8008cf2:	2b1d      	cmp	r3, #29
 8008cf4:	d001      	beq.n	8008cfa <__sflush_r+0xae>
 8008cf6:	2b16      	cmp	r3, #22
 8008cf8:	d101      	bne.n	8008cfe <__sflush_r+0xb2>
 8008cfa:	602f      	str	r7, [r5, #0]
 8008cfc:	e7b2      	b.n	8008c64 <__sflush_r+0x18>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	e7ae      	b.n	8008c66 <__sflush_r+0x1a>
 8008d08:	690f      	ldr	r7, [r1, #16]
 8008d0a:	2f00      	cmp	r7, #0
 8008d0c:	d0aa      	beq.n	8008c64 <__sflush_r+0x18>
 8008d0e:	0793      	lsls	r3, r2, #30
 8008d10:	bf18      	it	ne
 8008d12:	2300      	movne	r3, #0
 8008d14:	680e      	ldr	r6, [r1, #0]
 8008d16:	bf08      	it	eq
 8008d18:	694b      	ldreq	r3, [r1, #20]
 8008d1a:	1bf6      	subs	r6, r6, r7
 8008d1c:	600f      	str	r7, [r1, #0]
 8008d1e:	608b      	str	r3, [r1, #8]
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	dd9f      	ble.n	8008c64 <__sflush_r+0x18>
 8008d24:	4633      	mov	r3, r6
 8008d26:	463a      	mov	r2, r7
 8008d28:	4628      	mov	r0, r5
 8008d2a:	6a21      	ldr	r1, [r4, #32]
 8008d2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008d30:	47e0      	blx	ip
 8008d32:	2800      	cmp	r0, #0
 8008d34:	dc06      	bgt.n	8008d44 <__sflush_r+0xf8>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	e790      	b.n	8008c66 <__sflush_r+0x1a>
 8008d44:	4407      	add	r7, r0
 8008d46:	1a36      	subs	r6, r6, r0
 8008d48:	e7ea      	b.n	8008d20 <__sflush_r+0xd4>
 8008d4a:	bf00      	nop
 8008d4c:	20400001 	.word	0x20400001

08008d50 <_fflush_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	4605      	mov	r5, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b913      	cbnz	r3, 8008d60 <_fflush_r+0x10>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	b118      	cbz	r0, 8008d6a <_fflush_r+0x1a>
 8008d62:	6983      	ldr	r3, [r0, #24]
 8008d64:	b90b      	cbnz	r3, 8008d6a <_fflush_r+0x1a>
 8008d66:	f000 f887 	bl	8008e78 <__sinit>
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <_fflush_r+0x6c>)
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	d11b      	bne.n	8008da8 <_fflush_r+0x58>
 8008d70:	686c      	ldr	r4, [r5, #4]
 8008d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ef      	beq.n	8008d5a <_fflush_r+0xa>
 8008d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d7c:	07d0      	lsls	r0, r2, #31
 8008d7e:	d404      	bmi.n	8008d8a <_fflush_r+0x3a>
 8008d80:	0599      	lsls	r1, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_fflush_r+0x3a>
 8008d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d86:	f7ff fcd6 	bl	8008736 <__retarget_lock_acquire_recursive>
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	f7ff ff5d 	bl	8008c4c <__sflush_r>
 8008d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d94:	4605      	mov	r5, r0
 8008d96:	07da      	lsls	r2, r3, #31
 8008d98:	d4e0      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	059b      	lsls	r3, r3, #22
 8008d9e:	d4dd      	bmi.n	8008d5c <_fflush_r+0xc>
 8008da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da2:	f7ff fcc9 	bl	8008738 <__retarget_lock_release_recursive>
 8008da6:	e7d9      	b.n	8008d5c <_fflush_r+0xc>
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <_fflush_r+0x70>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	d101      	bne.n	8008db2 <_fflush_r+0x62>
 8008dae:	68ac      	ldr	r4, [r5, #8]
 8008db0:	e7df      	b.n	8008d72 <_fflush_r+0x22>
 8008db2:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <_fflush_r+0x74>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	bf08      	it	eq
 8008db8:	68ec      	ldreq	r4, [r5, #12]
 8008dba:	e7da      	b.n	8008d72 <_fflush_r+0x22>
 8008dbc:	080096ac 	.word	0x080096ac
 8008dc0:	080096cc 	.word	0x080096cc
 8008dc4:	0800968c 	.word	0x0800968c

08008dc8 <std>:
 8008dc8:	2300      	movs	r3, #0
 8008dca:	b510      	push	{r4, lr}
 8008dcc:	4604      	mov	r4, r0
 8008dce:	e9c0 3300 	strd	r3, r3, [r0]
 8008dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dd6:	6083      	str	r3, [r0, #8]
 8008dd8:	8181      	strh	r1, [r0, #12]
 8008dda:	6643      	str	r3, [r0, #100]	; 0x64
 8008ddc:	81c2      	strh	r2, [r0, #14]
 8008dde:	6183      	str	r3, [r0, #24]
 8008de0:	4619      	mov	r1, r3
 8008de2:	2208      	movs	r2, #8
 8008de4:	305c      	adds	r0, #92	; 0x5c
 8008de6:	f7fd fb43 	bl	8006470 <memset>
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x38>)
 8008dec:	6224      	str	r4, [r4, #32]
 8008dee:	6263      	str	r3, [r4, #36]	; 0x24
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <std+0x3c>)
 8008df2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008df4:	4b04      	ldr	r3, [pc, #16]	; (8008e08 <std+0x40>)
 8008df6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <std+0x44>)
 8008dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	bf00      	nop
 8008e00:	08009115 	.word	0x08009115
 8008e04:	08009137 	.word	0x08009137
 8008e08:	0800916f 	.word	0x0800916f
 8008e0c:	08009193 	.word	0x08009193

08008e10 <_cleanup_r>:
 8008e10:	4901      	ldr	r1, [pc, #4]	; (8008e18 <_cleanup_r+0x8>)
 8008e12:	f000 b8af 	b.w	8008f74 <_fwalk_reent>
 8008e16:	bf00      	nop
 8008e18:	08008d51 	.word	0x08008d51

08008e1c <__sfmoreglue>:
 8008e1c:	2268      	movs	r2, #104	; 0x68
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	1e4d      	subs	r5, r1, #1
 8008e22:	4355      	muls	r5, r2
 8008e24:	460e      	mov	r6, r1
 8008e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e2a:	f7fd fb91 	bl	8006550 <_malloc_r>
 8008e2e:	4604      	mov	r4, r0
 8008e30:	b140      	cbz	r0, 8008e44 <__sfmoreglue+0x28>
 8008e32:	2100      	movs	r1, #0
 8008e34:	e9c0 1600 	strd	r1, r6, [r0]
 8008e38:	300c      	adds	r0, #12
 8008e3a:	60a0      	str	r0, [r4, #8]
 8008e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e40:	f7fd fb16 	bl	8006470 <memset>
 8008e44:	4620      	mov	r0, r4
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__sfp_lock_acquire>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sfp_lock_acquire+0x8>)
 8008e4a:	f7ff bc74 	b.w	8008736 <__retarget_lock_acquire_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000db5 	.word	0x20000db5

08008e54 <__sfp_lock_release>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sfp_lock_release+0x8>)
 8008e56:	f7ff bc6f 	b.w	8008738 <__retarget_lock_release_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20000db5 	.word	0x20000db5

08008e60 <__sinit_lock_acquire>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sinit_lock_acquire+0x8>)
 8008e62:	f7ff bc68 	b.w	8008736 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	20000db6 	.word	0x20000db6

08008e6c <__sinit_lock_release>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__sinit_lock_release+0x8>)
 8008e6e:	f7ff bc63 	b.w	8008738 <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	20000db6 	.word	0x20000db6

08008e78 <__sinit>:
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f7ff fff0 	bl	8008e60 <__sinit_lock_acquire>
 8008e80:	69a3      	ldr	r3, [r4, #24]
 8008e82:	b11b      	cbz	r3, 8008e8c <__sinit+0x14>
 8008e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e88:	f7ff bff0 	b.w	8008e6c <__sinit_lock_release>
 8008e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e90:	6523      	str	r3, [r4, #80]	; 0x50
 8008e92:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <__sinit+0x68>)
 8008e94:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <__sinit+0x6c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	bf08      	it	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	bf08      	it	eq
 8008ea4:	61a3      	streq	r3, [r4, #24]
 8008ea6:	f000 f81f 	bl	8008ee8 <__sfp>
 8008eaa:	6060      	str	r0, [r4, #4]
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 f81b 	bl	8008ee8 <__sfp>
 8008eb2:	60a0      	str	r0, [r4, #8]
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f817 	bl	8008ee8 <__sfp>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	60e0      	str	r0, [r4, #12]
 8008ec0:	6860      	ldr	r0, [r4, #4]
 8008ec2:	f7ff ff81 	bl	8008dc8 <std>
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	2109      	movs	r1, #9
 8008eca:	68a0      	ldr	r0, [r4, #8]
 8008ecc:	f7ff ff7c 	bl	8008dc8 <std>
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	2112      	movs	r1, #18
 8008ed4:	68e0      	ldr	r0, [r4, #12]
 8008ed6:	f7ff ff77 	bl	8008dc8 <std>
 8008eda:	2301      	movs	r3, #1
 8008edc:	61a3      	str	r3, [r4, #24]
 8008ede:	e7d1      	b.n	8008e84 <__sinit+0xc>
 8008ee0:	08009410 	.word	0x08009410
 8008ee4:	08008e11 	.word	0x08008e11

08008ee8 <__sfp>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	4607      	mov	r7, r0
 8008eec:	f7ff ffac 	bl	8008e48 <__sfp_lock_acquire>
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <__sfp+0x84>)
 8008ef2:	681e      	ldr	r6, [r3, #0]
 8008ef4:	69b3      	ldr	r3, [r6, #24]
 8008ef6:	b913      	cbnz	r3, 8008efe <__sfp+0x16>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ffbd 	bl	8008e78 <__sinit>
 8008efe:	3648      	adds	r6, #72	; 0x48
 8008f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	d503      	bpl.n	8008f10 <__sfp+0x28>
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	b30b      	cbz	r3, 8008f50 <__sfp+0x68>
 8008f0c:	6836      	ldr	r6, [r6, #0]
 8008f0e:	e7f7      	b.n	8008f00 <__sfp+0x18>
 8008f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f14:	b9d5      	cbnz	r5, 8008f4c <__sfp+0x64>
 8008f16:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <__sfp+0x88>)
 8008f18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f1c:	60e3      	str	r3, [r4, #12]
 8008f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f20:	f7ff fc08 	bl	8008734 <__retarget_lock_init_recursive>
 8008f24:	f7ff ff96 	bl	8008e54 <__sfp_lock_release>
 8008f28:	2208      	movs	r2, #8
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f34:	6025      	str	r5, [r4, #0]
 8008f36:	61a5      	str	r5, [r4, #24]
 8008f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f3c:	f7fd fa98 	bl	8006470 <memset>
 8008f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4c:	3468      	adds	r4, #104	; 0x68
 8008f4e:	e7d9      	b.n	8008f04 <__sfp+0x1c>
 8008f50:	2104      	movs	r1, #4
 8008f52:	4638      	mov	r0, r7
 8008f54:	f7ff ff62 	bl	8008e1c <__sfmoreglue>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	6030      	str	r0, [r6, #0]
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1d5      	bne.n	8008f0c <__sfp+0x24>
 8008f60:	f7ff ff78 	bl	8008e54 <__sfp_lock_release>
 8008f64:	230c      	movs	r3, #12
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	e7ee      	b.n	8008f48 <__sfp+0x60>
 8008f6a:	bf00      	nop
 8008f6c:	08009410 	.word	0x08009410
 8008f70:	ffff0001 	.word	0xffff0001

08008f74 <_fwalk_reent>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4606      	mov	r6, r0
 8008f7a:	4688      	mov	r8, r1
 8008f7c:	2700      	movs	r7, #0
 8008f7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f86:	f1b9 0901 	subs.w	r9, r9, #1
 8008f8a:	d505      	bpl.n	8008f98 <_fwalk_reent+0x24>
 8008f8c:	6824      	ldr	r4, [r4, #0]
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d1f7      	bne.n	8008f82 <_fwalk_reent+0xe>
 8008f92:	4638      	mov	r0, r7
 8008f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f98:	89ab      	ldrh	r3, [r5, #12]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d907      	bls.n	8008fae <_fwalk_reent+0x3a>
 8008f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	d003      	beq.n	8008fae <_fwalk_reent+0x3a>
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	47c0      	blx	r8
 8008fac:	4307      	orrs	r7, r0
 8008fae:	3568      	adds	r5, #104	; 0x68
 8008fb0:	e7e9      	b.n	8008f86 <_fwalk_reent+0x12>

08008fb2 <__swhatbuf_r>:
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	460e      	mov	r6, r1
 8008fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fba:	4614      	mov	r4, r2
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	b096      	sub	sp, #88	; 0x58
 8008fc2:	da08      	bge.n	8008fd6 <__swhatbuf_r+0x24>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fca:	602a      	str	r2, [r5, #0]
 8008fcc:	061a      	lsls	r2, r3, #24
 8008fce:	d410      	bmi.n	8008ff2 <__swhatbuf_r+0x40>
 8008fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd4:	e00e      	b.n	8008ff4 <__swhatbuf_r+0x42>
 8008fd6:	466a      	mov	r2, sp
 8008fd8:	f000 f902 	bl	80091e0 <_fstat_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	dbf1      	blt.n	8008fc4 <__swhatbuf_r+0x12>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fe6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fea:	425a      	negs	r2, r3
 8008fec:	415a      	adcs	r2, r3
 8008fee:	602a      	str	r2, [r5, #0]
 8008ff0:	e7ee      	b.n	8008fd0 <__swhatbuf_r+0x1e>
 8008ff2:	2340      	movs	r3, #64	; 0x40
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	b016      	add	sp, #88	; 0x58
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}

08008ffc <__smakebuf_r>:
 8008ffc:	898b      	ldrh	r3, [r1, #12]
 8008ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009000:	079d      	lsls	r5, r3, #30
 8009002:	4606      	mov	r6, r0
 8009004:	460c      	mov	r4, r1
 8009006:	d507      	bpl.n	8009018 <__smakebuf_r+0x1c>
 8009008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	2301      	movs	r3, #1
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	b002      	add	sp, #8
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	466a      	mov	r2, sp
 800901a:	ab01      	add	r3, sp, #4
 800901c:	f7ff ffc9 	bl	8008fb2 <__swhatbuf_r>
 8009020:	9900      	ldr	r1, [sp, #0]
 8009022:	4605      	mov	r5, r0
 8009024:	4630      	mov	r0, r6
 8009026:	f7fd fa93 	bl	8006550 <_malloc_r>
 800902a:	b948      	cbnz	r0, 8009040 <__smakebuf_r+0x44>
 800902c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d4ef      	bmi.n	8009014 <__smakebuf_r+0x18>
 8009034:	f023 0303 	bic.w	r3, r3, #3
 8009038:	f043 0302 	orr.w	r3, r3, #2
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	e7e3      	b.n	8009008 <__smakebuf_r+0xc>
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <__smakebuf_r+0x7c>)
 8009042:	62b3      	str	r3, [r6, #40]	; 0x28
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	6120      	str	r0, [r4, #16]
 8009052:	6163      	str	r3, [r4, #20]
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	b15b      	cbz	r3, 8009070 <__smakebuf_r+0x74>
 8009058:	4630      	mov	r0, r6
 800905a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905e:	f000 f8d1 	bl	8009204 <_isatty_r>
 8009062:	b128      	cbz	r0, 8009070 <__smakebuf_r+0x74>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	89a0      	ldrh	r0, [r4, #12]
 8009072:	4305      	orrs	r5, r0
 8009074:	81a5      	strh	r5, [r4, #12]
 8009076:	e7cd      	b.n	8009014 <__smakebuf_r+0x18>
 8009078:	08008e11 	.word	0x08008e11

0800907c <_malloc_usable_size_r>:
 800907c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009080:	1f18      	subs	r0, r3, #4
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfbc      	itt	lt
 8009086:	580b      	ldrlt	r3, [r1, r0]
 8009088:	18c0      	addlt	r0, r0, r3
 800908a:	4770      	bx	lr

0800908c <_raise_r>:
 800908c:	291f      	cmp	r1, #31
 800908e:	b538      	push	{r3, r4, r5, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	460d      	mov	r5, r1
 8009094:	d904      	bls.n	80090a0 <_raise_r+0x14>
 8009096:	2316      	movs	r3, #22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	f04f 30ff 	mov.w	r0, #4294967295
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090a2:	b112      	cbz	r2, 80090aa <_raise_r+0x1e>
 80090a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a8:	b94b      	cbnz	r3, 80090be <_raise_r+0x32>
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f830 	bl	8009110 <_getpid_r>
 80090b0:	462a      	mov	r2, r5
 80090b2:	4601      	mov	r1, r0
 80090b4:	4620      	mov	r0, r4
 80090b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ba:	f000 b817 	b.w	80090ec <_kill_r>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00a      	beq.n	80090d8 <_raise_r+0x4c>
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	d103      	bne.n	80090ce <_raise_r+0x42>
 80090c6:	2316      	movs	r3, #22
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7e7      	b.n	800909e <_raise_r+0x12>
 80090ce:	2400      	movs	r4, #0
 80090d0:	4628      	mov	r0, r5
 80090d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090d6:	4798      	blx	r3
 80090d8:	2000      	movs	r0, #0
 80090da:	e7e0      	b.n	800909e <_raise_r+0x12>

080090dc <raise>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <raise+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfd3 	b.w	800908c <_raise_r>
 80090e6:	bf00      	nop
 80090e8:	2000000c 	.word	0x2000000c

080090ec <_kill_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	2300      	movs	r3, #0
 80090f0:	4d06      	ldr	r5, [pc, #24]	; (800910c <_kill_r+0x20>)
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f7f8 f9f8 	bl	80014ee <_kill>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d102      	bne.n	8009108 <_kill_r+0x1c>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b103      	cbz	r3, 8009108 <_kill_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	20000db0 	.word	0x20000db0

08009110 <_getpid_r>:
 8009110:	f7f8 b9e6 	b.w	80014e0 <_getpid>

08009114 <__sread>:
 8009114:	b510      	push	{r4, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	f000 f894 	bl	8009248 <_read_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	bfab      	itete	ge
 8009124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009126:	89a3      	ldrhlt	r3, [r4, #12]
 8009128:	181b      	addge	r3, r3, r0
 800912a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800912e:	bfac      	ite	ge
 8009130:	6563      	strge	r3, [r4, #84]	; 0x54
 8009132:	81a3      	strhlt	r3, [r4, #12]
 8009134:	bd10      	pop	{r4, pc}

08009136 <__swrite>:
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	461f      	mov	r7, r3
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	4605      	mov	r5, r0
 8009140:	05db      	lsls	r3, r3, #23
 8009142:	460c      	mov	r4, r1
 8009144:	4616      	mov	r6, r2
 8009146:	d505      	bpl.n	8009154 <__swrite+0x1e>
 8009148:	2302      	movs	r3, #2
 800914a:	2200      	movs	r2, #0
 800914c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009150:	f000 f868 	bl	8009224 <_lseek_r>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	4632      	mov	r2, r6
 8009158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	4628      	mov	r0, r5
 8009160:	463b      	mov	r3, r7
 8009162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	f000 b817 	b.w	800919c <_write_r>

0800916e <__sseek>:
 800916e:	b510      	push	{r4, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009176:	f000 f855 	bl	8009224 <_lseek_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	bf15      	itete	ne
 8009180:	6560      	strne	r0, [r4, #84]	; 0x54
 8009182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800918a:	81a3      	strheq	r3, [r4, #12]
 800918c:	bf18      	it	ne
 800918e:	81a3      	strhne	r3, [r4, #12]
 8009190:	bd10      	pop	{r4, pc}

08009192 <__sclose>:
 8009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009196:	f000 b813 	b.w	80091c0 <_close_r>
	...

0800919c <_write_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	2200      	movs	r2, #0
 80091a6:	4d05      	ldr	r5, [pc, #20]	; (80091bc <_write_r+0x20>)
 80091a8:	602a      	str	r2, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f8 f9d6 	bl	800155c <_write>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_write_r+0x1e>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_write_r+0x1e>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20000db0 	.word	0x20000db0

080091c0 <_close_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	2300      	movs	r3, #0
 80091c4:	4d05      	ldr	r5, [pc, #20]	; (80091dc <_close_r+0x1c>)
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7f8 f9e2 	bl	8001594 <_close>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_close_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_close_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000db0 	.word	0x20000db0

080091e0 <_fstat_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	2300      	movs	r3, #0
 80091e4:	4d06      	ldr	r5, [pc, #24]	; (8009200 <_fstat_r+0x20>)
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	f7f8 f9dc 	bl	80015aa <_fstat>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	d102      	bne.n	80091fc <_fstat_r+0x1c>
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	b103      	cbz	r3, 80091fc <_fstat_r+0x1c>
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
 80091fe:	bf00      	nop
 8009200:	20000db0 	.word	0x20000db0

08009204 <_isatty_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	2300      	movs	r3, #0
 8009208:	4d05      	ldr	r5, [pc, #20]	; (8009220 <_isatty_r+0x1c>)
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	f7f8 f9da 	bl	80015c8 <_isatty>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_isatty_r+0x1a>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_isatty_r+0x1a>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20000db0 	.word	0x20000db0

08009224 <_lseek_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	2200      	movs	r2, #0
 800922e:	4d05      	ldr	r5, [pc, #20]	; (8009244 <_lseek_r+0x20>)
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	f7f8 f9d2 	bl	80015dc <_lseek>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_lseek_r+0x1e>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_lseek_r+0x1e>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20000db0 	.word	0x20000db0

08009248 <_read_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	2200      	movs	r2, #0
 8009252:	4d05      	ldr	r5, [pc, #20]	; (8009268 <_read_r+0x20>)
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7f8 f963 	bl	8001522 <_read>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_read_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_read_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20000db0 	.word	0x20000db0

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
