
MPFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b50  080106f8  080106f8  000206f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012248  08012248  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08012248  08012248  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012248  08012248  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801224c  0801224c  0002224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b10  200001f8  08012444  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d08  08012444  00031d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a983  00000000  00000000  0003021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d5  00000000  00000000  0004aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  0004f478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  00050ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002045e  00000000  00000000  00052700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a0a  00000000  00000000  00072b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997e4  00000000  00000000  0009a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a4  00000000  00000000  00133d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080106dc 	.word	0x080106dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	080106dc 	.word	0x080106dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d107      	bne.n	8000abc <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	e055      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	if (!s2)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10d      	bne.n	8000ade <cJSON_strcasecmp+0x42>
		return 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e050      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <cJSON_strcasecmp+0x36>
			return 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e04a      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <cJSON_strcasecmp+0x62>
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	f103 0220 	add.w	r2, r3, #32
 8000afc:	e000      	b.n	8000b00 <cJSON_strcasecmp+0x64>
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	491a      	ldr	r1, [pc, #104]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b0c:	440b      	add	r3, r1
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <cJSON_strcasecmp+0x82>
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	e000      	b.n	8000b20 <cJSON_strcasecmp+0x84>
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d0d0      	beq.n	8000ac6 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	737b      	strb	r3, [r7, #13]
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d103      	bne.n	8000b44 <cJSON_strcasecmp+0xa8>
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	f103 0220 	add.w	r2, r3, #32
 8000b42:	e000      	b.n	8000b46 <cJSON_strcasecmp+0xaa>
 8000b44:	7b7a      	ldrb	r2, [r7, #13]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	733b      	strb	r3, [r7, #12]
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4908      	ldr	r1, [pc, #32]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b52:	440b      	add	r3, r1
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d102      	bne.n	8000b64 <cJSON_strcasecmp+0xc8>
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	3320      	adds	r3, #32
 8000b62:	e000      	b.n	8000b66 <cJSON_strcasecmp+0xca>
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	1ad3      	subs	r3, r2, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	08011e38 	.word	0x08011e38

08000b78 <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
      size_t len;
      char* copy;

      len = strlen(str) + 1;
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff faef 	bl	8000164 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
      if (!(copy = (char*)cJSON_malloc(len))) return 0;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <cJSON_strdup+0x3c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	4798      	blx	r3
 8000b94:	60b8      	str	r0, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <cJSON_strdup+0x28>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e005      	b.n	8000bac <cJSON_strdup+0x34>
      memcpy(copy,str,len);
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f00b fe61 	bl	800c86c <memcpy>
      return copy;
 8000baa:	68bb      	ldr	r3, [r7, #8]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <cJSON_New_Item+0x2c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2028      	movs	r0, #40	; 0x28
 8000bc4:	4798      	blx	r3
 8000bc6:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <cJSON_New_Item+0x20>
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00b fe58 	bl	800c888 <memset>
	return node;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8000bf0:	e037      	b.n	8000c62 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d108      	bne.n	8000c16 <cJSON_Delete+0x2e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d004      	beq.n	8000c16 <cJSON_Delete+0x2e>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ffe9 	bl	8000be8 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <cJSON_Delete+0x4e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <cJSON_Delete+0x4e>
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <cJSON_Delete+0x8c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6912      	ldr	r2, [r2, #16]
 8000c32:	4610      	mov	r0, r2
 8000c34:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <cJSON_Delete+0x6e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d005      	beq.n	8000c56 <cJSON_Delete+0x6e>
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <cJSON_Delete+0x8c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	6a12      	ldr	r2, [r2, #32]
 8000c52:	4610      	mov	r0, r2
 8000c54:	4798      	blx	r3
		cJSON_free(c);
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <cJSON_Delete+0x8c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
		c=next;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	607b      	str	r3, [r7, #4]
	while (c)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1c4      	bne.n	8000bf2 <cJSON_Delete+0xa>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004

08000c78 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <parse_number+0x210>)
 8000c94:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8000cb2:	d107      	bne.n	8000cc4 <parse_number+0x4c>
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b74      	ldr	r3, [pc, #464]	; (8000e8c <parse_number+0x214>)
 8000cba:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b30      	cmp	r3, #48	; 0x30
 8000cca:	d102      	bne.n	8000cd2 <parse_number+0x5a>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b30      	cmp	r3, #48	; 0x30
 8000cd8:	d928      	bls.n	8000d2c <parse_number+0xb4>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b39      	cmp	r3, #57	; 0x39
 8000ce0:	d824      	bhi.n	8000d2c <parse_number+0xb4>
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <parse_number+0x218>)
 8000ce8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000cec:	f7ff fbfe 	bl	80004ec <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	603a      	str	r2, [r7, #0]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b30      	subs	r3, #48	; 0x30
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fb88 	bl	8000418 <__aeabi_i2d>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fa36 	bl	8000180 <__adddf3>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b2f      	cmp	r3, #47	; 0x2f
 8000d22:	d903      	bls.n	8000d2c <parse_number+0xb4>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b39      	cmp	r3, #57	; 0x39
 8000d2a:	d9da      	bls.n	8000ce2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b2e      	cmp	r3, #46	; 0x2e
 8000d32:	d13c      	bne.n	8000dae <parse_number+0x136>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d3c:	d937      	bls.n	8000dae <parse_number+0x136>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b39      	cmp	r3, #57	; 0x39
 8000d46:	d832      	bhi.n	8000dae <parse_number+0x136>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <parse_number+0x218>)
 8000d54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d58:	f7ff fbc8 	bl	80004ec <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4614      	mov	r4, r2
 8000d62:	461d      	mov	r5, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	603a      	str	r2, [r7, #0]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3b30      	subs	r3, #48	; 0x30
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fb52 	bl	8000418 <__aeabi_i2d>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	f7ff fa00 	bl	8000180 <__adddf3>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <parse_number+0x210>)
 8000d8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d92:	f7ff f9f3 	bl	800017c <__aeabi_dsub>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b2f      	cmp	r3, #47	; 0x2f
 8000da4:	d903      	bls.n	8000dae <parse_number+0x136>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b39      	cmp	r3, #57	; 0x39
 8000dac:	d9cf      	bls.n	8000d4e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b65      	cmp	r3, #101	; 0x65
 8000db4:	d003      	beq.n	8000dbe <parse_number+0x146>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b45      	cmp	r3, #69	; 0x45
 8000dbc:	d12a      	bne.n	8000e14 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b2b      	cmp	r3, #43	; 0x2b
 8000dca:	d103      	bne.n	8000dd4 <parse_number+0x15c>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	e017      	b.n	8000e04 <parse_number+0x18c>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b2d      	cmp	r3, #45	; 0x2d
 8000dda:	d113      	bne.n	8000e04 <parse_number+0x18c>
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8000de8:	e00c      	b.n	8000e04 <parse_number+0x18c>
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	603a      	str	r2, [r7, #0]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3b30      	subs	r3, #48	; 0x30
 8000e00:	440b      	add	r3, r1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b2f      	cmp	r3, #47	; 0x2f
 8000e0a:	d903      	bls.n	8000e14 <parse_number+0x19c>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b39      	cmp	r3, #57	; 0x39
 8000e12:	d9ea      	bls.n	8000dea <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8000e14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e1c:	f7ff fb66 	bl	80004ec <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4614      	mov	r4, r2
 8000e26:	461d      	mov	r5, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff faf1 	bl	8000418 <__aeabi_i2d>
 8000e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e3a:	f7ff f9a1 	bl	8000180 <__adddf3>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	4912      	ldr	r1, [pc, #72]	; (8000e90 <parse_number+0x218>)
 8000e48:	f00e fd66 	bl	800f918 <pow>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4620      	mov	r0, r4
 8000e52:	4629      	mov	r1, r5
 8000e54:	f7ff fb4a 	bl	80004ec <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e66:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8000e6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e6e:	f7ff fded 	bl	8000a4c <__aeabi_d2iz>
 8000e72:	4602      	mov	r2, r0
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	60da      	str	r2, [r3, #12]
	return num;
 8000e7e:	683b      	ldr	r3, [r7, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	3ff00000 	.word	0x3ff00000
 8000e8c:	bff00000 	.word	0xbff00000
 8000e90:	40240000 	.word	0x40240000

08000e94 <pow2gt>:

static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	105b      	asrs	r3, r3, #1
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	109b      	asrs	r3, r3, #2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	111b      	asrs	r3, r3, #4
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	121b      	asrs	r3, r3, #8
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	141b      	asrs	r3, r3, #16
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
	...

08000ee4 <ensure>:

typedef struct {char *buffer; int length; int offset; } printbuffer;

static char* ensure(printbuffer *p,int needed)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	char *newbuffer;int newsize;
	if (!p || !p->buffer) return 0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <ensure+0x18>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <ensure+0x1c>
 8000efc:	2300      	movs	r3, #0
 8000efe:	e046      	b.n	8000f8e <ensure+0xaa>
	needed+=p->offset;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	603b      	str	r3, [r7, #0]
	if (needed<=p->length) return p->buffer+p->offset;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dc05      	bgt.n	8000f20 <ensure+0x3c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6892      	ldr	r2, [r2, #8]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	e036      	b.n	8000f8e <ensure+0xaa>

	newsize=pow2gt(needed);
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f7ff ffb7 	bl	8000e94 <pow2gt>
 8000f26:	60f8      	str	r0, [r7, #12]
	newbuffer=(char*)cJSON_malloc(newsize);
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <ensure+0xb4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4798      	blx	r3
 8000f32:	60b8      	str	r0, [r7, #8]
	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <ensure+0x72>
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <ensure+0xb8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	4610      	mov	r0, r2
 8000f44:	4798      	blx	r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	e01b      	b.n	8000f8e <ensure+0xaa>
	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d007      	beq.n	8000f6c <ensure+0x88>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	461a      	mov	r2, r3
 8000f66:	68b8      	ldr	r0, [r7, #8]
 8000f68:	f00b fc80 	bl	800c86c <memcpy>
	cJSON_free(p->buffer);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <ensure+0xb8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4610      	mov	r0, r2
 8000f76:	4798      	blx	r3
	p->length=newsize;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	605a      	str	r2, [r3, #4]
	p->buffer=newbuffer;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	601a      	str	r2, [r3, #0]
	return newbuffer+p->offset;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4413      	add	r3, r2
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <update>:

static int update(printbuffer *p)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	char *str;
	if (!p || !p->buffer) return 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <update+0x16>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <update+0x1a>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e00d      	b.n	8000fd6 <update+0x36>
	str=p->buffer+p->offset;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6892      	ldr	r2, [r2, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
	return p->offset+strlen(str);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	461c      	mov	r4, r3
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff f8c9 	bl	8000164 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4423      	add	r3, r4
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
	...

08000fe0 <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item,printbuffer *p)
{
 8000fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fe4:	b08c      	sub	sp, #48	; 0x30
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	61f8      	str	r0, [r7, #28]
 8000fea:	61b9      	str	r1, [r7, #24]
	char *str=0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	double d=item->valuedouble;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (d==0)
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001006:	f7ff fcd9 	bl	80009bc <__aeabi_dcmpeq>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d018      	beq.n	8001042 <print_number+0x62>
	{
		if (p)	str=ensure(p,2);
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <print_number+0x42>
 8001016:	2102      	movs	r1, #2
 8001018:	69b8      	ldr	r0, [r7, #24]
 800101a:	f7ff ff63 	bl	8000ee4 <ensure>
 800101e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001020:	e004      	b.n	800102c <print_number+0x4c>
		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
 8001022:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <print_number+0x1f0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2002      	movs	r0, #2
 8001028:	4798      	blx	r3
 800102a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (str) strcpy(str,"0");
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80b8 	beq.w	80011a4 <print_number+0x1c4>
 8001034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001036:	4967      	ldr	r1, [pc, #412]	; (80011d4 <print_number+0x1f4>)
 8001038:	461a      	mov	r2, r3
 800103a:	460b      	mov	r3, r1
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	8013      	strh	r3, [r2, #0]
 8001040:	e0b0      	b.n	80011a4 <print_number+0x1c4>
	}
	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9e6 	bl	8000418 <__aeabi_i2d>
 800104c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001050:	f7ff f894 	bl	800017c <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4614      	mov	r4, r2
 800105a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <print_number+0x1f8>)
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff fcbc 	bl	80009e4 <__aeabi_dcmple>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d02c      	beq.n	80010cc <print_number+0xec>
 8001072:	a34f      	add	r3, pc, #316	; (adr r3, 80011b0 <print_number+0x1d0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107c:	f7ff fcb2 	bl	80009e4 <__aeabi_dcmple>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d022      	beq.n	80010cc <print_number+0xec>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b54      	ldr	r3, [pc, #336]	; (80011dc <print_number+0x1fc>)
 800108c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001090:	f7ff fcb2 	bl	80009f8 <__aeabi_dcmpge>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d018      	beq.n	80010cc <print_number+0xec>
	{
		if (p)	str=ensure(p,21);
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <print_number+0xcc>
 80010a0:	2115      	movs	r1, #21
 80010a2:	69b8      	ldr	r0, [r7, #24]
 80010a4:	f7ff ff1e 	bl	8000ee4 <ensure>
 80010a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010aa:	e004      	b.n	80010b6 <print_number+0xd6>
		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <print_number+0x1f0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2015      	movs	r0, #21
 80010b2:	4798      	blx	r3
 80010b4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (str)	sprintf(str,"%d",item->valueint);
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d073      	beq.n	80011a4 <print_number+0x1c4>
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4947      	ldr	r1, [pc, #284]	; (80011e0 <print_number+0x200>)
 80010c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c6:	f00c f967 	bl	800d398 <siprintf>
 80010ca:	e06b      	b.n	80011a4 <print_number+0x1c4>
	}
	else
	{
		if (p)	str=ensure(p,64);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <print_number+0xfe>
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	69b8      	ldr	r0, [r7, #24]
 80010d6:	f7ff ff05 	bl	8000ee4 <ensure>
 80010da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010dc:	e004      	b.n	80010e8 <print_number+0x108>
		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
 80010de:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <print_number+0x1f0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2040      	movs	r0, #64	; 0x40
 80010e4:	4798      	blx	r3
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (str)
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d05a      	beq.n	80011a4 <print_number+0x1c4>
		{
			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
 80010ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010f2:	f00e fb91 	bl	800f818 <floor>
 80010f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010fa:	f7ff f83f 	bl	800017c <__aeabi_dsub>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4690      	mov	r8, r2
 8001104:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <print_number+0x1f8>)
 800110e:	4640      	mov	r0, r8
 8001110:	4649      	mov	r1, r9
 8001112:	f7ff fc67 	bl	80009e4 <__aeabi_dcmple>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d016      	beq.n	800114a <print_number+0x16a>
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	a323      	add	r3, pc, #140	; (adr r3, 80011b8 <print_number+0x1d8>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <print_number+0x16a>
 800113c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001140:	4928      	ldr	r1, [pc, #160]	; (80011e4 <print_number+0x204>)
 8001142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001144:	f00c f928 	bl	800d398 <siprintf>
 8001148:	e02c      	b.n	80011a4 <print_number+0x1c4>
			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	a31a      	add	r3, pc, #104	; (adr r3, 80011c0 <print_number+0x1e0>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001160:	f7ff fc36 	bl	80009d0 <__aeabi_dcmplt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <print_number+0x1aa>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	a314      	add	r3, pc, #80	; (adr r3, 80011c8 <print_number+0x1e8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001180:	f7ff fc44 	bl	8000a0c <__aeabi_dcmpgt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <print_number+0x1b8>
 800118a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800118e:	4916      	ldr	r1, [pc, #88]	; (80011e8 <print_number+0x208>)
 8001190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001192:	f00c f901 	bl	800d398 <siprintf>
 8001196:	e005      	b.n	80011a4 <print_number+0x1c4>
			else												sprintf(str,"%f",d);
 8001198:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <print_number+0x20c>)
 800119e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011a0:	f00c f8fa 	bl	800d398 <siprintf>
		}
	}
	return str;
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b0:	ffc00000 	.word	0xffc00000
 80011b4:	41dfffff 	.word	0x41dfffff
 80011b8:	e4c2f344 	.word	0xe4c2f344
 80011bc:	4c63e9e4 	.word	0x4c63e9e4
 80011c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80011c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80011c8:	00000000 	.word	0x00000000
 80011cc:	41cdcd65 	.word	0x41cdcd65
 80011d0:	20000000 	.word	0x20000000
 80011d4:	080106f8 	.word	0x080106f8
 80011d8:	3cb00000 	.word	0x3cb00000
 80011dc:	c1e00000 	.word	0xc1e00000
 80011e0:	080106fc 	.word	0x080106fc
 80011e4:	08010700 	.word	0x08010700
 80011e8:	08010708 	.word	0x08010708
 80011ec:	0801070c 	.word	0x0801070c

080011f0 <parse_hex4>:

static unsigned parse_hex4(const char *str)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b2f      	cmp	r3, #47	; 0x2f
 8001202:	d90b      	bls.n	800121c <parse_hex4+0x2c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b39      	cmp	r3, #57	; 0x39
 800120a:	d807      	bhi.n	800121c <parse_hex4+0x2c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	3b30      	subs	r3, #48	; 0x30
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e021      	b.n	8001260 <parse_hex4+0x70>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b40      	cmp	r3, #64	; 0x40
 8001222:	d90b      	bls.n	800123c <parse_hex4+0x4c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b46      	cmp	r3, #70	; 0x46
 800122a:	d807      	bhi.n	800123c <parse_hex4+0x4c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	3b37      	subs	r3, #55	; 0x37
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e011      	b.n	8001260 <parse_hex4+0x70>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b60      	cmp	r3, #96	; 0x60
 8001242:	d90b      	bls.n	800125c <parse_hex4+0x6c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b66      	cmp	r3, #102	; 0x66
 800124a:	d807      	bhi.n	800125c <parse_hex4+0x6c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	3b57      	subs	r3, #87	; 0x57
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e001      	b.n	8001260 <parse_hex4+0x70>
 800125c:	2300      	movs	r3, #0
 800125e:	e0a8      	b.n	80013b2 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3301      	adds	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b2f      	cmp	r3, #47	; 0x2f
 8001272:	d90b      	bls.n	800128c <parse_hex4+0x9c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b39      	cmp	r3, #57	; 0x39
 800127a:	d807      	bhi.n	800128c <parse_hex4+0x9c>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	3b30      	subs	r3, #48	; 0x30
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e021      	b.n	80012d0 <parse_hex4+0xe0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b40      	cmp	r3, #64	; 0x40
 8001292:	d90b      	bls.n	80012ac <parse_hex4+0xbc>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b46      	cmp	r3, #70	; 0x46
 800129a:	d807      	bhi.n	80012ac <parse_hex4+0xbc>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	3b37      	subs	r3, #55	; 0x37
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e011      	b.n	80012d0 <parse_hex4+0xe0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b60      	cmp	r3, #96	; 0x60
 80012b2:	d90b      	bls.n	80012cc <parse_hex4+0xdc>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b66      	cmp	r3, #102	; 0x66
 80012ba:	d807      	bhi.n	80012cc <parse_hex4+0xdc>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	3b57      	subs	r3, #87	; 0x57
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e001      	b.n	80012d0 <parse_hex4+0xe0>
 80012cc:	2300      	movs	r3, #0
 80012ce:	e070      	b.n	80013b2 <parse_hex4+0x1c2>
	h=h<<4;str++;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3301      	adds	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2f      	cmp	r3, #47	; 0x2f
 80012e2:	d90b      	bls.n	80012fc <parse_hex4+0x10c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b39      	cmp	r3, #57	; 0x39
 80012ea:	d807      	bhi.n	80012fc <parse_hex4+0x10c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	3b30      	subs	r3, #48	; 0x30
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	e021      	b.n	8001340 <parse_hex4+0x150>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	d90b      	bls.n	800131c <parse_hex4+0x12c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b46      	cmp	r3, #70	; 0x46
 800130a:	d807      	bhi.n	800131c <parse_hex4+0x12c>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4413      	add	r3, r2
 8001316:	3b37      	subs	r3, #55	; 0x37
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e011      	b.n	8001340 <parse_hex4+0x150>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b60      	cmp	r3, #96	; 0x60
 8001322:	d90b      	bls.n	800133c <parse_hex4+0x14c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b66      	cmp	r3, #102	; 0x66
 800132a:	d807      	bhi.n	800133c <parse_hex4+0x14c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	3b57      	subs	r3, #87	; 0x57
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e001      	b.n	8001340 <parse_hex4+0x150>
 800133c:	2300      	movs	r3, #0
 800133e:	e038      	b.n	80013b2 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b2f      	cmp	r3, #47	; 0x2f
 8001352:	d90b      	bls.n	800136c <parse_hex4+0x17c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b39      	cmp	r3, #57	; 0x39
 800135a:	d807      	bhi.n	800136c <parse_hex4+0x17c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	3b30      	subs	r3, #48	; 0x30
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e021      	b.n	80013b0 <parse_hex4+0x1c0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b40      	cmp	r3, #64	; 0x40
 8001372:	d90b      	bls.n	800138c <parse_hex4+0x19c>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b46      	cmp	r3, #70	; 0x46
 800137a:	d807      	bhi.n	800138c <parse_hex4+0x19c>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	3b37      	subs	r3, #55	; 0x37
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e011      	b.n	80013b0 <parse_hex4+0x1c0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d90b      	bls.n	80013ac <parse_hex4+0x1bc>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b66      	cmp	r3, #102	; 0x66
 800139a:	d807      	bhi.n	80013ac <parse_hex4+0x1bc>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	3b57      	subs	r3, #87	; 0x57
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e001      	b.n	80013b0 <parse_hex4+0x1c0>
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <parse_hex4+0x1c2>
	return h;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b22      	cmp	r3, #34	; 0x22
 80013d6:	d00d      	beq.n	80013f4 <parse_string+0x38>
 80013d8:	4aa3      	ldr	r2, [pc, #652]	; (8001668 <parse_string+0x2ac>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	e168      	b.n	80016b4 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	61fa      	str	r2, [r7, #28]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b5c      	cmp	r3, #92	; 0x5c
 80013ec:	d102      	bne.n	80013f4 <parse_string+0x38>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b22      	cmp	r3, #34	; 0x22
 80013fa:	d009      	beq.n	8001410 <parse_string+0x54>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <parse_string+0x54>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e8      	bne.n	80013e2 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <parse_string+0x2b0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	3201      	adds	r2, #1
 8001418:	4610      	mov	r0, r2
 800141a:	4798      	blx	r3
 800141c:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <parse_string+0x6c>
 8001424:	2300      	movs	r3, #0
 8001426:	e145      	b.n	80016b4 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001432:	e125      	b.n	8001680 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b5c      	cmp	r3, #92	; 0x5c
 800143a:	d008      	beq.n	800144e <parse_string+0x92>
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	1c53      	adds	r3, r2, #1
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1c59      	adds	r1, r3, #1
 8001446:	61b9      	str	r1, [r7, #24]
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e118      	b.n	8001680 <parse_string+0x2c4>
		else
		{
			ptr++;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3b62      	subs	r3, #98	; 0x62
 800145a:	2b13      	cmp	r3, #19
 800145c:	f200 80fc 	bhi.w	8001658 <parse_string+0x29c>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <parse_string+0xac>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	080014b9 	.word	0x080014b9
 800146c:	08001659 	.word	0x08001659
 8001470:	08001659 	.word	0x08001659
 8001474:	08001659 	.word	0x08001659
 8001478:	080014c5 	.word	0x080014c5
 800147c:	08001659 	.word	0x08001659
 8001480:	08001659 	.word	0x08001659
 8001484:	08001659 	.word	0x08001659
 8001488:	08001659 	.word	0x08001659
 800148c:	08001659 	.word	0x08001659
 8001490:	08001659 	.word	0x08001659
 8001494:	08001659 	.word	0x08001659
 8001498:	080014d1 	.word	0x080014d1
 800149c:	08001659 	.word	0x08001659
 80014a0:	08001659 	.word	0x08001659
 80014a4:	08001659 	.word	0x08001659
 80014a8:	080014dd 	.word	0x080014dd
 80014ac:	08001659 	.word	0x08001659
 80014b0:	080014e9 	.word	0x080014e9
 80014b4:	080014f5 	.word	0x080014f5
			{
				case 'b': *ptr2++='\b';	break;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	61ba      	str	r2, [r7, #24]
 80014be:	2208      	movs	r2, #8
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e0da      	b.n	800167a <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	61ba      	str	r2, [r7, #24]
 80014ca:	220c      	movs	r2, #12
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e0d4      	b.n	800167a <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	61ba      	str	r2, [r7, #24]
 80014d6:	220a      	movs	r2, #10
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e0ce      	b.n	800167a <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	61ba      	str	r2, [r7, #24]
 80014e2:	220d      	movs	r2, #13
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e0c8      	b.n	800167a <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	61ba      	str	r2, [r7, #24]
 80014ee:	2209      	movs	r2, #9
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e0c2      	b.n	800167a <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe79 	bl	80011f0 <parse_hex4>
 80014fe:	6138      	str	r0, [r7, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3304      	adds	r3, #4
 8001504:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800150c:	d304      	bcc.n	8001518 <parse_string+0x15c>
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001514:	f0c0 80b0 	bcc.w	8001678 <parse_string+0x2bc>
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80ac 	beq.w	8001678 <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001526:	d32d      	bcc.n	8001584 <parse_string+0x1c8>
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800152e:	d229      	bcs.n	8001584 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3301      	adds	r3, #1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b5c      	cmp	r3, #92	; 0x5c
 8001538:	f040 809e 	bne.w	8001678 <parse_string+0x2bc>
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3302      	adds	r3, #2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b75      	cmp	r3, #117	; 0x75
 8001544:	f040 8098 	bne.w	8001678 <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3303      	adds	r3, #3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe4f 	bl	80011f0 <parse_hex4>
 8001552:	60b8      	str	r0, [r7, #8]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3306      	adds	r3, #6
 8001558:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001560:	f0c0 808a 	bcc.w	8001678 <parse_string+0x2bc>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800156a:	f080 8085 	bcs.w	8001678 <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	029a      	lsls	r2, r3, #10
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <parse_string+0x2b4>)
 8001574:	4013      	ands	r3, r2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800157c:	4313      	orrs	r3, r2
 800157e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001582:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 8001584:	2304      	movs	r3, #4
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b7f      	cmp	r3, #127	; 0x7f
 800158c:	d802      	bhi.n	8001594 <parse_string+0x1d8>
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e00c      	b.n	80015ae <parse_string+0x1f2>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159a:	d202      	bcs.n	80015a2 <parse_string+0x1e6>
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e005      	b.n	80015ae <parse_string+0x1f2>
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a8:	d201      	bcs.n	80015ae <parse_string+0x1f2>
 80015aa:	2303      	movs	r3, #3
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d847      	bhi.n	800164e <parse_string+0x292>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <parse_string+0x208>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	08001635 	.word	0x08001635
 80015c8:	08001615 	.word	0x08001615
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	080015d5 	.word	0x080015d5
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	3a01      	subs	r2, #1
 80015e2:	61ba      	str	r2, [r7, #24]
 80015e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	3a01      	subs	r2, #1
 8001602:	61ba      	str	r2, [r7, #24]
 8001604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001608:	b2da      	uxtb	r2, r3
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161c:	b2db      	uxtb	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	3a01      	subs	r2, #1
 8001622:	61ba      	str	r2, [r7, #24]
 8001624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001628:	b2da      	uxtb	r2, r3
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <parse_string+0x2b8>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4413      	add	r3, r2
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	3901      	subs	r1, #1
 8001644:	61b9      	str	r1, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	b2da      	uxtb	r2, r3
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4413      	add	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
					break;
 8001656:	e010      	b.n	800167a <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	61ba      	str	r2, [r7, #24]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e009      	b.n	800167a <parse_string+0x2be>
 8001666:	bf00      	nop
 8001668:	20000214 	.word	0x20000214
 800166c:	20000000 	.word	0x20000000
 8001670:	000ffc00 	.word	0x000ffc00
 8001674:	08010b6c 	.word	0x08010b6c
			}
			ptr++;
 8001678:	bf00      	nop
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b22      	cmp	r3, #34	; 0x22
 8001686:	d004      	beq.n	8001692 <parse_string+0x2d6>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f aed1 	bne.w	8001434 <parse_string+0x78>
		}
	}
	*ptr2=0;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b22      	cmp	r3, #34	; 0x22
 800169e:	d102      	bne.n	80016a6 <parse_string+0x2ea>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	60da      	str	r2, [r3, #12]
	return ptr;
 80016b2:	69fb      	ldr	r3, [r7, #28]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str,printbuffer *p)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
	
	for (ptr=str;*ptr;ptr++) flag|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e018      	b.n	8001706 <print_string_ptr+0x4a>
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <print_string_ptr+0x28>
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b1f      	cmp	r3, #31
 80016e2:	d907      	bls.n	80016f4 <print_string_ptr+0x38>
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b22      	cmp	r3, #34	; 0x22
 80016ea:	d003      	beq.n	80016f4 <print_string_ptr+0x38>
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b5c      	cmp	r3, #92	; 0x5c
 80016f2:	d101      	bne.n	80016f8 <print_string_ptr+0x3c>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <print_string_ptr+0x3e>
 80016f8:	2300      	movs	r3, #0
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e2      	bne.n	80016d4 <print_string_ptr+0x18>
	if (!flag)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d132      	bne.n	800177a <print_string_ptr+0xbe>
	{
		len=ptr-str;
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	613b      	str	r3, [r7, #16]
		if (p) out=ensure(p,len+3);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <print_string_ptr+0x76>
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	3303      	adds	r3, #3
 8001726:	4619      	mov	r1, r3
 8001728:	6838      	ldr	r0, [r7, #0]
 800172a:	f7ff fbdb 	bl	8000ee4 <ensure>
 800172e:	6178      	str	r0, [r7, #20]
 8001730:	e006      	b.n	8001740 <print_string_ptr+0x84>
		else		out=(char*)cJSON_malloc(len+3);
 8001732:	4b98      	ldr	r3, [pc, #608]	; (8001994 <print_string_ptr+0x2d8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	3203      	adds	r2, #3
 800173a:	4610      	mov	r0, r2
 800173c:	4798      	blx	r3
 800173e:	6178      	str	r0, [r7, #20]
		if (!out) return 0;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <print_string_ptr+0x8e>
 8001746:	2300      	movs	r3, #0
 8001748:	e120      	b.n	800198c <print_string_ptr+0x2d0>
		ptr2=out;*ptr2++='\"';
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	61ba      	str	r2, [r7, #24]
 8001754:	2222      	movs	r2, #34	; 0x22
 8001756:	701a      	strb	r2, [r3, #0]
		strcpy(ptr2,str);
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	69b8      	ldr	r0, [r7, #24]
 800175c:	f00b fe49 	bl	800d3f2 <strcpy>
		ptr2[len]='\"';
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4413      	add	r3, r2
 8001766:	2222      	movs	r2, #34	; 0x22
 8001768:	701a      	strb	r2, [r3, #0]
		ptr2[len+1]=0;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3301      	adds	r3, #1
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		return out;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	e108      	b.n	800198c <print_string_ptr+0x2d0>
	}
	
	if (!str)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11a      	bne.n	80017b6 <print_string_ptr+0xfa>
	{
		if (p)	out=ensure(p,3);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <print_string_ptr+0xd6>
 8001786:	2103      	movs	r1, #3
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f7ff fbab 	bl	8000ee4 <ensure>
 800178e:	6178      	str	r0, [r7, #20]
 8001790:	e004      	b.n	800179c <print_string_ptr+0xe0>
		else	out=(char*)cJSON_malloc(3);
 8001792:	4b80      	ldr	r3, [pc, #512]	; (8001994 <print_string_ptr+0x2d8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2003      	movs	r0, #3
 8001798:	4798      	blx	r3
 800179a:	6178      	str	r0, [r7, #20]
		if (!out) return 0;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <print_string_ptr+0xea>
 80017a2:	2300      	movs	r3, #0
 80017a4:	e0f2      	b.n	800198c <print_string_ptr+0x2d0>
		strcpy(out,"\"\"");
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4a7b      	ldr	r2, [pc, #492]	; (8001998 <print_string_ptr+0x2dc>)
 80017aa:	8811      	ldrh	r1, [r2, #0]
 80017ac:	7892      	ldrb	r2, [r2, #2]
 80017ae:	8019      	strh	r1, [r3, #0]
 80017b0:	709a      	strb	r2, [r3, #2]
		return out;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	e0ea      	b.n	800198c <print_string_ptr+0x2d0>
	}
	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e014      	b.n	80017e6 <print_string_ptr+0x12a>
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	4619      	mov	r1, r3
 80017c0:	4876      	ldr	r0, [pc, #472]	; (800199c <print_string_ptr+0x2e0>)
 80017c2:	f00b fe09 	bl	800d3d8 <strchr>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <print_string_ptr+0x118>
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	3301      	adds	r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	e005      	b.n	80017e0 <print_string_ptr+0x124>
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	2b1f      	cmp	r3, #31
 80017d8:	d802      	bhi.n	80017e0 <print_string_ptr+0x124>
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	3305      	adds	r3, #5
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	72fb      	strb	r3, [r7, #11]
 80017ec:	7afb      	ldrb	r3, [r7, #11]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <print_string_ptr+0x142>
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	3301      	adds	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1de      	bne.n	80017bc <print_string_ptr+0x100>
	
	if (p)	out=ensure(p,len+3);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <print_string_ptr+0x158>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	3303      	adds	r3, #3
 8001808:	4619      	mov	r1, r3
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f7ff fb6a 	bl	8000ee4 <ensure>
 8001810:	6178      	str	r0, [r7, #20]
 8001812:	e006      	b.n	8001822 <print_string_ptr+0x166>
	else	out=(char*)cJSON_malloc(len+3);
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <print_string_ptr+0x2d8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	3203      	adds	r2, #3
 800181c:	4610      	mov	r0, r2
 800181e:	4798      	blx	r3
 8001820:	6178      	str	r0, [r7, #20]
	if (!out) return 0;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <print_string_ptr+0x170>
 8001828:	2300      	movs	r3, #0
 800182a:	e0af      	b.n	800198c <print_string_ptr+0x2d0>

	ptr2=out;ptr=str;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	61fb      	str	r3, [r7, #28]
	*ptr2++='\"';
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	61ba      	str	r2, [r7, #24]
 800183a:	2222      	movs	r2, #34	; 0x22
 800183c:	701a      	strb	r2, [r3, #0]
	while (*ptr)
 800183e:	e095      	b.n	800196c <print_string_ptr+0x2b0>
	{
		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b1f      	cmp	r3, #31
 8001846:	d910      	bls.n	800186a <print_string_ptr+0x1ae>
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b22      	cmp	r3, #34	; 0x22
 800184e:	d00c      	beq.n	800186a <print_string_ptr+0x1ae>
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b5c      	cmp	r3, #92	; 0x5c
 8001856:	d008      	beq.n	800186a <print_string_ptr+0x1ae>
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	1c53      	adds	r3, r2, #1
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1c59      	adds	r1, r3, #1
 8001862:	61b9      	str	r1, [r7, #24]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e080      	b.n	800196c <print_string_ptr+0x2b0>
		else
		{
			*ptr2++='\\';
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	61ba      	str	r2, [r7, #24]
 8001870:	225c      	movs	r2, #92	; 0x5c
 8001872:	701a      	strb	r2, [r3, #0]
			switch (token=*ptr++)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	61fa      	str	r2, [r7, #28]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	72fb      	strb	r3, [r7, #11]
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	2b22      	cmp	r3, #34	; 0x22
 8001882:	dc3d      	bgt.n	8001900 <print_string_ptr+0x244>
 8001884:	2b08      	cmp	r3, #8
 8001886:	db67      	blt.n	8001958 <print_string_ptr+0x29c>
 8001888:	3b08      	subs	r3, #8
 800188a:	2b1a      	cmp	r3, #26
 800188c:	d864      	bhi.n	8001958 <print_string_ptr+0x29c>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <print_string_ptr+0x1d8>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	0800191d 	.word	0x0800191d
 8001898:	0800194d 	.word	0x0800194d
 800189c:	08001935 	.word	0x08001935
 80018a0:	08001959 	.word	0x08001959
 80018a4:	08001929 	.word	0x08001929
 80018a8:	08001941 	.word	0x08001941
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001911 	.word	0x08001911
 8001900:	2b5c      	cmp	r3, #92	; 0x5c
 8001902:	d129      	bne.n	8001958 <print_string_ptr+0x29c>
			{
				case '\\':	*ptr2++='\\';	break;
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	61ba      	str	r2, [r7, #24]
 800190a:	225c      	movs	r2, #92	; 0x5c
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e02d      	b.n	800196c <print_string_ptr+0x2b0>
				case '\"':	*ptr2++='\"';	break;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	61ba      	str	r2, [r7, #24]
 8001916:	2222      	movs	r2, #34	; 0x22
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e027      	b.n	800196c <print_string_ptr+0x2b0>
				case '\b':	*ptr2++='b';	break;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	61ba      	str	r2, [r7, #24]
 8001922:	2262      	movs	r2, #98	; 0x62
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e021      	b.n	800196c <print_string_ptr+0x2b0>
				case '\f':	*ptr2++='f';	break;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	61ba      	str	r2, [r7, #24]
 800192e:	2266      	movs	r2, #102	; 0x66
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e01b      	b.n	800196c <print_string_ptr+0x2b0>
				case '\n':	*ptr2++='n';	break;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	61ba      	str	r2, [r7, #24]
 800193a:	226e      	movs	r2, #110	; 0x6e
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e015      	b.n	800196c <print_string_ptr+0x2b0>
				case '\r':	*ptr2++='r';	break;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	61ba      	str	r2, [r7, #24]
 8001946:	2272      	movs	r2, #114	; 0x72
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e00f      	b.n	800196c <print_string_ptr+0x2b0>
				case '\t':	*ptr2++='t';	break;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	61ba      	str	r2, [r7, #24]
 8001952:	2274      	movs	r2, #116	; 0x74
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e009      	b.n	800196c <print_string_ptr+0x2b0>
				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	461a      	mov	r2, r3
 800195c:	4910      	ldr	r1, [pc, #64]	; (80019a0 <print_string_ptr+0x2e4>)
 800195e:	69b8      	ldr	r0, [r7, #24]
 8001960:	f00b fd1a 	bl	800d398 <siprintf>
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	3305      	adds	r3, #5
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	bf00      	nop
	while (*ptr)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f af65 	bne.w	8001840 <print_string_ptr+0x184>
			}
		}
	}
	*ptr2++='\"';*ptr2++=0;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	61ba      	str	r2, [r7, #24]
 800197c:	2222      	movs	r2, #34	; 0x22
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	61ba      	str	r2, [r7, #24]
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	return out;
 800198a:	697b      	ldr	r3, [r7, #20]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000000 	.word	0x20000000
 8001998:	08010710 	.word	0x08010710
 800199c:	08010714 	.word	0x08010714
 80019a0:	0801071c 	.word	0x0801071c

080019a4 <print_string>:
/* Invote print_string_ptr (which is useful) on an item. */
static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe81 	bl	80016bc <print_string_ptr>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	e002      	b.n	80019d4 <skip+0x10>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3301      	adds	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <skip+0x26>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <skip+0x26>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d9f1      	bls.n	80019ce <skip+0xa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001a08:	f7ff f8d6 	bl	8000bb8 <cJSON_New_Item>
 8001a0c:	6138      	str	r0, [r7, #16]
	ep=0;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <cJSON_ParseWithOpts+0x84>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <cJSON_ParseWithOpts+0x26>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e02a      	b.n	8001a74 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ffd0 	bl	80019c4 <skip>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	6938      	ldr	r0, [r7, #16]
 8001a2a:	f000 f847 	bl	8001abc <parse_value>
 8001a2e:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d104      	bne.n	8001a40 <cJSON_ParseWithOpts+0x48>
 8001a36:	6938      	ldr	r0, [r7, #16]
 8001a38:	f7ff f8d6 	bl	8000be8 <cJSON_Delete>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e019      	b.n	8001a74 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00f      	beq.n	8001a66 <cJSON_ParseWithOpts+0x6e>
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ffbc 	bl	80019c4 <skip>
 8001a4c:	6178      	str	r0, [r7, #20]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <cJSON_ParseWithOpts+0x6e>
 8001a56:	6938      	ldr	r0, [r7, #16]
 8001a58:	f7ff f8c6 	bl	8000be8 <cJSON_Delete>
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <cJSON_ParseWithOpts+0x84>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	e006      	b.n	8001a74 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <cJSON_ParseWithOpts+0x7a>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
	return c;
 8001a72:	693b      	ldr	r3, [r7, #16]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000214 	.word	0x20000214

08001a80 <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffb3 	bl	80019f8 <cJSON_ParseWithOpts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f87e 	bl	8001bac <print_value>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <parse_value+0x14>
 8001acc:	2300      	movs	r3, #0
 8001ace:	e060      	b.n	8001b92 <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4932      	ldr	r1, [pc, #200]	; (8001b9c <parse_value+0xe0>)
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f00b fc94 	bl	800d402 <strncmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <parse_value+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	e052      	b.n	8001b92 <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001aec:	2205      	movs	r2, #5
 8001aee:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <parse_value+0xe4>)
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f00b fc86 	bl	800d402 <strncmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <parse_value+0x4c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3305      	adds	r3, #5
 8001b06:	e044      	b.n	8001b92 <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4926      	ldr	r1, [pc, #152]	; (8001ba4 <parse_value+0xe8>)
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f00b fc78 	bl	800d402 <strncmp>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <parse_value+0x6e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	e033      	b.n	8001b92 <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b22      	cmp	r3, #34	; 0x22
 8001b30:	d105      	bne.n	8001b3e <parse_value+0x82>
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fc41 	bl	80013bc <parse_string>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	e029      	b.n	8001b92 <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b2d      	cmp	r3, #45	; 0x2d
 8001b44:	d007      	beq.n	8001b56 <parse_value+0x9a>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b4c:	d909      	bls.n	8001b62 <parse_value+0xa6>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b39      	cmp	r3, #57	; 0x39
 8001b54:	d805      	bhi.n	8001b62 <parse_value+0xa6>
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff f88d 	bl	8000c78 <parse_number>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e017      	b.n	8001b92 <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b5b      	cmp	r3, #91	; 0x5b
 8001b68:	d105      	bne.n	8001b76 <parse_value+0xba>
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8e1 	bl	8001d34 <parse_array>
 8001b72:	4603      	mov	r3, r0
 8001b74:	e00d      	b.n	8001b92 <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b7b      	cmp	r3, #123	; 0x7b
 8001b7c:	d105      	bne.n	8001b8a <parse_value+0xce>
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fadb 	bl	800213c <parse_object>
 8001b86:	4603      	mov	r3, r0
 8001b88:	e003      	b.n	8001b92 <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <parse_value+0xec>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08010724 	.word	0x08010724
 8001ba0:	0801072c 	.word	0x0801072c
 8001ba4:	08010734 	.word	0x08010734
 8001ba8:	20000214 	.word	0x20000214

08001bac <print_value>:

/* Render a value to text. */
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
	char *out=0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
	if (!item) return 0;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <print_value+0x1c>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e0aa      	b.n	8001d1e <print_value+0x172>
	if (p)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d060      	beq.n	8001c90 <print_value+0xe4>
	{
		switch ((item->type)&255)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b06      	cmp	r3, #6
 8001bd6:	f200 80a1 	bhi.w	8001d1c <print_value+0x170>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <print_value+0x34>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c1d 	.word	0x08001c1d
 8001be4:	08001c3b 	.word	0x08001c3b
 8001be8:	08001bfd 	.word	0x08001bfd
 8001bec:	08001c59 	.word	0x08001c59
 8001bf0:	08001c65 	.word	0x08001c65
 8001bf4:	08001c71 	.word	0x08001c71
 8001bf8:	08001c81 	.word	0x08001c81
		{
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	6838      	ldr	r0, [r7, #0]
 8001c00:	f7ff f970 	bl	8000ee4 <ensure>
 8001c04:	6178      	str	r0, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8082 	beq.w	8001d12 <print_value+0x166>
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <print_value+0x17c>)
 8001c12:	6810      	ldr	r0, [r2, #0]
 8001c14:	6018      	str	r0, [r3, #0]
 8001c16:	7912      	ldrb	r2, [r2, #4]
 8001c18:	711a      	strb	r2, [r3, #4]
 8001c1a:	e07a      	b.n	8001d12 <print_value+0x166>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 8001c1c:	2106      	movs	r1, #6
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f7ff f960 	bl	8000ee4 <ensure>
 8001c24:	6178      	str	r0, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d074      	beq.n	8001d16 <print_value+0x16a>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <print_value+0x180>)
 8001c30:	6810      	ldr	r0, [r2, #0]
 8001c32:	6018      	str	r0, [r3, #0]
 8001c34:	8892      	ldrh	r2, [r2, #4]
 8001c36:	809a      	strh	r2, [r3, #4]
 8001c38:	e06d      	b.n	8001d16 <print_value+0x16a>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f7ff f951 	bl	8000ee4 <ensure>
 8001c42:	6178      	str	r0, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d067      	beq.n	8001d1a <print_value+0x16e>
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <print_value+0x184>)
 8001c4e:	6810      	ldr	r0, [r2, #0]
 8001c50:	6018      	str	r0, [r3, #0]
 8001c52:	7912      	ldrb	r2, [r2, #4]
 8001c54:	711a      	strb	r2, [r3, #4]
 8001c56:	e060      	b.n	8001d1a <print_value+0x16e>
			case cJSON_Number:	out=print_number(item,p);break;
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff f9c0 	bl	8000fe0 <print_number>
 8001c60:	6178      	str	r0, [r7, #20]
 8001c62:	e05b      	b.n	8001d1c <print_value+0x170>
			case cJSON_String:	out=print_string(item,p);break;
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fe9c 	bl	80019a4 <print_string>
 8001c6c:	6178      	str	r0, [r7, #20]
 8001c6e:	e055      	b.n	8001d1c <print_value+0x170>
			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f8d2 	bl	8001e20 <print_array>
 8001c7c:	6178      	str	r0, [r7, #20]
 8001c7e:	e04d      	b.n	8001d1c <print_value+0x170>
			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fb16 	bl	80022b8 <print_object>
 8001c8c:	6178      	str	r0, [r7, #20]
 8001c8e:	e045      	b.n	8001d1c <print_value+0x170>
		}
	}
	else
	{
		switch ((item->type)&255)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d840      	bhi.n	8001d1c <print_value+0x170>
 8001c9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <print_value+0xf4>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001cc7 	.word	0x08001cc7
 8001ca4:	08001cd1 	.word	0x08001cd1
 8001ca8:	08001cbd 	.word	0x08001cbd
 8001cac:	08001cdb 	.word	0x08001cdb
 8001cb0:	08001ce7 	.word	0x08001ce7
 8001cb4:	08001cf3 	.word	0x08001cf3
 8001cb8:	08001d03 	.word	0x08001d03
		{
			case cJSON_NULL:	out=cJSON_strdup("null");	break;
 8001cbc:	481a      	ldr	r0, [pc, #104]	; (8001d28 <print_value+0x17c>)
 8001cbe:	f7fe ff5b 	bl	8000b78 <cJSON_strdup>
 8001cc2:	6178      	str	r0, [r7, #20]
 8001cc4:	e02a      	b.n	8001d1c <print_value+0x170>
			case cJSON_False:	out=cJSON_strdup("false");break;
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <print_value+0x180>)
 8001cc8:	f7fe ff56 	bl	8000b78 <cJSON_strdup>
 8001ccc:	6178      	str	r0, [r7, #20]
 8001cce:	e025      	b.n	8001d1c <print_value+0x170>
			case cJSON_True:	out=cJSON_strdup("true"); break;
 8001cd0:	4817      	ldr	r0, [pc, #92]	; (8001d30 <print_value+0x184>)
 8001cd2:	f7fe ff51 	bl	8000b78 <cJSON_strdup>
 8001cd6:	6178      	str	r0, [r7, #20]
 8001cd8:	e020      	b.n	8001d1c <print_value+0x170>
			case cJSON_Number:	out=print_number(item,0);break;
 8001cda:	2100      	movs	r1, #0
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff f97f 	bl	8000fe0 <print_number>
 8001ce2:	6178      	str	r0, [r7, #20]
 8001ce4:	e01a      	b.n	8001d1c <print_value+0x170>
			case cJSON_String:	out=print_string(item,0);break;
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff fe5b 	bl	80019a4 <print_string>
 8001cee:	6178      	str	r0, [r7, #20]
 8001cf0:	e014      	b.n	8001d1c <print_value+0x170>
			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f891 	bl	8001e20 <print_array>
 8001cfe:	6178      	str	r0, [r7, #20]
 8001d00:	e00c      	b.n	8001d1c <print_value+0x170>
			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
 8001d02:	2300      	movs	r3, #0
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fad5 	bl	80022b8 <print_object>
 8001d0e:	6178      	str	r0, [r7, #20]
 8001d10:	e004      	b.n	8001d1c <print_value+0x170>
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
 8001d12:	bf00      	nop
 8001d14:	e002      	b.n	8001d1c <print_value+0x170>
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <print_value+0x170>
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
 8001d1a:	bf00      	nop
		}
	}
	return out;
 8001d1c:	697b      	ldr	r3, [r7, #20]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08010724 	.word	0x08010724
 8001d2c:	0801072c 	.word	0x0801072c
 8001d30:	08010734 	.word	0x08010734

08001d34 <parse_array>:

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b5b      	cmp	r3, #91	; 0x5b
 8001d44:	d004      	beq.n	8001d50 <parse_array+0x1c>
 8001d46:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <parse_array+0xe8>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e060      	b.n	8001e12 <parse_array+0xde>

	item->type=cJSON_Array;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2205      	movs	r2, #5
 8001d54:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe32 	bl	80019c4 <skip>
 8001d60:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b5d      	cmp	r3, #93	; 0x5d
 8001d68:	d102      	bne.n	8001d70 <parse_array+0x3c>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	e050      	b.n	8001e12 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001d70:	f7fe ff22 	bl	8000bb8 <cJSON_New_Item>
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <parse_array+0x54>
 8001d84:	2300      	movs	r3, #0
 8001d86:	e044      	b.n	8001e12 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7ff fe1b 	bl	80019c4 <skip>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fe92 	bl	8001abc <parse_value>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe12 	bl	80019c4 <skip>
 8001da0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d125      	bne.n	8001df4 <parse_array+0xc0>
 8001da8:	2300      	movs	r3, #0
 8001daa:	e032      	b.n	8001e12 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001dac:	f7fe ff04 	bl	8000bb8 <cJSON_New_Item>
 8001db0:	60b8      	str	r0, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <parse_array+0x88>
 8001db8:	2300      	movs	r3, #0
 8001dba:	e02a      	b.n	8001e12 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fdf7 	bl	80019c4 <skip>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff fe6e 	bl	8001abc <parse_value>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fdee 	bl	80019c4 <skip>
 8001de8:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <parse_array+0xc0>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e00e      	b.n	8001e12 <parse_array+0xde>
	while (*value==',')
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b2c      	cmp	r3, #44	; 0x2c
 8001dfa:	d0d7      	beq.n	8001dac <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b5d      	cmp	r3, #93	; 0x5d
 8001e02:	d102      	bne.n	8001e0a <parse_array+0xd6>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	e003      	b.n	8001e12 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <parse_array+0xe8>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000214 	.word	0x20000214

08001e20 <print_array>:

/* Render an array to text */
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
	char **entries;
	char *out=0,*ptr,*ret;int len=5;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	2305      	movs	r3, #5
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	cJSON *child=item->child;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	int numentries=0,i=0,fail=0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
	size_t tmplen=0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
	
	/* How many entries in the array? */
	while (child) numentries++,child=child->next;
 8001e4c:	e005      	b.n	8001e5a <print_array+0x3a>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f6      	bne.n	8001e4e <print_array+0x2e>
	/* Explicitly handle numentries==0 */
	if (!numentries)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <print_array+0x78>
	{
		if (p)	out=ensure(p,3);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <print_array+0x58>
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	6838      	ldr	r0, [r7, #0]
 8001e70:	f7ff f838 	bl	8000ee4 <ensure>
 8001e74:	6378      	str	r0, [r7, #52]	; 0x34
 8001e76:	e004      	b.n	8001e82 <print_array+0x62>
		else	out=(char*)cJSON_malloc(3);
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <print_array+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	4798      	blx	r3
 8001e80:	6378      	str	r0, [r7, #52]	; 0x34
		if (out) strcpy(out,"[]");
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <print_array+0x74>
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	4a81      	ldr	r2, [pc, #516]	; (8002090 <print_array+0x270>)
 8001e8c:	8811      	ldrh	r1, [r2, #0]
 8001e8e:	7892      	ldrb	r2, [r2, #2]
 8001e90:	8019      	strh	r1, [r3, #0]
 8001e92:	709a      	strb	r2, [r3, #2]
		return out;
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	e14a      	b.n	800212e <print_array+0x30e>
	}

	if (p)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d073      	beq.n	8001f86 <print_array+0x166>
	{
		/* Compose the output array. */
		i=p->offset;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	623b      	str	r3, [r7, #32]
		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	6838      	ldr	r0, [r7, #0]
 8001ea8:	f7ff f81c 	bl	8000ee4 <ensure>
 8001eac:	6338      	str	r0, [r7, #48]	; 0x30
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <print_array+0x98>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e13a      	b.n	800212e <print_array+0x30e>
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eba:	225b      	movs	r2, #91	; 0x5b
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	609a      	str	r2, [r3, #8]
		child=item->child;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
 8001ece:	e03c      	b.n	8001f4a <print_array+0x12a>
		{
			print_value(child,depth+1,fmt,p);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c59      	adds	r1, r3, #1
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eda:	f7ff fe67 	bl	8001bac <print_value>
			p->offset=update(p);
 8001ede:	6838      	ldr	r0, [r7, #0]
 8001ee0:	f7ff f85e 	bl	8000fa0 <update>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	609a      	str	r2, [r3, #8]
			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d028      	beq.n	8001f44 <print_array+0x124>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <print_array+0xdc>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e000      	b.n	8001efe <print_array+0xde>
 8001efc:	2301      	movs	r3, #1
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	3301      	adds	r3, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f7fe ffec 	bl	8000ee4 <ensure>
 8001f0c:	6338      	str	r0, [r7, #48]	; 0x30
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <print_array+0xf8>
 8001f14:	2300      	movs	r3, #0
 8001f16:	e10a      	b.n	800212e <print_array+0x30e>
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	633a      	str	r2, [r7, #48]	; 0x30
 8001f1e:	222c      	movs	r2, #44	; 0x2c
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <print_array+0x112>
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	633a      	str	r2, [r7, #48]	; 0x30
 8001f2e:	2220      	movs	r2, #32
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	441a      	add	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	609a      	str	r2, [r3, #8]
			child=child->next;
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <print_array+0x136>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0bc      	beq.n	8001ed0 <print_array+0xb0>
		}
		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
 8001f56:	2102      	movs	r1, #2
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f7fe ffc3 	bl	8000ee4 <ensure>
 8001f5e:	6338      	str	r0, [r7, #48]	; 0x30
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <print_array+0x14a>
 8001f66:	2300      	movs	r3, #0
 8001f68:	e0e1      	b.n	800212e <print_array+0x30e>
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8001f70:	225d      	movs	r2, #93	; 0x5d
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	4413      	add	r3, r2
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
 8001f84:	e0d2      	b.n	800212c <print_array+0x30c>
	}
	else
	{
		/* Allocate an array to hold the values for each */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <print_array+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4798      	blx	r3
 8001f92:	6178      	str	r0, [r7, #20]
		if (!entries) return 0;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <print_array+0x17e>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e0c7      	b.n	800212e <print_array+0x30e>
		memset(entries,0,numentries*sizeof(char*));
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f00a fc6e 	bl	800c888 <memset>
		/* Retrieve all the results: */
		child=item->child;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
 8001fb2:	e027      	b.n	8002004 <print_array+0x1e4>
		{
			ret=print_value(child,depth+1,fmt,0);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	2300      	movs	r3, #0
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fbe:	f7ff fdf5 	bl	8001bac <print_value>
 8001fc2:	6138      	str	r0, [r7, #16]
			entries[i++]=ret;
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	623a      	str	r2, [r7, #32]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4413      	add	r3, r2
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	601a      	str	r2, [r3, #0]
			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00f      	beq.n	8001ffa <print_array+0x1da>
 8001fda:	6938      	ldr	r0, [r7, #16]
 8001fdc:	f7fe f8c2 	bl	8000164 <strlen>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <print_array+0x1cc>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <print_array+0x1ce>
 8001fec:	2300      	movs	r3, #0
 8001fee:	441a      	add	r2, r3
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff8:	e001      	b.n	8001ffe <print_array+0x1de>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
			child=child->next;
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
		while (child && !fail)
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <print_array+0x1f0>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0d1      	beq.n	8001fb4 <print_array+0x194>
		}
		
		/* If we didn't fail, try to malloc the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <print_array+0x202>
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <print_array+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201c:	4610      	mov	r0, r2
 800201e:	4798      	blx	r3
 8002020:	6378      	str	r0, [r7, #52]	; 0x34
		/* If that fails, we fail. */
		if (!out) fail=1;
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <print_array+0x20c>
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]

		/* Handle failure. */
		if (fail)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01f      	beq.n	8002072 <print_array+0x252>
		{
			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	e012      	b.n	800205e <print_array+0x23e>
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <print_array+0x238>
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <print_array+0x274>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a3a      	ldr	r2, [r7, #32]
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	440a      	add	r2, r1
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4610      	mov	r0, r2
 8002056:	4798      	blx	r3
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	3301      	adds	r3, #1
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	6a3a      	ldr	r2, [r7, #32]
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	429a      	cmp	r2, r3
 8002064:	dbe8      	blt.n	8002038 <print_array+0x218>
			cJSON_free(entries);
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <print_array+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	4798      	blx	r3
			return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e05d      	b.n	800212e <print_array+0x30e>
		}
		
		/* Compose the output array. */
		*out='[';
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	225b      	movs	r2, #91	; 0x5b
 8002076:	701a      	strb	r2, [r3, #0]
		ptr=out+1;*ptr=0;
 8002078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207a:	3301      	adds	r3, #1
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	e03e      	b.n	8002108 <print_array+0x2e8>
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000
 8002090:	0801073c 	.word	0x0801073c
 8002094:	20000004 	.word	0x20000004
		{
			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4413      	add	r3, r2
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f85e 	bl	8000164 <strlen>
 80020a8:	61b8      	str	r0, [r7, #24]
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4619      	mov	r1, r3
 80020b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ba:	f00a fbd7 	bl	800c86c <memcpy>
 80020be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3b01      	subs	r3, #1
 80020ca:	6a3a      	ldr	r2, [r7, #32]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d00f      	beq.n	80020f0 <print_array+0x2d0>
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	633a      	str	r2, [r7, #48]	; 0x30
 80020d6:	222c      	movs	r2, #44	; 0x2c
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <print_array+0x2ca>
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	633a      	str	r2, [r7, #48]	; 0x30
 80020e6:	2220      	movs	r2, #32
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
			cJSON_free(entries[i]);
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <print_array+0x318>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	0092      	lsls	r2, r2, #2
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	440a      	add	r2, r1
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	4610      	mov	r0, r2
 8002100:	4798      	blx	r3
		for (i=0;i<numentries;i++)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	3301      	adds	r3, #1
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	429a      	cmp	r2, r3
 800210e:	dbc3      	blt.n	8002098 <print_array+0x278>
		}
		cJSON_free(entries);
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <print_array+0x318>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	4798      	blx	r3
		*ptr++=']';*ptr++=0;
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	633a      	str	r2, [r7, #48]	; 0x30
 800211e:	225d      	movs	r2, #93	; 0x5d
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	633a      	str	r2, [r7, #48]	; 0x30
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	}
	return out;	
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800212e:	4618      	mov	r0, r3
 8002130:	3738      	adds	r7, #56	; 0x38
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000004 	.word	0x20000004

0800213c <parse_object>:

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b7b      	cmp	r3, #123	; 0x7b
 800214c:	d004      	beq.n	8002158 <parse_object+0x1c>
 800214e:	4a59      	ldr	r2, [pc, #356]	; (80022b4 <parse_object+0x178>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	e0a8      	b.n	80022aa <parse_object+0x16e>
	
	item->type=cJSON_Object;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2206      	movs	r2, #6
 800215c:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fc2e 	bl	80019c4 <skip>
 8002168:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b7d      	cmp	r3, #125	; 0x7d
 8002170:	d102      	bne.n	8002178 <parse_object+0x3c>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	e098      	b.n	80022aa <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8002178:	f7fe fd1e 	bl	8000bb8 <cJSON_New_Item>
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <parse_object+0x54>
 800218c:	2300      	movs	r3, #0
 800218e:	e08c      	b.n	80022aa <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f7ff fc17 	bl	80019c4 <skip>
 8002196:	4603      	mov	r3, r0
 8002198:	4619      	mov	r1, r3
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff f90e 	bl	80013bc <parse_string>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fc0e 	bl	80019c4 <skip>
 80021a8:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <parse_object+0x78>
 80021b0:	2300      	movs	r3, #0
 80021b2:	e07a      	b.n	80022aa <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	621a      	str	r2, [r3, #32]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b3a      	cmp	r3, #58	; 0x3a
 80021c8:	d004      	beq.n	80021d4 <parse_object+0x98>
 80021ca:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <parse_object+0x178>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	e06a      	b.n	80022aa <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fbf3 	bl	80019c4 <skip>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fc6a 	bl	8001abc <parse_value>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fbea 	bl	80019c4 <skip>
 80021f0:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d149      	bne.n	800228c <parse_object+0x150>
 80021f8:	2300      	movs	r3, #0
 80021fa:	e056      	b.n	80022aa <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 80021fc:	f7fe fcdc 	bl	8000bb8 <cJSON_New_Item>
 8002200:	60b8      	str	r0, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <parse_object+0xd0>
 8002208:	2300      	movs	r3, #0
 800220a:	e04e      	b.n	80022aa <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fbcf 	bl	80019c4 <skip>
 8002226:	4603      	mov	r3, r0
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff f8c6 	bl	80013bc <parse_string>
 8002230:	4603      	mov	r3, r0
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fbc6 	bl	80019c4 <skip>
 8002238:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <parse_object+0x108>
 8002240:	2300      	movs	r3, #0
 8002242:	e032      	b.n	80022aa <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	621a      	str	r2, [r3, #32]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b3a      	cmp	r3, #58	; 0x3a
 8002258:	d004      	beq.n	8002264 <parse_object+0x128>
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <parse_object+0x178>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	e022      	b.n	80022aa <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fbab 	bl	80019c4 <skip>
 800226e:	4603      	mov	r3, r0
 8002270:	4619      	mov	r1, r3
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff fc22 	bl	8001abc <parse_value>
 8002278:	4603      	mov	r3, r0
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fba2 	bl	80019c4 <skip>
 8002280:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <parse_object+0x150>
 8002288:	2300      	movs	r3, #0
 800228a:	e00e      	b.n	80022aa <parse_object+0x16e>
	while (*value==',')
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b2c      	cmp	r3, #44	; 0x2c
 8002292:	d0b3      	beq.n	80021fc <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b7d      	cmp	r3, #125	; 0x7d
 800229a:	d102      	bne.n	80022a2 <parse_object+0x166>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	e003      	b.n	80022aa <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <parse_object+0x178>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000214 	.word	0x20000214

080022b8 <print_object>:

/* Render an object to text. */
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b093      	sub	sp, #76	; 0x4c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
	char **entries=0,**names=0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
 80022ce:	2300      	movs	r3, #0
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
 80022d2:	2307      	movs	r3, #7
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	2300      	movs	r3, #0
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
	cJSON *child=item->child;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
	int numentries=0,fail=0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
	size_t tmplen=0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
	/* Count the number of entries. */
	while (child) numentries++,child=child->next;
 80022ec:	e005      	b.n	80022fa <print_object+0x42>
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	3301      	adds	r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f6      	bne.n	80022ee <print_object+0x36>
	/* Explicitly handle empty object case */
	if (!numentries)
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d14b      	bne.n	800239e <print_object+0xe6>
	{
		if (p) out=ensure(p,fmt?depth+4:3);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <print_object+0x6e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <print_object+0x60>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3304      	adds	r3, #4
 8002316:	e000      	b.n	800231a <print_object+0x62>
 8002318:	2303      	movs	r3, #3
 800231a:	4619      	mov	r1, r3
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f7fe fde1 	bl	8000ee4 <ensure>
 8002322:	6478      	str	r0, [r7, #68]	; 0x44
 8002324:	e00b      	b.n	800233e <print_object+0x86>
		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
 8002326:	4b92      	ldr	r3, [pc, #584]	; (8002570 <print_object+0x2b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	2a00      	cmp	r2, #0
 800232e:	d002      	beq.n	8002336 <print_object+0x7e>
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	3204      	adds	r2, #4
 8002334:	e000      	b.n	8002338 <print_object+0x80>
 8002336:	2203      	movs	r2, #3
 8002338:	4610      	mov	r0, r2
 800233a:	4798      	blx	r3
 800233c:	6478      	str	r0, [r7, #68]	; 0x44
		if (!out)	return 0;
 800233e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <print_object+0x90>
 8002344:	2300      	movs	r3, #0
 8002346:	e2a4      	b.n	8002892 <print_object+0x5da>
		ptr=out;*ptr++='{';
 8002348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
 800234c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	643a      	str	r2, [r7, #64]	; 0x40
 8002352:	227b      	movs	r2, #123	; 0x7b
 8002354:	701a      	strb	r2, [r3, #0]
		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d014      	beq.n	8002386 <print_object+0xce>
 800235c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	643a      	str	r2, [r7, #64]	; 0x40
 8002362:	220a      	movs	r2, #10
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
 800236a:	e007      	b.n	800237c <print_object+0xc4>
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	643a      	str	r2, [r7, #64]	; 0x40
 8002372:	2209      	movs	r2, #9
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	3301      	adds	r3, #1
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3b01      	subs	r3, #1
 8002380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf2      	blt.n	800236c <print_object+0xb4>
		*ptr++='}';*ptr++=0;
 8002386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	643a      	str	r2, [r7, #64]	; 0x40
 800238c:	227d      	movs	r2, #125	; 0x7d
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	643a      	str	r2, [r7, #64]	; 0x40
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
		return out;
 800239a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239c:	e279      	b.n	8002892 <print_object+0x5da>
	}
	if (p)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8102 	beq.w	80025aa <print_object+0x2f2>
	{
		/* Compose the output: */
		i=p->offset;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <print_object+0xfe>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e000      	b.n	80023b8 <print_object+0x100>
 80023b6:	2301      	movs	r3, #1
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023bc:	3301      	adds	r3, #1
 80023be:	4619      	mov	r1, r3
 80023c0:	6838      	ldr	r0, [r7, #0]
 80023c2:	f7fe fd8f 	bl	8000ee4 <ensure>
 80023c6:	6438      	str	r0, [r7, #64]	; 0x40
 80023c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <print_object+0x11a>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e25f      	b.n	8002892 <print_object+0x5da>
		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	643a      	str	r2, [r7, #64]	; 0x40
 80023d8:	227b      	movs	r2, #123	; 0x7b
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <print_object+0x134>
 80023e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	643a      	str	r2, [r7, #64]	; 0x40
 80023e8:	220a      	movs	r2, #10
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	441a      	add	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	609a      	str	r2, [r3, #8]
		child=item->child;depth++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3301      	adds	r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
		while (child)
 800240a:	e096      	b.n	800253a <print_object+0x282>
		{
			if (fmt)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01e      	beq.n	8002450 <print_object+0x198>
			{
				ptr=ensure(p,depth);	if (!ptr) return 0;
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	6838      	ldr	r0, [r7, #0]
 8002416:	f7fe fd65 	bl	8000ee4 <ensure>
 800241a:	6438      	str	r0, [r7, #64]	; 0x40
 800241c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <print_object+0x16e>
 8002422:	2300      	movs	r3, #0
 8002424:	e235      	b.n	8002892 <print_object+0x5da>
				for (j=0;j<depth;j++) *ptr++='\t';
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
 800242a:	e007      	b.n	800243c <print_object+0x184>
 800242c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	643a      	str	r2, [r7, #64]	; 0x40
 8002432:	2209      	movs	r2, #9
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	3301      	adds	r3, #1
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
 800243c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	dbf3      	blt.n	800242c <print_object+0x174>
				p->offset+=depth;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	441a      	add	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	609a      	str	r2, [r3, #8]
			}
			print_string_ptr(child->string,p);
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f930 	bl	80016bc <print_string_ptr>
			p->offset=update(p);
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f7fe fd9f 	bl	8000fa0 <update>
 8002462:	4602      	mov	r2, r0
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	609a      	str	r2, [r3, #8]
			
			len=fmt?2:1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <print_object+0x1ba>
 800246e:	2302      	movs	r3, #2
 8002470:	e000      	b.n	8002474 <print_object+0x1bc>
 8002472:	2301      	movs	r3, #1
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len);	if (!ptr) return 0;
 8002476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002478:	6838      	ldr	r0, [r7, #0]
 800247a:	f7fe fd33 	bl	8000ee4 <ensure>
 800247e:	6438      	str	r0, [r7, #64]	; 0x40
 8002480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <print_object+0x1d2>
 8002486:	2300      	movs	r3, #0
 8002488:	e203      	b.n	8002892 <print_object+0x5da>
			*ptr++=':';if (fmt) *ptr++='\t';
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	643a      	str	r2, [r7, #64]	; 0x40
 8002490:	223a      	movs	r2, #58	; 0x3a
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <print_object+0x1ec>
 800249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	643a      	str	r2, [r7, #64]	; 0x40
 80024a0:	2209      	movs	r2, #9
 80024a2:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024aa:	441a      	add	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	609a      	str	r2, [r3, #8]
			
			print_value(child,depth,fmt,p);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b8:	f7ff fb78 	bl	8001bac <print_value>
			p->offset=update(p);
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f7fe fd6f 	bl	8000fa0 <update>
 80024c2:	4602      	mov	r2, r0
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	609a      	str	r2, [r3, #8]

			len=(fmt?1:0)+(child->next?1:0);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr=ensure(p,len+1); if (!ptr) return 0;
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	3301      	adds	r3, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	6838      	ldr	r0, [r7, #0]
 80024f0:	f7fe fcf8 	bl	8000ee4 <ensure>
 80024f4:	6438      	str	r0, [r7, #64]	; 0x40
 80024f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <print_object+0x248>
 80024fc:	2300      	movs	r3, #0
 80024fe:	e1c8      	b.n	8002892 <print_object+0x5da>
			if (child->next) *ptr++=',';
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <print_object+0x25a>
 8002508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	643a      	str	r2, [r7, #64]	; 0x40
 800250e:	222c      	movs	r2, #44	; 0x2c
 8002510:	701a      	strb	r2, [r3, #0]
			if (fmt)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <print_object+0x26a>
				*ptr++='\n';
 8002518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	643a      	str	r2, [r7, #64]	; 0x40
 800251e:	220a      	movs	r2, #10
 8002520:	701a      	strb	r2, [r3, #0]
			*ptr=0;
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
			p->offset+=len;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	441a      	add	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	609a      	str	r2, [r3, #8]
			child=child->next;
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f af65 	bne.w	800240c <print_object+0x154>
		}
		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <print_object+0x296>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3301      	adds	r3, #1
 800254c:	e000      	b.n	8002550 <print_object+0x298>
 800254e:	2302      	movs	r3, #2
 8002550:	4619      	mov	r1, r3
 8002552:	6838      	ldr	r0, [r7, #0]
 8002554:	f7fe fcc6 	bl	8000ee4 <ensure>
 8002558:	6438      	str	r0, [r7, #64]	; 0x40
 800255a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <print_object+0x2ac>
 8002560:	2300      	movs	r3, #0
 8002562:	e196      	b.n	8002892 <print_object+0x5da>
		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d011      	beq.n	800258e <print_object+0x2d6>
 800256a:	2300      	movs	r3, #0
 800256c:	63bb      	str	r3, [r7, #56]	; 0x38
 800256e:	e009      	b.n	8002584 <print_object+0x2cc>
 8002570:	20000000 	.word	0x20000000
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	643a      	str	r2, [r7, #64]	; 0x40
 800257a:	2209      	movs	r2, #9
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	3301      	adds	r3, #1
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf2      	blt.n	8002574 <print_object+0x2bc>
		*ptr++='}';*ptr=0;
 800258e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	643a      	str	r2, [r7, #64]	; 0x40
 8002594:	227d      	movs	r2, #125	; 0x7d
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		out=(p->buffer)+i;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	4413      	add	r3, r2
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
 80025a8:	e172      	b.n	8002890 <print_object+0x5d8>
	}
	else
	{
		/* Allocate space for the names and the objects */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
 80025aa:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <print_object+0x4a0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4610      	mov	r0, r2
 80025b4:	4798      	blx	r3
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24
		if (!entries) return 0;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <print_object+0x30a>
 80025be:	2300      	movs	r3, #0
 80025c0:	e167      	b.n	8002892 <print_object+0x5da>
		names=(char**)cJSON_malloc(numentries*sizeof(char*));
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <print_object+0x4a0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	4610      	mov	r0, r2
 80025cc:	4798      	blx	r3
 80025ce:	6238      	str	r0, [r7, #32]
		if (!names) {cJSON_free(entries);return 0;}
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <print_object+0x32a>
 80025d6:	4b61      	ldr	r3, [pc, #388]	; (800275c <print_object+0x4a4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025dc:	4798      	blx	r3
 80025de:	2300      	movs	r3, #0
 80025e0:	e157      	b.n	8002892 <print_object+0x5da>
		memset(entries,0,sizeof(char*)*numentries);
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2100      	movs	r1, #0
 80025ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ec:	f00a f94c 	bl	800c888 <memset>
		memset(names,0,sizeof(char*)*numentries);
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	461a      	mov	r2, r3
 80025f6:	2100      	movs	r1, #0
 80025f8:	6a38      	ldr	r0, [r7, #32]
 80025fa:	f00a f945 	bl	800c888 <memset>

		/* Collect all the results into our arrays: */
		child=item->child;depth++;if (fmt) len+=depth;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d041      	beq.n	8002694 <print_object+0x3dc>
 8002610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4413      	add	r3, r2
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (child)
 8002618:	e03c      	b.n	8002694 <print_object+0x3dc>
		{
			names[i]=str=print_string_ptr(child->string,0);
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f84b 	bl	80016bc <print_string_ptr>
 8002626:	61b8      	str	r0, [r7, #24]
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	4413      	add	r3, r2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]
			entries[i++]=ret=print_value(child,depth,fmt,0);
 8002634:	2300      	movs	r3, #0
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263c:	f7ff fab6 	bl	8001bac <print_value>
 8002640:	6178      	str	r0, [r7, #20]
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	63ba      	str	r2, [r7, #56]	; 0x38
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	4413      	add	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <print_object+0x3d2>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <print_object+0x3d2>
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7fd fd80 	bl	8000164 <strlen>
 8002664:	4604      	mov	r4, r0
 8002666:	69b8      	ldr	r0, [r7, #24]
 8002668:	f7fd fd7c 	bl	8000164 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	4423      	add	r3, r4
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	2a00      	cmp	r2, #0
 8002674:	d002      	beq.n	800267c <print_object+0x3c4>
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	3202      	adds	r2, #2
 800267a:	e000      	b.n	800267e <print_object+0x3c6>
 800267c:	2200      	movs	r2, #0
 800267e:	441a      	add	r2, r3
 8002680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002682:	4413      	add	r3, r2
 8002684:	3302      	adds	r3, #2
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002688:	e001      	b.n	800268e <print_object+0x3d6>
 800268a:	2301      	movs	r3, #1
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
			child=child->next;
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
		while (child)
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1bf      	bne.n	800261a <print_object+0x362>
		}
		
		/* Try to allocate the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <print_object+0x3f4>
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <print_object+0x4a0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a6:	4610      	mov	r0, r2
 80026a8:	4798      	blx	r3
 80026aa:	6478      	str	r0, [r7, #68]	; 0x44
		if (!out) fail=1;
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <print_object+0x3fe>
 80026b2:	2301      	movs	r3, #1
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Handle failure */
		if (fail)
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d033      	beq.n	8002724 <print_object+0x46c>
		{
			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
 80026bc:	2300      	movs	r3, #0
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c0:	e022      	b.n	8002708 <print_object+0x450>
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <print_object+0x42a>
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <print_object+0x4a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	440a      	add	r2, r1
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4610      	mov	r0, r2
 80026e0:	4798      	blx	r3
 80026e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <print_object+0x44a>
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <print_object+0x4a4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fa:	440a      	add	r2, r1
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4610      	mov	r0, r2
 8002700:	4798      	blx	r3
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	3301      	adds	r3, #1
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
 8002708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	429a      	cmp	r2, r3
 800270e:	dbd8      	blt.n	80026c2 <print_object+0x40a>
			cJSON_free(names);cJSON_free(entries);
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <print_object+0x4a4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a38      	ldr	r0, [r7, #32]
 8002716:	4798      	blx	r3
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <print_object+0x4a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271e:	4798      	blx	r3
			return 0;
 8002720:	2300      	movs	r3, #0
 8002722:	e0b6      	b.n	8002892 <print_object+0x5da>
		}
		
		/* Compose the output: */
		*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	227b      	movs	r2, #123	; 0x7b
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272c:	3301      	adds	r3, #1
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <print_object+0x488>
 8002736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	643a      	str	r2, [r7, #64]	; 0x40
 800273c:	220a      	movs	r2, #10
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
		for (i=0;i<numentries;i++)
 8002746:	2300      	movs	r3, #0
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38
 800274a:	e078      	b.n	800283e <print_object+0x586>
		{
			if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d012      	beq.n	8002778 <print_object+0x4c0>
 8002752:	2300      	movs	r3, #0
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
 8002756:	e00b      	b.n	8002770 <print_object+0x4b8>
 8002758:	20000000 	.word	0x20000000
 800275c:	20000004 	.word	0x20000004
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	643a      	str	r2, [r7, #64]	; 0x40
 8002766:	2209      	movs	r2, #9
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	3301      	adds	r3, #1
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
 8002770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	dbf3      	blt.n	8002760 <print_object+0x4a8>
			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	6a3a      	ldr	r2, [r7, #32]
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fcee 	bl	8000164 <strlen>
 8002788:	61f8      	str	r0, [r7, #28]
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	4619      	mov	r1, r3
 8002798:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800279a:	f00a f867 	bl	800c86c <memcpy>
 800279e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	643b      	str	r3, [r7, #64]	; 0x40
			*ptr++=':';if (fmt) *ptr++='\t';
 80027a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	643a      	str	r2, [r7, #64]	; 0x40
 80027ac:	223a      	movs	r2, #58	; 0x3a
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <print_object+0x508>
 80027b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	643a      	str	r2, [r7, #64]	; 0x40
 80027bc:	2209      	movs	r2, #9
 80027be:	701a      	strb	r2, [r3, #0]
			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	4413      	add	r3, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027ce:	f00a fe10 	bl	800d3f2 <strcpy>
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	4413      	add	r3, r2
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fcc1 	bl	8000164 <strlen>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e6:	4413      	add	r3, r2
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
			if (i!=numentries-1)
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	3b01      	subs	r3, #1
 80027ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d004      	beq.n	80027fe <print_object+0x546>
				*ptr++=',';
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	643a      	str	r2, [r7, #64]	; 0x40
 80027fa:	222c      	movs	r2, #44	; 0x2c
 80027fc:	701a      	strb	r2, [r3, #0]
			if (fmt)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <print_object+0x556>
				*ptr++='\n';
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	643a      	str	r2, [r7, #64]	; 0x40
 800280a:	220a      	movs	r2, #10
 800280c:	701a      	strb	r2, [r3, #0]
			*ptr=0;
 800280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
			cJSON_free(names[i]);cJSON_free(entries[i]);
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <print_object+0x5e4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	440a      	add	r2, r1
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4610      	mov	r0, r2
 8002824:	4798      	blx	r3
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <print_object+0x5e4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002830:	440a      	add	r2, r1
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4610      	mov	r0, r2
 8002836:	4798      	blx	r3
		for (i=0;i<numentries;i++)
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	3301      	adds	r3, #1
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
 800283e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	429a      	cmp	r2, r3
 8002844:	db82      	blt.n	800274c <print_object+0x494>
		}
		
		cJSON_free(names);cJSON_free(entries);
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <print_object+0x5e4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a38      	ldr	r0, [r7, #32]
 800284c:	4798      	blx	r3
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <print_object+0x5e4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002854:	4798      	blx	r3
		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00f      	beq.n	800287c <print_object+0x5c4>
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002860:	e007      	b.n	8002872 <print_object+0x5ba>
 8002862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	643a      	str	r2, [r7, #64]	; 0x40
 8002868:	2209      	movs	r2, #9
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	3301      	adds	r3, #1
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3b01      	subs	r3, #1
 8002876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf2      	blt.n	8002862 <print_object+0x5aa>
		*ptr++='}';*ptr++=0;
 800287c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	643a      	str	r2, [r7, #64]	; 0x40
 8002882:	227d      	movs	r2, #125	; 0x7d
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	643a      	str	r2, [r7, #64]	; 0x40
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
	}
	return out;	
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002892:	4618      	mov	r0, r3
 8002894:	374c      	adds	r7, #76	; 0x4c
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004

080028a0 <cJSON_GetObjectItem>:

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e002      	b.n	80028b8 <cJSON_GetObjectItem+0x18>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <cJSON_GetObjectItem+0x30>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe f8e9 	bl	8000a9c <cJSON_strcasecmp>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <cJSON_GetObjectItem+0x12>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <suffix_object>:

/* Utility for array list handling. */
static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <cJSON_AddItemToArray>:
/* Utility for handling references. */
static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <cJSON_AddItemToArray+0x42>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <cJSON_AddItemToArray+0x2a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	e00f      	b.n	800293e <cJSON_AddItemToArray+0x44>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <cJSON_AddItemToArray+0x38>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f5      	bne.n	800291e <cJSON_AddItemToArray+0x24>
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff ffd0 	bl	80028da <suffix_object>
 800293a:	e000      	b.n	800293e <cJSON_AddItemToArray+0x44>
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <cJSON_AddItemToObject>:
void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <cJSON_AddItemToObject+0x3c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <cJSON_AddItemToObject+0x26>
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <cJSON_AddItemToObject+0x44>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a12      	ldr	r2, [r2, #32]
 8002966:	4610      	mov	r0, r2
 8002968:	4798      	blx	r3
 800296a:	68b8      	ldr	r0, [r7, #8]
 800296c:	f7fe f904 	bl	8000b78 <cJSON_strdup>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	621a      	str	r2, [r3, #32]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ffbe 	bl	80028fa <cJSON_AddItemToArray>
 800297e:	e000      	b.n	8002982 <cJSON_AddItemToObject+0x3e>
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000004 	.word	0x20000004

0800298c <cJSON_CreateString>:
cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	f7fe f910 	bl	8000bb8 <cJSON_New_Item>
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <cJSON_CreateString+0x26>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2204      	movs	r2, #4
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f8e6 	bl	8000b78 <cJSON_strdup>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <cJSON_CreateObject>:
cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	f7fe f8f9 	bl	8000bb8 <cJSON_New_Item>
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <cJSON_CreateObject+0x18>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2206      	movs	r2, #6
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <test_create_json>:
//#include "main.h"
#include "../Inc/create_JSON.h"

//Функция создания JSON строки
void test_create_json(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
	char *out;

	cJSON *root, *command;

	root = cJSON_CreateObject();
 80029e6:	f7ff ffe9 	bl	80029bc <cJSON_CreateObject>
 80029ea:	60f8      	str	r0, [r7, #12]
	command = cJSON_CreateObject();
 80029ec:	f7ff ffe6 	bl	80029bc <cJSON_CreateObject>
 80029f0:	60b8      	str	r0, [r7, #8]

	cJSON_AddItemToObject(root, "INSTRUCTION", cJSON_CreateString("SET_PROGRAMM"));
 80029f2:	4831      	ldr	r0, [pc, #196]	; (8002ab8 <test_create_json+0xd8>)
 80029f4:	f7ff ffca 	bl	800298c <cJSON_CreateString>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	492f      	ldr	r1, [pc, #188]	; (8002abc <test_create_json+0xdc>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff ffa0 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root, "COMMAND", command);
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	492e      	ldr	r1, [pc, #184]	; (8002ac0 <test_create_json+0xe0>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff ff9b 	bl	8002944 <cJSON_AddItemToObject>

	cJSON_AddItemToObject(command, "TYPE", cJSON_CreateString("SET_VAIDO"));
 8002a0e:	482d      	ldr	r0, [pc, #180]	; (8002ac4 <test_create_json+0xe4>)
 8002a10:	f7ff ffbc 	bl	800298c <cJSON_CreateString>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	492b      	ldr	r1, [pc, #172]	; (8002ac8 <test_create_json+0xe8>)
 8002a1a:	68b8      	ldr	r0, [r7, #8]
 8002a1c:	f7ff ff92 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(command, "A_IN", cJSON_CreateString("VHOD1"));
 8002a20:	482a      	ldr	r0, [pc, #168]	; (8002acc <test_create_json+0xec>)
 8002a22:	f7ff ffb3 	bl	800298c <cJSON_CreateString>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <test_create_json+0xf0>)
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f7ff ff89 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(command, "RANGE_LOW", cJSON_CreateString("1.5"));
 8002a32:	4828      	ldr	r0, [pc, #160]	; (8002ad4 <test_create_json+0xf4>)
 8002a34:	f7ff ffaa 	bl	800298c <cJSON_CreateString>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4926      	ldr	r1, [pc, #152]	; (8002ad8 <test_create_json+0xf8>)
 8002a3e:	68b8      	ldr	r0, [r7, #8]
 8002a40:	f7ff ff80 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(command, "RANGE_HIGH", cJSON_CreateString("2.5"));
 8002a44:	4825      	ldr	r0, [pc, #148]	; (8002adc <test_create_json+0xfc>)
 8002a46:	f7ff ffa1 	bl	800298c <cJSON_CreateString>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4924      	ldr	r1, [pc, #144]	; (8002ae0 <test_create_json+0x100>)
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f7ff ff77 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(command, "D_OUT", cJSON_CreateString("VIHOD4"));
 8002a56:	4823      	ldr	r0, [pc, #140]	; (8002ae4 <test_create_json+0x104>)
 8002a58:	f7ff ff98 	bl	800298c <cJSON_CreateString>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4921      	ldr	r1, [pc, #132]	; (8002ae8 <test_create_json+0x108>)
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f7ff ff6e 	bl	8002944 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(command, "VAR_OUT", cJSON_CreateString("1"));
 8002a68:	4820      	ldr	r0, [pc, #128]	; (8002aec <test_create_json+0x10c>)
 8002a6a:	f7ff ff8f 	bl	800298c <cJSON_CreateString>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	491f      	ldr	r1, [pc, #124]	; (8002af0 <test_create_json+0x110>)
 8002a74:	68b8      	ldr	r0, [r7, #8]
 8002a76:	f7ff ff65 	bl	8002944 <cJSON_AddItemToObject>

	cJSON_AddItemToObject(root, "TIME", cJSON_CreateString("1122334455"));
 8002a7a:	481e      	ldr	r0, [pc, #120]	; (8002af4 <test_create_json+0x114>)
 8002a7c:	f7ff ff86 	bl	800298c <cJSON_CreateString>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	491c      	ldr	r1, [pc, #112]	; (8002af8 <test_create_json+0x118>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ff5c 	bl	8002944 <cJSON_AddItemToObject>

	out = cJSON_Print(root);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff f805 	bl	8001a9c <cJSON_Print>
 8002a92:	6078      	str	r0, [r7, #4]

	SEND_str(out);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fac9 	bl	800302c <SEND_str>
	my_write_file_json("JSON_voltage.json", out);
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4817      	ldr	r0, [pc, #92]	; (8002afc <test_create_json+0x11c>)
 8002a9e:	f004 f947 	bl	8006d30 <my_write_file_json>

	free(out);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f009 feda 	bl	800c85c <free>

	cJSON_Delete(root);
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7fe f89d 	bl	8000be8 <cJSON_Delete>
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	08010740 	.word	0x08010740
 8002abc:	08010750 	.word	0x08010750
 8002ac0:	0801075c 	.word	0x0801075c
 8002ac4:	08010764 	.word	0x08010764
 8002ac8:	08010770 	.word	0x08010770
 8002acc:	08010778 	.word	0x08010778
 8002ad0:	08010780 	.word	0x08010780
 8002ad4:	08010788 	.word	0x08010788
 8002ad8:	0801078c 	.word	0x0801078c
 8002adc:	08010798 	.word	0x08010798
 8002ae0:	0801079c 	.word	0x0801079c
 8002ae4:	080107a8 	.word	0x080107a8
 8002ae8:	080107b0 	.word	0x080107b0
 8002aec:	080107b8 	.word	0x080107b8
 8002af0:	080107bc 	.word	0x080107bc
 8002af4:	080107c4 	.word	0x080107c4
 8002af8:	080107d0 	.word	0x080107d0
 8002afc:	080107d8 	.word	0x080107d8

08002b00 <json_input>:
int Time_Server = 0;	//Переменная системного времени сервера
int Time_Client = 0;	//Переменная системного времени клиента

//Функция разбора полученной строки JSON
void json_input(char *text)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe ffb9 	bl	8001a80 <cJSON_Parse>
 8002b0e:	6378      	str	r0, [r7, #52]	; 0x34

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 8002b10:	499e      	ldr	r1, [pc, #632]	; (8002d8c <json_input+0x28c>)
 8002b12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b14:	f7ff fec4 	bl	80028a0 <cJSON_GetObjectItem>
 8002b18:	6338      	str	r0, [r7, #48]	; 0x30
	TIME = stime->valuestring;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	4a9c      	ldr	r2, [pc, #624]	; (8002d90 <json_input+0x290>)
 8002b20:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 8002b22:	4b9b      	ldr	r3, [pc, #620]	; (8002d90 <json_input+0x290>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 fe62 	bl	800c7f0 <atoi>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a99      	ldr	r2, [pc, #612]	; (8002d94 <json_input+0x294>)
 8002b30:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 8002b32:	4b98      	ldr	r3, [pc, #608]	; (8002d94 <json_input+0x294>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b98      	ldr	r3, [pc, #608]	; (8002d98 <json_input+0x298>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	f340 811b 	ble.w	8002d76 <json_input+0x276>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 8002b40:	4996      	ldr	r1, [pc, #600]	; (8002d9c <json_input+0x29c>)
 8002b42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b44:	f7ff feac 	bl	80028a0 <cJSON_GetObjectItem>
 8002b48:	62f8      	str	r0, [r7, #44]	; 0x2c
		INSTRUCTION = sInstruction->valuestring;
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	4a94      	ldr	r2, [pc, #592]	; (8002da0 <json_input+0x2a0>)
 8002b50:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 8002b52:	4b93      	ldr	r3, [pc, #588]	; (8002da0 <json_input+0x2a0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4993      	ldr	r1, [pc, #588]	; (8002da4 <json_input+0x2a4>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd faf9 	bl	8000150 <strcmp>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d168      	bne.n	8002c36 <json_input+0x136>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002b64:	4990      	ldr	r1, [pc, #576]	; (8002da8 <json_input+0x2a8>)
 8002b66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b68:	f7ff fe9a 	bl	80028a0 <cJSON_GetObjectItem>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	498f      	ldr	r1, [pc, #572]	; (8002dac <json_input+0x2ac>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe95 	bl	80028a0 <cJSON_GetObjectItem>
 8002b76:	61b8      	str	r0, [r7, #24]
			TYPE = sType->valuestring;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a8c      	ldr	r2, [pc, #560]	; (8002db0 <json_input+0x2b0>)
 8002b7e:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 8002b80:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <json_input+0x2b0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	498b      	ldr	r1, [pc, #556]	; (8002db4 <json_input+0x2b4>)
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fae2 	bl	8000150 <strcmp>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 80f7 	bne.w	8002d82 <json_input+0x282>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8002b94:	4984      	ldr	r1, [pc, #528]	; (8002da8 <json_input+0x2a8>)
 8002b96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b98:	f7ff fe82 	bl	80028a0 <cJSON_GetObjectItem>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4986      	ldr	r1, [pc, #536]	; (8002db8 <json_input+0x2b8>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe7d 	bl	80028a0 <cJSON_GetObjectItem>
 8002ba6:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8002ba8:	497f      	ldr	r1, [pc, #508]	; (8002da8 <json_input+0x2a8>)
 8002baa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bac:	f7ff fe78 	bl	80028a0 <cJSON_GetObjectItem>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4982      	ldr	r1, [pc, #520]	; (8002dbc <json_input+0x2bc>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fe73 	bl	80028a0 <cJSON_GetObjectItem>
 8002bba:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8002bbc:	497a      	ldr	r1, [pc, #488]	; (8002da8 <json_input+0x2a8>)
 8002bbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc0:	f7ff fe6e 	bl	80028a0 <cJSON_GetObjectItem>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	497e      	ldr	r1, [pc, #504]	; (8002dc0 <json_input+0x2c0>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe69 	bl	80028a0 <cJSON_GetObjectItem>
 8002bce:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 8002bd0:	4975      	ldr	r1, [pc, #468]	; (8002da8 <json_input+0x2a8>)
 8002bd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bd4:	f7ff fe64 	bl	80028a0 <cJSON_GetObjectItem>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	497a      	ldr	r1, [pc, #488]	; (8002dc4 <json_input+0x2c4>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fe5f 	bl	80028a0 <cJSON_GetObjectItem>
 8002be2:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a77      	ldr	r2, [pc, #476]	; (8002dc8 <json_input+0x2c8>)
 8002bea:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4a76      	ldr	r2, [pc, #472]	; (8002dcc <json_input+0x2cc>)
 8002bf2:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <json_input+0x2d0>)
 8002bfa:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <json_input+0x2d4>)
 8002c02:	6013      	str	r3, [r2, #0]

				cJSON_Delete(json);
 8002c04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c06:	f7fd ffef 	bl	8000be8 <cJSON_Delete>
				free(stime);
 8002c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0c:	f009 fe26 	bl	800c85c <free>
				free(sInstruction);
 8002c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c12:	f009 fe23 	bl	800c85c <free>
				free(sType);
 8002c16:	69b8      	ldr	r0, [r7, #24]
 8002c18:	f009 fe20 	bl	800c85c <free>
				free(s1);
 8002c1c:	6978      	ldr	r0, [r7, #20]
 8002c1e:	f009 fe1d 	bl	800c85c <free>
				free(s2);
 8002c22:	6938      	ldr	r0, [r7, #16]
 8002c24:	f009 fe1a 	bl	800c85c <free>
				free(s3);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f009 fe17 	bl	800c85c <free>
				free(s4);
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f009 fe14 	bl	800c85c <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 8002c34:	e0a5      	b.n	8002d82 <json_input+0x282>
		else if(strcmp(INSTRUCTION, "UPDATE_FIRMWARE") == 0)
 8002c36:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <json_input+0x2a0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4967      	ldr	r1, [pc, #412]	; (8002dd8 <json_input+0x2d8>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fa87 	bl	8000150 <strcmp>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 808f 	bne.w	8002d68 <json_input+0x268>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 8002c4a:	4957      	ldr	r1, [pc, #348]	; (8002da8 <json_input+0x2a8>)
 8002c4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c4e:	f7ff fe27 	bl	80028a0 <cJSON_GetObjectItem>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4955      	ldr	r1, [pc, #340]	; (8002dac <json_input+0x2ac>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fe22 	bl	80028a0 <cJSON_GetObjectItem>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28
			TYPE = sType->valuestring;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	4a53      	ldr	r2, [pc, #332]	; (8002db0 <json_input+0x2b0>)
 8002c64:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "FILE_DOWNLOAD") == 0)
 8002c66:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <json_input+0x2b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	495c      	ldr	r1, [pc, #368]	; (8002ddc <json_input+0x2dc>)
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fa6f 	bl	8000150 <strcmp>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d152      	bne.n	8002d1e <json_input+0x21e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "NAME");
 8002c78:	494b      	ldr	r1, [pc, #300]	; (8002da8 <json_input+0x2a8>)
 8002c7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c7c:	f7ff fe10 	bl	80028a0 <cJSON_GetObjectItem>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4957      	ldr	r1, [pc, #348]	; (8002de0 <json_input+0x2e0>)
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fe0b 	bl	80028a0 <cJSON_GetObjectItem>
 8002c8a:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VERSION");
 8002c8c:	4946      	ldr	r1, [pc, #280]	; (8002da8 <json_input+0x2a8>)
 8002c8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c90:	f7ff fe06 	bl	80028a0 <cJSON_GetObjectItem>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4953      	ldr	r1, [pc, #332]	; (8002de4 <json_input+0x2e4>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe01 	bl	80028a0 <cJSON_GetObjectItem>
 8002c9e:	6238      	str	r0, [r7, #32]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SIZE");
 8002ca0:	4941      	ldr	r1, [pc, #260]	; (8002da8 <json_input+0x2a8>)
 8002ca2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ca4:	f7ff fdfc 	bl	80028a0 <cJSON_GetObjectItem>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	494f      	ldr	r1, [pc, #316]	; (8002de8 <json_input+0x2e8>)
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fdf7 	bl	80028a0 <cJSON_GetObjectItem>
 8002cb2:	61f8      	str	r0, [r7, #28]
				NAME_FW = s1->valuestring;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4a4c      	ldr	r2, [pc, #304]	; (8002dec <json_input+0x2ec>)
 8002cba:	6013      	str	r3, [r2, #0]
				VERSION_FW = s2->valuestring;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <json_input+0x2f0>)
 8002cc2:	6013      	str	r3, [r2, #0]
				SIZE_FW = s3->valuestring;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <json_input+0x2f4>)
 8002cca:	6013      	str	r3, [r2, #0]
				firmware.NAME = NAME_FW;
 8002ccc:	4b47      	ldr	r3, [pc, #284]	; (8002dec <json_input+0x2ec>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <json_input+0x2f8>)
 8002cd2:	6013      	str	r3, [r2, #0]
				firmware.VERSION = VERSION_FW;
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <json_input+0x2f0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <json_input+0x2f8>)
 8002cda:	6053      	str	r3, [r2, #4]
				firmware.SIZE = atoi(SIZE_FW);
 8002cdc:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <json_input+0x2f4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f009 fd85 	bl	800c7f0 <atoi>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <json_input+0x2f8>)
 8002cea:	6093      	str	r3, [r2, #8]
				firmware.check_UPD = true;
 8002cec:	4b42      	ldr	r3, [pc, #264]	; (8002df8 <json_input+0x2f8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	731a      	strb	r2, [r3, #12]
				cJSON_Delete(json);
 8002cf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cf4:	f7fd ff78 	bl	8000be8 <cJSON_Delete>
				free(stime);
 8002cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfa:	f009 fdaf 	bl	800c85c <free>
				free(sInstruction);
 8002cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d00:	f009 fdac 	bl	800c85c <free>
				free(sType);
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f009 fda9 	bl	800c85c <free>
				free(s1);
 8002d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0c:	f009 fda6 	bl	800c85c <free>
				free(s2);
 8002d10:	6a38      	ldr	r0, [r7, #32]
 8002d12:	f009 fda3 	bl	800c85c <free>
				free(s3);
 8002d16:	69f8      	ldr	r0, [r7, #28]
 8002d18:	f009 fda0 	bl	800c85c <free>
}
 8002d1c:	e031      	b.n	8002d82 <json_input+0x282>
			else if(strcmp(TYPE, "RESET_MCU") == 0)
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <json_input+0x2b0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4936      	ldr	r1, [pc, #216]	; (8002dfc <json_input+0x2fc>)
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fa13 	bl	8000150 <strcmp>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10e      	bne.n	8002d4e <json_input+0x24e>
				cJSON_Delete(json);
 8002d30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d32:	f7fd ff59 	bl	8000be8 <cJSON_Delete>
				free(stime);
 8002d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d38:	f009 fd90 	bl	800c85c <free>
				free(sInstruction);
 8002d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3e:	f009 fd8d 	bl	800c85c <free>
				free(sType);
 8002d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d44:	f009 fd8a 	bl	800c85c <free>
				HAL_NVIC_SystemReset();		//Перезапускаем контроллер
 8002d48:	f006 faf3 	bl	8009332 <HAL_NVIC_SystemReset>
}
 8002d4c:	e019      	b.n	8002d82 <json_input+0x282>
				cJSON_Delete(json);
 8002d4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d50:	f7fd ff4a 	bl	8000be8 <cJSON_Delete>
				free(stime);
 8002d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d56:	f009 fd81 	bl	800c85c <free>
				free(sInstruction);
 8002d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d5c:	f009 fd7e 	bl	800c85c <free>
				free(sType);
 8002d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d62:	f009 fd7b 	bl	800c85c <free>
}
 8002d66:	e00c      	b.n	8002d82 <json_input+0x282>
			free(stime);
 8002d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6a:	f009 fd77 	bl	800c85c <free>
			free(sInstruction);
 8002d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d70:	f009 fd74 	bl	800c85c <free>
}
 8002d74:	e005      	b.n	8002d82 <json_input+0x282>
		cJSON_Delete(json);
 8002d76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d78:	f7fd ff36 	bl	8000be8 <cJSON_Delete>
		free(stime);
 8002d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7e:	f009 fd6d 	bl	800c85c <free>
}
 8002d82:	bf00      	nop
 8002d84:	3738      	adds	r7, #56	; 0x38
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	080107ec 	.word	0x080107ec
 8002d90:	2000024c 	.word	0x2000024c
 8002d94:	20000250 	.word	0x20000250
 8002d98:	20000254 	.word	0x20000254
 8002d9c:	080107f4 	.word	0x080107f4
 8002da0:	20000228 	.word	0x20000228
 8002da4:	08010800 	.word	0x08010800
 8002da8:	08010810 	.word	0x08010810
 8002dac:	08010818 	.word	0x08010818
 8002db0:	2000022c 	.word	0x2000022c
 8002db4:	08010820 	.word	0x08010820
 8002db8:	0801082c 	.word	0x0801082c
 8002dbc:	08010834 	.word	0x08010834
 8002dc0:	0801083c 	.word	0x0801083c
 8002dc4:	08010844 	.word	0x08010844
 8002dc8:	20000230 	.word	0x20000230
 8002dcc:	20000238 	.word	0x20000238
 8002dd0:	20000234 	.word	0x20000234
 8002dd4:	2000023c 	.word	0x2000023c
 8002dd8:	0801084c 	.word	0x0801084c
 8002ddc:	0801085c 	.word	0x0801085c
 8002de0:	0801086c 	.word	0x0801086c
 8002de4:	08010874 	.word	0x08010874
 8002de8:	0801087c 	.word	0x0801087c
 8002dec:	20000240 	.word	0x20000240
 8002df0:	20000244 	.word	0x20000244
 8002df4:	20000248 	.word	0x20000248
 8002df8:	20000218 	.word	0x20000218
 8002dfc:	08010884 	.word	0x08010884

08002e00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <MX_ADC1_Init+0xb0>)
 8002e14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e38:	2203      	movs	r2, #3
 8002e3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e3c:	481b      	ldr	r0, [pc, #108]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e3e:	f005 fd9f 	bl	8008980 <HAL_ADC_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002e48:	f000 fce4 	bl	8003814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002e54:	2302      	movs	r3, #2
 8002e56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4813      	ldr	r0, [pc, #76]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e5e:	f005 ff57 	bl	8008d10 <HAL_ADC_ConfigChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002e68:	f000 fcd4 	bl	8003814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e70:	2302      	movs	r3, #2
 8002e72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	480c      	ldr	r0, [pc, #48]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e7a:	f005 ff49 	bl	8008d10 <HAL_ADC_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002e84:	f000 fcc6 	bl	8003814 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_ADC1_Init+0xac>)
 8002e96:	f005 ff3b 	bl	8008d10 <HAL_ADC_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8002ea0:	f000 fcb8 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000258 	.word	0x20000258
 8002eb0:	40012400 	.word	0x40012400

08002eb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_ADC_MspInit+0xbc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d149      	bne.n	8002f68 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_ADC_MspInit+0xc0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = A_Current_Pin|B_Current_Pin|C_Current_Pin;
 8002f04:	2307      	movs	r3, #7
 8002f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	4819      	ldr	r0, [pc, #100]	; (8002f78 <HAL_ADC_MspInit+0xc4>)
 8002f14:	f006 fc0c 	bl	8009730 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_ADC_MspInit+0xcc>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f24:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f42:	2220      	movs	r2, #32
 8002f44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f4c:	480b      	ldr	r0, [pc, #44]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f4e:	f006 fa01 	bl	8009354 <HAL_DMA_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002f58:	f000 fc5c 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f60:	621a      	str	r2, [r3, #32]
 8002f62:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_ADC_MspInit+0xc8>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012400 	.word	0x40012400
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010800 	.word	0x40010800
 8002f7c:	20000288 	.word	0x20000288
 8002f80:	40020008 	.word	0x40020008

08002f84 <clear_string>:
//extern uint32_t firmwareBytesToWrite;
//extern uint32_t size_of_data;

//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d02f      	beq.n	8002ff6 <clear_string+0x72>
	uint8_t i = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e022      	b.n	8002fe6 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d80b      	bhi.n	8002fbe <clear_string+0x3a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d003      	beq.n	8002fb6 <clear_string+0x32>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b0d      	cmp	r3, #13
 8002fb4:	d103      	bne.n	8002fbe <clear_string+0x3a>
		{
			i++;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	72fb      	strb	r3, [r7, #11]
			continue;
 8002fbc:	e010      	b.n	8002fe0 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b0a      	cmp	r3, #10
 8002fc4:	d003      	beq.n	8002fce <clear_string+0x4a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b0d      	cmp	r3, #13
 8002fcc:	d102      	bne.n	8002fd4 <clear_string+0x50>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	60fa      	str	r2, [r7, #12]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1d8      	bne.n	8002fa0 <clear_string+0x1c>
	}

	*dst = 0;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e000      	b.n	8002ff8 <clear_string+0x74>
	if(!src) return;
 8002ff6:	bf00      	nop
}
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <USART_Tx>:
//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TC));
 800300a:	bf00      	nop
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <USART_Tx+0x28>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f9      	beq.n	800300c <USART_Tx+0xc>
	USART1->DR = Data;
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <USART_Tx+0x28>)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	6053      	str	r3, [r2, #4]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40013800 	.word	0x40013800

0800302c <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8003038:	e009      	b.n	800304e <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffdc 	bl	8003000 <USART_Tx>
		i++;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	3301      	adds	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ef      	bne.n	800303a <SEND_str+0xe>
	}
}
 800305a:	bf00      	nop
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	if(dbg_available())
 800306a:	f001 fabd 	bl	80045e8 <dbg_available>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d068      	beq.n	8003146 <DEBUG_main+0xe2>
	{
		uint16_t i = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8003078:	2301      	movs	r3, #1
 800307a:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 800307c:	f240 4206 	movw	r2, #1030	; 0x406
 8003080:	2100      	movs	r1, #0
 8003082:	4833      	ldr	r0, [pc, #204]	; (8003150 <DEBUG_main+0xec>)
 8003084:	f009 fc00 	bl	800c888 <memset>
		HAL_Delay(50);
 8003088:	2032      	movs	r0, #50	; 0x32
 800308a:	f005 fc55 	bl	8008938 <HAL_Delay>

		while(dbg_available())
 800308e:	e012      	b.n	80030b6 <DEBUG_main+0x52>
		{
			DBG_buf[i++] = dbg_read();
 8003090:	f001 facc 	bl	800462c <dbg_read>
 8003094:	4603      	mov	r3, r0
 8003096:	4619      	mov	r1, r3
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	80fa      	strh	r2, [r7, #6]
 800309e:	461a      	mov	r2, r3
 80030a0:	b2c9      	uxtb	r1, r1
 80030a2:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <DEBUG_main+0xec>)
 80030a4:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	f240 4205 	movw	r2, #1029	; 0x405
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d808      	bhi.n	80030c2 <DEBUG_main+0x5e>
				break;
			HAL_Delay(1);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f005 fc41 	bl	8008938 <HAL_Delay>
		while(dbg_available())
 80030b6:	f001 fa97 	bl	80045e8 <dbg_available>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e7      	bne.n	8003090 <DEBUG_main+0x2c>
 80030c0:	e000      	b.n	80030c4 <DEBUG_main+0x60>
				break;
 80030c2:	bf00      	nop
		}
		clear_string(DBG_buf);
 80030c4:	4822      	ldr	r0, [pc, #136]	; (8003150 <DEBUG_main+0xec>)
 80030c6:	f7ff ff5d 	bl	8002f84 <clear_string>
//			SEND_str(UPD_firmware(DBG_buf));
//		else
//			json_input(DBG_buf);		//здесь принимаем посылку и отправляем парситься
		//-----------------------------------------END UPD Firmware to USB--------------------------------------
		//---------------------------------------------Old function---------------------------------------------
		if(strstr(DBG_buf, "test") != NULL)
 80030ca:	4922      	ldr	r1, [pc, #136]	; (8003154 <DEBUG_main+0xf0>)
 80030cc:	4820      	ldr	r0, [pc, #128]	; (8003150 <DEBUG_main+0xec>)
 80030ce:	f00a f9ac 	bl	800d42a <strstr>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <DEBUG_main+0x7c>
		{
			SEND_str("respone\n");
 80030d8:	481f      	ldr	r0, [pc, #124]	; (8003158 <DEBUG_main+0xf4>)
 80030da:	f7ff ffa7 	bl	800302c <SEND_str>
 80030de:	e028      	b.n	8003132 <DEBUG_main+0xce>
		}
		//-------------------------------------------End Old function-------------------------------------------
		//------------------------------------------------SD_CARD-----------------------------------------------
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 80030e0:	491e      	ldr	r1, [pc, #120]	; (800315c <DEBUG_main+0xf8>)
 80030e2:	481b      	ldr	r0, [pc, #108]	; (8003150 <DEBUG_main+0xec>)
 80030e4:	f00a f9a1 	bl	800d42a <strstr>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <DEBUG_main+0x90>
		{
			my_read_file();
 80030ee:	f003 fd81 	bl	8006bf4 <my_read_file>
 80030f2:	e01e      	b.n	8003132 <DEBUG_main+0xce>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 80030f4:	491a      	ldr	r1, [pc, #104]	; (8003160 <DEBUG_main+0xfc>)
 80030f6:	4816      	ldr	r0, [pc, #88]	; (8003150 <DEBUG_main+0xec>)
 80030f8:	f00a f997 	bl	800d42a <strstr>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <DEBUG_main+0xa4>
		{
			test_create_json();
 8003102:	f7ff fc6d 	bl	80029e0 <test_create_json>
 8003106:	e014      	b.n	8003132 <DEBUG_main+0xce>
//			my_write_file_json("TestFile.txt", "text_testing");
		}
		//------------------------------------------------------------------------------------------------------
		//--------------------------------------------UPDATE_FIRMWARE-------------------------------------------
		else if(strstr(DBG_buf, "UPDATE_FIRMWARE") != NULL)
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <DEBUG_main+0x100>)
 800310a:	4811      	ldr	r0, [pc, #68]	; (8003150 <DEBUG_main+0xec>)
 800310c:	f00a f98d 	bl	800d42a <strstr>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <DEBUG_main+0xba>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"FILE_DOWNLOAD\",\"NAME\":\"blink_gpio\",\"VERSION\":\"v.0.0.1\",\"SIZE\":\"248\"},\"TIME\":\"1122334455\"}");
 8003116:	4814      	ldr	r0, [pc, #80]	; (8003168 <DEBUG_main+0x104>)
 8003118:	f7ff fcf2 	bl	8002b00 <json_input>
 800311c:	e009      	b.n	8003132 <DEBUG_main+0xce>
		}
		else if(strstr(DBG_buf, "RESET_MCU") != NULL)
 800311e:	4913      	ldr	r1, [pc, #76]	; (800316c <DEBUG_main+0x108>)
 8003120:	480b      	ldr	r0, [pc, #44]	; (8003150 <DEBUG_main+0xec>)
 8003122:	f00a f982 	bl	800d42a <strstr>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <DEBUG_main+0xce>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"RESET_MCU\"},\"TIME\":\"1122334455\"}");
 800312c:	4810      	ldr	r0, [pc, #64]	; (8003170 <DEBUG_main+0x10c>)
 800312e:	f7ff fce7 	bl	8002b00 <json_input>
//		{
//			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
//			SEND_str(DBG_str);
//			json_input(DBG_str);
//		}
		if(fdbg)
 8003132:	797b      	ldrb	r3, [r7, #5]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <DEBUG_main+0xe2>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <DEBUG_main+0xec>)
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <DEBUG_main+0x110>)
 800313c:	f240 4106 	movw	r1, #1030	; 0x406
 8003140:	480d      	ldr	r0, [pc, #52]	; (8003178 <DEBUG_main+0x114>)
 8003142:	f00a f8f5 	bl	800d330 <sniprintf>

			//json_input("{\"INSTRUCTION\":\"SET_PERIPHERALS\",\"COMMAND\":{\"TYPE\":\"DIGITAL\",\"SET\":\"[0,1,1,0,0,0,0,1]\"},\"TIME\":\"1122334455\"}");
		}
	}
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200002cc 	.word	0x200002cc
 8003154:	08010890 	.word	0x08010890
 8003158:	08010898 	.word	0x08010898
 800315c:	080108a4 	.word	0x080108a4
 8003160:	080108ac 	.word	0x080108ac
 8003164:	080108b8 	.word	0x080108b8
 8003168:	080108c8 	.word	0x080108c8
 800316c:	08010958 	.word	0x08010958
 8003170:	08010964 	.word	0x08010964
 8003174:	080109bc 	.word	0x080109bc
 8003178:	200006d4 	.word	0x200006d4

0800317c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_DMA_Init+0x38>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <MX_DMA_Init+0x38>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6153      	str	r3, [r2, #20]
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_DMA_Init+0x38>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	200b      	movs	r0, #11
 80031a0:	f006 f89d 	bl	80092de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031a4:	200b      	movs	r0, #11
 80031a6:	f006 f8b6 	bl	8009316 <HAL_NVIC_EnableIRQ>

}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031d2:	f043 0310 	orr.w	r3, r3, #16
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e4:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a5a      	ldr	r2, [pc, #360]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b58      	ldr	r3, [pc, #352]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b55      	ldr	r3, [pc, #340]	; (8003354 <MX_GPIO_Init+0x19c>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a54      	ldr	r2, [pc, #336]	; (8003354 <MX_GPIO_Init+0x19c>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b52      	ldr	r3, [pc, #328]	; (8003354 <MX_GPIO_Init+0x19c>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <MX_GPIO_Init+0x19c>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <MX_GPIO_Init+0x19c>)
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6193      	str	r3, [r2, #24]
 8003220:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <MX_GPIO_Init+0x19c>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|mcuFAIL_Pin, GPIO_PIN_RESET);
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003232:	4849      	ldr	r0, [pc, #292]	; (8003358 <MX_GPIO_Init+0x1a0>)
 8003234:	f006 fc00 	bl	8009a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800323e:	4847      	ldr	r0, [pc, #284]	; (800335c <MX_GPIO_Init+0x1a4>)
 8003240:	f006 fbfa 	bl	8009a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = distCLOSE_Pin|distSTOP_Pin;
 8003244:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800324a:	4b45      	ldr	r3, [pc, #276]	; (8003360 <MX_GPIO_Init+0x1a8>)
 800324c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 0310 	add.w	r3, r7, #16
 8003256:	4619      	mov	r1, r3
 8003258:	4840      	ldr	r0, [pc, #256]	; (800335c <MX_GPIO_Init+0x1a4>)
 800325a:	f006 fa69 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = distINT_Pin|handOPEN_Pin|handCLOSE_Pin|handCTRL_Pin
 800325e:	f248 031e 	movw	r3, #32798	; 0x801e
 8003262:	613b      	str	r3, [r7, #16]
                          |CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4619      	mov	r1, r3
 8003272:	483a      	ldr	r0, [pc, #232]	; (800335c <MX_GPIO_Init+0x1a4>)
 8003274:	f006 fa5c 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|mcuFAIL_Pin;
 8003278:	f44f 7388 	mov.w	r3, #272	; 0x110
 800327c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327e:	2301      	movs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2302      	movs	r3, #2
 8003288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0310 	add.w	r3, r7, #16
 800328e:	4619      	mov	r1, r3
 8003290:	4831      	ldr	r0, [pc, #196]	; (8003358 <MX_GPIO_Init+0x1a0>)
 8003292:	f006 fa4d 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin;
 8003296:	2307      	movs	r3, #7
 8003298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <MX_GPIO_Init+0x1ac>)
 800329c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	f107 0310 	add.w	r3, r7, #16
 80032a6:	4619      	mov	r1, r3
 80032a8:	482f      	ldr	r0, [pc, #188]	; (8003368 <MX_GPIO_Init+0x1b0>)
 80032aa:	f006 fa41 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SELFP_CLOSEmcu_Pin|SELFP_OPENmcu_Pin|HIGHP_CLOSEmcu_Pin|HIGHP_OPENmcu_Pin;
 80032ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80032b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	4619      	mov	r1, r3
 80032c2:	4829      	ldr	r0, [pc, #164]	; (8003368 <MX_GPIO_Init+0x1b0>)
 80032c4:	f006 fa34 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin;
 80032c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80032cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ce:	2301      	movs	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4619      	mov	r1, r3
 80032e0:	481e      	ldr	r0, [pc, #120]	; (800335c <MX_GPIO_Init+0x1a4>)
 80032e2:	f006 fa25 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLOSEmcu_Pin|OPENmcu_Pin;
 80032e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <MX_GPIO_Init+0x1a8>)
 80032ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4619      	mov	r1, r3
 80032fa:	4817      	ldr	r0, [pc, #92]	; (8003358 <MX_GPIO_Init+0x1a0>)
 80032fc:	f006 fa18 	bl	8009730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = distOPEN_Pin;
 8003300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_GPIO_Init+0x1a8>)
 8003308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(distOPEN_GPIO_Port, &GPIO_InitStruct);
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	4619      	mov	r1, r3
 8003314:	4814      	ldr	r0, [pc, #80]	; (8003368 <MX_GPIO_Init+0x1b0>)
 8003316:	f006 fa0b 	bl	8009730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2006      	movs	r0, #6
 8003320:	f005 ffdd 	bl	80092de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003324:	2006      	movs	r0, #6
 8003326:	f005 fff6 	bl	8009316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	2007      	movs	r0, #7
 8003330:	f005 ffd5 	bl	80092de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003334:	2007      	movs	r0, #7
 8003336:	f005 ffee 	bl	8009316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	2008      	movs	r0, #8
 8003340:	f005 ffcd 	bl	80092de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003344:	2008      	movs	r0, #8
 8003346:	f005 ffe6 	bl	8009316 <HAL_NVIC_EnableIRQ>

}
 800334a:	bf00      	nop
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40010800 	.word	0x40010800
 800335c:	40011000 	.word	0x40011000
 8003360:	10110000 	.word	0x10110000
 8003364:	10210000 	.word	0x10210000
 8003368:	40010c00 	.word	0x40010c00

0800336c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <MX_I2C2_Init+0x50>)
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <MX_I2C2_Init+0x54>)
 8003374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_I2C2_Init+0x50>)
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <MX_I2C2_Init+0x58>)
 800337a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <MX_I2C2_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_I2C2_Init+0x50>)
 8003384:	2200      	movs	r2, #0
 8003386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_I2C2_Init+0x50>)
 800338a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <MX_I2C2_Init+0x50>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_I2C2_Init+0x50>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <MX_I2C2_Init+0x50>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_I2C2_Init+0x50>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <MX_I2C2_Init+0x50>)
 80033aa:	f006 fb75 	bl	8009a98 <HAL_I2C_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80033b4:	f000 fa2e 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000adc 	.word	0x20000adc
 80033c0:	40005800 	.word	0x40005800
 80033c4:	000186a0 	.word	0x000186a0

080033c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 0310 	add.w	r3, r7, #16
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_I2C_MspInit+0x74>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d124      	bne.n	8003432 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_I2C_MspInit+0x78>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_I2C_MspInit+0x78>)
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	6193      	str	r3, [r2, #24]
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_I2C_MspInit+0x78>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003400:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003406:	2312      	movs	r3, #18
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4619      	mov	r1, r3
 8003414:	480b      	ldr	r0, [pc, #44]	; (8003444 <HAL_I2C_MspInit+0x7c>)
 8003416:	f006 f98b 	bl	8009730 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_I2C_MspInit+0x78>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <HAL_I2C_MspInit+0x78>)
 8003420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003424:	61d3      	str	r3, [r2, #28]
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_I2C_MspInit+0x78>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003432:	bf00      	nop
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40005800 	.word	0x40005800
 8003440:	40021000 	.word	0x40021000
 8003444:	40010c00 	.word	0x40010c00

08003448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800344c:	f005 fa12 	bl	8008874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003450:	f000 f844 	bl	80034dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003454:	f7ff feb0 	bl	80031b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003458:	f7ff fe90 	bl	800317c <MX_DMA_Init>
  MX_ADC1_Init();
 800345c:	f7ff fcd0 	bl	8002e00 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003460:	f000 fbe0 	bl	8003c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003464:	f000 fc7c 	bl	8003d60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003468:	f000 fd1e 	bl	8003ea8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800346c:	f000 fdb6 	bl	8003fdc <MX_TIM4_Init>
  MX_I2C2_Init();
 8003470:	f7ff ff7c 	bl	800336c <MX_I2C2_Init>
  MX_SPI1_Init();
 8003474:	f000 f9d4 	bl	8003820 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003478:	f000 ffbe 	bl	80043f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800347c:	f000 ffe6 	bl	800444c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	time = 200;
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <main+0x7c>)
 8003482:	22c8      	movs	r2, #200	; 0xc8
 8003484:	701a      	strb	r2, [r3, #0]

	EN_Interrupt();		//Для дебага/Конфигурации по USART1
 8003486:	f001 f907 	bl	8004698 <EN_Interrupt>

  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c2) != 0)
 800348a:	480f      	ldr	r0, [pc, #60]	; (80034c8 <main+0x80>)
 800348c:	f004 fe50 	bl	8008130 <ssd1306_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <main+0x52>
  {
	  Error_Handler();
 8003496:	f000 f9bd 	bl	8003814 <Error_Handler>
  }
	//----------------ADC-----------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);		//Стартуем АЦП
 800349a:	2203      	movs	r2, #3
 800349c:	490b      	ldr	r1, [pc, #44]	; (80034cc <main+0x84>)
 800349e:	480c      	ldr	r0, [pc, #48]	; (80034d0 <main+0x88>)
 80034a0:	f005 fb46 	bl	8008b30 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80034a4:	2100      	movs	r1, #0
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <main+0x8c>)
 80034a8:	f007 ff94 	bl	800b3d4 <HAL_TIM_OC_Start>
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 80034ac:	f003 fb9c 	bl	8006be8 <my_init_card>
	SEND_str("Init sd card -> success\n");
 80034b0:	4809      	ldr	r0, [pc, #36]	; (80034d8 <main+0x90>)
 80034b2:	f7ff fdbb 	bl	800302c <SEND_str>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_info();
 80034b6:	f004 fc13 	bl	8007ce0 <Display_info>
	  Сurrent_Сomparison();
 80034ba:	f005 f957 	bl	800876c <Сurrent_Сomparison>
	  DEBUG_main();
 80034be:	f7ff fdd1 	bl	8003064 <DEBUG_main>
	  Display_info();
 80034c2:	e7f8      	b.n	80034b6 <main+0x6e>
 80034c4:	20000b78 	.word	0x20000b78
 80034c8:	20000adc 	.word	0x20000adc
 80034cc:	20000ba0 	.word	0x20000ba0
 80034d0:	20000258 	.word	0x20000258
 80034d4:	20001090 	.word	0x20001090
 80034d8:	080109c0 	.word	0x080109c0

080034dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b094      	sub	sp, #80	; 0x50
 80034e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e6:	2228      	movs	r2, #40	; 0x28
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f009 f9cc 	bl	800c888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800350c:	2301      	movs	r3, #1
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003516:	2300      	movs	r3, #0
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351a:	2301      	movs	r3, #1
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	2302      	movs	r3, #2
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003528:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800352c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800352e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003532:	4618      	mov	r0, r3
 8003534:	f006 ff0a 	bl	800a34c <HAL_RCC_OscConfig>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800353e:	f000 f969 	bl	8003814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003542:	230f      	movs	r3, #15
 8003544:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003546:	2302      	movs	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800354e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003552:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f007 f976 	bl	800a850 <HAL_RCC_ClockConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800356a:	f000 f953 	bl	8003814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800356e:	2302      	movs	r3, #2
 8003570:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003576:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f007 fb00 	bl	800ab80 <HAL_RCCEx_PeriphCLKConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003586:	f000 f945 	bl	8003814 <Error_Handler>
  }
}
 800358a:	bf00      	nop
 800358c:	3750      	adds	r7, #80	; 0x50
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
	//----------------------------------Button handler----------------------------------
	if (GPIO_Pin == GPIO_PIN_0)
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d111      	bne.n	80035c8 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if((GPIOB->IDR & GPIO_PIN_0) == 0) //Push left button
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 80b2 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
		{
			if((GPIOB->IDR & GPIO_PIN_0) == 0)
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80ab 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				LEFT_NUM_DOWN = true;
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <HAL_GPIO_EXTI_Callback+0x190>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
	//----------------------------------------------------------------------------------
	else
	{
		__NOP();
	}
}
 80035c6:	e0a6      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_1)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d111      	bne.n	80035f2 <HAL_GPIO_EXTI_Callback+0x5e>
		if((GPIOB->IDR & GPIO_PIN_1) == 0) //Push middle button
 80035ce:	4b54      	ldr	r3, [pc, #336]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 809d 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			if((GPIOB->IDR & GPIO_PIN_1) == 0)
 80035dc:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 8096 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				LEFT_NUM_UP = true;
 80035ea:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <HAL_GPIO_EXTI_Callback+0x194>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
}
 80035f0:	e091      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_2)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d111      	bne.n	800361c <HAL_GPIO_EXTI_Callback+0x88>
		if((GPIOB->IDR & GPIO_PIN_2) == 0) //Push right button
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 8088 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			if((GPIOB->IDR & GPIO_PIN_2) == 0)
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8081 	bne.w	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				RIGHT_NUM = true;
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_GPIO_EXTI_Callback+0x198>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
}
 800361a:	e07c      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_3)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11f      	bne.n	8003662 <HAL_GPIO_EXTI_Callback+0xce>
		if((GPIOB->IDR & GPIO_PIN_3) == 0) //Phase A ZeroCrossing
 8003622:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d173      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			if(DirMove_OPENmcu)
 800362e:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_GPIO_EXTI_Callback+0xb4>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Stop timer two channel one	(AFWD)
 8003636:	2100      	movs	r1, #0
 8003638:	483e      	ldr	r0, [pc, #248]	; (8003734 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800363a:	f008 f867 	bl	800b70c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Run timer two channel one		(AFWD)
 800363e:	2100      	movs	r1, #0
 8003640:	483c      	ldr	r0, [pc, #240]	; (8003734 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003642:	f007 ffc1 	bl	800b5c8 <HAL_TIM_PWM_Start>
}
 8003646:	e066      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			else if(DirMove_CLOSEmcu)
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d062      	beq.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);	//Stop timer two channel four	(AREV)
 8003650:	210c      	movs	r1, #12
 8003652:	4838      	ldr	r0, [pc, #224]	; (8003734 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003654:	f008 f85a 	bl	800b70c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	//Run timer two channel four	(AREV)
 8003658:	210c      	movs	r1, #12
 800365a:	4836      	ldr	r0, [pc, #216]	; (8003734 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800365c:	f007 ffb4 	bl	800b5c8 <HAL_TIM_PWM_Start>
}
 8003660:	e059      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_5)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b20      	cmp	r3, #32
 8003666:	d116      	bne.n	8003696 <HAL_GPIO_EXTI_Callback+0x102>
		if((GPIOB->IDR & GPIO_PIN_5) == 0) //Phase B ZeroCrossing
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d150      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			if(DirMove_OPENmcu || DirMove_CLOSEmcu)
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_GPIO_EXTI_Callback+0xf0>
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d048      	beq.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 8003684:	2100      	movs	r1, #0
 8003686:	482d      	ldr	r0, [pc, #180]	; (800373c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8003688:	f008 f840 	bl	800b70c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 800368c:	2100      	movs	r1, #0
 800368e:	482b      	ldr	r0, [pc, #172]	; (800373c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8003690:	f007 ff9a 	bl	800b5c8 <HAL_TIM_PWM_Start>
}
 8003694:	e03f      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_7)
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d11f      	bne.n	80036dc <HAL_GPIO_EXTI_Callback+0x148>
		if((GPIOB->IDR & GPIO_PIN_7) == 0) //Phase C ZeroCrossing
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_GPIO_EXTI_Callback+0x18c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d136      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			if(DirMove_OPENmcu)
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_GPIO_EXTI_Callback+0x19c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_GPIO_EXTI_Callback+0x12e>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	//Stop timer Four channel one	(CFWD)
 80036b0:	2100      	movs	r1, #0
 80036b2:	4823      	ldr	r0, [pc, #140]	; (8003740 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80036b4:	f008 f82a 	bl	800b70c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//Run timer four channel one	(CFWD)
 80036b8:	2100      	movs	r1, #0
 80036ba:	4821      	ldr	r0, [pc, #132]	; (8003740 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80036bc:	f007 ff84 	bl	800b5c8 <HAL_TIM_PWM_Start>
}
 80036c0:	e029      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			else if(DirMove_CLOSEmcu)
 80036c2:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);	//Stop timer four channel four	(CREV)
 80036ca:	210c      	movs	r1, #12
 80036cc:	481c      	ldr	r0, [pc, #112]	; (8003740 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80036ce:	f008 f81d 	bl	800b70c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//Run timer four channel four	(CREV)
 80036d2:	210c      	movs	r1, #12
 80036d4:	481a      	ldr	r0, [pc, #104]	; (8003740 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80036d6:	f007 ff77 	bl	800b5c8 <HAL_TIM_PWM_Start>
}
 80036da:	e01c      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_12)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d109      	bne.n	80036f8 <HAL_GPIO_EXTI_Callback+0x164>
		if((GPIOA->IDR & GPIO_PIN_12) == 0) //Received command "OPENmcu"
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d112      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			flag_OPENmcu = true;
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
}
 80036f6:	e00e      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
	else if (GPIO_Pin == GPIO_PIN_11)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fe:	d109      	bne.n	8003714 <HAL_GPIO_EXTI_Callback+0x180>
		if((GPIOA->IDR & GPIO_PIN_11) == 0) //Received command "CLOSEmcu"
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
			flag_CLOSEmcu = true;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
}
 8003712:	e000      	b.n	8003716 <HAL_GPIO_EXTI_Callback+0x182>
		__NOP();
 8003714:	bf00      	nop
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40010c00 	.word	0x40010c00
 8003724:	20000b76 	.word	0x20000b76
 8003728:	20000b75 	.word	0x20000b75
 800372c:	20000b77 	.word	0x20000b77
 8003730:	20000b73 	.word	0x20000b73
 8003734:	200010d8 	.word	0x200010d8
 8003738:	20000b74 	.word	0x20000b74
 800373c:	20001120 	.word	0x20001120
 8003740:	20001168 	.word	0x20001168
 8003744:	40010800 	.word	0x40010800
 8003748:	20000b71 	.word	0x20000b71
 800374c:	20000b72 	.word	0x20000b72

08003750 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)	//Убрать все из колбека
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_ADC_ConvCpltCallback+0xac>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d147      	bne.n	80037f2 <HAL_ADC_ConvCpltCallback+0xa2>
    {
    	What_Time++;
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_ADC_ConvCpltCallback+0xb0>)
 800376c:	801a      	strh	r2, [r3, #0]
    	cnt++;
 800376e:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003778:	701a      	strb	r2, [r3, #0]
    	adcValue[0] += Conversion_ADC1((uint16_t)adc[0]);
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_ADC_ConvCpltCallback+0xb8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	4618      	mov	r0, r3
 8003782:	f004 ff69 	bl	8008658 <Conversion_ADC1>
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc fcf8 	bl	8000180 <__adddf3>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	491d      	ldr	r1, [pc, #116]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 8003796:	e9c1 2300 	strd	r2, r3, [r1]
        adcValue[1] += Conversion_ADC1((uint16_t)adc[1]);
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_ADC_ConvCpltCallback+0xb8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 ff59 	bl	8008658 <Conversion_ADC1>
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 80037a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037ac:	f7fc fce8 	bl	8000180 <__adddf3>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4915      	ldr	r1, [pc, #84]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 80037b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        adcValue[2] += Conversion_ADC1((uint16_t)adc[2]);
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_ADC_ConvCpltCallback+0xb8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 ff49 	bl	8008658 <Conversion_ADC1>
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 80037c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037cc:	f7fc fcd8 	bl	8000180 <__adddf3>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	490d      	ldr	r1, [pc, #52]	; (800380c <HAL_ADC_ConvCpltCallback+0xbc>)
 80037d6:	e9c1 2304 	strd	r2, r3, [r1, #16]

        if(What_Time == 12000)
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_ADC_ConvCpltCallback+0xb0>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d105      	bne.n	80037f2 <HAL_ADC_ConvCpltCallback+0xa2>
        {
        	display_Off = true;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_ADC_ConvCpltCallback+0xc0>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
        	What_Time = 0;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_ADC_ConvCpltCallback+0xb0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40012400 	.word	0x40012400
 8003800:	20000b7a 	.word	0x20000b7a
 8003804:	20000bd0 	.word	0x20000bd0
 8003808:	20000ba0 	.word	0x20000ba0
 800380c:	20000bb0 	.word	0x20000bb0
 8003810:	20000b7c 	.word	0x20000b7c

08003814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800381c:	e7fe      	b.n	800381c <Error_Handler+0x8>
	...

08003820 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <MX_SPI1_Init+0x64>)
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <MX_SPI1_Init+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <MX_SPI1_Init+0x64>)
 800382c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_SPI1_Init+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <MX_SPI1_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_SPI1_Init+0x64>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_SPI1_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_SPI1_Init+0x64>)
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_SPI1_Init+0x64>)
 8003854:	2208      	movs	r2, #8
 8003856:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <MX_SPI1_Init+0x64>)
 800385a:	2200      	movs	r2, #0
 800385c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_SPI1_Init+0x64>)
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <MX_SPI1_Init+0x64>)
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_SPI1_Init+0x64>)
 800386c:	220a      	movs	r2, #10
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <MX_SPI1_Init+0x64>)
 8003872:	f007 fa3b 	bl	800acec <HAL_SPI_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800387c:	f7ff ffca 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20001034 	.word	0x20001034
 8003888:	40013000 	.word	0x40013000

0800388c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_SPI_MspInit+0x88>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d12f      	bne.n	800390c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038b6:	6193      	str	r3, [r2, #24]
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	6193      	str	r3, [r2, #24]
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_SPI_MspInit+0x8c>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 80038dc:	23a0      	movs	r3, #160	; 0xa0
 80038de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	f107 0310 	add.w	r3, r7, #16
 80038ec:	4619      	mov	r1, r3
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <HAL_SPI_MspInit+0x90>)
 80038f0:	f005 ff1e 	bl	8009730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003900:	f107 0310 	add.w	r3, r7, #16
 8003904:	4619      	mov	r1, r3
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_SPI_MspInit+0x90>)
 8003908:	f005 ff12 	bl	8009730 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40013000 	.word	0x40013000
 8003918:	40021000 	.word	0x40021000
 800391c:	40010800 	.word	0x40010800

08003920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_MspInit+0x5c>)
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_MspInit+0x5c>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6193      	str	r3, [r2, #24]
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_MspInit+0x5c>)
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_MspInit+0x5c>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_MspInit+0x5c>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	61d3      	str	r3, [r2, #28]
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_MspInit+0x5c>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_MspInit+0x60>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_MspInit+0x60>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40021000 	.word	0x40021000
 8003980:	40010000 	.word	0x40010000

08003984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <NMI_Handler+0x4>

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <HardFault_Handler+0x4>

08003990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <MemManage_Handler+0x4>

08003996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ca:	f004 ff99 	bl	8008900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f006 f846 	bl	8009a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 80039e4:	2002      	movs	r0, #2
 80039e6:	f006 f83f 	bl	8009a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}

080039ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT3_Pin);
 80039f2:	2004      	movs	r0, #4
 80039f4:	f006 f838 	bl	8009a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}

080039fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <DMA1_Channel1_IRQHandler+0x10>)
 8003a02:	f005 fd61 	bl	80094c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000288 	.word	0x20000288

08003a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <USART1_IRQHandler+0x74>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d029      	beq.n	8003a78 <USART1_IRQHandler+0x68>
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <USART1_IRQHandler+0x74>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d022      	beq.n	8003a78 <USART1_IRQHandler+0x68>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <USART1_IRQHandler+0x74>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <USART1_IRQHandler+0x78>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <USART1_IRQHandler+0x7c>)
 8003a46:	fba2 1203 	umull	r1, r2, r2, r3
 8003a4a:	0a52      	lsrs	r2, r2, #9
 8003a4c:	f240 4106 	movw	r1, #1030	; 0x406
 8003a50:	fb01 f202 	mul.w	r2, r1, r2
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <USART1_IRQHandler+0x80>)
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	88ba      	ldrh	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d009      	beq.n	8003a78 <USART1_IRQHandler+0x68>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <USART1_IRQHandler+0x78>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <USART1_IRQHandler+0x84>)
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <USART1_IRQHandler+0x78>)
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 8003a78:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200011b0 	.word	0x200011b0
 8003a88:	20001238 	.word	0x20001238
 8003a8c:	7f411e53 	.word	0x7f411e53
 8003a90:	2000123a 	.word	0x2000123a
 8003a94:	2000123c 	.word	0x2000123c

08003a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	return 1;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <_kill>:

int _kill(int pid, int sig)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ab0:	f008 fea2 	bl	800c7f8 <__errno>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2216      	movs	r2, #22
 8003ab8:	601a      	str	r2, [r3, #0]
	return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_exit>:

void _exit (int status)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ace:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ffe7 	bl	8003aa6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ad8:	e7fe      	b.n	8003ad8 <_exit+0x12>

08003ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e00a      	b.n	8003b02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003aec:	f3af 8000 	nop.w
 8003af0:	4601      	mov	r1, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	60ba      	str	r2, [r7, #8]
 8003af8:	b2ca      	uxtb	r2, r1
 8003afa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3301      	adds	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	dbf0      	blt.n	8003aec <_read+0x12>
	}

return len;
 8003b0a:	687b      	ldr	r3, [r7, #4]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e009      	b.n	8003b3a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	60ba      	str	r2, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3301      	adds	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	dbf1      	blt.n	8003b26 <_write+0x12>
	}
	return len;
 8003b42:	687b      	ldr	r3, [r7, #4]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_close>:

int _close(int file)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	return -1;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b72:	605a      	str	r2, [r3, #4]
	return 0;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <_isatty>:

int _isatty(int file)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	return 1;
 8003b88:	2301      	movs	r3, #1
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <_sbrk+0x5c>)
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <_sbrk+0x60>)
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <_sbrk+0x64>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <_sbrk+0x64>)
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <_sbrk+0x68>)
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d207      	bcs.n	8003bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bdc:	f008 fe0c 	bl	800c7f8 <__errno>
 8003be0:	4603      	mov	r3, r0
 8003be2:	220c      	movs	r2, #12
 8003be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e009      	b.n	8003c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <_sbrk+0x64>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <_sbrk+0x64>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <_sbrk+0x64>)
 8003bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20005000 	.word	0x20005000
 8003c0c:	00000400 	.word	0x00000400
 8003c10:	2000108c 	.word	0x2000108c
 8003c14:	20001d08 	.word	0x20001d08

08003c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b096      	sub	sp, #88	; 0x58
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	615a      	str	r2, [r3, #20]
 8003c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	2220      	movs	r2, #32
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f008 fe13 	bl	800c888 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c64:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <MX_TIM1_Init+0x138>)
 8003c66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c6a:	2223      	movs	r2, #35	; 0x23
 8003c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6e:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c76:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c82:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c88:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c8e:	4832      	ldr	r0, [pc, #200]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003c90:	f007 faf8 	bl	800b284 <HAL_TIM_Base_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003c9a:	f7ff fdbb 	bl	8003814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ca8:	4619      	mov	r1, r3
 8003caa:	482b      	ldr	r0, [pc, #172]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003cac:	f007 ff02 	bl	800bab4 <HAL_TIM_ConfigClockSource>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003cb6:	f7ff fdad 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003cba:	4827      	ldr	r0, [pc, #156]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003cbc:	f007 fb31 	bl	800b322 <HAL_TIM_OC_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003cc6:	f7ff fda5 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	481f      	ldr	r0, [pc, #124]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003cda:	f008 fb23 	bl	800c324 <HAL_TIMEx_MasterConfigSynchronization>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003ce4:	f7ff fd96 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003ce8:	2330      	movs	r3, #48	; 0x30
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4812      	ldr	r0, [pc, #72]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003d0e:	f007 fdbb 	bl	800b888 <HAL_TIM_OC_ConfigChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003d18:	f7ff fd7c 	bl	8003814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4806      	ldr	r0, [pc, #24]	; (8003d58 <MX_TIM1_Init+0x134>)
 8003d40:	f008 fb4e 	bl	800c3e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003d4a:	f7ff fd63 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	3758      	adds	r7, #88	; 0x58
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20001090 	.word	0x20001090
 8003d5c:	40012c00 	.word	0x40012c00

08003d60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b092      	sub	sp, #72	; 0x48
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d84:	f107 031c 	add.w	r3, r7, #28
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d8e:	463b      	mov	r3, r7
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	611a      	str	r2, [r3, #16]
 8003d9c:	615a      	str	r2, [r3, #20]
 8003d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003daa:	2247      	movs	r2, #71	; 0x47
 8003dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000;
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003db6:	f242 3228 	movw	r2, #9000	; 0x2328
 8003dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dc2:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dc8:	4836      	ldr	r0, [pc, #216]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003dca:	f007 fa5b 	bl	800b284 <HAL_TIM_Base_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003dd4:	f7ff fd1e 	bl	8003814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003de2:	4619      	mov	r1, r3
 8003de4:	482f      	ldr	r0, [pc, #188]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003de6:	f007 fe65 	bl	800bab4 <HAL_TIM_ConfigClockSource>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003df0:	f7ff fd10 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003df4:	482b      	ldr	r0, [pc, #172]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003df6:	f007 fb8f 	bl	800b518 <HAL_TIM_PWM_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8003e00:	f7ff fd08 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e04:	2108      	movs	r1, #8
 8003e06:	4827      	ldr	r0, [pc, #156]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e08:	f007 fce4 	bl	800b7d4 <HAL_TIM_OnePulse_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003e12:	f7ff fcff 	bl	8003814 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003e16:	2306      	movs	r3, #6
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003e1a:	2360      	movs	r3, #96	; 0x60
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	481d      	ldr	r0, [pc, #116]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e2e:	f007 ff05 	bl	800bc3c <HAL_TIM_SlaveConfigSynchro>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003e38:	f7ff fcec 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4816      	ldr	r0, [pc, #88]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e4c:	f008 fa6a 	bl	800c324 <HAL_TIMEx_MasterConfigSynchronization>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8003e56:	f7ff fcdd 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003e5a:	2370      	movs	r3, #112	; 0x70
 8003e5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e72:	f007 fd61 	bl	800b938 <HAL_TIM_PWM_ConfigChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8003e7c:	f7ff fcca 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e80:	463b      	mov	r3, r7
 8003e82:	220c      	movs	r2, #12
 8003e84:	4619      	mov	r1, r3
 8003e86:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e88:	f007 fd56 	bl	800b938 <HAL_TIM_PWM_ConfigChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 8003e92:	f7ff fcbf 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003e96:	4803      	ldr	r0, [pc, #12]	; (8003ea4 <MX_TIM2_Init+0x144>)
 8003e98:	f000 fa14 	bl	80042c4 <HAL_TIM_MspPostInit>

}
 8003e9c:	bf00      	nop
 8003e9e:	3748      	adds	r7, #72	; 0x48
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200010d8 	.word	0x200010d8

08003ea8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b092      	sub	sp, #72	; 0x48
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ecc:	f107 031c 	add.w	r3, r7, #28
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
 8003ee4:	615a      	str	r2, [r3, #20]
 8003ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ee8:	4b3a      	ldr	r3, [pc, #232]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003eea:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <MX_TIM3_Init+0x130>)
 8003eec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003eee:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003ef0:	2247      	movs	r2, #71	; 0x47
 8003ef2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003efc:	f242 3228 	movw	r2, #9000	; 0x2328
 8003f00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f02:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f0a:	2280      	movs	r2, #128	; 0x80
 8003f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f0e:	4831      	ldr	r0, [pc, #196]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f10:	f007 f9b8 	bl	800b284 <HAL_TIM_Base_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003f1a:	f7ff fc7b 	bl	8003814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f28:	4619      	mov	r1, r3
 8003f2a:	482a      	ldr	r0, [pc, #168]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f2c:	f007 fdc2 	bl	800bab4 <HAL_TIM_ConfigClockSource>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003f36:	f7ff fc6d 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f3a:	4826      	ldr	r0, [pc, #152]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f3c:	f007 faec 	bl	800b518 <HAL_TIM_PWM_Init>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8003f46:	f7ff fc65 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f4a:	2108      	movs	r1, #8
 8003f4c:	4821      	ldr	r0, [pc, #132]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f4e:	f007 fc41 	bl	800b7d4 <HAL_TIM_OnePulse_Init>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003f58:	f7ff fc5c 	bl	8003814 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003f60:	2360      	movs	r3, #96	; 0x60
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8003f64:	2302      	movs	r3, #2
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	4619      	mov	r1, r3
 8003f72:	4818      	ldr	r0, [pc, #96]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f74:	f007 fe62 	bl	800bc3c <HAL_TIM_SlaveConfigSynchro>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003f7e:	f7ff fc49 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f8a:	f107 031c 	add.w	r3, r7, #28
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4810      	ldr	r0, [pc, #64]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003f92:	f008 f9c7 	bl	800c324 <HAL_TIMEx_MasterConfigSynchronization>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003f9c:	f7ff fc3a 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003fa0:	2370      	movs	r3, #112	; 0x70
 8003fa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4807      	ldr	r0, [pc, #28]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003fb8:	f007 fcbe 	bl	800b938 <HAL_TIM_PWM_ConfigChannel>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003fc2:	f7ff fc27 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fc6:	4803      	ldr	r0, [pc, #12]	; (8003fd4 <MX_TIM3_Init+0x12c>)
 8003fc8:	f000 f97c 	bl	80042c4 <HAL_TIM_MspPostInit>

}
 8003fcc:	bf00      	nop
 8003fce:	3748      	adds	r7, #72	; 0x48
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20001120 	.word	0x20001120
 8003fd8:	40000400 	.word	0x40000400

08003fdc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b092      	sub	sp, #72	; 0x48
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800400a:	463b      	mov	r3, r7
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
 8004018:	615a      	str	r2, [r3, #20]
 800401a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <MX_TIM4_Init+0x144>)
 800401e:	4a41      	ldr	r2, [pc, #260]	; (8004124 <MX_TIM4_Init+0x148>)
 8004020:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8004022:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <MX_TIM4_Init+0x144>)
 8004024:	2247      	movs	r2, #71	; 0x47
 8004026:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <MX_TIM4_Init+0x144>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <MX_TIM4_Init+0x144>)
 8004030:	f242 3228 	movw	r2, #9000	; 0x2328
 8004034:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <MX_TIM4_Init+0x144>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <MX_TIM4_Init+0x144>)
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004042:	4837      	ldr	r0, [pc, #220]	; (8004120 <MX_TIM4_Init+0x144>)
 8004044:	f007 f91e 	bl	800b284 <HAL_TIM_Base_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800404e:	f7ff fbe1 	bl	8003814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004058:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800405c:	4619      	mov	r1, r3
 800405e:	4830      	ldr	r0, [pc, #192]	; (8004120 <MX_TIM4_Init+0x144>)
 8004060:	f007 fd28 	bl	800bab4 <HAL_TIM_ConfigClockSource>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800406a:	f7ff fbd3 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800406e:	482c      	ldr	r0, [pc, #176]	; (8004120 <MX_TIM4_Init+0x144>)
 8004070:	f007 fa52 	bl	800b518 <HAL_TIM_PWM_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800407a:	f7ff fbcb 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800407e:	2108      	movs	r1, #8
 8004080:	4827      	ldr	r0, [pc, #156]	; (8004120 <MX_TIM4_Init+0x144>)
 8004082:	f007 fba7 	bl	800b7d4 <HAL_TIM_OnePulse_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800408c:	f7ff fbc2 	bl	8003814 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004090:	2306      	movs	r3, #6
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8004094:	2360      	movs	r3, #96	; 0x60
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8004098:	2302      	movs	r3, #2
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80040a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a4:	4619      	mov	r1, r3
 80040a6:	481e      	ldr	r0, [pc, #120]	; (8004120 <MX_TIM4_Init+0x144>)
 80040a8:	f007 fdc8 	bl	800bc3c <HAL_TIM_SlaveConfigSynchro>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80040b2:	f7ff fbaf 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040be:	f107 031c 	add.w	r3, r7, #28
 80040c2:	4619      	mov	r1, r3
 80040c4:	4816      	ldr	r0, [pc, #88]	; (8004120 <MX_TIM4_Init+0x144>)
 80040c6:	f008 f92d 	bl	800c324 <HAL_TIMEx_MasterConfigSynchronization>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 80040d0:	f7ff fba0 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80040d4:	2370      	movs	r3, #112	; 0x70
 80040d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040e4:	463b      	mov	r3, r7
 80040e6:	2200      	movs	r2, #0
 80040e8:	4619      	mov	r1, r3
 80040ea:	480d      	ldr	r0, [pc, #52]	; (8004120 <MX_TIM4_Init+0x144>)
 80040ec:	f007 fc24 	bl	800b938 <HAL_TIM_PWM_ConfigChannel>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM4_Init+0x11e>
  {
    Error_Handler();
 80040f6:	f7ff fb8d 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040fa:	463b      	mov	r3, r7
 80040fc:	220c      	movs	r2, #12
 80040fe:	4619      	mov	r1, r3
 8004100:	4807      	ldr	r0, [pc, #28]	; (8004120 <MX_TIM4_Init+0x144>)
 8004102:	f007 fc19 	bl	800b938 <HAL_TIM_PWM_ConfigChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM4_Init+0x134>
  {
    Error_Handler();
 800410c:	f7ff fb82 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <MX_TIM4_Init+0x144>)
 8004112:	f000 f8d7 	bl	80042c4 <HAL_TIM_MspPostInit>

}
 8004116:	bf00      	nop
 8004118:	3748      	adds	r7, #72	; 0x48
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20001168 	.word	0x20001168
 8004124:	40000800 	.word	0x40000800

08004128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b090      	sub	sp, #64	; 0x40
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5a      	ldr	r2, [pc, #360]	; (80042ac <HAL_TIM_Base_MspInit+0x184>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800414e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004152:	6193      	str	r3, [r2, #24]
 8004154:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004160:	e0a0      	b.n	80042a4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d136      	bne.n	80041da <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4a4f      	ldr	r2, [pc, #316]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	61d3      	str	r3, [r2, #28]
 8004178:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	4a49      	ldr	r2, [pc, #292]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800418a:	f043 0308 	orr.w	r3, r3, #8
 800418e:	6193      	str	r3, [r2, #24]
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = A_ZeroCross_Pin;
 800419c:	2308      	movs	r3, #8
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a0:	2300      	movs	r3, #0
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(A_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 80041a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ac:	4619      	mov	r1, r3
 80041ae:	4841      	ldr	r0, [pc, #260]	; (80042b4 <HAL_TIM_Base_MspInit+0x18c>)
 80041b0:	f005 fabe 	bl	8009730 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80041b4:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <HAL_TIM_Base_MspInit+0x190>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d2:	4a39      	ldr	r2, [pc, #228]	; (80042b8 <HAL_TIM_Base_MspInit+0x190>)
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	6053      	str	r3, [r2, #4]
}
 80041d8:	e064      	b.n	80042a4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM3)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a37      	ldr	r2, [pc, #220]	; (80042bc <HAL_TIM_Base_MspInit+0x194>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d136      	bne.n	8004252 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4a31      	ldr	r2, [pc, #196]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	61d3      	str	r3, [r2, #28]
 80041f0:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fc:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	6193      	str	r3, [r2, #24]
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = B_ZeroCross_Pin;
 8004214:	2320      	movs	r3, #32
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004218:	2300      	movs	r3, #0
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	2300      	movs	r3, #0
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(B_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8004220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004224:	4619      	mov	r1, r3
 8004226:	4823      	ldr	r0, [pc, #140]	; (80042b4 <HAL_TIM_Base_MspInit+0x18c>)
 8004228:	f005 fa82 	bl	8009730 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <HAL_TIM_Base_MspInit+0x190>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_TIM_Base_MspInit+0x190>)
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424e:	6053      	str	r3, [r2, #4]
}
 8004250:	e028      	b.n	80042a4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM4)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_TIM_Base_MspInit+0x198>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d123      	bne.n	80042a4 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004262:	f043 0304 	orr.w	r3, r3, #4
 8004266:	61d3      	str	r3, [r2, #28]
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 800427a:	f043 0308 	orr.w	r3, r3, #8
 800427e:	6193      	str	r3, [r2, #24]
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_TIM_Base_MspInit+0x188>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = C_ZeroCross_Pin;
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(C_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8004298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800429c:	4619      	mov	r1, r3
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <HAL_TIM_Base_MspInit+0x18c>)
 80042a0:	f005 fa46 	bl	8009730 <HAL_GPIO_Init>
}
 80042a4:	bf00      	nop
 80042a6:	3740      	adds	r7, #64	; 0x40
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40010c00 	.word	0x40010c00
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800

080042c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	; 0x30
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 0318 	add.w	r3, r7, #24
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d12b      	bne.n	800433c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80042ea:	f043 0304 	orr.w	r3, r3, #4
 80042ee:	6193      	str	r3, [r2, #24]
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = AREV_Pin|AFWD_Pin;
 80042fc:	f248 0308 	movw	r3, #32776	; 0x8008
 8004300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004306:	2302      	movs	r3, #2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430a:	f107 0318 	add.w	r3, r7, #24
 800430e:	4619      	mov	r1, r3
 8004310:	4834      	ldr	r0, [pc, #208]	; (80043e4 <HAL_TIM_MspPostInit+0x120>)
 8004312:	f005 fa0d 	bl	8009730 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_TIM_MspPostInit+0x124>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <HAL_TIM_MspPostInit+0x124>)
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800433a:	e04d      	b.n	80043d8 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <HAL_TIM_MspPostInit+0x128>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d12a      	bne.n	800439c <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 800434c:	f043 0308 	orr.w	r3, r3, #8
 8004350:	6193      	str	r3, [r2, #24]
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BFWD_Pin;
 800435e:	2310      	movs	r3, #16
 8004360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004366:	2302      	movs	r3, #2
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BFWD_GPIO_Port, &GPIO_InitStruct);
 800436a:	f107 0318 	add.w	r3, r7, #24
 800436e:	4619      	mov	r1, r3
 8004370:	481f      	ldr	r0, [pc, #124]	; (80043f0 <HAL_TIM_MspPostInit+0x12c>)
 8004372:	f005 f9dd 	bl	8009730 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <HAL_TIM_MspPostInit+0x124>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <HAL_TIM_MspPostInit+0x124>)
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	6053      	str	r3, [r2, #4]
}
 800439a:	e01d      	b.n	80043d8 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM4)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <HAL_TIM_MspPostInit+0x130>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d118      	bne.n	80043d8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80043ac:	f043 0308 	orr.w	r3, r3, #8
 80043b0:	6193      	str	r3, [r2, #24]
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_TIM_MspPostInit+0x11c>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CFWD_Pin|CREV_Pin;
 80043be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80043c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c4:	2302      	movs	r3, #2
 80043c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2302      	movs	r3, #2
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043cc:	f107 0318 	add.w	r3, r7, #24
 80043d0:	4619      	mov	r1, r3
 80043d2:	4807      	ldr	r0, [pc, #28]	; (80043f0 <HAL_TIM_MspPostInit+0x12c>)
 80043d4:	f005 f9ac 	bl	8009730 <HAL_GPIO_Init>
}
 80043d8:	bf00      	nop
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40010800 	.word	0x40010800
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40010c00 	.word	0x40010c00
 80043f4:	40000800 	.word	0x40000800

080043f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <MX_USART1_UART_Init+0x50>)
 8004400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 8004404:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800442e:	4805      	ldr	r0, [pc, #20]	; (8004444 <MX_USART1_UART_Init+0x4c>)
 8004430:	f008 f827 	bl	800c482 <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800443a:	f7ff f9eb 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200011b0 	.word	0x200011b0
 8004448:	40013800 	.word	0x40013800

0800444c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <MX_USART3_UART_Init+0x50>)
 8004454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004458:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800445c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004482:	4805      	ldr	r0, [pc, #20]	; (8004498 <MX_USART3_UART_Init+0x4c>)
 8004484:	f007 fffd 	bl	800c482 <HAL_UART_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800448e:	f7ff f9c1 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200011f4 	.word	0x200011f4
 800449c:	40004800 	.word	0x40004800

080044a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 031c 	add.w	r3, r7, #28
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a45      	ldr	r2, [pc, #276]	; (80045d0 <HAL_UART_MspInit+0x130>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d13a      	bne.n	8004536 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c0:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	4a43      	ldr	r2, [pc, #268]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ca:	6193      	str	r3, [r2, #24]
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6193      	str	r3, [r2, #24]
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_UART_MspInit+0x134>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TxD_Pin;
 80044f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fa:	2303      	movs	r3, #3
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TxD_GPIO_Port, &GPIO_InitStruct);
 80044fe:	f107 031c 	add.w	r3, r7, #28
 8004502:	4619      	mov	r1, r3
 8004504:	4834      	ldr	r0, [pc, #208]	; (80045d8 <HAL_UART_MspInit+0x138>)
 8004506:	f005 f913 	bl	8009730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxD_Pin;
 800450a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004510:	2300      	movs	r3, #0
 8004512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RxD_GPIO_Port, &GPIO_InitStruct);
 8004518:	f107 031c 	add.w	r3, r7, #28
 800451c:	4619      	mov	r1, r3
 800451e:	482e      	ldr	r0, [pc, #184]	; (80045d8 <HAL_UART_MspInit+0x138>)
 8004520:	f005 f906 	bl	8009730 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004524:	2200      	movs	r2, #0
 8004526:	2100      	movs	r1, #0
 8004528:	2025      	movs	r0, #37	; 0x25
 800452a:	f004 fed8 	bl	80092de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800452e:	2025      	movs	r0, #37	; 0x25
 8004530:	f004 fef1 	bl	8009316 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004534:	e048      	b.n	80045c8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a28      	ldr	r2, [pc, #160]	; (80045dc <HAL_UART_MspInit+0x13c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d143      	bne.n	80045c8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_UART_MspInit+0x134>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <HAL_UART_MspInit+0x134>)
 8004546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454a:	61d3      	str	r3, [r2, #28]
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <HAL_UART_MspInit+0x134>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_UART_MspInit+0x134>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_UART_MspInit+0x134>)
 800455e:	f043 0310 	orr.w	r3, r3, #16
 8004562:	6193      	str	r3, [r2, #24]
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_UART_MspInit+0x134>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIRE_TxD_Pin;
 8004570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(WIRE_TxD_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4619      	mov	r1, r3
 8004584:	4816      	ldr	r0, [pc, #88]	; (80045e0 <HAL_UART_MspInit+0x140>)
 8004586:	f005 f8d3 	bl	8009730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIRE_RxD_Pin;
 800458a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800458e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIRE_RxD_GPIO_Port, &GPIO_InitStruct);
 8004598:	f107 031c 	add.w	r3, r7, #28
 800459c:	4619      	mov	r1, r3
 800459e:	4810      	ldr	r0, [pc, #64]	; (80045e0 <HAL_UART_MspInit+0x140>)
 80045a0:	f005 f8c6 	bl	8009730 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_UART_MspInit+0x144>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	f043 0310 	orr.w	r3, r3, #16
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <HAL_UART_MspInit+0x144>)
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	6053      	str	r3, [r2, #4]
}
 80045c8:	bf00      	nop
 80045ca:	3730      	adds	r7, #48	; 0x30
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010800 	.word	0x40010800
 80045dc:	40004800 	.word	0x40004800
 80045e0:	40011000 	.word	0x40011000
 80045e4:	40010000 	.word	0x40010000

080045e8 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <dbg_available+0x38>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <dbg_available+0x3c>)
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004600:	b29b      	uxth	r3, r3
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <dbg_available+0x40>)
 8004604:	fba2 1203 	umull	r1, r2, r2, r3
 8004608:	0a52      	lsrs	r2, r2, #9
 800460a:	f240 4106 	movw	r1, #1030	; 0x406
 800460e:	fb01 f202 	mul.w	r2, r1, r2
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	b29b      	uxth	r3, r3
 8004616:	b21b      	sxth	r3, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	20001238 	.word	0x20001238
 8004624:	2000123a 	.word	0x2000123a
 8004628:	7f411e53 	.word	0x7f411e53

0800462c <dbg_read>:

int16_t dbg_read(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <dbg_read+0x5c>)
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29a      	uxth	r2, r3
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <dbg_read+0x60>)
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	429a      	cmp	r2, r3
 8004640:	d102      	bne.n	8004648 <dbg_read+0x1c>
	{
		return -1;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e019      	b.n	800467c <dbg_read+0x50>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <dbg_read+0x60>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <dbg_read+0x64>)
 8004652:	5c9b      	ldrb	r3, [r3, r2]
 8004654:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <dbg_read+0x60>)
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	3301      	adds	r3, #1
 800465e:	b29b      	uxth	r3, r3
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <dbg_read+0x68>)
 8004662:	fba2 1203 	umull	r1, r2, r2, r3
 8004666:	0a52      	lsrs	r2, r2, #9
 8004668:	f240 4106 	movw	r1, #1030	; 0x406
 800466c:	fb01 f202 	mul.w	r2, r1, r2
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	b29a      	uxth	r2, r3
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <dbg_read+0x60>)
 8004676:	801a      	strh	r2, [r3, #0]
		return c;
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	b21b      	sxth	r3, r3
	}
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20001238 	.word	0x20001238
 800468c:	2000123a 	.word	0x2000123a
 8004690:	2000123c 	.word	0x2000123c
 8004694:	7f411e53 	.word	0x7f411e53

08004698 <EN_Interrupt>:
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <EN_Interrupt+0x1c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <EN_Interrupt+0x1c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0220 	orr.w	r2, r2, #32
 80046aa:	60da      	str	r2, [r3, #12]
	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	200011b0 	.word	0x200011b0

080046b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046b8:	480c      	ldr	r0, [pc, #48]	; (80046ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046ba:	490d      	ldr	r1, [pc, #52]	; (80046f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046bc:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046c0:	e002      	b.n	80046c8 <LoopCopyDataInit>

080046c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046c6:	3304      	adds	r3, #4

080046c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046cc:	d3f9      	bcc.n	80046c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046d0:	4c0a      	ldr	r4, [pc, #40]	; (80046fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80046d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046d4:	e001      	b.n	80046da <LoopFillZerobss>

080046d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046d8:	3204      	adds	r2, #4

080046da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046dc:	d3fb      	bcc.n	80046d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046de:	f7ff fa9b 	bl	8003c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046e2:	f008 f88f 	bl	800c804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046e6:	f7fe feaf 	bl	8003448 <main>
  bx lr
 80046ea:	4770      	bx	lr
  ldr r0, =_sdata
 80046ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046f0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80046f4:	08012250 	.word	0x08012250
  ldr r2, =_sbss
 80046f8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80046fc:	20001d08 	.word	0x20001d08

08004700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004700:	e7fe      	b.n	8004700 <ADC1_2_IRQHandler>
	...

08004704 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	2b7f      	cmp	r3, #127	; 0x7f
 8004714:	d802      	bhi.n	800471c <ff_convert+0x18>
		c = src;
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	81fb      	strh	r3, [r7, #14]
 800471a:	e025      	b.n	8004768 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2bff      	cmp	r3, #255	; 0xff
 8004726:	d805      	bhi.n	8004734 <ff_convert+0x30>
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	3b80      	subs	r3, #128	; 0x80
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <ff_convert+0x70>)
 800472e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004732:	e000      	b.n	8004736 <ff_convert+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	81fb      	strh	r3, [r7, #14]
 8004738:	e016      	b.n	8004768 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800473a:	2300      	movs	r3, #0
 800473c:	81fb      	strh	r3, [r7, #14]
 800473e:	e009      	b.n	8004754 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <ff_convert+0x70>)
 8004744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	429a      	cmp	r2, r3
 800474c:	d006      	beq.n	800475c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	3301      	adds	r3, #1
 8004752:	81fb      	strh	r3, [r7, #14]
 8004754:	89fb      	ldrh	r3, [r7, #14]
 8004756:	2b7f      	cmp	r3, #127	; 0x7f
 8004758:	d9f2      	bls.n	8004740 <ff_convert+0x3c>
 800475a:	e000      	b.n	800475e <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 800475c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800475e:	89fb      	ldrh	r3, [r7, #14]
 8004760:	3380      	adds	r3, #128	; 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004768:	89fb      	ldrh	r3, [r7, #14]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	08010b8c 	.word	0x08010b8c

08004778 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e002      	b.n	800478e <ff_wtoupper+0x16>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <ff_wtoupper+0x54>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <ff_wtoupper+0x30>
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <ff_wtoupper+0x54>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1ef      	bne.n	8004788 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <ff_wtoupper+0x54>)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <ff_wtoupper+0x46>
 80047b4:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <ff_wtoupper+0x58>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047bc:	e000      	b.n	80047c0 <ff_wtoupper+0x48>
 80047be:	88fb      	ldrh	r3, [r7, #6]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	08010c8c 	.word	0x08010c8c
 80047d0:	08010e6c 	.word	0x08010e6c

080047d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80047e8:	e00c      	b.n	8004804 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3304      	adds	r3, #4
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3304      	adds	r3, #4
 80047fc:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3b04      	subs	r3, #4
 8004802:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d8ef      	bhi.n	80047ea <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 800480a:	e007      	b.n	800481c <mem_cpy+0x48>
		*d++ = *s++;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	1c53      	adds	r3, r2, #1
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1c59      	adds	r1, r3, #1
 8004816:	6179      	str	r1, [r7, #20]
 8004818:	7812      	ldrb	r2, [r2, #0]
 800481a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f2      	bne.n	800480c <mem_cpy+0x38>
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr

08004832 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004842:	e005      	b.n	8004850 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	617a      	str	r2, [r7, #20]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f4      	bne.n	8004844 <mem_set+0x12>
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004866:	b480      	push	{r7}
 8004868:	b089      	sub	sp, #36	; 0x24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800487e:	bf00      	nop
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <mem_cmp+0x40>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	61fa      	str	r2, [r7, #28]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	61ba      	str	r2, [r7, #24]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ec      	beq.n	8004880 <mem_cmp+0x1a>
	return r;
 80048a6:	697b      	ldr	r3, [r7, #20]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3724      	adds	r7, #36	; 0x24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80048bc:	e002      	b.n	80048c4 <chk_chr+0x12>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3301      	adds	r3, #1
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <chk_chr+0x26>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d1f2      	bne.n	80048be <chk_chr+0xc>
	return *str;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	781b      	ldrb	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	791b      	ldrb	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d038      	beq.n	8004968 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7858      	ldrb	r0, [r3, #1]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004906:	2301      	movs	r3, #1
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	f002 ff4f 	bl	80077ac <disk_write>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <sync_window+0x32>
			return FR_DISK_ERR;
 8004914:	2301      	movs	r3, #1
 8004916:	e028      	b.n	800496a <sync_window+0x84>
		fs->wflag = 0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d31f      	bcc.n	8004968 <sync_window+0x82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4413      	add	r3, r2
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d217      	bcs.n	8004968 <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	e010      	b.n	8004962 <sync_window+0x7c>
				wsect += fs->fsize;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7858      	ldrb	r0, [r3, #1]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004954:	2301      	movs	r3, #1
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	f002 ff28 	bl	80077ac <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3b01      	subs	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d8eb      	bhi.n	8004940 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d018      	beq.n	80049b8 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ffad 	bl	80048e6 <sync_window>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <move_window+0x24>
			return FR_DISK_ERR;
 8004992:	2301      	movs	r3, #1
 8004994:	e011      	b.n	80049ba <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7858      	ldrb	r0, [r3, #1]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049a0:	2301      	movs	r3, #1
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	f002 fe9a 	bl	80076dc <disk_read>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <move_window+0x40>
			return FR_DISK_ERR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e003      	b.n	80049ba <move_window+0x48>
		fs->winsect = sector;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff8a 	bl	80048e6 <sync_window>
 80049d2:	4603      	mov	r3, r0
 80049d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d14a      	bne.n	8004a72 <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d13a      	bne.n	8004a5a <sync_fs+0x96>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	795b      	ldrb	r3, [r3, #5]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d036      	beq.n	8004a5a <sync_fs+0x96>
			fs->winsect = 0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3338      	adds	r3, #56	; 0x38
 80049f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff18 	bl	8004832 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3338      	adds	r3, #56	; 0x38
 8004a06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a0a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004a0e:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <sync_fs+0xb8>)
 8004a16:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3338      	adds	r3, #56	; 0x38
 8004a1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <sync_fs+0xbc>)
 8004a22:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3338      	adds	r3, #56	; 0x38
 8004a28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6912      	ldr	r2, [r2, #16]
 8004a30:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3338      	adds	r3, #56	; 0x38
 8004a36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68d2      	ldr	r2, [r2, #12]
 8004a3e:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7858      	ldrb	r0, [r3, #1]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f002 feac 	bl	80077ac <disk_write>
			fs->fsi_flag = 0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f002 ff22 	bl	80078ac <disk_ioctl>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <sync_fs+0xae>
			res = FR_DISK_ERR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	41615252 	.word	0x41615252
 8004a80:	61417272 	.word	0x61417272

08004a84 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3b02      	subs	r3, #2
 8004a92:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	3b02      	subs	r3, #2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d301      	bcc.n	8004aa4 <clust2sect+0x20>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e008      	b.n	8004ab6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	fb03 f202 	mul.w	r2, r3, r2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	4413      	add	r3, r2
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d904      	bls.n	8004ada <get_fat+0x1a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d301      	bcc.n	8004ade <get_fat+0x1e>
		return 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e085      	b.n	8004bea <get_fat+0x12a>

	switch (fs->fs_type) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d05f      	beq.n	8004ba6 <get_fat+0xe6>
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	dc7d      	bgt.n	8004be6 <get_fat+0x126>
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d002      	beq.n	8004af4 <get_fat+0x34>
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d042      	beq.n	8004b78 <get_fat+0xb8>
 8004af2:	e078      	b.n	8004be6 <get_fat+0x126>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff2f 	bl	8004972 <move_window>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d15e      	bne.n	8004bd8 <get_fat+0x118>
		wc = fs->win[bc % SS(fs)]; bc++;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	0a5b      	lsrs	r3, r3, #9
 8004b38:	4413      	add	r3, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff18 	bl	8004972 <move_window>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d149      	bne.n	8004bdc <get_fat+0x11c>
		wc |= fs->win[bc % SS(fs)] << 8;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <get_fat+0xb0>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	e03c      	b.n	8004bea <get_fat+0x12a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	e038      	b.n	8004bea <get_fat+0x12a>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	4413      	add	r3, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fef4 	bl	8004972 <move_window>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d127      	bne.n	8004be0 <get_fat+0x120>
		p = &fs->win[clst * 2 % SS(fs)];
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b98:	3338      	adds	r3, #56	; 0x38
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	e021      	b.n	8004bea <get_fat+0x12a>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	09db      	lsrs	r3, r3, #7
 8004bae:	4413      	add	r3, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fedd 	bl	8004972 <move_window>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d112      	bne.n	8004be4 <get_fat+0x124>
		p = &fs->win[clst * 4 % SS(fs)];
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004bc6:	3338      	adds	r3, #56	; 0x38
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bd6:	e008      	b.n	8004bea <get_fat+0x12a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004bd8:	bf00      	nop
 8004bda:	e004      	b.n	8004be6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8004be4:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d904      	bls.n	8004c0e <put_fat+0x1c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <put_fat+0x22>
		res = FR_INT_ERR;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e0bf      	b.n	8004d94 <put_fat+0x1a2>

	} else {
		switch (fs->fs_type) {
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	f000 808d 	beq.w	8004d38 <put_fat+0x146>
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	f300 80ab 	bgt.w	8004d7a <put_fat+0x188>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <put_fat+0x3c>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d06a      	beq.n	8004d02 <put_fat+0x110>
 8004c2c:	e0a5      	b.n	8004d7a <put_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	4413      	add	r3, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fe92 	bl	8004972 <move_window>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8093 	bne.w	8004d80 <put_fat+0x18e>
			p = &fs->win[bc % SS(fs)];
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c60:	3338      	adds	r3, #56	; 0x38
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <put_fat+0x9c>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b25a      	sxtb	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b25b      	sxtb	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e001      	b.n	8004c92 <put_fat+0xa0>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	7013      	strb	r3, [r2, #0]
			bc++;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	4413      	add	r3, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fe5f 	bl	8004972 <move_window>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cb8:	7ffb      	ldrb	r3, [r7, #31]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d162      	bne.n	8004d84 <put_fat+0x192>
			p = &fs->win[bc % SS(fs)];
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	3338      	adds	r3, #56	; 0x38
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4413      	add	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <put_fat+0xec>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e00e      	b.n	8004cfc <put_fat+0x10a>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b25b      	sxtb	r3, r3
 8004ce4:	f023 030f 	bic.w	r3, r3, #15
 8004ce8:	b25a      	sxtb	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	7013      	strb	r3, [r2, #0]
			break;
 8004d00:	e045      	b.n	8004d8e <put_fat+0x19c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fe2f 	bl	8004972 <move_window>
 8004d14:	4603      	mov	r3, r0
 8004d16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d134      	bne.n	8004d88 <put_fat+0x196>
			p = &fs->win[clst * 2 % SS(fs)];
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d26:	3338      	adds	r3, #56	; 0x38
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	801a      	strh	r2, [r3, #0]
			break;
 8004d36:	e02a      	b.n	8004d8e <put_fat+0x19c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	09db      	lsrs	r3, r3, #7
 8004d40:	4413      	add	r3, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fe14 	bl	8004972 <move_window>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11b      	bne.n	8004d8c <put_fat+0x19a>
			p = &fs->win[clst * 4 % SS(fs)];
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d5c:	3338      	adds	r3, #56	; 0x38
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
			break;
 8004d78:	e009      	b.n	8004d8e <put_fat+0x19c>

		default :
			res = FR_INT_ERR;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e006      	b.n	8004d8e <put_fat+0x19c>
			if (res != FR_OK) break;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <put_fat+0x19c>
			if (res != FR_OK) break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <put_fat+0x19c>
			if (res != FR_OK) break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <put_fat+0x19c>
			if (res != FR_OK) break;
 8004d8c:	bf00      	nop
		}
		fs->wflag = 1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d904      	bls.n	8004db8 <remove_chain+0x1a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <remove_chain+0x20>
		res = FR_INT_ERR;
 8004db8:	2302      	movs	r3, #2
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e039      	b.n	8004e32 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004dc2:	e02d      	b.n	8004e20 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff fe7a 	bl	8004ac0 <get_fat>
 8004dcc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02b      	beq.n	8004e2c <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <remove_chain+0x42>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	e028      	b.n	8004e32 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d102      	bne.n	8004dee <remove_chain+0x50>
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e021      	b.n	8004e32 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004dee:	2200      	movs	r2, #0
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fefd 	bl	8004bf2 <put_fat>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d116      	bne.n	8004e30 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d007      	beq.n	8004e1c <remove_chain+0x7e>
				fs->free_clust++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d3cc      	bcc.n	8004dc4 <remove_chain+0x26>
 8004e2a:	e002      	b.n	8004e32 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <remove_chain+0x94>
			if (res != FR_OK) break;
 8004e30:	bf00      	nop
		}
	}

	return res;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <create_chain+0x26>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d315      	bcc.n	8004e8e <create_chain+0x52>
 8004e62:	2301      	movs	r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	e012      	b.n	8004e8e <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe28 	bl	8004ac0 <get_fat>
 8004e70:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d801      	bhi.n	8004e7c <create_chain+0x40>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e064      	b.n	8004f46 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d201      	bcs.n	8004e8a <create_chain+0x4e>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	e05d      	b.n	8004f46 <create_chain+0x10a>
		scl = clst;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3301      	adds	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d307      	bcc.n	8004eb2 <create_chain+0x76>
			ncl = 2;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d901      	bls.n	8004eb2 <create_chain+0x76>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e049      	b.n	8004f46 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fe03 	bl	8004ac0 <get_fat>
 8004eba:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d002      	beq.n	8004ed0 <create_chain+0x94>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <create_chain+0x98>
			return cs;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	e038      	b.n	8004f46 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1da      	bne.n	8004e92 <create_chain+0x56>
 8004edc:	2300      	movs	r3, #0
 8004ede:	e032      	b.n	8004f46 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8004ee0:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004ee2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004ee6:	6979      	ldr	r1, [r7, #20]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fe82 	bl	8004bf2 <put_fat>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <create_chain+0xd0>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe75 	bl	8004bf2 <put_fat>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d110      	bne.n	8004f34 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d010      	beq.n	8004f44 <create_chain+0x108>
			fs->free_clust--;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	715a      	strb	r2, [r3, #5]
 8004f32:	e007      	b.n	8004f44 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d102      	bne.n	8004f40 <create_chain+0x104>
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	e000      	b.n	8004f42 <create_chain+0x106>
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004f44:	697b      	ldr	r3, [r7, #20]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	887a      	ldrh	r2, [r7, #2]
 8004f5e:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d005      	beq.n	8004f78 <dir_sdi+0x2a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d301      	bcc.n	8004f7c <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e066      	b.n	800504a <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <dir_sdi+0x46>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d103      	bne.n	8004f94 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d114      	bne.n	8004fc4 <dir_sdi+0x76>
		dj->clust = clst;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	891b      	ldrh	r3, [r3, #8]
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d301      	bcc.n	8004fb0 <dir_sdi+0x62>
			return FR_INT_ERR;
 8004fac:	2302      	movs	r3, #2
 8004fae:	e04c      	b.n	800504a <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	887a      	ldrh	r2, [r7, #2]
 8004fb8:	0912      	lsrs	r2, r2, #4
 8004fba:	b292      	uxth	r2, r2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]
 8004fc2:	e036      	b.n	8005032 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	789b      	ldrb	r3, [r3, #2]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8004fd0:	e01b      	b.n	800500a <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fd71 	bl	8004ac0 <get_fat>
 8004fde:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d101      	bne.n	8004fec <dir_sdi+0x9e>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e02e      	b.n	800504a <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d905      	bls.n	8004ffe <dir_sdi+0xb0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d301      	bcc.n	8005002 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8004ffe:	2302      	movs	r3, #2
 8005000:	e023      	b.n	800504a <dir_sdi+0xfc>
			idx -= ic;
 8005002:	887a      	ldrh	r2, [r7, #2]
 8005004:	897b      	ldrh	r3, [r7, #10]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	897b      	ldrh	r3, [r7, #10]
 800500e:	429a      	cmp	r2, r3
 8005010:	d2df      	bcs.n	8004fd2 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fd30 	bl	8004a84 <clust2sect>
 8005024:	4602      	mov	r2, r0
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	b29b      	uxth	r3, r3
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005052:	b590      	push	{r4, r7, lr}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	88db      	ldrh	r3, [r3, #6]
 8005060:	3301      	adds	r3, #1
 8005062:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8005064:	893b      	ldrh	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <dir_next+0x20>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <dir_next+0x24>
		return FR_NO_FILE;
 8005072:	2304      	movs	r3, #4
 8005074:	e0bb      	b.n	80051ee <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 80a6 	bne.w	80051d0 <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	891b      	ldrh	r3, [r3, #8]
 800509c:	893a      	ldrh	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	f0c0 8096 	bcc.w	80051d0 <dir_next+0x17e>
				return FR_NO_FILE;
 80050a4:	2304      	movs	r3, #4
 80050a6:	e0a2      	b.n	80051ee <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 8088 	bne.w	80051d0 <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f7ff fcf8 	bl	8004ac0 <get_fat>
 80050d0:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d801      	bhi.n	80050dc <dir_next+0x8a>
 80050d8:	2302      	movs	r3, #2
 80050da:	e088      	b.n	80051ee <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d101      	bne.n	80050e8 <dir_next+0x96>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e082      	b.n	80051ee <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d361      	bcc.n	80051b8 <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <dir_next+0xac>
 80050fa:	2304      	movs	r3, #4
 80050fc:	e077      	b.n	80051ee <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7ff fe97 	bl	8004e3c <create_chain>
 800510e:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <dir_next+0xc8>
 8005116:	2307      	movs	r3, #7
 8005118:	e069      	b.n	80051ee <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <dir_next+0xd2>
 8005120:	2302      	movs	r3, #2
 8005122:	e064      	b.n	80051ee <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d101      	bne.n	8005130 <dir_next+0xde>
 800512c:	2301      	movs	r3, #1
 800512e:	e05e      	b.n	80051ee <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fbd6 	bl	80048e6 <sync_window>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <dir_next+0xf2>
 8005140:	2301      	movs	r3, #1
 8005142:	e054      	b.n	80051ee <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3338      	adds	r3, #56	; 0x38
 800514a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fb6e 	bl	8004832 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	4610      	mov	r0, r2
 8005162:	f7ff fc8f 	bl	8004a84 <clust2sect>
 8005166:	4603      	mov	r3, r0
 8005168:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800516a:	2300      	movs	r3, #0
 800516c:	72fb      	strb	r3, [r7, #11]
 800516e:	e015      	b.n	800519c <dir_next+0x14a>
						dj->fs->wflag = 1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fbb2 	bl	80048e6 <sync_window>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <dir_next+0x13a>
 8005188:	2301      	movs	r3, #1
 800518a:	e030      	b.n	80051ee <dir_next+0x19c>
						dj->fs->winsect++;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005192:	3201      	adds	r2, #1
 8005194:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	3301      	adds	r3, #1
 800519a:	72fb      	strb	r3, [r7, #11]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	7afa      	ldrb	r2, [r7, #11]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3e3      	bcc.n	8005170 <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051ae:	7afa      	ldrb	r2, [r7, #11]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1a8a      	subs	r2, r1, r2
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fc5d 	bl	8004a84 <clust2sect>
 80051ca:	4602      	mov	r2, r0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	893a      	ldrh	r2, [r7, #8]
 80051d4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	015b      	lsls	r3, r3, #5
 80051e6:	441a      	add	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}

080051f6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8005200:	2100      	movs	r1, #0
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fea3 	bl	8004f4e <dir_sdi>
 8005208:	4603      	mov	r3, r0
 800520a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12d      	bne.n	800526e <dir_alloc+0x78>
		n = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff fba6 	bl	8004972 <move_window>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11d      	bne.n	800526c <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2be5      	cmp	r3, #229	; 0xe5
 8005238:	d004      	beq.n	8005244 <dir_alloc+0x4e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3301      	adds	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d102      	bne.n	8005258 <dir_alloc+0x62>
 8005252:	e00c      	b.n	800526e <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 8005258:	2101      	movs	r1, #1
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fef9 	bl	8005052 <dir_next>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0d5      	beq.n	8005216 <dir_alloc+0x20>
 800526a:	e000      	b.n	800526e <dir_alloc+0x78>
			if (res != FR_OK) break;
 800526c:	bf00      	nop
	}
	return res;
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	331a      	adds	r3, #26
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d106      	bne.n	80052a0 <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

	return cl;
 80052a0:	68fb      	ldr	r3, [r7, #12]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	331a      	adds	r3, #26
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	0c1a      	lsrs	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3314      	adds	r3, #20
 80052c8:	b292      	uxth	r2, r2
 80052ca:	801a      	strh	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
	...

080052d8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	1e5a      	subs	r2, r3, #1
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	2301      	movs	r3, #1
 80052fe:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005300:	4a24      	ldr	r2, [pc, #144]	; (8005394 <cmp_lfn+0xbc>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d019      	beq.n	800534c <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005318:	89bb      	ldrh	r3, [r7, #12]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fa2c 	bl	8004778 <ff_wtoupper>
 8005320:	4603      	mov	r3, r0
 8005322:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b13      	cmp	r3, #19
 8005328:	d80e      	bhi.n	8005348 <cmp_lfn+0x70>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	617a      	str	r2, [r7, #20]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fa1d 	bl	8004778 <ff_wtoupper>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	4293      	cmp	r3, r2
 8005346:	d008      	beq.n	800535a <cmp_lfn+0x82>
				return 0;				/* Not matched */
 8005348:	2300      	movs	r3, #0
 800534a:	e01f      	b.n	800538c <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800534c:	89bb      	ldrh	r3, [r7, #12]
 800534e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005352:	4293      	cmp	r3, r2
 8005354:	d001      	beq.n	800535a <cmp_lfn+0x82>
 8005356:	2300      	movs	r3, #0
 8005358:	e018      	b.n	800538c <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d9cc      	bls.n	8005300 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <cmp_lfn+0xb2>
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <cmp_lfn+0xb2>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <cmp_lfn+0xb2>
		return 0;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800538a:	2301      	movs	r3, #1
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	080110cc 	.word	0x080110cc

08005398 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	460b      	mov	r3, r1
 80053a8:	71fb      	strb	r3, [r7, #7]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	330d      	adds	r3, #13
 80053b2:	79ba      	ldrb	r2, [r7, #6]
 80053b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	330b      	adds	r3, #11
 80053ba:	220f      	movs	r2, #15
 80053bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	330c      	adds	r3, #12
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	331a      	adds	r3, #26
 80053ca:	2200      	movs	r2, #0
 80053cc:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	82fb      	strh	r3, [r7, #22]
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <fit_lfn+0x68>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <fit_lfn+0xc4>)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	4413      	add	r3, r2
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	8afa      	ldrh	r2, [r7, #22]
 8005410:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8005412:	8afb      	ldrh	r3, [r7, #22]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <fit_lfn+0x86>
 8005418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800541c:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d9dd      	bls.n	80053e6 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 800542a:	8afb      	ldrh	r3, [r7, #22]
 800542c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005430:	4293      	cmp	r3, r2
 8005432:	d006      	beq.n	8005442 <fit_lfn+0xaa>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <fit_lfn+0xb2>
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005448:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	79fa      	ldrb	r2, [r7, #7]
 800544e:	701a      	strb	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3724      	adds	r7, #36	; 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	080110cc 	.word	0x080110cc

08005460 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 800546e:	220b      	movs	r2, #11
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff f9ae 	bl	80047d4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	2b05      	cmp	r3, #5
 800547c:	d90f      	bls.n	800549e <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	b29a      	uxth	r2, r3
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	03db      	lsls	r3, r3, #15
 8005486:	4313      	orrs	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1c99      	adds	r1, r3, #2
 800548e:	6079      	str	r1, [r7, #4]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	4413      	add	r3, r2
 8005494:	807b      	strh	r3, [r7, #2]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ef      	bne.n	800547e <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 800549e:	2307      	movs	r3, #7
 80054a0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 80054a2:	887b      	ldrh	r3, [r7, #2]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	3330      	adds	r3, #48	; 0x30
 80054ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 80054b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b6:	2b39      	cmp	r3, #57	; 0x39
 80054b8:	d904      	bls.n	80054c4 <gen_numname+0x64>
 80054ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054be:	3307      	adds	r3, #7
 80054c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	1e5a      	subs	r2, r3, #1
 80054c8:	623a      	str	r2, [r7, #32]
 80054ca:	3328      	adds	r3, #40	; 0x28
 80054cc:	443b      	add	r3, r7
 80054ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80054d2:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	807b      	strh	r3, [r7, #2]
	} while (seq);
 80054dc:	887b      	ldrh	r3, [r7, #2]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1df      	bne.n	80054a2 <gen_numname+0x42>
	ns[i] = '~';
 80054e2:	f107 0214 	add.w	r2, r7, #20
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	4413      	add	r3, r2
 80054ea:	227e      	movs	r2, #126	; 0x7e
 80054ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e002      	b.n	80054fa <gen_numname+0x9a>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d205      	bcs.n	800550e <gen_numname+0xae>
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b20      	cmp	r3, #32
 800550c:	d1f2      	bne.n	80054f4 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	2b07      	cmp	r3, #7
 8005512:	d807      	bhi.n	8005524 <gen_numname+0xc4>
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	623a      	str	r2, [r7, #32]
 800551a:	3328      	adds	r3, #40	; 0x28
 800551c:	443b      	add	r3, r7
 800551e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8005522:	e000      	b.n	8005526 <gen_numname+0xc6>
 8005524:	2120      	movs	r1, #32
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	61fa      	str	r2, [r7, #28]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	460a      	mov	r2, r1
 8005532:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b07      	cmp	r3, #7
 8005538:	d9e9      	bls.n	800550e <gen_numname+0xae>
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005550:	230b      	movs	r3, #11
 8005552:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	0852      	lsrs	r2, r2, #1
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	4313      	orrs	r3, r2
 800555e:	b2da      	uxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	1c59      	adds	r1, r3, #1
 8005564:	6079      	str	r1, [r7, #4]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4413      	add	r3, r2
 800556a:	73fb      	strb	r3, [r7, #15]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ed      	bne.n	8005554 <sum_sfn+0x10>
	return sum;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 800558c:	2100      	movs	r1, #0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff fcdd 	bl	8004f4e <dir_sdi>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <dir_find+0x1e>
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	e098      	b.n	80056d4 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 80055a2:	23ff      	movs	r3, #255	; 0xff
 80055a4:	753b      	strb	r3, [r7, #20]
 80055a6:	7d3b      	ldrb	r3, [r7, #20]
 80055a8:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7ff f9dc 	bl	8004972 <move_window>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f040 8081 	bne.w	80056c8 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055d2:	7dbb      	ldrb	r3, [r7, #22]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <dir_find+0x5a>
 80055d8:	2304      	movs	r3, #4
 80055da:	75fb      	strb	r3, [r7, #23]
 80055dc:	e079      	b.n	80056d2 <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	330b      	adds	r3, #11
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e8:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80055ea:	7dbb      	ldrb	r3, [r7, #22]
 80055ec:	2be5      	cmp	r3, #229	; 0xe5
 80055ee:	d007      	beq.n	8005600 <dir_find+0x7c>
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <dir_find+0x82>
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d002      	beq.n	8005606 <dir_find+0x82>
			ord = 0xFF;
 8005600:	23ff      	movs	r3, #255	; 0xff
 8005602:	757b      	strb	r3, [r7, #21]
 8005604:	e055      	b.n	80056b2 <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d12f      	bne.n	800566c <dir_find+0xe8>
				if (dj->lfn) {
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d04e      	beq.n	80056b2 <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 8005614:	7dbb      	ldrb	r3, [r7, #22]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	7b5b      	ldrb	r3, [r3, #13]
 8005622:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562a:	75bb      	strb	r3, [r7, #22]
 800562c:	7dbb      	ldrb	r3, [r7, #22]
 800562e:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	88da      	ldrh	r2, [r3, #6]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8005638:	7dba      	ldrb	r2, [r7, #22]
 800563a:	7d7b      	ldrb	r3, [r7, #21]
 800563c:	429a      	cmp	r2, r3
 800563e:	d112      	bne.n	8005666 <dir_find+0xe2>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	330d      	adds	r3, #13
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	7d3a      	ldrb	r2, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	d10c      	bne.n	8005666 <dir_find+0xe2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	6939      	ldr	r1, [r7, #16]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe40 	bl	80052d8 <cmp_lfn>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <dir_find+0xe2>
 800565e:	7d7b      	ldrb	r3, [r7, #21]
 8005660:	3b01      	subs	r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e000      	b.n	8005668 <dir_find+0xe4>
 8005666:	23ff      	movs	r3, #255	; 0xff
 8005668:	757b      	strb	r3, [r7, #21]
 800566a:	e022      	b.n	80056b2 <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800566c:	7d7b      	ldrb	r3, [r7, #21]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d107      	bne.n	8005682 <dir_find+0xfe>
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f7ff ff66 	bl	8005544 <sum_sfn>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	7d3b      	ldrb	r3, [r7, #20]
 800567e:	4293      	cmp	r3, r2
 8005680:	d024      	beq.n	80056cc <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005682:	23ff      	movs	r3, #255	; 0xff
 8005684:	757b      	strb	r3, [r7, #21]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800568c:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	330b      	adds	r3, #11
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <dir_find+0x12e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	220b      	movs	r2, #11
 80056a4:	4619      	mov	r1, r3
 80056a6:	6938      	ldr	r0, [r7, #16]
 80056a8:	f7ff f8dd 	bl	8004866 <mem_cmp>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00e      	beq.n	80056d0 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 80056b2:	2100      	movs	r1, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fccc 	bl	8005052 <dir_next>
 80056ba:	4603      	mov	r3, r0
 80056bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f43f af72 	beq.w	80055aa <dir_find+0x26>
 80056c6:	e004      	b.n	80056d2 <dir_find+0x14e>
		if (res != FR_OK) break;
 80056c8:	bf00      	nop
 80056ca:	e002      	b.n	80056d2 <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80056d0:	bf00      	nop

	return res;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 80056f0:	f107 0308 	add.w	r3, r7, #8
 80056f4:	220c      	movs	r2, #12
 80056f6:	69f9      	ldr	r1, [r7, #28]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f86b 	bl	80047d4 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <dir_register+0x30>
		return FR_INVALID_NAME;
 8005708:	2306      	movs	r3, #6
 800570a:	e0e3      	b.n	80058d4 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d035      	beq.n	8005782 <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	330b      	adds	r3, #11
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8005724:	2301      	movs	r3, #1
 8005726:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005728:	e013      	b.n	8005752 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800572a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800572c:	f107 0108 	add.w	r1, r7, #8
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	69f8      	ldr	r0, [r7, #28]
 8005734:	f7ff fe94 	bl	8005460 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ff23 	bl	8005584 <dir_find>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 8005744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800574c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800574e:	3301      	adds	r3, #1
 8005750:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005754:	2b63      	cmp	r3, #99	; 0x63
 8005756:	d9e8      	bls.n	800572a <dir_register+0x4e>
 8005758:	e000      	b.n	800575c <dir_register+0x80>
			if (res != FR_OK) break;
 800575a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800575c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d101      	bne.n	8005766 <dir_register+0x8a>
 8005762:	2307      	movs	r3, #7
 8005764:	e0b6      	b.n	80058d4 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800576a:	2b04      	cmp	r3, #4
 800576c:	d002      	beq.n	8005774 <dir_register+0x98>
 800576e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005772:	e0af      	b.n	80058d4 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	330b      	adds	r3, #11
 8005778:	7cfa      	ldrb	r2, [r7, #19]
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800578c:	2300      	movs	r3, #0
 800578e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005790:	e002      	b.n	8005798 <dir_register+0xbc>
 8005792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005794:	3301      	adds	r3, #1
 8005796:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f5      	bne.n	8005792 <dir_register+0xb6>
		ne = (n + 25) / 13;
 80057a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057a8:	3319      	adds	r3, #25
 80057aa:	4a4c      	ldr	r2, [pc, #304]	; (80058dc <dir_register+0x200>)
 80057ac:	fb82 1203 	smull	r1, r2, r2, r3
 80057b0:	1092      	asrs	r2, r2, #2
 80057b2:	17db      	asrs	r3, r3, #31
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80057b8:	e001      	b.n	80057be <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 80057be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fd17 	bl	80051f6 <dir_alloc>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 80057ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d14b      	bne.n	800586e <dir_register+0x192>
 80057d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057d8:	3b01      	subs	r3, #1
 80057da:	847b      	strh	r3, [r7, #34]	; 0x22
 80057dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d045      	beq.n	800586e <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	88da      	ldrh	r2, [r3, #6]
 80057e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fbad 	bl	8004f4e <dir_sdi>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 80057fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d135      	bne.n	800586e <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fe9c 	bl	8005544 <sum_sfn>
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7ff f8a9 	bl	8004972 <move_window>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 8005826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11e      	bne.n	800586c <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69d8      	ldr	r0, [r3, #28]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6959      	ldr	r1, [r3, #20]
 8005836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005838:	b2da      	uxtb	r2, r3
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	f7ff fdac 	bl	8005398 <fit_lfn>
				dj->fs->wflag = 1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fc01 	bl	8005052 <dir_next>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 8005856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <dir_register+0x192>
 800585e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005860:	3b01      	subs	r3, #1
 8005862:	847b      	strh	r3, [r7, #34]	; 0x22
 8005864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1d2      	bne.n	8005810 <dir_register+0x134>
 800586a:	e000      	b.n	800586e <dir_register+0x192>
				if (res != FR_OK) break;
 800586c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800586e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005872:	2b00      	cmp	r3, #0
 8005874:	d12c      	bne.n	80058d0 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7ff f876 	bl	8004972 <move_window>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11d      	bne.n	80058d0 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2220      	movs	r2, #32
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe ffc8 	bl	8004832 <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6958      	ldr	r0, [r3, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	220b      	movs	r2, #11
 80058ac:	4619      	mov	r1, r3
 80058ae:	f7fe ff91 	bl	80047d4 <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	330b      	adds	r3, #11
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	330c      	adds	r3, #12
 80058c0:	f002 0218 	and.w	r2, r2, #24
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2201      	movs	r2, #1
 80058ce:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80058d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3728      	adds	r7, #40	; 0x28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	4ec4ec4f 	.word	0x4ec4ec4f

080058e0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e002      	b.n	80058f8 <create_name+0x18>
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3301      	adds	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b2f      	cmp	r3, #47	; 0x2f
 80058fe:	d0f8      	beq.n	80058f2 <create_name+0x12>
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b5c      	cmp	r3, #92	; 0x5c
 8005906:	d0f4      	beq.n	80058f2 <create_name+0x12>
	lfn = dj->lfn;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	61ba      	str	r2, [r7, #24]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005926:	2b1f      	cmp	r3, #31
 8005928:	d92f      	bls.n	800598a <create_name+0xaa>
 800592a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800592c:	2b2f      	cmp	r3, #47	; 0x2f
 800592e:	d02c      	beq.n	800598a <create_name+0xaa>
 8005930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005932:	2b5c      	cmp	r3, #92	; 0x5c
 8005934:	d029      	beq.n	800598a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b13      	cmp	r3, #19
 800593a:	d901      	bls.n	8005940 <create_name+0x60>
			return FR_INVALID_NAME;
 800593c:	2306      	movs	r3, #6
 800593e:	e1c8      	b.n	8005cd2 <create_name+0x3f2>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005942:	b2db      	uxtb	r3, r3
 8005944:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005948:	2101      	movs	r1, #1
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe feda 	bl	8004704 <ff_convert>
 8005950:	4603      	mov	r3, r0
 8005952:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <create_name+0x7e>
 800595a:	2306      	movs	r3, #6
 800595c:	e1b9      	b.n	8005cd2 <create_name+0x3f2>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 800595e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005960:	2b7f      	cmp	r3, #127	; 0x7f
 8005962:	d809      	bhi.n	8005978 <create_name+0x98>
 8005964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005966:	4619      	mov	r1, r3
 8005968:	489e      	ldr	r0, [pc, #632]	; (8005be4 <create_name+0x304>)
 800596a:	f7fe ffa2 	bl	80048b2 <chk_chr>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <create_name+0x98>
			return FR_INVALID_NAME;
 8005974:	2306      	movs	r3, #6
 8005976:	e1ac      	b.n	8005cd2 <create_name+0x3f2>
		lfn[di++] = w;					/* Store the Unicode char */
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	617a      	str	r2, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005986:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005988:	e7c5      	b.n	8005916 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	441a      	add	r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005996:	2b1f      	cmp	r3, #31
 8005998:	d801      	bhi.n	800599e <create_name+0xbe>
 800599a:	2304      	movs	r3, #4
 800599c:	e000      	b.n	80059a0 <create_name+0xc0>
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d109      	bne.n	80059be <create_name+0xde>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	3b01      	subs	r3, #1
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b2e      	cmp	r3, #46	; 0x2e
 80059bc:	d016      	beq.n	80059ec <create_name+0x10c>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d14d      	bne.n	8005a60 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	3b01      	subs	r3, #1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	2b2e      	cmp	r3, #46	; 0x2e
 80059d6:	d143      	bne.n	8005a60 <create_name+0x180>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059de:	3b02      	subs	r3, #2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ea:	d139      	bne.n	8005a60 <create_name+0x180>
		lfn[di] = 0;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	e00f      	b.n	8005a1e <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d201      	bcs.n	8005a0a <create_name+0x12a>
 8005a06:	212e      	movs	r1, #46	; 0x2e
 8005a08:	e000      	b.n	8005a0c <create_name+0x12c>
 8005a0a:	2120      	movs	r1, #32
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	4413      	add	r3, r2
 8005a14:	460a      	mov	r2, r1
 8005a16:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b0a      	cmp	r3, #10
 8005a22:	d9ec      	bls.n	80059fe <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a30:	f042 0220 	orr.w	r2, r2, #32
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e14a      	b.n	8005cd2 <create_name+0x3f2>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a42:	3b01      	subs	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d002      	beq.n	8005a5a <create_name+0x17a>
 8005a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a56:	2b2e      	cmp	r3, #46	; 0x2e
 8005a58:	d106      	bne.n	8005a68 <create_name+0x188>
		di--;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ea      	bne.n	8005a3c <create_name+0x15c>
 8005a66:	e000      	b.n	8005a6a <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 8005a68:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <create_name+0x194>
 8005a70:	2306      	movs	r3, #6
 8005a72:	e12e      	b.n	8005cd2 <create_name+0x3f2>

	lfn[di] = 0;						/* LFN is created */
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	220b      	movs	r2, #11
 8005a86:	2120      	movs	r1, #32
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fed2 	bl	8004832 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e002      	b.n	8005a9a <create_name+0x1ba>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	3301      	adds	r3, #1
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d0f5      	beq.n	8005a94 <create_name+0x1b4>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab4:	d0ee      	beq.n	8005a94 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <create_name+0x1f0>
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac0:	f043 0303 	orr.w	r3, r3, #3
 8005ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005ac8:	e002      	b.n	8005ad0 <create_name+0x1f0>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <create_name+0x20a>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	3b01      	subs	r3, #1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae8:	d1ef      	bne.n	8005aca <create_name+0x1ea>

	b = i = 0; ni = 8;
 8005aea:	2300      	movs	r3, #0
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005af4:	2308      	movs	r3, #8
 8005af6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	61ba      	str	r2, [r7, #24]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8096 	beq.w	8005c3c <create_name+0x35c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d006      	beq.n	8005b24 <create_name+0x244>
 8005b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b18:	2b2e      	cmp	r3, #46	; 0x2e
 8005b1a:	d10a      	bne.n	8005b32 <create_name+0x252>
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d006      	beq.n	8005b32 <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8005b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b28:	f043 0303 	orr.w	r3, r3, #3
 8005b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b30:	e083      	b.n	8005c3a <create_name+0x35a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d203      	bcs.n	8005b42 <create_name+0x262>
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d123      	bne.n	8005b8a <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b0b      	cmp	r3, #11
 8005b46:	d106      	bne.n	8005b56 <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4c:	f043 0303 	orr.w	r3, r3, #3
 8005b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b54:	e075      	b.n	8005c42 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d005      	beq.n	8005b6a <create_name+0x28a>
 8005b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b62:	f043 0303 	orr.w	r3, r3, #3
 8005b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d866      	bhi.n	8005c40 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	2308      	movs	r3, #8
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	230b      	movs	r3, #11
 8005b7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b88:	e057      	b.n	8005c3a <create_name+0x35a>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8005b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d914      	bls.n	8005bba <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe fdb5 	bl	8004704 <ff_convert>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8005b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <create_name+0x2ce>
 8005ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba6:	3b80      	subs	r3, #128	; 0x80
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <create_name+0x308>)
 8005baa:	5cd3      	ldrb	r3, [r2, r3]
 8005bac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bb2:	f043 0302 	orr.w	r3, r3, #2
 8005bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8005bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <create_name+0x2f0>
 8005bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4809      	ldr	r0, [pc, #36]	; (8005bec <create_name+0x30c>)
 8005bc6:	f7fe fe74 	bl	80048b2 <chk_chr>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00f      	beq.n	8005bf0 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005bd0:	235f      	movs	r3, #95	; 0x5f
 8005bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd8:	f043 0303 	orr.w	r3, r3, #3
 8005bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005be0:	e022      	b.n	8005c28 <create_name+0x348>
 8005be2:	bf00      	nop
 8005be4:	080109dc 	.word	0x080109dc
 8005be8:	0801104c 	.word	0x0801104c
 8005bec:	080109e8 	.word	0x080109e8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d909      	bls.n	8005c0a <create_name+0x32a>
 8005bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bf8:	2b5a      	cmp	r3, #90	; 0x5a
 8005bfa:	d806      	bhi.n	8005c0a <create_name+0x32a>
					b |= 2;
 8005bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c00:	f043 0302 	orr.w	r3, r3, #2
 8005c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c08:	e00e      	b.n	8005c28 <create_name+0x348>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d90b      	bls.n	8005c28 <create_name+0x348>
 8005c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c12:	2b7a      	cmp	r3, #122	; 0x7a
 8005c14:	d808      	bhi.n	8005c28 <create_name+0x348>
						b |= 1; w -= 0x20;
 8005c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c24:	3b20      	subs	r3, #32
 8005c26:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	6239      	str	r1, [r7, #32]
 8005c32:	4413      	add	r3, r2
 8005c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8005c3a:	e75d      	b.n	8005af8 <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8005c3c:	bf00      	nop
 8005c3e:	e000      	b.n	8005c42 <create_name+0x362>
			if (si > di) break;			/* No extension */
 8005c40:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2be5      	cmp	r3, #229	; 0xe5
 8005c4a:	d103      	bne.n	8005c54 <create_name+0x374>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2205      	movs	r2, #5
 8005c52:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d104      	bne.n	8005c64 <create_name+0x384>
 8005c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005c64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d005      	beq.n	8005c7c <create_name+0x39c>
 8005c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d105      	bne.n	8005c88 <create_name+0x3a8>
		cf |= NS_LFN;
 8005c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c80:	f043 0302 	orr.w	r3, r3, #2
 8005c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8005c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d117      	bne.n	8005cc4 <create_name+0x3e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d105      	bne.n	8005cac <create_name+0x3cc>
 8005ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca4:	f043 0310 	orr.w	r3, r3, #16
 8005ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d105      	bne.n	8005cc4 <create_name+0x3e4>
 8005cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cbc:	f043 0308 	orr.w	r3, r3, #8
 8005cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	330b      	adds	r3, #11
 8005cca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005cd0:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop

08005cdc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b2f      	cmp	r3, #47	; 0x2f
 8005cec:	d003      	beq.n	8005cf6 <follow_path+0x1a>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b5c      	cmp	r3, #92	; 0x5c
 8005cf4:	d106      	bne.n	8005d04 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	e004      	b.n	8005d0e <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b1f      	cmp	r3, #31
 8005d14:	d809      	bhi.n	8005d2a <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff f918 	bl	8004f4e <dir_sdi>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	615a      	str	r2, [r3, #20]
 8005d28:	e056      	b.n	8005dd8 <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fdd6 	bl	80058e0 <create_name>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d145      	bne.n	8005dca <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fc20 	bl	8005584 <dir_find>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	7adb      	ldrb	r3, [r3, #11]
 8005d4e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01d      	beq.n	8005d92 <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d138      	bne.n	8005dce <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d128      	bne.n	8005dd2 <follow_path+0xf6>
 8005d80:	e022      	b.n	8005dc8 <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d122      	bne.n	8005dd2 <follow_path+0xf6>
 8005d8c:	2305      	movs	r3, #5
 8005d8e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005d90:	e01f      	b.n	8005dd2 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d11c      	bne.n	8005dd6 <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	330b      	adds	r3, #11
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005db0:	2305      	movs	r3, #5
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e010      	b.n	8005dd8 <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fa5b 	bl	8005278 <ld_clust>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8005dc8:	e7af      	b.n	8005d2a <follow_path+0x4e>
			if (res != FR_OK) break;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <follow_path+0xfc>
				break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8005dd6:	bf00      	nop
		}
	}

	return res;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7858      	ldrb	r0, [r3, #1]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005df8:	2301      	movs	r3, #1
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	f001 fc6e 	bl	80076dc <disk_read>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <check_fs+0x26>
		return 3;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e01e      	b.n	8005e48 <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f203 2336 	addw	r3, r3, #566	; 0x236
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d001      	beq.n	8005e1e <check_fs+0x3a>
		return 2;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e014      	b.n	8005e48 <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	336e      	adds	r3, #110	; 0x6e
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <check_fs+0x6c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d101      	bne.n	8005e32 <check_fs+0x4e>
		return 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e00a      	b.n	8005e48 <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	338a      	adds	r3, #138	; 0x8a
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <check_fs+0x6c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <check_fs+0x62>
		return 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e000      	b.n	8005e48 <check_fs+0x64>

	return 1;
 8005e46:	2301      	movs	r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	00544146 	.word	0x00544146

08005e54 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b092      	sub	sp, #72	; 0x48
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	3b30      	subs	r3, #48	; 0x30
 8005e6e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8005e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d80b      	bhi.n	8005e8e <chk_mounted+0x3a>
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	3301      	adds	r3, #1
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b3a      	cmp	r3, #58	; 0x3a
 8005e7e:	d106      	bne.n	8005e8e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	3302      	adds	r3, #2
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e002      	b.n	8005e94 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 8005e8e:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <chk_mounted+0x26c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 8005ea0:	230b      	movs	r3, #11
 8005ea2:	e1d5      	b.n	8006250 <chk_mounted+0x3fc>
	fs = FatFs[vol];					/* Get corresponding file system object */
 8005ea4:	4a87      	ldr	r2, [pc, #540]	; (80060c4 <chk_mounted+0x270>)
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <chk_mounted+0x64>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	e1cb      	b.n	8006250 <chk_mounted+0x3fc>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebc:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01a      	beq.n	8005efc <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 fbf2 	bl	80076b4 <disk_status>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8005ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10c      	bne.n	8005efc <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <chk_mounted+0xa4>
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8005ef4:	230a      	movs	r3, #10
 8005ef6:	e1ab      	b.n	8006250 <chk_mounted+0x3fc>
			return FR_OK;				/* The file system object is valid */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e1a9      	b.n	8006250 <chk_mounted+0x3fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 faf0 	bl	80074f4 <disk_initialize>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f26:	2303      	movs	r3, #3
 8005f28:	e192      	b.n	8006250 <chk_mounted+0x3fc>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <chk_mounted+0xec>
 8005f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8005f3c:	230a      	movs	r3, #10
 8005f3e:	e187      	b.n	8006250 <chk_mounted+0x3fc>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f48:	f7ff ff4c 	bl	8005de4 <check_fs>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8005f52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d124      	bne.n	8005fa4 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8005f60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <chk_mounted+0x11e>
 8005f68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8005f72:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f7c:	3338      	adds	r3, #56	; 0x38
 8005f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f80:	4413      	add	r3, r2
 8005f82:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	3304      	adds	r3, #4
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	3308      	adds	r3, #8
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 8005f96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9a:	f7ff ff23 	bl	8005de4 <check_fs>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8005fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d101      	bne.n	8005fb0 <chk_mounted+0x15c>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e14f      	b.n	8006250 <chk_mounted+0x3fc>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <chk_mounted+0x168>
 8005fb8:	230d      	movs	r3, #13
 8005fba:	e149      	b.n	8006250 <chk_mounted+0x3fc>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	330b      	adds	r3, #11
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc8:	d001      	beq.n	8005fce <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 8005fca:	230d      	movs	r3, #13
 8005fcc:	e140      	b.n	8006250 <chk_mounted+0x3fc>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	3338      	adds	r3, #56	; 0x38
 8005fd2:	3316      	adds	r3, #22
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <chk_mounted+0x194>
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	3338      	adds	r3, #56	; 0x38
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fec:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	7ffa      	ldrb	r2, [r7, #31]
 8005ffa:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8005ffc:	7ffb      	ldrb	r3, [r7, #31]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d004      	beq.n	800600c <chk_mounted+0x1b8>
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d001      	beq.n	800600c <chk_mounted+0x1b8>
 8006008:	230d      	movs	r3, #13
 800600a:	e121      	b.n	8006250 <chk_mounted+0x3fc>
	fasize *= b;										/* Number of sectors for FAT area */
 800600c:	7ffa      	ldrb	r2, [r7, #31]
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	7ffa      	ldrb	r2, [r7, #31]
 8006022:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006024:	7ffb      	ldrb	r3, [r7, #31]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <chk_mounted+0x1e2>
 800602a:	7ffa      	ldrb	r2, [r7, #31]
 800602c:	7ffb      	ldrb	r3, [r7, #31]
 800602e:	3b01      	subs	r3, #1
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <chk_mounted+0x1e6>
 8006036:	230d      	movs	r3, #13
 8006038:	e10a      	b.n	8006250 <chk_mounted+0x3fc>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	3338      	adds	r3, #56	; 0x38
 800603e:	3311      	adds	r3, #17
 8006040:	881a      	ldrh	r2, [r3, #0]
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	891b      	ldrh	r3, [r3, #8]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <chk_mounted+0x204>
 8006054:	230d      	movs	r3, #13
 8006056:	e0fb      	b.n	8006250 <chk_mounted+0x3fc>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	3338      	adds	r3, #56	; 0x38
 800605c:	3313      	adds	r3, #19
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8006062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <chk_mounted+0x21e>
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	3338      	adds	r3, #56	; 0x38
 800606c:	3320      	adds	r3, #32
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	3338      	adds	r3, #56	; 0x38
 8006076:	330e      	adds	r3, #14
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 800607c:	8bbb      	ldrh	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <chk_mounted+0x232>
 8006082:	230d      	movs	r3, #13
 8006084:	e0e4      	b.n	8006250 <chk_mounted+0x3fc>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8006086:	8bba      	ldrh	r2, [r7, #28]
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	4413      	add	r3, r2
 800608c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608e:	8912      	ldrh	r2, [r2, #8]
 8006090:	0912      	lsrs	r2, r2, #4
 8006092:	b292      	uxth	r2, r2
 8006094:	4413      	add	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d201      	bcs.n	80060a4 <chk_mounted+0x250>
 80060a0:	230d      	movs	r3, #13
 80060a2:	e0d5      	b.n	8006250 <chk_mounted+0x3fc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80060a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ac:	7892      	ldrb	r2, [r2, #2]
 80060ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <chk_mounted+0x274>
 80060ba:	230d      	movs	r3, #13
 80060bc:	e0c8      	b.n	8006250 <chk_mounted+0x3fc>
 80060be:	bf00      	nop
 80060c0:	2000164a 	.word	0x2000164a
 80060c4:	20001644 	.word	0x20001644
	fmt = FS_FAT12;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d902      	bls.n	80060de <chk_mounted+0x28a>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d902      	bls.n	80060ee <chk_mounted+0x29a>
 80060e8:	2303      	movs	r3, #3
 80060ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80060fc:	8bba      	ldrh	r2, [r7, #28]
 80060fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006100:	441a      	add	r2, r3
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8006106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	441a      	add	r2, r3
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 8006110:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006114:	2b03      	cmp	r3, #3
 8006116:	d110      	bne.n	800613a <chk_mounted+0x2e6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	891b      	ldrh	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <chk_mounted+0x2d0>
 8006120:	230d      	movs	r3, #13
 8006122:	e095      	b.n	8006250 <chk_mounted+0x3fc>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	3338      	adds	r3, #56	; 0x38
 8006128:	332c      	adds	r3, #44	; 0x2c
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	633b      	str	r3, [r7, #48]	; 0x30
 8006138:	e01f      	b.n	800617a <chk_mounted+0x326>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	891b      	ldrh	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <chk_mounted+0x2f2>
 8006142:	230d      	movs	r3, #13
 8006144:	e084      	b.n	8006250 <chk_mounted+0x3fc>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	441a      	add	r2, r3
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006152:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <chk_mounted+0x30e>
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	e00a      	b.n	8006178 <chk_mounted+0x324>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	085a      	lsrs	r2, r3, #1
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	429a      	cmp	r2, r3
 8006188:	d201      	bcs.n	800618e <chk_mounted+0x33a>
		return FR_NO_FILESYSTEM;
 800618a:	230d      	movs	r3, #13
 800618c:	e060      	b.n	8006250 <chk_mounted+0x3fc>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2200      	movs	r2, #0
 800619a:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 800619c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d13d      	bne.n	8006220 <chk_mounted+0x3cc>
	 	fs->fsi_flag = 0;
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	2200      	movs	r2, #0
 80061a8:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	3338      	adds	r3, #56	; 0x38
 80061ae:	3330      	adds	r3, #48	; 0x30
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b6:	441a      	add	r2, r3
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	7858      	ldrb	r0, [r3, #1]
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	2301      	movs	r3, #1
 80061cc:	f001 fa86 	bl	80076dc <disk_read>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d124      	bne.n	8006220 <chk_mounted+0x3cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	3338      	adds	r3, #56	; 0x38
 80061da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061de:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80061e0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d11b      	bne.n	8006220 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	3338      	adds	r3, #56	; 0x38
 80061ec:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <chk_mounted+0x404>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d115      	bne.n	8006220 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	3338      	adds	r3, #56	; 0x38
 80061f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061fc:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <chk_mounted+0x408>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10d      	bne.n	8006220 <chk_mounted+0x3cc>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	3338      	adds	r3, #56	; 0x38
 8006208:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	3338      	adds	r3, #56	; 0x38
 8006216:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006226:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <chk_mounted+0x40c>)
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <chk_mounted+0x40c>)
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <chk_mounted+0x40c>)
 8006236:	881a      	ldrh	r2, [r3, #0]
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2200      	movs	r2, #0
 8006240:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	2200      	movs	r2, #0
 8006246:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2200      	movs	r2, #0
 800624c:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3748      	adds	r7, #72	; 0x48
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	41615252 	.word	0x41615252
 800625c:	61417272 	.word	0x61417272
 8006260:	20001648 	.word	0x20001648

08006264 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00f      	beq.n	8006296 <validate+0x32>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <validate+0x32>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d006      	beq.n	8006296 <validate+0x32>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	88da      	ldrh	r2, [r3, #6]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	889b      	ldrh	r3, [r3, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d001      	beq.n	800629a <validate+0x36>
		return FR_INVALID_OBJECT;
 8006296:	2309      	movs	r3, #9
 8006298:	e00d      	b.n	80062b6 <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fa07 	bl	80076b4 <disk_status>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <validate+0x50>
		return FR_NOT_READY;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e000      	b.n	80062b6 <validate+0x52>

	return FR_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	6039      	str	r1, [r7, #0]
 80062ca:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80062d2:	230b      	movs	r3, #11
 80062d4:	e016      	b.n	8006304 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <f_mount+0x50>)
 80062da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062de:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	4905      	ldr	r1, [pc, #20]	; (8006310 <f_mount+0x50>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20001644 	.word	0x20001644

08006314 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b094      	sub	sp, #80	; 0x50
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <f_open+0x18>
 8006328:	2309      	movs	r3, #9
 800632a:	e0fc      	b.n	8006526 <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	f107 011c 	add.w	r1, r7, #28
 8006346:	f107 0308 	add.w	r3, r7, #8
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fd82 	bl	8005e54 <chk_mounted>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 8006356:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800635a:	2b00      	cmp	r3, #0
 800635c:	f040 80e1 	bne.w	8006522 <f_open+0x20e>
		INIT_BUF(dj);
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
 8006366:	4b72      	ldr	r3, [pc, #456]	; (8006530 <f_open+0x21c>)
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	f107 031c 	add.w	r3, r7, #28
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff fcb2 	bl	8005cdc <follow_path>
 8006378:	4603      	mov	r3, r0
 800637a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <f_open+0x82>
			if (!dir)	/* Current dir itself */
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <f_open+0x82>
				res = FR_INVALID_NAME;
 8006390:	2306      	movs	r3, #6
 8006392:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	f003 031c 	and.w	r3, r3, #28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d06d      	beq.n	800647c <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 80063a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80063a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d107      	bne.n	80063c0 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80063b0:	f107 031c 	add.w	r3, r7, #28
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff f991 	bl	80056dc <dir_register>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f043 0308 	orr.w	r3, r3, #8
 80063c6:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80063cc:	e012      	b.n	80063f4 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80063ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d0:	330b      	adds	r3, #11
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 0311 	and.w	r3, r3, #17
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <f_open+0xd0>
					res = FR_DENIED;
 80063dc:	2307      	movs	r3, #7
 80063de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063e2:	e007      	b.n	80063f4 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <f_open+0xe0>
						res = FR_EXIST;
 80063ee:	2308      	movs	r3, #8
 80063f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d15d      	bne.n	80064b8 <f_open+0x1a4>
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d058      	beq.n	80064b8 <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 8006406:	f001 fc5f 	bl	8007cc8 <get_fattime>
 800640a:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 800640c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640e:	330e      	adds	r3, #14
 8006410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006412:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006416:	330b      	adds	r3, #11
 8006418:	2200      	movs	r2, #0
 800641a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 800641c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641e:	331c      	adds	r3, #28
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe ff25 	bl	8005278 <ld_clust>
 800642e:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 8006430:	2100      	movs	r1, #0
 8006432:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006434:	f7fe ff3a 	bl	80052ac <st_clust>
				dj.fs->wflag = 1;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2201      	movs	r2, #1
 800643c:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d039      	beq.n	80064b8 <f_open+0x1a4>
					dw = dj.fs->winsect;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fca5 	bl	8004d9e <remove_chain>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 800645a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800645e:	2b00      	cmp	r3, #0
 8006460:	d12a      	bne.n	80064b8 <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006466:	3a01      	subs	r2, #1
 8006468:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fa7f 	bl	8004972 <move_window>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800647a:	e01d      	b.n	80064b8 <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 800647c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006480:	2b00      	cmp	r3, #0
 8006482:	d119      	bne.n	80064b8 <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	330b      	adds	r3, #11
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <f_open+0x186>
					res = FR_NO_FILE;
 8006492:	2304      	movs	r3, #4
 8006494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006498:	e00e      	b.n	80064b8 <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <f_open+0x1a4>
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	330b      	adds	r3, #11
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <f_open+0x1a4>
						res = FR_DENIED;
 80064b2:	2307      	movs	r3, #7
 80064b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 80064b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <f_open+0x1be>
				mode |= FA__WRITTEN;
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	f043 0320 	orr.w	r3, r3, #32
 80064d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064de:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80064e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11c      	bne.n	8006522 <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	79fa      	ldrb	r2, [r7, #7]
 80064ec:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fec0 	bl	8005278 <ld_clust>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	331c      	adds	r3, #28
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	88da      	ldrh	r2, [r3, #6]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006526:	4618      	mov	r0, r3
 8006528:	3750      	adds	r7, #80	; 0x50
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000164c 	.word	0x2000164c

08006534 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	; 0x30
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff fe89 	bl	8006264 <validate>
 8006552:	4603      	mov	r3, r0
 8006554:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006556:	7ffb      	ldrb	r3, [r7, #31]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <f_read+0x2c>
 800655c:	7ffb      	ldrb	r3, [r7, #31]
 800655e:	e135      	b.n	80067cc <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	799b      	ldrb	r3, [r3, #6]
 8006564:	b25b      	sxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	da01      	bge.n	800656e <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800656a:	2302      	movs	r3, #2
 800656c:	e12e      	b.n	80067cc <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	799b      	ldrb	r3, [r3, #6]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800657a:	2307      	movs	r3, #7
 800657c:	e126      	b.n	80067cc <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	429a      	cmp	r2, r3
 8006590:	f240 8117 	bls.w	80067c2 <f_read+0x28e>
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006598:	e113      	b.n	80067c2 <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 80df 	bne.w	8006766 <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0a5b      	lsrs	r3, r3, #9
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	789b      	ldrb	r3, [r3, #2]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	4013      	ands	r3, r2
 80065bc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d12c      	bne.n	800661e <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	e008      	b.n	80065e6 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe fa6e 	bl	8004ac0 <get_fat>
 80065e4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d808      	bhi.n	80065fe <f_read+0xca>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	799b      	ldrb	r3, [r3, #6]
 80065f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	719a      	strb	r2, [r3, #6]
 80065fa:	2302      	movs	r3, #2
 80065fc:	e0e6      	b.n	80067cc <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d108      	bne.n	8006618 <f_read+0xe4>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	799b      	ldrb	r3, [r3, #6]
 800660a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800660e:	b2da      	uxtb	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	719a      	strb	r2, [r3, #6]
 8006614:	2301      	movs	r3, #1
 8006616:	e0d9      	b.n	80067cc <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661c:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fe fa2b 	bl	8004a84 <clust2sect>
 800662e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <f_read+0x114>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	799b      	ldrb	r3, [r3, #6]
 800663a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	719a      	strb	r2, [r3, #6]
 8006644:	2302      	movs	r3, #2
 8006646:	e0c1      	b.n	80067cc <f_read+0x298>
			sect += csect;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	0a5b      	lsrs	r3, r3, #9
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d042      	beq.n	80066e2 <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800665c:	7dfa      	ldrb	r2, [r7, #23]
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	4413      	add	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	7892      	ldrb	r2, [r2, #2]
 8006668:	4293      	cmp	r3, r2
 800666a:	d906      	bls.n	800667a <f_read+0x146>
					cc = fp->fs->csize - csect;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	789b      	ldrb	r3, [r3, #2]
 8006672:	461a      	mov	r2, r3
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	7858      	ldrb	r0, [r3, #1]
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	b2db      	uxtb	r3, r3
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	6a39      	ldr	r1, [r7, #32]
 8006688:	f001 f828 	bl	80076dc <disk_read>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	799b      	ldrb	r3, [r3, #6]
 8006696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	719a      	strb	r2, [r3, #6]
 80066a0:	2301      	movs	r3, #1
 80066a2:	e093      	b.n	80067cc <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	799b      	ldrb	r3, [r3, #6]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d014      	beq.n	80066da <f_read+0x1a6>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90d      	bls.n	80066da <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	025b      	lsls	r3, r3, #9
 80066c8:	6a3a      	ldr	r2, [r7, #32]
 80066ca:	18d0      	adds	r0, r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3324      	adds	r3, #36	; 0x24
 80066d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d4:	4619      	mov	r1, r3
 80066d6:	f7fe f87d 	bl	80047d4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	025b      	lsls	r3, r3, #9
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80066e0:	e05b      	b.n	800679a <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d039      	beq.n	8006760 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	799b      	ldrb	r3, [r3, #6]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01d      	beq.n	8006734 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	7858      	ldrb	r0, [r3, #1]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	2301      	movs	r3, #1
 800670a:	f001 f84f 	bl	80077ac <disk_write>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	799b      	ldrb	r3, [r3, #6]
 8006718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	719a      	strb	r2, [r3, #6]
 8006722:	2301      	movs	r3, #1
 8006724:	e052      	b.n	80067cc <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	799b      	ldrb	r3, [r3, #6]
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	b2da      	uxtb	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	7858      	ldrb	r0, [r3, #1]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006740:	2301      	movs	r3, #1
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	f000 ffca 	bl	80076dc <disk_read>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	799b      	ldrb	r3, [r3, #6]
 8006752:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006756:	b2da      	uxtb	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	719a      	strb	r2, [r3, #6]
 800675c:	2301      	movs	r3, #1
 800675e:	e035      	b.n	80067cc <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d901      	bls.n	8006780 <f_read+0x24c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006788:	3320      	adds	r3, #32
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	3304      	adds	r3, #4
 8006790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006792:	4619      	mov	r1, r3
 8006794:	6a38      	ldr	r0, [r7, #32]
 8006796:	f7fe f81d 	bl	80047d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	4413      	add	r3, r2
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	441a      	add	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	441a      	add	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f47f aee8 	bne.w	800659a <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3730      	adds	r7, #48	; 0x30
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fd39 	bl	8006264 <validate>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <f_write+0x2c>
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	e166      	b.n	8006ace <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	799b      	ldrb	r3, [r3, #6]
 8006804:	b25b      	sxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	da01      	bge.n	800680e <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800680a:	2302      	movs	r3, #2
 800680c:	e15f      	b.n	8006ace <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	799b      	ldrb	r3, [r3, #6]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800681a:	2307      	movs	r3, #7
 800681c:	e157      	b.n	8006ace <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	429a      	cmp	r2, r3
 800682c:	f080 8137 	bcs.w	8006a9e <f_write+0x2ca>
 8006830:	2300      	movs	r3, #0
 8006832:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006834:	e133      	b.n	8006a9e <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 80f8 	bne.w	8006a34 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	0a5b      	lsrs	r3, r3, #9
 800684a:	b2da      	uxtb	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	789b      	ldrb	r3, [r3, #2]
 8006852:	3b01      	subs	r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	4013      	ands	r3, r2
 8006858:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800685a:	7dbb      	ldrb	r3, [r7, #22]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d13d      	bne.n	80068dc <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d110      	bne.n	800688a <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d113      	bne.n	800689c <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fade 	bl	8004e3c <create_chain>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	611a      	str	r2, [r3, #16]
 8006888:	e008      	b.n	800689c <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe fad1 	bl	8004e3c <create_chain>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8102 	beq.w	8006aa8 <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d108      	bne.n	80068bc <f_write+0xe8>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	799b      	ldrb	r3, [r3, #6]
 80068ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	719a      	strb	r2, [r3, #6]
 80068b8:	2302      	movs	r3, #2
 80068ba:	e108      	b.n	8006ace <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d108      	bne.n	80068d6 <f_write+0x102>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	799b      	ldrb	r3, [r3, #6]
 80068c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	719a      	strb	r2, [r3, #6]
 80068d2:	2301      	movs	r3, #1
 80068d4:	e0fb      	b.n	8006ace <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	799b      	ldrb	r3, [r3, #6]
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01d      	beq.n	8006924 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	7858      	ldrb	r0, [r3, #1]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	2301      	movs	r3, #1
 80068fa:	f000 ff57 	bl	80077ac <disk_write>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	799b      	ldrb	r3, [r3, #6]
 8006908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	719a      	strb	r2, [r3, #6]
 8006912:	2301      	movs	r3, #1
 8006914:	e0db      	b.n	8006ace <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	799b      	ldrb	r3, [r3, #6]
 800691a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe f8a8 	bl	8004a84 <clust2sect>
 8006934:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d108      	bne.n	800694e <f_write+0x17a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	799b      	ldrb	r3, [r3, #6]
 8006940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	719a      	strb	r2, [r3, #6]
 800694a:	2302      	movs	r3, #2
 800694c:	e0bf      	b.n	8006ace <f_write+0x2fa>
			sect += csect;
 800694e:	7dbb      	ldrb	r3, [r7, #22]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	0a5b      	lsrs	r3, r3, #9
 800695a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d044      	beq.n	80069ec <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006962:	7dba      	ldrb	r2, [r7, #22]
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	7892      	ldrb	r2, [r2, #2]
 800696e:	4293      	cmp	r3, r2
 8006970:	d906      	bls.n	8006980 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	789b      	ldrb	r3, [r3, #2]
 8006978:	461a      	mov	r2, r3
 800697a:	7dbb      	ldrb	r3, [r7, #22]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	7858      	ldrb	r0, [r3, #1]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	f000 ff0d 	bl	80077ac <disk_write>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	799b      	ldrb	r3, [r3, #6]
 800699c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	719a      	strb	r2, [r3, #6]
 80069a6:	2301      	movs	r3, #1
 80069a8:	e091      	b.n	8006ace <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d915      	bls.n	80069e4 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	025b      	lsls	r3, r3, #9
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	4413      	add	r3, r2
 80069cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069d0:	4619      	mov	r1, r3
 80069d2:	f7fd feff 	bl	80047d4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	799b      	ldrb	r3, [r3, #6]
 80069da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	025b      	lsls	r3, r3, #9
 80069e8:	623b      	str	r3, [r7, #32]
				continue;
 80069ea:	e044      	b.n	8006a76 <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d01b      	beq.n	8006a2e <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d215      	bcs.n	8006a2e <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	7858      	ldrb	r0, [r3, #1]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006a0e:	2301      	movs	r3, #1
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	f000 fe63 	bl	80076dc <disk_read>
 8006a16:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	799b      	ldrb	r3, [r3, #6]
 8006a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	719a      	strb	r2, [r3, #6]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e04f      	b.n	8006ace <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006a40:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006a42:	6a3a      	ldr	r2, [r7, #32]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d901      	bls.n	8006a4e <f_write+0x27a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	3320      	adds	r3, #32
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd feb6 	bl	80047d4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	799b      	ldrb	r3, [r3, #6]
 8006a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	609a      	str	r2, [r3, #8]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	441a      	add	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f aec8 	bne.w	8006836 <f_write+0x62>
 8006aa6:	e000      	b.n	8006aaa <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006aa8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d903      	bls.n	8006abe <f_write+0x2ea>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	799b      	ldrb	r3, [r3, #6]
 8006ac2:	f043 0320 	orr.w	r3, r3, #32
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	; 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fbc0 	bl	8006264 <validate>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d163      	bne.n	8006bb6 <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	799b      	ldrb	r3, [r3, #6]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d05d      	beq.n	8006bb6 <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	799b      	ldrb	r3, [r3, #6]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	7858      	ldrb	r0, [r3, #1]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	2301      	movs	r3, #1
 8006b18:	f000 fe48 	bl	80077ac <disk_write>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006b22:	2301      	movs	r3, #1
 8006b24:	e048      	b.n	8006bb8 <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	799b      	ldrb	r3, [r3, #6]
 8006b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fd ff17 	bl	8004972 <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d133      	bne.n	8006bb6 <f_sync+0xe0>
				dir = fp->dir_ptr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	330b      	adds	r3, #11
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	330b      	adds	r3, #11
 8006b5e:	f042 0220 	orr.w	r2, r2, #32
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	331c      	adds	r3, #28
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d2      	ldr	r2, [r2, #12]
 8006b6e:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7fe fb98 	bl	80052ac <st_clust>
				tm = get_fattime();							/* Update updated time */
 8006b7c:	f001 f8a4 	bl	8007cc8 <get_fattime>
 8006b80:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3316      	adds	r3, #22
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	3312      	adds	r3, #18
 8006b8e:	2200      	movs	r2, #0
 8006b90:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	799b      	ldrb	r3, [r3, #6]
 8006b96:	f023 0320 	bic.w	r3, r3, #32
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd ff09 	bl	80049c4 <sync_fs>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ff84 	bl	8006ad6 <f_sync>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <f_close+0x1e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
	return res;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 8006bec:	f000 f9ae 	bl	8006f4c <sd_ini>
}
 8006bf0:	bf00      	nop
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b094      	sub	sp, #80	; 0x50
 8006bf8:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 8006bfa:	4941      	ldr	r1, [pc, #260]	; (8006d00 <my_read_file+0x10c>)
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f7ff fb5f 	bl	80062c0 <f_mount>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d177      	bne.n	8006cf8 <my_read_file+0x104>
	{
		SEND_str("f_mount -> success\n");
 8006c08:	483e      	ldr	r0, [pc, #248]	; (8006d04 <my_read_file+0x110>)
 8006c0a:	f7fc fa0f 	bl	800302c <SEND_str>

		uint8_t path[18]="JSON_voltage.json";
 8006c0e:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <my_read_file+0x114>)
 8006c10:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006c14:	461d      	mov	r5, r3
 8006c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	682b      	ldr	r3, [r5, #0]
 8006c1c:	8023      	strh	r3, [r4, #0]
		path[17] = '\0';
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		result = f_open(&MyFile, (char*)path, FA_READ);
 8006c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4837      	ldr	r0, [pc, #220]	; (8006d0c <my_read_file+0x118>)
 8006c2e:	f7ff fb71 	bl	8006314 <f_open>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <my_read_file+0x11c>)
 8006c38:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006c3a:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <my_read_file+0x11c>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d15a      	bne.n	8006cf8 <my_read_file+0x104>
		{
			SEND_str("f_open -> success\n");
 8006c42:	4834      	ldr	r0, [pc, #208]	; (8006d14 <my_read_file+0x120>)
 8006c44:	f7fc f9f2 	bl	800302c <SEND_str>

			BytesToRead = MyFile.fsize;
 8006c48:	4b30      	ldr	r3, [pc, #192]	; (8006d0c <my_read_file+0x118>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4a32      	ldr	r2, [pc, #200]	; (8006d18 <my_read_file+0x124>)
 8006c4e:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8006c50:	4b31      	ldr	r3, [pc, #196]	; (8006d18 <my_read_file+0x124>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	463b      	mov	r3, r7
 8006c56:	4931      	ldr	r1, [pc, #196]	; (8006d1c <my_read_file+0x128>)
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f006 fb9d 	bl	800d398 <siprintf>
			SEND_str(str1);
 8006c5e:	463b      	mov	r3, r7
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fc f9e3 	bl	800302c <SEND_str>

			BytesCounter = 0;
 8006c66:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <my_read_file+0x12c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8006c6c:	e017      	b.n	8006c9e <my_read_file+0xaa>
		    {
		       	f_read(&MyFile, readBuffer, 512, &readBytes);
 8006c6e:	4b2d      	ldr	r3, [pc, #180]	; (8006d24 <my_read_file+0x130>)
 8006c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c74:	492c      	ldr	r1, [pc, #176]	; (8006d28 <my_read_file+0x134>)
 8006c76:	4825      	ldr	r0, [pc, #148]	; (8006d0c <my_read_file+0x118>)
 8006c78:	f7ff fc5c 	bl	8006534 <f_read>
		       	BytesCounter += 512;
 8006c7c:	4b28      	ldr	r3, [pc, #160]	; (8006d20 <my_read_file+0x12c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <my_read_file+0x12c>)
 8006c86:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8006c88:	4827      	ldr	r0, [pc, #156]	; (8006d28 <my_read_file+0x134>)
 8006c8a:	f7f9 fa6b 	bl	8000164 <strlen>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c96:	4924      	ldr	r1, [pc, #144]	; (8006d28 <my_read_file+0x134>)
 8006c98:	4824      	ldr	r0, [pc, #144]	; (8006d2c <my_read_file+0x138>)
 8006c9a:	f005 fc3f 	bl	800c51c <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8006c9e:	4b1e      	ldr	r3, [pc, #120]	; (8006d18 <my_read_file+0x124>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b1f      	ldr	r3, [pc, #124]	; (8006d20 <my_read_file+0x12c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cac:	d2df      	bcs.n	8006c6e <my_read_file+0x7a>
		    }
		    if (BytesToRead != BytesCounter)
 8006cae:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <my_read_file+0x124>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <my_read_file+0x12c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d01b      	beq.n	8006cf2 <my_read_file+0xfe>
		    {
	        	f_read(&MyFile, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <my_read_file+0x124>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <my_read_file+0x12c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	4b17      	ldr	r3, [pc, #92]	; (8006d24 <my_read_file+0x130>)
 8006cc6:	4918      	ldr	r1, [pc, #96]	; (8006d28 <my_read_file+0x134>)
 8006cc8:	4810      	ldr	r0, [pc, #64]	; (8006d0c <my_read_file+0x118>)
 8006cca:	f7ff fc33 	bl	8006534 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <my_read_file+0x124>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <my_read_file+0x12c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ce2:	4911      	ldr	r1, [pc, #68]	; (8006d28 <my_read_file+0x134>)
 8006ce4:	4811      	ldr	r0, [pc, #68]	; (8006d2c <my_read_file+0x138>)
 8006ce6:	f005 fc19 	bl	800c51c <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <my_read_file+0x124>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a0c      	ldr	r2, [pc, #48]	; (8006d20 <my_read_file+0x12c>)
 8006cf0:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&MyFile);
 8006cf2:	4806      	ldr	r0, [pc, #24]	; (8006d0c <my_read_file+0x118>)
 8006cf4:	f7ff ff64 	bl	8006bc0 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	3750      	adds	r7, #80	; 0x50
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8006d00:	20000bd4 	.word	0x20000bd4
 8006d04:	08010a24 	.word	0x08010a24
 8006d08:	08010a60 	.word	0x08010a60
 8006d0c:	20000e10 	.word	0x20000e10
 8006d10:	20000e0c 	.word	0x20000e0c
 8006d14:	08010a38 	.word	0x08010a38
 8006d18:	20001878 	.word	0x20001878
 8006d1c:	08010a4c 	.word	0x08010a4c
 8006d20:	2000187c 	.word	0x2000187c
 8006d24:	20001880 	.word	0x20001880
 8006d28:	20001678 	.word	0x20001678
 8006d2c:	200011f4 	.word	0x200011f4

08006d30 <my_write_file_json>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file_json(char *path, char *text)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b092      	sub	sp, #72	; 0x48
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 8006d3a:	4921      	ldr	r1, [pc, #132]	; (8006dc0 <my_write_file_json+0x90>)
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f7ff fabf 	bl	80062c0 <f_mount>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d136      	bne.n	8006db6 <my_write_file_json+0x86>
	{
		SEND_str("f_mount -> success\n");
 8006d48:	481e      	ldr	r0, [pc, #120]	; (8006dc4 <my_write_file_json+0x94>)
 8006d4a:	f7fc f96f 	bl	800302c <SEND_str>

		result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8006d4e:	220a      	movs	r2, #10
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	481d      	ldr	r0, [pc, #116]	; (8006dc8 <my_write_file_json+0x98>)
 8006d54:	f7ff fade 	bl	8006314 <f_open>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <my_write_file_json+0x9c>)
 8006d5e:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <my_write_file_json+0x9c>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d126      	bne.n	8006db6 <my_write_file_json+0x86>
		{
			SEND_str("f_open -> success\n");
 8006d68:	4819      	ldr	r0, [pc, #100]	; (8006dd0 <my_write_file_json+0xa0>)
 8006d6a:	f7fc f95f 	bl	800302c <SEND_str>

			result = f_write(&MyFile, text, strlen(text), &WriteBytes);
 8006d6e:	6838      	ldr	r0, [r7, #0]
 8006d70:	f7f9 f9f8 	bl	8000164 <strlen>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <my_write_file_json+0xa4>)
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	4813      	ldr	r0, [pc, #76]	; (8006dc8 <my_write_file_json+0x98>)
 8006d7c:	f7ff fd2a 	bl	80067d4 <f_write>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <my_write_file_json+0x9c>)
 8006d86:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <my_write_file_json+0x9c>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10f      	bne.n	8006db0 <my_write_file_json+0x80>
			{
				SEND_str("f_write -> success\n");
 8006d90:	4811      	ldr	r0, [pc, #68]	; (8006dd8 <my_write_file_json+0xa8>)
 8006d92:	f7fc f94b 	bl	800302c <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8006d96:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <my_write_file_json+0xa4>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	f107 030c 	add.w	r3, r7, #12
 8006d9e:	490f      	ldr	r1, [pc, #60]	; (8006ddc <my_write_file_json+0xac>)
 8006da0:	4618      	mov	r0, r3
 8006da2:	f006 faf9 	bl	800d398 <siprintf>
				SEND_str(str1);
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fc f93e 	bl	800302c <SEND_str>
			}
		    f_close(&MyFile);
 8006db0:	4805      	ldr	r0, [pc, #20]	; (8006dc8 <my_write_file_json+0x98>)
 8006db2:	f7ff ff05 	bl	8006bc0 <f_close>
		}
	}
}
 8006db6:	bf00      	nop
 8006db8:	3748      	adds	r7, #72	; 0x48
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000bd4 	.word	0x20000bd4
 8006dc4:	08010a24 	.word	0x08010a24
 8006dc8:	20000e10 	.word	0x20000e10
 8006dcc:	20000e0c 	.word	0x20000e0c
 8006dd0:	08010a38 	.word	0x08010a38
 8006dd4:	20001884 	.word	0x20001884
 8006dd8:	08010a74 	.word	0x08010a74
 8006ddc:	08010a88 	.word	0x08010a88

08006de0 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
	LD_ON;
 8006de4:	2200      	movs	r2, #0
 8006de6:	2101      	movs	r1, #1
 8006de8:	4802      	ldr	r0, [pc, #8]	; (8006df4 <Error+0x14>)
 8006dea:	f002 fe25 	bl	8009a38 <HAL_GPIO_WritePin>
}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40010800 	.word	0x40010800

08006df8 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8006e06:	f107 020f 	add.w	r2, r7, #15
 8006e0a:	1df9      	adds	r1, r7, #7
 8006e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2301      	movs	r3, #1
 8006e14:	4806      	ldr	r0, [pc, #24]	; (8006e30 <SPIx_WriteRead+0x38>)
 8006e16:	f003 ffed 	bl	800adf4 <HAL_SPI_TransmitReceive>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <SPIx_WriteRead+0x2c>
	{
		Error();
 8006e20:	f7ff ffde 	bl	8006de0 <Error>
  	}
  	return receivedbyte;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20001034 	.word	0x20001034

08006e34 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ffd9 	bl	8006df8 <SPIx_WriteRead>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8006e54:	20ff      	movs	r0, #255	; 0xff
 8006e56:	f7ff ffcf 	bl	8006df8 <SPIx_WriteRead>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
	return bt;
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8006e6c:	20ff      	movs	r0, #255	; 0xff
 8006e6e:	f7ff ffc3 	bl	8006df8 <SPIx_WriteRead>
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8006e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da0e      	bge.n	8006eaa <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e92:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8006e94:	2100      	movs	r1, #0
 8006e96:	2077      	movs	r0, #119	; 0x77
 8006e98:	f7ff ffee 	bl	8006e78 <SD_cmd>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d901      	bls.n	8006eaa <SD_cmd+0x32>
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	e049      	b.n	8006f3e <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 8006eaa:	2201      	movs	r2, #1
 8006eac:	2140      	movs	r1, #64	; 0x40
 8006eae:	4826      	ldr	r0, [pc, #152]	; (8006f48 <SD_cmd+0xd0>)
 8006eb0:	f002 fdc2 	bl	8009a38 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006eb4:	f7ff ffcb 	bl	8006e4e <SPI_ReceiveByte>
	SS_SD_SELECT();
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2140      	movs	r1, #64	; 0x40
 8006ebc:	4822      	ldr	r0, [pc, #136]	; (8006f48 <SD_cmd+0xd0>)
 8006ebe:	f002 fdbb 	bl	8009a38 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8006ec2:	f7ff ffc4 	bl	8006e4e <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff ffb3 	bl	8006e34 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	0e1b      	lsrs	r3, r3, #24
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff ffad 	bl	8006e34 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff ffa7 	bl	8006e34 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ffa1 	bl	8006e34 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff ff9c 	bl	8006e34 <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d101      	bne.n	8006f0a <SD_cmd+0x92>
 8006f06:	2395      	movs	r3, #149	; 0x95
 8006f08:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	2b48      	cmp	r3, #72	; 0x48
 8006f0e:	d101      	bne.n	8006f14 <SD_cmd+0x9c>
 8006f10:	2387      	movs	r3, #135	; 0x87
 8006f12:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff8c 	bl	8006e34 <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 8006f1c:	230a      	movs	r3, #10
 8006f1e:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8006f20:	f7ff ff95 	bl	8006e4e <SPI_ReceiveByte>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8006f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da05      	bge.n	8006f3c <SD_cmd+0xc4>
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f1      	bne.n	8006f20 <SD_cmd+0xa8>

	return res;
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40010c00 	.word	0x40010c00

08006f4c <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8006f52:	2201      	movs	r2, #1
 8006f54:	2101      	movs	r1, #1
 8006f56:	4881      	ldr	r0, [pc, #516]	; (800715c <sd_ini+0x210>)
 8006f58:	f002 fd6e 	bl	8009a38 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8006f5c:	4b80      	ldr	r3, [pc, #512]	; (8007160 <sd_ini+0x214>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8006f62:	4b80      	ldr	r3, [pc, #512]	; (8007164 <sd_ini+0x218>)
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8006f68:	4b7e      	ldr	r3, [pc, #504]	; (8007164 <sd_ini+0x218>)
 8006f6a:	2238      	movs	r2, #56	; 0x38
 8006f6c:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8006f6e:	487d      	ldr	r0, [pc, #500]	; (8007164 <sd_ini+0x218>)
 8006f70:	f003 febc 	bl	800acec <HAL_SPI_Init>
	SS_SD_DESELECT();
 8006f74:	2201      	movs	r2, #1
 8006f76:	2140      	movs	r1, #64	; 0x40
 8006f78:	487b      	ldr	r0, [pc, #492]	; (8007168 <sd_ini+0x21c>)
 8006f7a:	f002 fd5d 	bl	8009a38 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
 8006f82:	e004      	b.n	8006f8e <sd_ini+0x42>
		SPI_Release();
 8006f84:	f7ff ff70 	bl	8006e68 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b09      	cmp	r3, #9
 8006f92:	d9f7      	bls.n	8006f84 <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 8006f94:	4a73      	ldr	r2, [pc, #460]	; (8007164 <sd_ini+0x218>)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8006f9a:	4872      	ldr	r0, [pc, #456]	; (8007164 <sd_ini+0x218>)
 8006f9c:	f003 fea6 	bl	800acec <HAL_SPI_Init>
	SS_SD_SELECT();
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2140      	movs	r1, #64	; 0x40
 8006fa4:	4870      	ldr	r0, [pc, #448]	; (8007168 <sd_ini+0x21c>)
 8006fa6:	f002 fd47 	bl	8009a38 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8006faa:	2100      	movs	r1, #0
 8006fac:	2040      	movs	r0, #64	; 0x40
 8006fae:	f7ff ff63 	bl	8006e78 <SD_cmd>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	f040 80be 	bne.w	8007136 <sd_ini+0x1ea>
	{
		SPI_Release();
 8006fba:	f7ff ff55 	bl	8006e68 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8006fbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fc2:	2048      	movs	r0, #72	; 0x48
 8006fc4:	f7ff ff58 	bl	8006e78 <SD_cmd>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d17b      	bne.n	80070c6 <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
 8006fd2:	e00c      	b.n	8006fee <sd_ini+0xa2>
 8006fd4:	7bfc      	ldrb	r4, [r7, #15]
 8006fd6:	f7ff ff3a 	bl	8006e4e <SPI_ReceiveByte>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f104 0310 	add.w	r3, r4, #16
 8006fe2:	443b      	add	r3, r7
 8006fe4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	3301      	adds	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d9ef      	bls.n	8006fd4 <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8006ff4:	793b      	ldrb	r3, [r7, #4]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	797b      	ldrb	r3, [r7, #5]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	79bb      	ldrb	r3, [r7, #6]
 8006ffe:	79fa      	ldrb	r2, [r7, #7]
 8007000:	9201      	str	r2, [sp, #4]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	4603      	mov	r3, r0
 8007006:	460a      	mov	r2, r1
 8007008:	4958      	ldr	r1, [pc, #352]	; (800716c <sd_ini+0x220>)
 800700a:	4859      	ldr	r0, [pc, #356]	; (8007170 <sd_ini+0x224>)
 800700c:	f006 f9c4 	bl	800d398 <siprintf>
			SEND_str(str1);
 8007010:	4857      	ldr	r0, [pc, #348]	; (8007170 <sd_ini+0x224>)
 8007012:	f7fc f80b 	bl	800302c <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8007016:	79bb      	ldrb	r3, [r7, #6]
 8007018:	2b01      	cmp	r3, #1
 800701a:	f040 808e 	bne.w	800713a <sd_ini+0x1ee>
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2baa      	cmp	r3, #170	; 0xaa
 8007022:	f040 808a 	bne.w	800713a <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8007026:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800702a:	81bb      	strh	r3, [r7, #12]
 800702c:	e005      	b.n	800703a <sd_ini+0xee>
 800702e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29b      	uxth	r3, r3
 8007038:	81bb      	strh	r3, [r7, #12]
 800703a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <sd_ini+0x106>
 8007042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007046:	20e9      	movs	r0, #233	; 0xe9
 8007048:	f7ff ff16 	bl	8006e78 <SD_cmd>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1ed      	bne.n	800702e <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8007052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06f      	beq.n	800713a <sd_ini+0x1ee>
 800705a:	2100      	movs	r1, #0
 800705c:	207a      	movs	r0, #122	; 0x7a
 800705e:	f7ff ff0b 	bl	8006e78 <SD_cmd>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d168      	bne.n	800713a <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
 800706c:	e00c      	b.n	8007088 <sd_ini+0x13c>
 800706e:	7bfc      	ldrb	r4, [r7, #15]
 8007070:	f7ff feed 	bl	8006e4e <SPI_ReceiveByte>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	f104 0310 	add.w	r3, r4, #16
 800707c:	443b      	add	r3, r7
 800707e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	3301      	adds	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d9ef      	bls.n	800706e <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 800708e:	793b      	ldrb	r3, [r7, #4]
 8007090:	4619      	mov	r1, r3
 8007092:	797b      	ldrb	r3, [r7, #5]
 8007094:	4618      	mov	r0, r3
 8007096:	79bb      	ldrb	r3, [r7, #6]
 8007098:	79fa      	ldrb	r2, [r7, #7]
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4603      	mov	r3, r0
 80070a0:	460a      	mov	r2, r1
 80070a2:	4932      	ldr	r1, [pc, #200]	; (800716c <sd_ini+0x220>)
 80070a4:	4832      	ldr	r0, [pc, #200]	; (8007170 <sd_ini+0x224>)
 80070a6:	f006 f977 	bl	800d398 <siprintf>
				SEND_str(str1);
 80070aa:	4831      	ldr	r0, [pc, #196]	; (8007170 <sd_ini+0x224>)
 80070ac:	f7fb ffbe 	bl	800302c <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80070b0:	793b      	ldrb	r3, [r7, #4]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <sd_ini+0x172>
 80070ba:	220c      	movs	r2, #12
 80070bc:	e000      	b.n	80070c0 <sd_ini+0x174>
 80070be:	2204      	movs	r2, #4
 80070c0:	4b27      	ldr	r3, [pc, #156]	; (8007160 <sd_ini+0x214>)
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e039      	b.n	800713a <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 80070c6:	2100      	movs	r1, #0
 80070c8:	20e9      	movs	r0, #233	; 0xe9
 80070ca:	f7ff fed5 	bl	8006e78 <SD_cmd>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d805      	bhi.n	80070e0 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 80070d4:	4b22      	ldr	r3, [pc, #136]	; (8007160 <sd_ini+0x214>)
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	23e9      	movs	r3, #233	; 0xe9
 80070dc:	73bb      	strb	r3, [r7, #14]
 80070de:	e004      	b.n	80070ea <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 80070e0:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <sd_ini+0x214>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	2341      	movs	r3, #65	; 0x41
 80070e8:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 80070ea:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80070ee:	81bb      	strh	r3, [r7, #12]
 80070f0:	e005      	b.n	80070fe <sd_ini+0x1b2>
 80070f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	81bb      	strh	r3, [r7, #12]
 80070fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <sd_ini+0x1ca>
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff feb4 	bl	8006e78 <SD_cmd>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ed      	bne.n	80070f2 <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 8007116:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <sd_ini+0x1e2>
 800711e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007122:	2050      	movs	r0, #80	; 0x50
 8007124:	f7ff fea8 	bl	8006e78 <SD_cmd>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <sd_ini+0x1ee>
				sdinfo.type = 0;
 800712e:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <sd_ini+0x214>)
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e001      	b.n	800713a <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 8007136:	2301      	movs	r3, #1
 8007138:	e00b      	b.n	8007152 <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <sd_ini+0x214>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	490c      	ldr	r1, [pc, #48]	; (8007174 <sd_ini+0x228>)
 8007144:	480a      	ldr	r0, [pc, #40]	; (8007170 <sd_ini+0x224>)
 8007146:	f006 f927 	bl	800d398 <siprintf>
	SEND_str(str1);
 800714a:	4809      	ldr	r0, [pc, #36]	; (8007170 <sd_ini+0x224>)
 800714c:	f7fb ff6e 	bl	800302c <SEND_str>
	return 0;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	bf00      	nop
 800715c:	40010800 	.word	0x40010800
 8007160:	20001888 	.word	0x20001888
 8007164:	20001034 	.word	0x20001034
 8007168:	40010c00 	.word	0x40010c00
 800716c:	08010ad4 	.word	0x08010ad4
 8007170:	2000188c 	.word	0x2000188c
 8007174:	08010af8 	.word	0x08010af8

08007178 <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <FCLK_SLOW+0x24>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800718a:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 800718c:	4a03      	ldr	r2, [pc, #12]	; (800719c <FCLK_SLOW+0x24>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6013      	str	r3, [r2, #0]
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	40013000 	.word	0x40013000

080071a0 <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <FCLK_FAST+0x28>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80071b2:	f043 0310 	orr.w	r3, r3, #16
 80071b6:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80071b8:	4a03      	ldr	r2, [pc, #12]	; (80071c8 <FCLK_FAST+0x28>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6013      	str	r3, [r2, #0]
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	40013000 	.word	0x40013000

080071cc <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 80071d6:	bf00      	nop
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <xmit_spi+0x3c>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f9      	beq.n	80071d8 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 80071e4:	4a08      	ldr	r2, [pc, #32]	; (8007208 <xmit_spi+0x3c>)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 80071ea:	bf00      	nop
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <xmit_spi+0x3c>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f9      	beq.n	80071ec <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <xmit_spi+0x3c>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	b2db      	uxtb	r3, r3
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	40013000 	.word	0x40013000

0800720c <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 8007210:	20ff      	movs	r0, #255	; 0xff
 8007212:	f7ff ffdb 	bl	80071cc <xmit_spi>
 8007216:	4603      	mov	r3, r0
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}

0800721c <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8007224:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <wait_ready+0x34>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 800722a:	f7ff ffef 	bl	800720c <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 800722e:	f7ff ffed 	bl	800720c <rcvr_spi>
 8007232:	4603      	mov	r3, r0
 8007234:	2bff      	cmp	r3, #255	; 0xff
 8007236:	d101      	bne.n	800723c <wait_ready+0x20>
 8007238:	2301      	movs	r3, #1
 800723a:	e004      	b.n	8007246 <wait_ready+0x2a>
	while (Timer2);
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <wait_ready+0x34>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f4      	bne.n	800722e <wait_ready+0x12>

	return 0;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200018d0 	.word	0x200018d0

08007254 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
	CS_HIGH();
 8007258:	2201      	movs	r2, #1
 800725a:	2110      	movs	r1, #16
 800725c:	4803      	ldr	r0, [pc, #12]	; (800726c <deselect+0x18>)
 800725e:	f002 fbeb 	bl	8009a38 <HAL_GPIO_WritePin>
	rcvr_spi();
 8007262:	f7ff ffd3 	bl	800720c <rcvr_spi>
}
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40010800 	.word	0x40010800

08007270 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
	CS_LOW();
 8007274:	2200      	movs	r2, #0
 8007276:	2110      	movs	r1, #16
 8007278:	4807      	ldr	r0, [pc, #28]	; (8007298 <selecting+0x28>)
 800727a:	f002 fbdd 	bl	8009a38 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 800727e:	2032      	movs	r0, #50	; 0x32
 8007280:	f7ff ffcc 	bl	800721c <wait_ready>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <selecting+0x22>
		deselect();
 800728a:	f7ff ffe3 	bl	8007254 <deselect>
		return 0;
 800728e:	2300      	movs	r3, #0
 8007290:	e000      	b.n	8007294 <selecting+0x24>
	}
	return 1;
 8007292:	2301      	movs	r3, #1
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40010800 	.word	0x40010800

0800729c <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <power_status+0x10>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	200018c8 	.word	0x200018c8

080072b0 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 80072b6:	2201      	movs	r2, #1
 80072b8:	2110      	movs	r1, #16
 80072ba:	480b      	ldr	r0, [pc, #44]	; (80072e8 <power_on+0x38>)
 80072bc:	f002 fbbc 	bl	8009a38 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 80072c0:	2300      	movs	r3, #0
 80072c2:	71fb      	strb	r3, [r7, #7]
 80072c4:	e005      	b.n	80072d2 <power_on+0x22>
		xmit_spi(0xFF);
 80072c6:	20ff      	movs	r0, #255	; 0xff
 80072c8:	f7ff ff80 	bl	80071cc <xmit_spi>
	for (i = 0; i < 10; i++)
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	3301      	adds	r3, #1
 80072d0:	71fb      	strb	r3, [r7, #7]
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	d9f6      	bls.n	80072c6 <power_on+0x16>

	PowerFlag = 1;
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <power_on+0x3c>)
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]

}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40010800 	.word	0x40010800
 80072ec:	200018c8 	.word	0x200018c8

080072f0 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 80072f4:	4b03      	ldr	r3, [pc, #12]	; (8007304 <power_off+0x14>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
}
 80072fa:	bf00      	nop
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	200018c8 	.word	0x200018c8

08007308 <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 8007308:	b590      	push	{r4, r7, lr}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <rcvr_datablock+0x90>)
 8007314:	2214      	movs	r2, #20
 8007316:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 8007318:	f7ff ff78 	bl	800720c <rcvr_spi>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2bff      	cmp	r3, #255	; 0xff
 8007324:	d103      	bne.n	800732e <rcvr_datablock+0x26>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <rcvr_datablock+0x90>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f4      	bne.n	8007318 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2bfe      	cmp	r3, #254	; 0xfe
 8007332:	d001      	beq.n	8007338 <rcvr_datablock+0x30>
 8007334:	2300      	movs	r3, #0
 8007336:	e02a      	b.n	800738e <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8007338:	687c      	ldr	r4, [r7, #4]
 800733a:	1c63      	adds	r3, r4, #1
 800733c:	607b      	str	r3, [r7, #4]
 800733e:	20ff      	movs	r0, #255	; 0xff
 8007340:	f7ff ff44 	bl	80071cc <xmit_spi>
 8007344:	4603      	mov	r3, r0
 8007346:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007348:	687c      	ldr	r4, [r7, #4]
 800734a:	1c63      	adds	r3, r4, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	20ff      	movs	r0, #255	; 0xff
 8007350:	f7ff ff3c 	bl	80071cc <xmit_spi>
 8007354:	4603      	mov	r3, r0
 8007356:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007358:	687c      	ldr	r4, [r7, #4]
 800735a:	1c63      	adds	r3, r4, #1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	20ff      	movs	r0, #255	; 0xff
 8007360:	f7ff ff34 	bl	80071cc <xmit_spi>
 8007364:	4603      	mov	r3, r0
 8007366:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8007368:	687c      	ldr	r4, [r7, #4]
 800736a:	1c63      	adds	r3, r4, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	20ff      	movs	r0, #255	; 0xff
 8007370:	f7ff ff2c 	bl	80071cc <xmit_spi>
 8007374:	4603      	mov	r3, r0
 8007376:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3b04      	subs	r3, #4
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1d9      	bne.n	8007338 <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 8007384:	f7ff ff42 	bl	800720c <rcvr_spi>
	rcvr_spi();
 8007388:	f7ff ff40 	bl	800720c <rcvr_spi>

	return 1;						/* Return with success */
 800738c:	2301      	movs	r3, #1
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	bd90      	pop	{r4, r7, pc}
 8007396:	bf00      	nop
 8007398:	200018cc 	.word	0x200018cc

0800739c <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 80073a8:	2032      	movs	r0, #50	; 0x32
 80073aa:	f7ff ff37 	bl	800721c <wait_ready>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <xmit_datablock+0x1c>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e02e      	b.n	8007416 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ff06 	bl	80071cc <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	2bfd      	cmp	r3, #253	; 0xfd
 80073c4:	d026      	beq.n	8007414 <xmit_datablock+0x78>
		wc = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff fefa 	bl	80071cc <xmit_spi>
			xmit_spi(*buff++);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fef3 	bl	80071cc <xmit_spi>
		} while (--wc);
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1eb      	bne.n	80073ca <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 80073f2:	20ff      	movs	r0, #255	; 0xff
 80073f4:	f7ff feea 	bl	80071cc <xmit_spi>
		xmit_spi(0xFF);
 80073f8:	20ff      	movs	r0, #255	; 0xff
 80073fa:	f7ff fee7 	bl	80071cc <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 80073fe:	f7ff ff05 	bl	800720c <rcvr_spi>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2b05      	cmp	r3, #5
 800740e:	d001      	beq.n	8007414 <xmit_datablock+0x78>
			return 0;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <xmit_datablock+0x7a>
	}

	return 1;
 8007414:	2301      	movs	r3, #1
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	6039      	str	r1, [r7, #0]
 8007428:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 800742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	da0e      	bge.n	8007450 <send_cmd+0x32>
		cmd &= 0x7F;
 8007432:	79fb      	ldrb	r3, [r7, #7]
 8007434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007438:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800743a:	2100      	movs	r1, #0
 800743c:	2037      	movs	r0, #55	; 0x37
 800743e:	f7ff ffee 	bl	800741e <send_cmd>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d901      	bls.n	8007450 <send_cmd+0x32>
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	e04c      	b.n	80074ea <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8007450:	f7ff ff00 	bl	8007254 <deselect>
	if (!selecting()) return 0xFF;
 8007454:	f7ff ff0c 	bl	8007270 <selecting>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <send_cmd+0x44>
 800745e:	23ff      	movs	r3, #255	; 0xff
 8007460:	e043      	b.n	80074ea <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff feae 	bl	80071cc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	0e1b      	lsrs	r3, r3, #24
 8007474:	b2db      	uxtb	r3, r3
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fea8 	bl	80071cc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	b2db      	uxtb	r3, r3
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fea2 	bl	80071cc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	b2db      	uxtb	r3, r3
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fe9c 	bl	80071cc <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fe97 	bl	80071cc <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800749e:	2301      	movs	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <send_cmd+0x8e>
 80074a8:	2395      	movs	r3, #149	; 0x95
 80074aa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d101      	bne.n	80074b6 <send_cmd+0x98>
 80074b2:	2387      	movs	r3, #135	; 0x87
 80074b4:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fe87 	bl	80071cc <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d101      	bne.n	80074c8 <send_cmd+0xaa>
 80074c4:	f7ff fea2 	bl	800720c <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 80074c8:	230a      	movs	r3, #10
 80074ca:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80074cc:	f7ff fe9e 	bl	800720c <rcvr_spi>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80074d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da05      	bge.n	80074e8 <send_cmd+0xca>
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	3b01      	subs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f1      	bne.n	80074cc <send_cmd+0xae>

	return res;			/* Return with the response value */
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <disk_initialize+0x14>
 8007504:	2301      	movs	r3, #1
 8007506:	e0c9      	b.n	800769c <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8007508:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <disk_initialize+0x1b0>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <disk_initialize+0x2a>
 8007516:	4b63      	ldr	r3, [pc, #396]	; (80076a4 <disk_initialize+0x1b0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	e0be      	b.n	800769c <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 800751e:	2201      	movs	r2, #1
 8007520:	2110      	movs	r1, #16
 8007522:	4861      	ldr	r0, [pc, #388]	; (80076a8 <disk_initialize+0x1b4>)
 8007524:	f002 fa88 	bl	8009a38 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 8007528:	f7ff fec2 	bl	80072b0 <power_on>
	FCLK_SLOW();
 800752c:	f7ff fe24 	bl	8007178 <FCLK_SLOW>
	CS_LOW();
 8007530:	2200      	movs	r2, #0
 8007532:	2110      	movs	r1, #16
 8007534:	485c      	ldr	r0, [pc, #368]	; (80076a8 <disk_initialize+0x1b4>)
 8007536:	f002 fa7f 	bl	8009a38 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 800753a:	230a      	movs	r3, #10
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	e004      	b.n	800754a <disk_initialize+0x56>
 8007540:	f7ff fe64 	bl	800720c <rcvr_spi>
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	3b01      	subs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f7      	bne.n	8007540 <disk_initialize+0x4c>

	ty = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8007554:	2100      	movs	r1, #0
 8007556:	2000      	movs	r0, #0
 8007558:	f7ff ff61 	bl	800741e <send_cmd>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	f040 8084 	bne.w	800766c <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 8007564:	4b51      	ldr	r3, [pc, #324]	; (80076ac <disk_initialize+0x1b8>)
 8007566:	2264      	movs	r2, #100	; 0x64
 8007568:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800756a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800756e:	2008      	movs	r0, #8
 8007570:	f7ff ff55 	bl	800741e <send_cmd>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d14d      	bne.n	8007616 <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
 800757e:	e00c      	b.n	800759a <disk_initialize+0xa6>
 8007580:	7bfc      	ldrb	r4, [r7, #15]
 8007582:	f7ff fe43 	bl	800720c <rcvr_spi>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	f104 0310 	add.w	r3, r4, #16
 800758e:	443b      	add	r3, r7
 8007590:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	3301      	adds	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b03      	cmp	r3, #3
 800759e:	d9ef      	bls.n	8007580 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 80075a0:	7abb      	ldrb	r3, [r7, #10]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d162      	bne.n	800766c <disk_initialize+0x178>
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	2baa      	cmp	r3, #170	; 0xaa
 80075aa:	d15f      	bne.n	800766c <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 80075ac:	bf00      	nop
 80075ae:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <disk_initialize+0x1b8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <disk_initialize+0xd2>
 80075b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80075ba:	20a9      	movs	r0, #169	; 0xa9
 80075bc:	f7ff ff2f 	bl	800741e <send_cmd>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f3      	bne.n	80075ae <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80075c6:	4b39      	ldr	r3, [pc, #228]	; (80076ac <disk_initialize+0x1b8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d04e      	beq.n	800766c <disk_initialize+0x178>
 80075ce:	2100      	movs	r1, #0
 80075d0:	203a      	movs	r0, #58	; 0x3a
 80075d2:	f7ff ff24 	bl	800741e <send_cmd>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d147      	bne.n	800766c <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	e00c      	b.n	80075fc <disk_initialize+0x108>
 80075e2:	7bfc      	ldrb	r4, [r7, #15]
 80075e4:	f7ff fe12 	bl	800720c <rcvr_spi>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	f104 0310 	add.w	r3, r4, #16
 80075f0:	443b      	add	r3, r7
 80075f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	3301      	adds	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d9ef      	bls.n	80075e2 <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8007602:	7a3b      	ldrb	r3, [r7, #8]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <disk_initialize+0x11c>
 800760c:	230c      	movs	r3, #12
 800760e:	e000      	b.n	8007612 <disk_initialize+0x11e>
 8007610:	2304      	movs	r3, #4
 8007612:	737b      	strb	r3, [r7, #13]
 8007614:	e02a      	b.n	800766c <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8007616:	2100      	movs	r1, #0
 8007618:	20a9      	movs	r0, #169	; 0xa9
 800761a:	f7ff ff00 	bl	800741e <send_cmd>
 800761e:	4603      	mov	r3, r0
 8007620:	2b01      	cmp	r3, #1
 8007622:	d804      	bhi.n	800762e <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8007624:	2302      	movs	r3, #2
 8007626:	737b      	strb	r3, [r7, #13]
 8007628:	23a9      	movs	r3, #169	; 0xa9
 800762a:	73bb      	strb	r3, [r7, #14]
 800762c:	e003      	b.n	8007636 <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 800762e:	2301      	movs	r3, #1
 8007630:	737b      	strb	r3, [r7, #13]
 8007632:	2301      	movs	r3, #1
 8007634:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 8007636:	bf00      	nop
 8007638:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <disk_initialize+0x1b8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <disk_initialize+0x15c>
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff feea 	bl	800741e <send_cmd>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f3      	bne.n	8007638 <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <disk_initialize+0x1b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <disk_initialize+0x174>
 8007658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800765c:	2010      	movs	r0, #16
 800765e:	f7ff fede 	bl	800741e <send_cmd>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <disk_initialize+0x178>
				ty = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 800766c:	4a10      	ldr	r2, [pc, #64]	; (80076b0 <disk_initialize+0x1bc>)
 800766e:	7b7b      	ldrb	r3, [r7, #13]
 8007670:	7013      	strb	r3, [r2, #0]
	deselect();
 8007672:	f7ff fdef 	bl	8007254 <deselect>

	if (ty) {						/* Initialization succeded */
 8007676:	7b7b      	ldrb	r3, [r7, #13]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <disk_initialize+0x1b0>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <disk_initialize+0x1b0>)
 800768a:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 800768c:	f7ff fd88 	bl	80071a0 <FCLK_FAST>
 8007690:	e001      	b.n	8007696 <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 8007692:	f7ff fe2d 	bl	80072f0 <power_off>
	}

	return Stat;
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <disk_initialize+0x1b0>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	b2db      	uxtb	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd90      	pop	{r4, r7, pc}
 80076a4:	20000010 	.word	0x20000010
 80076a8:	40010800 	.word	0x40010800
 80076ac:	200018cc 	.word	0x200018cc
 80076b0:	200018d4 	.word	0x200018d4

080076b4 <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <disk_status+0x14>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e002      	b.n	80076ce <disk_status+0x1a>
	return Stat;
 80076c8:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <disk_status+0x24>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr
 80076d8:	20000010 	.word	0x20000010

080076dc <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	461a      	mov	r2, r3
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	4613      	mov	r3, r2
 80076ee:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <disk_read+0x20>
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <disk_read+0x24>
 80076fc:	2304      	movs	r3, #4
 80076fe:	e04d      	b.n	800779c <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007700:	4b28      	ldr	r3, [pc, #160]	; (80077a4 <disk_read+0xc8>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <disk_read+0x36>
 800770e:	2303      	movs	r3, #3
 8007710:	e044      	b.n	800779c <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8007712:	4b25      	ldr	r3, [pc, #148]	; (80077a8 <disk_read+0xcc>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d102      	bne.n	8007724 <disk_read+0x48>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	025b      	lsls	r3, r3, #9
 8007722:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d111      	bne.n	800774e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	2011      	movs	r0, #17
 800772e:	f7ff fe76 	bl	800741e <send_cmd>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d129      	bne.n	800778c <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8007738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800773c:	68b8      	ldr	r0, [r7, #8]
 800773e:	f7ff fde3 	bl	8007308 <rcvr_datablock>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d021      	beq.n	800778c <disk_read+0xb0>
			count = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	73bb      	strb	r3, [r7, #14]
 800774c:	e01e      	b.n	800778c <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	2012      	movs	r0, #18
 8007752:	f7ff fe64 	bl	800741e <send_cmd>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d117      	bne.n	800778c <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800775c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f7ff fdd1 	bl	8007308 <rcvr_datablock>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <disk_read+0xa6>
				buff += 512;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007772:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	3b01      	subs	r3, #1
 8007778:	73bb      	strb	r3, [r7, #14]
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1ed      	bne.n	800775c <disk_read+0x80>
 8007780:	e000      	b.n	8007784 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8007782:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007784:	2100      	movs	r1, #0
 8007786:	200c      	movs	r0, #12
 8007788:	f7ff fe49 	bl	800741e <send_cmd>
		}
	}
	deselect();
 800778c:	f7ff fd62 	bl	8007254 <deselect>

	return count ? RES_ERROR : RES_OK;
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bf14      	ite	ne
 8007796:	2301      	movne	r3, #1
 8007798:	2300      	moveq	r3, #0
 800779a:	b2db      	uxtb	r3, r3
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000010 	.word	0x20000010
 80077a8:	200018d4 	.word	0x200018d4

080077ac <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	461a      	mov	r2, r3
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	4613      	mov	r3, r2
 80077be:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <disk_write+0x20>
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <disk_write+0x24>
 80077cc:	2304      	movs	r3, #4
 80077ce:	e064      	b.n	800789a <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80077d0:	4b34      	ldr	r3, [pc, #208]	; (80078a4 <disk_write+0xf8>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <disk_write+0x36>
 80077de:	2303      	movs	r3, #3
 80077e0:	e05b      	b.n	800789a <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <disk_write+0xf8>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <disk_write+0x48>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e052      	b.n	800789a <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 80077f4:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <disk_write+0xfc>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <disk_write+0x5a>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	025b      	lsls	r3, r3, #9
 8007804:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d110      	bne.n	800782e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	2018      	movs	r0, #24
 8007810:	f7ff fe05 	bl	800741e <send_cmd>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d137      	bne.n	800788a <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 800781a:	21fe      	movs	r1, #254	; 0xfe
 800781c:	68b8      	ldr	r0, [r7, #8]
 800781e:	f7ff fdbd 	bl	800739c <xmit_datablock>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d030      	beq.n	800788a <disk_write+0xde>
			count = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	73bb      	strb	r3, [r7, #14]
 800782c:	e02d      	b.n	800788a <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <disk_write+0xfc>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 0306 	and.w	r3, r3, #6
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <disk_write+0x98>
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	4619      	mov	r1, r3
 800783e:	2097      	movs	r0, #151	; 0x97
 8007840:	f7ff fded 	bl	800741e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	2019      	movs	r0, #25
 8007848:	f7ff fde9 	bl	800741e <send_cmd>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d11b      	bne.n	800788a <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007852:	21fc      	movs	r1, #252	; 0xfc
 8007854:	68b8      	ldr	r0, [r7, #8]
 8007856:	f7ff fda1 	bl	800739c <xmit_datablock>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <disk_write+0xca>
				buff += 512;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007866:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	3b01      	subs	r3, #1
 800786c:	73bb      	strb	r3, [r7, #14]
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1ee      	bne.n	8007852 <disk_write+0xa6>
 8007874:	e000      	b.n	8007878 <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007876:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8007878:	21fd      	movs	r1, #253	; 0xfd
 800787a:	2000      	movs	r0, #0
 800787c:	f7ff fd8e 	bl	800739c <xmit_datablock>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <disk_write+0xde>
				count = 1;
 8007886:	2301      	movs	r3, #1
 8007888:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 800788a:	f7ff fce3 	bl	8007254 <deselect>

	return count ? RES_ERROR : RES_OK;
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000010 	.word	0x20000010
 80078a8:	200018d4 	.word	0x200018d4

080078ac <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b089      	sub	sp, #36	; 0x24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	603a      	str	r2, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
 80078b8:	460b      	mov	r3, r1
 80078ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <disk_ioctl+0x1e>
 80078c6:	2304      	movs	r3, #4
 80078c8:	e1f6      	b.n	8007cb8 <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80078ca:	4b97      	ldr	r3, [pc, #604]	; (8007b28 <disk_ioctl+0x27c>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <disk_ioctl+0x30>
 80078d8:	2303      	movs	r3, #3
 80078da:	e1ed      	b.n	8007cb8 <disk_ioctl+0x40c>

	res = RES_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 80078e0:	79bb      	ldrb	r3, [r7, #6]
 80078e2:	2b0e      	cmp	r3, #14
 80078e4:	f200 81cd 	bhi.w	8007c82 <disk_ioctl+0x3d6>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <disk_ioctl+0x44>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007977 	.word	0x08007977
 80078f8:	08007a2d 	.word	0x08007a2d
 80078fc:	08007a3b 	.word	0x08007a3b
 8007900:	08007b35 	.word	0x08007b35
 8007904:	0800792d 	.word	0x0800792d
 8007908:	08007c83 	.word	0x08007c83
 800790c:	08007c83 	.word	0x08007c83
 8007910:	08007c83 	.word	0x08007c83
 8007914:	08007c83 	.word	0x08007c83
 8007918:	08007bd7 	.word	0x08007bd7
 800791c:	08007be5 	.word	0x08007be5
 8007920:	08007c07 	.word	0x08007c07
 8007924:	08007c29 	.word	0x08007c29
 8007928:	08007c5d 	.word	0x08007c5d

	case CTRL_POWER :
		switch (ptr[0]) {
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <disk_ioctl+0x8e>
 8007934:	2b01      	cmp	r3, #1
 8007936:	d005      	beq.n	8007944 <disk_ioctl+0x98>
 8007938:	e00e      	b.n	8007958 <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 800793a:	f7ff fcd9 	bl	80072f0 <power_off>
			res = RES_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	77fb      	strb	r3, [r7, #31]
			break;
 8007942:	e00c      	b.n	800795e <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 8007944:	f7ff fcaa 	bl	800729c <power_status>
 8007948:	4602      	mov	r2, r0
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	3301      	adds	r3, #1
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	77fb      	strb	r3, [r7, #31]
			break;
 8007956:	e002      	b.n	800795e <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 8007958:	2304      	movs	r3, #4
 800795a:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800795c:	e1a9      	b.n	8007cb2 <disk_ioctl+0x406>
 800795e:	e1a8      	b.n	8007cb2 <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 8007960:	f7ff fc86 	bl	8007270 <selecting>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 818e 	beq.w	8007c88 <disk_ioctl+0x3dc>
			deselect();
 800796c:	f7ff fc72 	bl	8007254 <deselect>
			res = RES_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007974:	e188      	b.n	8007c88 <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007976:	2100      	movs	r1, #0
 8007978:	2009      	movs	r0, #9
 800797a:	f7ff fd50 	bl	800741e <send_cmd>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 8183 	bne.w	8007c8c <disk_ioctl+0x3e0>
 8007986:	2110      	movs	r1, #16
 8007988:	4868      	ldr	r0, [pc, #416]	; (8007b2c <disk_ioctl+0x280>)
 800798a:	f7ff fcbd 	bl	8007308 <rcvr_datablock>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 817b 	beq.w	8007c8c <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007996:	4b65      	ldr	r3, [pc, #404]	; (8007b2c <disk_ioctl+0x280>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	099b      	lsrs	r3, r3, #6
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d114      	bne.n	80079cc <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 80079a2:	4b62      	ldr	r3, [pc, #392]	; (8007b2c <disk_ioctl+0x280>)
 80079a4:	7a5b      	ldrb	r3, [r3, #9]
 80079a6:	461a      	mov	r2, r3
 80079a8:	4b60      	ldr	r3, [pc, #384]	; (8007b2c <disk_ioctl+0x280>)
 80079aa:	7a1b      	ldrb	r3, [r3, #8]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	4413      	add	r3, r2
 80079b0:	461a      	mov	r2, r3
 80079b2:	4b5e      	ldr	r3, [pc, #376]	; (8007b2c <disk_ioctl+0x280>)
 80079b4:	79db      	ldrb	r3, [r3, #7]
 80079b6:	041b      	lsls	r3, r3, #16
 80079b8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80079bc:	4413      	add	r3, r2
 80079be:	3301      	adds	r3, #1
 80079c0:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	029a      	lsls	r2, r3, #10
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e02c      	b.n	8007a26 <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80079cc:	4b57      	ldr	r3, [pc, #348]	; (8007b2c <disk_ioctl+0x280>)
 80079ce:	795b      	ldrb	r3, [r3, #5]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4b55      	ldr	r3, [pc, #340]	; (8007b2c <disk_ioctl+0x280>)
 80079d8:	7a9b      	ldrb	r3, [r3, #10]
 80079da:	09db      	lsrs	r3, r3, #7
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	4413      	add	r3, r2
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	4b52      	ldr	r3, [pc, #328]	; (8007b2c <disk_ioctl+0x280>)
 80079e4:	7a5b      	ldrb	r3, [r3, #9]
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0306 	and.w	r3, r3, #6
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	4413      	add	r3, r2
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	3302      	adds	r3, #2
 80079f6:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 80079f8:	4b4c      	ldr	r3, [pc, #304]	; (8007b2c <disk_ioctl+0x280>)
 80079fa:	7a1b      	ldrb	r3, [r3, #8]
 80079fc:	099b      	lsrs	r3, r3, #6
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b4a      	ldr	r3, [pc, #296]	; (8007b2c <disk_ioctl+0x280>)
 8007a04:	79db      	ldrb	r3, [r3, #7]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	4b48      	ldr	r3, [pc, #288]	; (8007b2c <disk_ioctl+0x280>)
 8007a0c:	799b      	ldrb	r3, [r3, #6]
 8007a0e:	029b      	lsls	r3, r3, #10
 8007a10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a14:	4413      	add	r3, r2
 8007a16:	3301      	adds	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 8007a1a:	7fbb      	ldrb	r3, [r7, #30]
 8007a1c:	3b09      	subs	r3, #9
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	409a      	lsls	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007a2a:	e12f      	b.n	8007c8c <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	77fb      	strb	r3, [r7, #31]
		break;
 8007a38:	e13b      	b.n	8007cb2 <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007a3a:	4b3d      	ldr	r3, [pc, #244]	; (8007b30 <disk_ioctl+0x284>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d029      	beq.n	8007a9a <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007a46:	2100      	movs	r1, #0
 8007a48:	208d      	movs	r0, #141	; 0x8d
 8007a4a:	f7ff fce8 	bl	800741e <send_cmd>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 811d 	bne.w	8007c90 <disk_ioctl+0x3e4>
				rcvr_spi();
 8007a56:	f7ff fbd9 	bl	800720c <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a5a:	2110      	movs	r1, #16
 8007a5c:	4833      	ldr	r0, [pc, #204]	; (8007b2c <disk_ioctl+0x280>)
 8007a5e:	f7ff fc53 	bl	8007308 <rcvr_datablock>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8113 	beq.w	8007c90 <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8007a6a:	2330      	movs	r3, #48	; 0x30
 8007a6c:	77bb      	strb	r3, [r7, #30]
 8007a6e:	e004      	b.n	8007a7a <disk_ioctl+0x1ce>
 8007a70:	f7ff fbcc 	bl	800720c <rcvr_spi>
 8007a74:	7fbb      	ldrb	r3, [r7, #30]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	77bb      	strb	r3, [r7, #30]
 8007a7a:	7fbb      	ldrb	r3, [r7, #30]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f7      	bne.n	8007a70 <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 8007a80:	4b2a      	ldr	r3, [pc, #168]	; (8007b2c <disk_ioctl+0x280>)
 8007a82:	7a9b      	ldrb	r3, [r3, #10]
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2310      	movs	r3, #16
 8007a8c:	fa03 f202 	lsl.w	r2, r3, r2
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007a98:	e0fa      	b.n	8007c90 <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	2009      	movs	r0, #9
 8007a9e:	f7ff fcbe 	bl	800741e <send_cmd>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 80f3 	bne.w	8007c90 <disk_ioctl+0x3e4>
 8007aaa:	2110      	movs	r1, #16
 8007aac:	481f      	ldr	r0, [pc, #124]	; (8007b2c <disk_ioctl+0x280>)
 8007aae:	f7ff fc2b 	bl	8007308 <rcvr_datablock>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80eb 	beq.w	8007c90 <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <disk_ioctl+0x284>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d015      	beq.n	8007af2 <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007ac6:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <disk_ioctl+0x280>)
 8007ac8:	7a9b      	ldrb	r3, [r3, #10]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007ad0:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <disk_ioctl+0x280>)
 8007ad2:	7ad2      	ldrb	r2, [r2, #11]
 8007ad4:	09d2      	lsrs	r2, r2, #7
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	4413      	add	r3, r2
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <disk_ioctl+0x280>)
 8007ade:	7b5b      	ldrb	r3, [r3, #13]
 8007ae0:	099b      	lsrs	r3, r3, #6
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e016      	b.n	8007b20 <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007af2:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <disk_ioctl+0x280>)
 8007af4:	7a9b      	ldrb	r3, [r3, #10]
 8007af6:	109b      	asrs	r3, r3, #2
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	3301      	adds	r3, #1
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <disk_ioctl+0x280>)
 8007b02:	7ad2      	ldrb	r2, [r2, #11]
 8007b04:	00d2      	lsls	r2, r2, #3
 8007b06:	f002 0218 	and.w	r2, r2, #24
 8007b0a:	4908      	ldr	r1, [pc, #32]	; (8007b2c <disk_ioctl+0x280>)
 8007b0c:	7ac9      	ldrb	r1, [r1, #11]
 8007b0e:	0949      	lsrs	r1, r1, #5
 8007b10:	b2c9      	uxtb	r1, r1
 8007b12:	440a      	add	r2, r1
 8007b14:	3201      	adds	r2, #1
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	77fb      	strb	r3, [r7, #31]
		break;
 8007b24:	e0b4      	b.n	8007c90 <disk_ioctl+0x3e4>
 8007b26:	bf00      	nop
 8007b28:	20000010 	.word	0x20000010
 8007b2c:	200018d8 	.word	0x200018d8
 8007b30:	200018d4 	.word	0x200018d4

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b34:	4b62      	ldr	r3, [pc, #392]	; (8007cc0 <disk_ioctl+0x414>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 0306 	and.w	r3, r3, #6
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 80a9 	beq.w	8007c94 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	4a5f      	ldr	r2, [pc, #380]	; (8007cc4 <disk_ioctl+0x418>)
 8007b46:	210b      	movs	r1, #11
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff feaf 	bl	80078ac <disk_ioctl>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 80a1 	bne.w	8007c98 <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b56:	4b5b      	ldr	r3, [pc, #364]	; (8007cc4 <disk_ioctl+0x418>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	099b      	lsrs	r3, r3, #6
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <disk_ioctl+0x2c4>
 8007b62:	4b58      	ldr	r3, [pc, #352]	; (8007cc4 <disk_ioctl+0x418>)
 8007b64:	7a9b      	ldrb	r3, [r3, #10]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8096 	beq.w	8007c9c <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 8007b80:	4b4f      	ldr	r3, [pc, #316]	; (8007cc0 <disk_ioctl+0x414>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	025b      	lsls	r3, r3, #9
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	025b      	lsls	r3, r3, #9
 8007b96:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	2020      	movs	r0, #32
 8007b9c:	f7ff fc3f 	bl	800741e <send_cmd>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d17c      	bne.n	8007ca0 <disk_ioctl+0x3f4>
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	2021      	movs	r0, #33	; 0x21
 8007baa:	f7ff fc38 	bl	800741e <send_cmd>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d175      	bne.n	8007ca0 <disk_ioctl+0x3f4>
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	2026      	movs	r0, #38	; 0x26
 8007bb8:	f7ff fc31 	bl	800741e <send_cmd>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d16e      	bne.n	8007ca0 <disk_ioctl+0x3f4>
 8007bc2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007bc6:	f7ff fb29 	bl	800721c <wait_ready>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d067      	beq.n	8007ca0 <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	77fb      	strb	r3, [r7, #31]
		break;
 8007bd4:	e064      	b.n	8007ca0 <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 8007bd6:	4b3a      	ldr	r3, [pc, #232]	; (8007cc0 <disk_ioctl+0x414>)
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	77fb      	strb	r3, [r7, #31]
		break;
 8007be2:	e066      	b.n	8007cb2 <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8007be4:	2100      	movs	r1, #0
 8007be6:	2009      	movs	r0, #9
 8007be8:	f7ff fc19 	bl	800741e <send_cmd>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d158      	bne.n	8007ca4 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8007bf2:	2110      	movs	r1, #16
 8007bf4:	69b8      	ldr	r0, [r7, #24]
 8007bf6:	f7ff fb87 	bl	8007308 <rcvr_datablock>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d051      	beq.n	8007ca4 <disk_ioctl+0x3f8>
			res = RES_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	77fb      	strb	r3, [r7, #31]
		break;
 8007c04:	e04e      	b.n	8007ca4 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8007c06:	2100      	movs	r1, #0
 8007c08:	200a      	movs	r0, #10
 8007c0a:	f7ff fc08 	bl	800741e <send_cmd>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d149      	bne.n	8007ca8 <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8007c14:	2110      	movs	r1, #16
 8007c16:	69b8      	ldr	r0, [r7, #24]
 8007c18:	f7ff fb76 	bl	8007308 <rcvr_datablock>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d042      	beq.n	8007ca8 <disk_ioctl+0x3fc>
			res = RES_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	77fb      	strb	r3, [r7, #31]
		break;
 8007c26:	e03f      	b.n	8007ca8 <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8007c28:	2100      	movs	r1, #0
 8007c2a:	203a      	movs	r0, #58	; 0x3a
 8007c2c:	f7ff fbf7 	bl	800741e <send_cmd>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d13a      	bne.n	8007cac <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8007c36:	2304      	movs	r3, #4
 8007c38:	77bb      	strb	r3, [r7, #30]
 8007c3a:	e009      	b.n	8007c50 <disk_ioctl+0x3a4>
 8007c3c:	69bc      	ldr	r4, [r7, #24]
 8007c3e:	1c63      	adds	r3, r4, #1
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	f7ff fae3 	bl	800720c <rcvr_spi>
 8007c46:	4603      	mov	r3, r0
 8007c48:	7023      	strb	r3, [r4, #0]
 8007c4a:	7fbb      	ldrb	r3, [r7, #30]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	77bb      	strb	r3, [r7, #30]
 8007c50:	7fbb      	ldrb	r3, [r7, #30]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f2      	bne.n	8007c3c <disk_ioctl+0x390>
			res = RES_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007c5a:	e027      	b.n	8007cac <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	208d      	movs	r0, #141	; 0x8d
 8007c60:	f7ff fbdd 	bl	800741e <send_cmd>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d122      	bne.n	8007cb0 <disk_ioctl+0x404>
			rcvr_spi();
 8007c6a:	f7ff facf 	bl	800720c <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 8007c6e:	2140      	movs	r1, #64	; 0x40
 8007c70:	69b8      	ldr	r0, [r7, #24]
 8007c72:	f7ff fb49 	bl	8007308 <rcvr_datablock>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d019      	beq.n	8007cb0 <disk_ioctl+0x404>
				res = RES_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8007c80:	e016      	b.n	8007cb0 <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 8007c82:	2304      	movs	r3, #4
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e014      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007c88:	bf00      	nop
 8007c8a:	e012      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007c8c:	bf00      	nop
 8007c8e:	e010      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007c90:	bf00      	nop
 8007c92:	e00e      	b.n	8007cb2 <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007c94:	bf00      	nop
 8007c96:	e00c      	b.n	8007cb2 <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007c98:	bf00      	nop
 8007c9a:	e00a      	b.n	8007cb2 <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007c9c:	bf00      	nop
 8007c9e:	e008      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007ca0:	bf00      	nop
 8007ca2:	e006      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007ca4:	bf00      	nop
 8007ca6:	e004      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007ca8:	bf00      	nop
 8007caa:	e002      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007cac:	bf00      	nop
 8007cae:	e000      	b.n	8007cb2 <disk_ioctl+0x406>
		break;
 8007cb0:	bf00      	nop
	}

	deselect();
 8007cb2:	f7ff facf 	bl	8007254 <deselect>

	return res;
 8007cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3724      	adds	r7, #36	; 0x24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}
 8007cc0:	200018d4 	.word	0x200018d4
 8007cc4:	200018d8 	.word	0x200018d8

08007cc8 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8007ccc:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	3e216000 	.word	0x3e216000
 8007cdc:	00000000 	.word	0x00000000

08007ce0 <Display_info>:
extern bool display_Off;

bool display_Sleep = false;

void Display_info(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af02      	add	r7, sp, #8
	if(info || display_Off)
 8007ce6:	4b92      	ldr	r3, [pc, #584]	; (8007f30 <Display_info+0x250>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <Display_info+0x16>
 8007cee:	4b91      	ldr	r3, [pc, #580]	; (8007f34 <Display_info+0x254>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03d      	beq.n	8007d72 <Display_info+0x92>
	{
		if(display_Off)	//Выключаем дисплей
 8007cf6:	4b8f      	ldr	r3, [pc, #572]	; (8007f34 <Display_info+0x254>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <Display_info+0x36>
		{
			ssd1306_Fill(Black);
 8007cfe:	2000      	movs	r0, #0
 8007d00:	f000 fb36 	bl	8008370 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8007d04:	488c      	ldr	r0, [pc, #560]	; (8007f38 <Display_info+0x258>)
 8007d06:	f000 fb55 	bl	80083b4 <ssd1306_UpdateScreen>
			display_Sleep = true;
 8007d0a:	4b8c      	ldr	r3, [pc, #560]	; (8007f3c <Display_info+0x25c>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
			display_Off = false;
 8007d10:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <Display_info+0x254>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
		}
		if(info)
 8007d16:	4b86      	ldr	r3, [pc, #536]	; (8007f30 <Display_info+0x250>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d029      	beq.n	8007d72 <Display_info+0x92>
		{
			ssd1306_Fill(Black);
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f000 fb26 	bl	8008370 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8007d24:	4884      	ldr	r0, [pc, #528]	; (8007f38 <Display_info+0x258>)
 8007d26:	f000 fb45 	bl	80083b4 <ssd1306_UpdateScreen>

			ssd1306_SetCursor(1, 23);
 8007d2a:	2117      	movs	r1, #23
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f000 fc79 	bl	8008624 <ssd1306_SetCursor>
			ssd1306_WriteString("ISet:", Font_11x18, White);
 8007d32:	4a83      	ldr	r2, [pc, #524]	; (8007f40 <Display_info+0x260>)
 8007d34:	2301      	movs	r3, #1
 8007d36:	ca06      	ldmia	r2, {r1, r2}
 8007d38:	4882      	ldr	r0, [pc, #520]	; (8007f44 <Display_info+0x264>)
 8007d3a:	f000 fc4d 	bl	80085d8 <ssd1306_WriteString>

			ssd1306_SetCursor(60, 23);
 8007d3e:	2117      	movs	r1, #23
 8007d40:	203c      	movs	r0, #60	; 0x3c
 8007d42:	f000 fc6f 	bl	8008624 <ssd1306_SetCursor>
			snprintf(trans_str, 63, "%.2fA", Current);
 8007d46:	4b80      	ldr	r3, [pc, #512]	; (8007f48 <Display_info+0x268>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	e9cd 2300 	strd	r2, r3, [sp]
 8007d50:	4a7e      	ldr	r2, [pc, #504]	; (8007f4c <Display_info+0x26c>)
 8007d52:	213f      	movs	r1, #63	; 0x3f
 8007d54:	487e      	ldr	r0, [pc, #504]	; (8007f50 <Display_info+0x270>)
 8007d56:	f005 faeb 	bl	800d330 <sniprintf>
			ssd1306_WriteString(trans_str, Font_11x18, White);
 8007d5a:	4a79      	ldr	r2, [pc, #484]	; (8007f40 <Display_info+0x260>)
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	ca06      	ldmia	r2, {r1, r2}
 8007d60:	487b      	ldr	r0, [pc, #492]	; (8007f50 <Display_info+0x270>)
 8007d62:	f000 fc39 	bl	80085d8 <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c2);
 8007d66:	4874      	ldr	r0, [pc, #464]	; (8007f38 <Display_info+0x258>)
 8007d68:	f000 fb24 	bl	80083b4 <ssd1306_UpdateScreen>
			info = false;
 8007d6c:	4b70      	ldr	r3, [pc, #448]	; (8007f30 <Display_info+0x250>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
		}
	}
	if(LEFT_NUM_DOWN)
 8007d72:	4b78      	ldr	r3, [pc, #480]	; (8007f54 <Display_info+0x274>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8087 	beq.w	8007e8a <Display_info+0x1aa>
	{
	  	if(Current >= 1 && !display_Sleep)
 8007d7c:	4b72      	ldr	r3, [pc, #456]	; (8007f48 <Display_info+0x268>)
 8007d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	4b74      	ldr	r3, [pc, #464]	; (8007f58 <Display_info+0x278>)
 8007d88:	f7f8 fe36 	bl	80009f8 <__aeabi_dcmpge>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d06f      	beq.n	8007e72 <Display_info+0x192>
 8007d92:	4b6a      	ldr	r3, [pc, #424]	; (8007f3c <Display_info+0x25c>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	f083 0301 	eor.w	r3, r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d068      	beq.n	8007e72 <Display_info+0x192>
	  	{
		  	if(Current >= 10 && Current < 11)
 8007da0:	4b69      	ldr	r3, [pc, #420]	; (8007f48 <Display_info+0x268>)
 8007da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	4b6c      	ldr	r3, [pc, #432]	; (8007f5c <Display_info+0x27c>)
 8007dac:	f7f8 fe24 	bl	80009f8 <__aeabi_dcmpge>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d039      	beq.n	8007e2a <Display_info+0x14a>
 8007db6:	4b64      	ldr	r3, [pc, #400]	; (8007f48 <Display_info+0x268>)
 8007db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	4b67      	ldr	r3, [pc, #412]	; (8007f60 <Display_info+0x280>)
 8007dc2:	f7f8 fe05 	bl	80009d0 <__aeabi_dcmplt>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d02e      	beq.n	8007e2a <Display_info+0x14a>
		  	{
		  		ssd1306_SetCursor(60, 23);
 8007dcc:	2117      	movs	r1, #23
 8007dce:	203c      	movs	r0, #60	; 0x3c
 8007dd0:	f000 fc28 	bl	8008624 <ssd1306_SetCursor>
			    ssd1306_WriteString("      ", Font_11x18, White);
 8007dd4:	4a5a      	ldr	r2, [pc, #360]	; (8007f40 <Display_info+0x260>)
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	ca06      	ldmia	r2, {r1, r2}
 8007dda:	4862      	ldr	r0, [pc, #392]	; (8007f64 <Display_info+0x284>)
 8007ddc:	f000 fbfc 	bl	80085d8 <ssd1306_WriteString>
			  	ssd1306_SetCursor(60, 23);
 8007de0:	2117      	movs	r1, #23
 8007de2:	203c      	movs	r0, #60	; 0x3c
 8007de4:	f000 fc1e 	bl	8008624 <ssd1306_SetCursor>
			  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 8007de8:	4b57      	ldr	r3, [pc, #348]	; (8007f48 <Display_info+0x268>)
 8007dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	4b59      	ldr	r3, [pc, #356]	; (8007f58 <Display_info+0x278>)
 8007df4:	f7f8 f9c2 	bl	800017c <__aeabi_dsub>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4952      	ldr	r1, [pc, #328]	; (8007f48 <Display_info+0x268>)
 8007dfe:	e9c1 2300 	strd	r2, r3, [r1]
 8007e02:	4b51      	ldr	r3, [pc, #324]	; (8007f48 <Display_info+0x268>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	e9cd 2300 	strd	r2, r3, [sp]
 8007e0c:	4a4f      	ldr	r2, [pc, #316]	; (8007f4c <Display_info+0x26c>)
 8007e0e:	213f      	movs	r1, #63	; 0x3f
 8007e10:	484f      	ldr	r0, [pc, #316]	; (8007f50 <Display_info+0x270>)
 8007e12:	f005 fa8d 	bl	800d330 <sniprintf>
			  	ssd1306_WriteString(trans_str, Font_11x18, White);
 8007e16:	4a4a      	ldr	r2, [pc, #296]	; (8007f40 <Display_info+0x260>)
 8007e18:	2301      	movs	r3, #1
 8007e1a:	ca06      	ldmia	r2, {r1, r2}
 8007e1c:	484c      	ldr	r0, [pc, #304]	; (8007f50 <Display_info+0x270>)
 8007e1e:	f000 fbdb 	bl	80085d8 <ssd1306_WriteString>
			  	ssd1306_UpdateScreen(&hi2c2);
 8007e22:	4845      	ldr	r0, [pc, #276]	; (8007f38 <Display_info+0x258>)
 8007e24:	f000 fac6 	bl	80083b4 <ssd1306_UpdateScreen>
 8007e28:	e023      	b.n	8007e72 <Display_info+0x192>
		  	}
		  	else
		  	{
			  	ssd1306_SetCursor(60, 23);
 8007e2a:	2117      	movs	r1, #23
 8007e2c:	203c      	movs	r0, #60	; 0x3c
 8007e2e:	f000 fbf9 	bl	8008624 <ssd1306_SetCursor>
			  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 8007e32:	4b45      	ldr	r3, [pc, #276]	; (8007f48 <Display_info+0x268>)
 8007e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	4b46      	ldr	r3, [pc, #280]	; (8007f58 <Display_info+0x278>)
 8007e3e:	f7f8 f99d 	bl	800017c <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4940      	ldr	r1, [pc, #256]	; (8007f48 <Display_info+0x268>)
 8007e48:	e9c1 2300 	strd	r2, r3, [r1]
 8007e4c:	4b3e      	ldr	r3, [pc, #248]	; (8007f48 <Display_info+0x268>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	e9cd 2300 	strd	r2, r3, [sp]
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <Display_info+0x26c>)
 8007e58:	213f      	movs	r1, #63	; 0x3f
 8007e5a:	483d      	ldr	r0, [pc, #244]	; (8007f50 <Display_info+0x270>)
 8007e5c:	f005 fa68 	bl	800d330 <sniprintf>
			  	ssd1306_WriteString(trans_str, Font_11x18, White);
 8007e60:	4a37      	ldr	r2, [pc, #220]	; (8007f40 <Display_info+0x260>)
 8007e62:	2301      	movs	r3, #1
 8007e64:	ca06      	ldmia	r2, {r1, r2}
 8007e66:	483a      	ldr	r0, [pc, #232]	; (8007f50 <Display_info+0x270>)
 8007e68:	f000 fbb6 	bl	80085d8 <ssd1306_WriteString>
			  	ssd1306_UpdateScreen(&hi2c2);
 8007e6c:	4832      	ldr	r0, [pc, #200]	; (8007f38 <Display_info+0x258>)
 8007e6e:	f000 faa1 	bl	80083b4 <ssd1306_UpdateScreen>
		  	}
	  	}
	  	HAL_Delay(time);
 8007e72:	4b3d      	ldr	r3, [pc, #244]	; (8007f68 <Display_info+0x288>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fd5e 	bl	8008938 <HAL_Delay>
	  	What_Time = 0;
 8007e7c:	4b3b      	ldr	r3, [pc, #236]	; (8007f6c <Display_info+0x28c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]
	  	LEFT_NUM_DOWN = false;
 8007e82:	4b34      	ldr	r3, [pc, #208]	; (8007f54 <Display_info+0x274>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	701a      	strb	r2, [r3, #0]
		  	ssd1306_UpdateScreen(&hi2c2);
	  	}
	  	What_Time = 0;
	  	RIGHT_NUM = false;
	}
}
 8007e88:	e10c      	b.n	80080a4 <Display_info+0x3c4>
	else if(LEFT_NUM_UP)
 8007e8a:	4b39      	ldr	r3, [pc, #228]	; (8007f70 <Display_info+0x290>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d072      	beq.n	8007f78 <Display_info+0x298>
	  	HAL_Delay(time);
 8007e92:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <Display_info+0x288>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fd4e 	bl	8008938 <HAL_Delay>
	  	if((GPIOB->IDR & GPIO_PIN_1) == 0)	//Включаем дисплей
 8007e9c:	4b35      	ldr	r3, [pc, #212]	; (8007f74 <Display_info+0x294>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d110      	bne.n	8007eca <Display_info+0x1ea>
		  	HAL_Delay(2000);
 8007ea8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007eac:	f000 fd44 	bl	8008938 <HAL_Delay>
		  	if((GPIOB->IDR & GPIO_PIN_1) == 0)
 8007eb0:	4b30      	ldr	r3, [pc, #192]	; (8007f74 <Display_info+0x294>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d131      	bne.n	8007f20 <Display_info+0x240>
				info = true;
 8007ebc:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <Display_info+0x250>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
				display_Sleep = false;
 8007ec2:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <Display_info+0x25c>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e02a      	b.n	8007f20 <Display_info+0x240>
	  	else if(!display_Sleep)
 8007eca:	4b1c      	ldr	r3, [pc, #112]	; (8007f3c <Display_info+0x25c>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f083 0301 	eor.w	r3, r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d023      	beq.n	8007f20 <Display_info+0x240>
	  		ssd1306_SetCursor(60, 23);
 8007ed8:	2117      	movs	r1, #23
 8007eda:	203c      	movs	r0, #60	; 0x3c
 8007edc:	f000 fba2 	bl	8008624 <ssd1306_SetCursor>
	  		snprintf(trans_str, 63, "%.2fA", Current += 1);
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <Display_info+0x268>)
 8007ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <Display_info+0x278>)
 8007eec:	f7f8 f948 	bl	8000180 <__adddf3>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4914      	ldr	r1, [pc, #80]	; (8007f48 <Display_info+0x268>)
 8007ef6:	e9c1 2300 	strd	r2, r3, [r1]
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <Display_info+0x268>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	e9cd 2300 	strd	r2, r3, [sp]
 8007f04:	4a11      	ldr	r2, [pc, #68]	; (8007f4c <Display_info+0x26c>)
 8007f06:	213f      	movs	r1, #63	; 0x3f
 8007f08:	4811      	ldr	r0, [pc, #68]	; (8007f50 <Display_info+0x270>)
 8007f0a:	f005 fa11 	bl	800d330 <sniprintf>
	  		ssd1306_WriteString(trans_str, Font_11x18, White);
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	; (8007f40 <Display_info+0x260>)
 8007f10:	2301      	movs	r3, #1
 8007f12:	ca06      	ldmia	r2, {r1, r2}
 8007f14:	480e      	ldr	r0, [pc, #56]	; (8007f50 <Display_info+0x270>)
 8007f16:	f000 fb5f 	bl	80085d8 <ssd1306_WriteString>
	  		ssd1306_UpdateScreen(&hi2c2);
 8007f1a:	4807      	ldr	r0, [pc, #28]	; (8007f38 <Display_info+0x258>)
 8007f1c:	f000 fa4a 	bl	80083b4 <ssd1306_UpdateScreen>
	  	What_Time = 0;
 8007f20:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <Display_info+0x28c>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]
	  	LEFT_NUM_UP = false;
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <Display_info+0x290>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
}
 8007f2c:	e0ba      	b.n	80080a4 <Display_info+0x3c4>
 8007f2e:	bf00      	nop
 8007f30:	20000008 	.word	0x20000008
 8007f34:	20000b7c 	.word	0x20000b7c
 8007f38:	20000adc 	.word	0x20000adc
 8007f3c:	200018e8 	.word	0x200018e8
 8007f40:	20000014 	.word	0x20000014
 8007f44:	08010b0c 	.word	0x08010b0c
 8007f48:	20000b80 	.word	0x20000b80
 8007f4c:	08010b14 	.word	0x08010b14
 8007f50:	20000b30 	.word	0x20000b30
 8007f54:	20000b76 	.word	0x20000b76
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	40240000 	.word	0x40240000
 8007f60:	40260000 	.word	0x40260000
 8007f64:	08010b1c 	.word	0x08010b1c
 8007f68:	20000b78 	.word	0x20000b78
 8007f6c:	20000b7a 	.word	0x20000b7a
 8007f70:	20000b75 	.word	0x20000b75
 8007f74:	40010c00 	.word	0x40010c00
	else if(RIGHT_NUM)
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <Display_info+0x3d8>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8091 	beq.w	80080a4 <Display_info+0x3c4>
	  	HAL_Delay(time);
 8007f82:	4b4e      	ldr	r3, [pc, #312]	; (80080bc <Display_info+0x3dc>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fcd6 	bl	8008938 <HAL_Delay>
	  	if((GPIOB->IDR & GPIO_PIN_2) == 0  && !display_Sleep)
 8007f8c:	4b4c      	ldr	r3, [pc, #304]	; (80080c0 <Display_info+0x3e0>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d154      	bne.n	8008042 <Display_info+0x362>
 8007f98:	4b4a      	ldr	r3, [pc, #296]	; (80080c4 <Display_info+0x3e4>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f083 0301 	eor.w	r3, r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d04d      	beq.n	8008042 <Display_info+0x362>
		  	HAL_Delay(2000);
 8007fa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007faa:	f000 fcc5 	bl	8008938 <HAL_Delay>
		  	if((GPIOB->IDR & GPIO_PIN_2) == 0)
 8007fae:	4b44      	ldr	r3, [pc, #272]	; (80080c0 <Display_info+0x3e0>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d16e      	bne.n	8008098 <Display_info+0x3b8>
			  	ssd1306_Fill(Black);
 8007fba:	2000      	movs	r0, #0
 8007fbc:	f000 f9d8 	bl	8008370 <ssd1306_Fill>
			  	ssd1306_UpdateScreen(&hi2c2);
 8007fc0:	4841      	ldr	r0, [pc, #260]	; (80080c8 <Display_info+0x3e8>)
 8007fc2:	f000 f9f7 	bl	80083b4 <ssd1306_UpdateScreen>
			  	reserve_Current = Current * 1.20;	//Уставка по току плюс 20%
 8007fc6:	4b41      	ldr	r3, [pc, #260]	; (80080cc <Display_info+0x3ec>)
 8007fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fcc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8007fd0:	4b3f      	ldr	r3, [pc, #252]	; (80080d0 <Display_info+0x3f0>)
 8007fd2:	f7f8 fa8b 	bl	80004ec <__aeabi_dmul>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	493e      	ldr	r1, [pc, #248]	; (80080d4 <Display_info+0x3f4>)
 8007fdc:	e9c1 2300 	strd	r2, r3, [r1]
			  	SEND_str("-------------------------\n");
 8007fe0:	483d      	ldr	r0, [pc, #244]	; (80080d8 <Display_info+0x3f8>)
 8007fe2:	f7fb f823 	bl	800302c <SEND_str>
			  	SEND_str("| ");
 8007fe6:	483d      	ldr	r0, [pc, #244]	; (80080dc <Display_info+0x3fc>)
 8007fe8:	f7fb f820 	bl	800302c <SEND_str>
			  	 SEND_str("SETPOINT: ");
 8007fec:	483c      	ldr	r0, [pc, #240]	; (80080e0 <Display_info+0x400>)
 8007fee:	f7fb f81d 	bl	800302c <SEND_str>
		    	snprintf(trans_str, 63, "%.2fA", reserve_Current);
 8007ff2:	4b38      	ldr	r3, [pc, #224]	; (80080d4 <Display_info+0x3f4>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8007ffc:	4a39      	ldr	r2, [pc, #228]	; (80080e4 <Display_info+0x404>)
 8007ffe:	213f      	movs	r1, #63	; 0x3f
 8008000:	4839      	ldr	r0, [pc, #228]	; (80080e8 <Display_info+0x408>)
 8008002:	f005 f995 	bl	800d330 <sniprintf>
		    	SEND_str(trans_str);
 8008006:	4838      	ldr	r0, [pc, #224]	; (80080e8 <Display_info+0x408>)
 8008008:	f7fb f810 	bl	800302c <SEND_str>
		    	SEND_str(" |\n");
 800800c:	4837      	ldr	r0, [pc, #220]	; (80080ec <Display_info+0x40c>)
 800800e:	f7fb f80d 	bl	800302c <SEND_str>
		    	SEND_str("-------------------------\n");
 8008012:	4831      	ldr	r0, [pc, #196]	; (80080d8 <Display_info+0x3f8>)
 8008014:	f7fb f80a 	bl	800302c <SEND_str>
			  	ssd1306_SetCursor(42, 23);
 8008018:	2117      	movs	r1, #23
 800801a:	202a      	movs	r0, #42	; 0x2a
 800801c:	f000 fb02 	bl	8008624 <ssd1306_SetCursor>
			  	ssd1306_WriteString("SAVE", Font_11x18, White);
 8008020:	4a33      	ldr	r2, [pc, #204]	; (80080f0 <Display_info+0x410>)
 8008022:	2301      	movs	r3, #1
 8008024:	ca06      	ldmia	r2, {r1, r2}
 8008026:	4833      	ldr	r0, [pc, #204]	; (80080f4 <Display_info+0x414>)
 8008028:	f000 fad6 	bl	80085d8 <ssd1306_WriteString>
			  	ssd1306_UpdateScreen(&hi2c2);
 800802c:	4826      	ldr	r0, [pc, #152]	; (80080c8 <Display_info+0x3e8>)
 800802e:	f000 f9c1 	bl	80083b4 <ssd1306_UpdateScreen>
			  	HAL_Delay(1500);
 8008032:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008036:	f000 fc7f 	bl	8008938 <HAL_Delay>
				info = true;
 800803a:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <Display_info+0x418>)
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
		  	if((GPIOB->IDR & GPIO_PIN_2) == 0)
 8008040:	e02a      	b.n	8008098 <Display_info+0x3b8>
	  	else if(!display_Sleep)
 8008042:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <Display_info+0x3e4>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f083 0301 	eor.w	r3, r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d023      	beq.n	8008098 <Display_info+0x3b8>
		  	ssd1306_SetCursor(60, 23);
 8008050:	2117      	movs	r1, #23
 8008052:	203c      	movs	r0, #60	; 0x3c
 8008054:	f000 fae6 	bl	8008624 <ssd1306_SetCursor>
		  	snprintf(trans_str, 63, "%.2fA", Current += 0.1);
 8008058:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <Display_info+0x3ec>)
 800805a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800805e:	a314      	add	r3, pc, #80	; (adr r3, 80080b0 <Display_info+0x3d0>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 f88c 	bl	8000180 <__adddf3>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4917      	ldr	r1, [pc, #92]	; (80080cc <Display_info+0x3ec>)
 800806e:	e9c1 2300 	strd	r2, r3, [r1]
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <Display_info+0x3ec>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	e9cd 2300 	strd	r2, r3, [sp]
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <Display_info+0x404>)
 800807e:	213f      	movs	r1, #63	; 0x3f
 8008080:	4819      	ldr	r0, [pc, #100]	; (80080e8 <Display_info+0x408>)
 8008082:	f005 f955 	bl	800d330 <sniprintf>
		  	ssd1306_WriteString(trans_str, Font_11x18, White);
 8008086:	4a1a      	ldr	r2, [pc, #104]	; (80080f0 <Display_info+0x410>)
 8008088:	2301      	movs	r3, #1
 800808a:	ca06      	ldmia	r2, {r1, r2}
 800808c:	4816      	ldr	r0, [pc, #88]	; (80080e8 <Display_info+0x408>)
 800808e:	f000 faa3 	bl	80085d8 <ssd1306_WriteString>
		  	ssd1306_UpdateScreen(&hi2c2);
 8008092:	480d      	ldr	r0, [pc, #52]	; (80080c8 <Display_info+0x3e8>)
 8008094:	f000 f98e 	bl	80083b4 <ssd1306_UpdateScreen>
	  	What_Time = 0;
 8008098:	4b18      	ldr	r3, [pc, #96]	; (80080fc <Display_info+0x41c>)
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
	  	RIGHT_NUM = false;
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <Display_info+0x3d8>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	9999999a 	.word	0x9999999a
 80080b4:	3fb99999 	.word	0x3fb99999
 80080b8:	20000b77 	.word	0x20000b77
 80080bc:	20000b78 	.word	0x20000b78
 80080c0:	40010c00 	.word	0x40010c00
 80080c4:	200018e8 	.word	0x200018e8
 80080c8:	20000adc 	.word	0x20000adc
 80080cc:	20000b80 	.word	0x20000b80
 80080d0:	3ff33333 	.word	0x3ff33333
 80080d4:	20000bc8 	.word	0x20000bc8
 80080d8:	08010b24 	.word	0x08010b24
 80080dc:	08010b40 	.word	0x08010b40
 80080e0:	08010b44 	.word	0x08010b44
 80080e4:	08010b14 	.word	0x08010b14
 80080e8:	20000b30 	.word	0x20000b30
 80080ec:	08010b50 	.word	0x08010b50
 80080f0:	20000014 	.word	0x20000014
 80080f4:	08010b54 	.word	0x08010b54
 80080f8:	20000008 	.word	0x20000008
 80080fc:	20000b7a 	.word	0x20000b7a

08008100 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af04      	add	r7, sp, #16
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800810c:	230a      	movs	r3, #10
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	2301      	movs	r3, #1
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	1cfb      	adds	r3, r7, #3
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2301      	movs	r3, #1
 800811a:	2200      	movs	r2, #0
 800811c:	2178      	movs	r1, #120	; 0x78
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fdfe 	bl	8009d20 <HAL_I2C_Mem_Write>
 8008124:	4603      	mov	r3, r0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8008138:	2064      	movs	r0, #100	; 0x64
 800813a:	f000 fbfd 	bl	8008938 <HAL_Delay>
    int status = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8008142:	21ae      	movs	r1, #174	; 0xae
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff ffdb 	bl	8008100 <ssd1306_WriteCommand>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8008154:	2120      	movs	r1, #32
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff ffd2 	bl	8008100 <ssd1306_WriteCommand>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8008166:	2110      	movs	r1, #16
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ffc9 	bl	8008100 <ssd1306_WriteCommand>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008178:	21b0      	movs	r1, #176	; 0xb0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff ffc0 	bl	8008100 <ssd1306_WriteCommand>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800818a:	21c8      	movs	r1, #200	; 0xc8
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ffb7 	bl	8008100 <ssd1306_WriteCommand>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ffae 	bl	8008100 <ssd1306_WriteCommand>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80081ae:	2110      	movs	r1, #16
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff ffa5 	bl	8008100 <ssd1306_WriteCommand>
 80081b6:	4603      	mov	r3, r0
 80081b8:	461a      	mov	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ff9c 	bl	8008100 <ssd1306_WriteCommand>
 80081c8:	4603      	mov	r3, r0
 80081ca:	461a      	mov	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80081d2:	2181      	movs	r1, #129	; 0x81
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff93 	bl	8008100 <ssd1306_WriteCommand>
 80081da:	4603      	mov	r3, r0
 80081dc:	461a      	mov	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80081e4:	21ff      	movs	r1, #255	; 0xff
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff ff8a 	bl	8008100 <ssd1306_WriteCommand>
 80081ec:	4603      	mov	r3, r0
 80081ee:	461a      	mov	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80081f6:	21a1      	movs	r1, #161	; 0xa1
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff81 	bl	8008100 <ssd1306_WriteCommand>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8008208:	21a6      	movs	r1, #166	; 0xa6
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff ff78 	bl	8008100 <ssd1306_WriteCommand>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800821a:	21a8      	movs	r1, #168	; 0xa8
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff ff6f 	bl	8008100 <ssd1306_WriteCommand>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800822c:	213f      	movs	r1, #63	; 0x3f
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ff66 	bl	8008100 <ssd1306_WriteCommand>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800823e:	21a4      	movs	r1, #164	; 0xa4
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ff5d 	bl	8008100 <ssd1306_WriteCommand>
 8008246:	4603      	mov	r3, r0
 8008248:	461a      	mov	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8008250:	21d3      	movs	r1, #211	; 0xd3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff54 	bl	8008100 <ssd1306_WriteCommand>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8008262:	2100      	movs	r1, #0
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ff4b 	bl	8008100 <ssd1306_WriteCommand>
 800826a:	4603      	mov	r3, r0
 800826c:	461a      	mov	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8008274:	21d5      	movs	r1, #213	; 0xd5
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff ff42 	bl	8008100 <ssd1306_WriteCommand>
 800827c:	4603      	mov	r3, r0
 800827e:	461a      	mov	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8008286:	21f0      	movs	r1, #240	; 0xf0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff ff39 	bl	8008100 <ssd1306_WriteCommand>
 800828e:	4603      	mov	r3, r0
 8008290:	461a      	mov	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8008298:	21d9      	movs	r1, #217	; 0xd9
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff ff30 	bl	8008100 <ssd1306_WriteCommand>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80082aa:	2122      	movs	r1, #34	; 0x22
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ff27 	bl	8008100 <ssd1306_WriteCommand>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80082bc:	21da      	movs	r1, #218	; 0xda
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff ff1e 	bl	8008100 <ssd1306_WriteCommand>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 80082ce:	2112      	movs	r1, #18
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff15 	bl	8008100 <ssd1306_WriteCommand>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80082e0:	21db      	movs	r1, #219	; 0xdb
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ff0c 	bl	8008100 <ssd1306_WriteCommand>
 80082e8:	4603      	mov	r3, r0
 80082ea:	461a      	mov	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80082f2:	2120      	movs	r1, #32
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff03 	bl	8008100 <ssd1306_WriteCommand>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8008304:	218d      	movs	r1, #141	; 0x8d
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fefa 	bl	8008100 <ssd1306_WriteCommand>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8008316:	2114      	movs	r1, #20
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff fef1 	bl	8008100 <ssd1306_WriteCommand>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8008328:	21af      	movs	r1, #175	; 0xaf
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff fee8 	bl	8008100 <ssd1306_WriteCommand>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <ssd1306_Init+0x214>
        return 1;
 8008340:	2301      	movs	r3, #1
 8008342:	e00f      	b.n	8008364 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8008344:	2000      	movs	r0, #0
 8008346:	f000 f813 	bl	8008370 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f832 	bl	80083b4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <ssd1306_Init+0x23c>)
 8008352:	2200      	movs	r2, #0
 8008354:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008356:	4b05      	ldr	r3, [pc, #20]	; (800836c <ssd1306_Init+0x23c>)
 8008358:	2200      	movs	r2, #0
 800835a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800835c:	4b03      	ldr	r3, [pc, #12]	; (800836c <ssd1306_Init+0x23c>)
 800835e:	2201      	movs	r2, #1
 8008360:	715a      	strb	r2, [r3, #5]

    return 0;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20001cec 	.word	0x20001cec

08008370 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
 800837e:	e00d      	b.n	800839c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <ssd1306_Fill+0x1a>
 8008386:	2100      	movs	r1, #0
 8008388:	e000      	b.n	800838c <ssd1306_Fill+0x1c>
 800838a:	21ff      	movs	r1, #255	; 0xff
 800838c:	4a08      	ldr	r2, [pc, #32]	; (80083b0 <ssd1306_Fill+0x40>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4413      	add	r3, r2
 8008392:	460a      	mov	r2, r1
 8008394:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a2:	d3ed      	bcc.n	8008380 <ssd1306_Fill+0x10>
    }
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr
 80083b0:	200018ec 	.word	0x200018ec

080083b4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e020      	b.n	8008404 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	3b50      	subs	r3, #80	; 0x50
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fe98 	bl	8008100 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80083d0:	2100      	movs	r1, #0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fe94 	bl	8008100 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80083d8:	2110      	movs	r1, #16
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff fe90 	bl	8008100 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	01db      	lsls	r3, r3, #7
 80083e4:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <ssd1306_UpdateScreen+0x60>)
 80083e6:	4413      	add	r3, r2
 80083e8:	2264      	movs	r2, #100	; 0x64
 80083ea:	9202      	str	r2, [sp, #8]
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	9201      	str	r2, [sp, #4]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	2301      	movs	r3, #1
 80083f4:	2240      	movs	r2, #64	; 0x40
 80083f6:	2178      	movs	r1, #120	; 0x78
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fc91 	bl	8009d20 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	3301      	adds	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b07      	cmp	r3, #7
 8008408:	d9db      	bls.n	80083c2 <ssd1306_UpdateScreen+0xe>
    }
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200018ec 	.word	0x200018ec

08008418 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	71fb      	strb	r3, [r7, #7]
 8008422:	460b      	mov	r3, r1
 8008424:	71bb      	strb	r3, [r7, #6]
 8008426:	4613      	mov	r3, r2
 8008428:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800842a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800842e:	2b00      	cmp	r3, #0
 8008430:	db48      	blt.n	80084c4 <ssd1306_DrawPixel+0xac>
 8008432:	79bb      	ldrb	r3, [r7, #6]
 8008434:	2b3f      	cmp	r3, #63	; 0x3f
 8008436:	d845      	bhi.n	80084c4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8008438:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <ssd1306_DrawPixel+0xb8>)
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8008440:	797b      	ldrb	r3, [r7, #5]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800844e:	797b      	ldrb	r3, [r7, #5]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d11a      	bne.n	800848a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008454:	79fa      	ldrb	r2, [r7, #7]
 8008456:	79bb      	ldrb	r3, [r7, #6]
 8008458:	08db      	lsrs	r3, r3, #3
 800845a:	b2d8      	uxtb	r0, r3
 800845c:	4603      	mov	r3, r0
 800845e:	01db      	lsls	r3, r3, #7
 8008460:	4413      	add	r3, r2
 8008462:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <ssd1306_DrawPixel+0xbc>)
 8008464:	5cd3      	ldrb	r3, [r2, r3]
 8008466:	b25a      	sxtb	r2, r3
 8008468:	79bb      	ldrb	r3, [r7, #6]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	2101      	movs	r1, #1
 8008470:	fa01 f303 	lsl.w	r3, r1, r3
 8008474:	b25b      	sxtb	r3, r3
 8008476:	4313      	orrs	r3, r2
 8008478:	b259      	sxtb	r1, r3
 800847a:	79fa      	ldrb	r2, [r7, #7]
 800847c:	4603      	mov	r3, r0
 800847e:	01db      	lsls	r3, r3, #7
 8008480:	4413      	add	r3, r2
 8008482:	b2c9      	uxtb	r1, r1
 8008484:	4a13      	ldr	r2, [pc, #76]	; (80084d4 <ssd1306_DrawPixel+0xbc>)
 8008486:	54d1      	strb	r1, [r2, r3]
 8008488:	e01d      	b.n	80084c6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800848a:	79fa      	ldrb	r2, [r7, #7]
 800848c:	79bb      	ldrb	r3, [r7, #6]
 800848e:	08db      	lsrs	r3, r3, #3
 8008490:	b2d8      	uxtb	r0, r3
 8008492:	4603      	mov	r3, r0
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	4413      	add	r3, r2
 8008498:	4a0e      	ldr	r2, [pc, #56]	; (80084d4 <ssd1306_DrawPixel+0xbc>)
 800849a:	5cd3      	ldrb	r3, [r2, r3]
 800849c:	b25a      	sxtb	r2, r3
 800849e:	79bb      	ldrb	r3, [r7, #6]
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	2101      	movs	r1, #1
 80084a6:	fa01 f303 	lsl.w	r3, r1, r3
 80084aa:	b25b      	sxtb	r3, r3
 80084ac:	43db      	mvns	r3, r3
 80084ae:	b25b      	sxtb	r3, r3
 80084b0:	4013      	ands	r3, r2
 80084b2:	b259      	sxtb	r1, r3
 80084b4:	79fa      	ldrb	r2, [r7, #7]
 80084b6:	4603      	mov	r3, r0
 80084b8:	01db      	lsls	r3, r3, #7
 80084ba:	4413      	add	r3, r2
 80084bc:	b2c9      	uxtb	r1, r1
 80084be:	4a05      	ldr	r2, [pc, #20]	; (80084d4 <ssd1306_DrawPixel+0xbc>)
 80084c0:	54d1      	strb	r1, [r2, r3]
 80084c2:	e000      	b.n	80084c6 <ssd1306_DrawPixel+0xae>
        return;
 80084c4:	bf00      	nop
    }
}
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20001cec 	.word	0x20001cec
 80084d4:	200018ec 	.word	0x200018ec

080084d8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b089      	sub	sp, #36	; 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	1d38      	adds	r0, r7, #4
 80084e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80084e6:	461a      	mov	r2, r3
 80084e8:	4623      	mov	r3, r4
 80084ea:	73fb      	strb	r3, [r7, #15]
 80084ec:	4613      	mov	r3, r2
 80084ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80084f0:	4b38      	ldr	r3, [pc, #224]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	793b      	ldrb	r3, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	2b7f      	cmp	r3, #127	; 0x7f
 80084fc:	dc06      	bgt.n	800850c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80084fe:	4b35      	ldr	r3, [pc, #212]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	461a      	mov	r2, r3
 8008504:	797b      	ldrb	r3, [r7, #5]
 8008506:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008508:	2b3f      	cmp	r3, #63	; 0x3f
 800850a:	dd01      	ble.n	8008510 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800850c:	2300      	movs	r3, #0
 800850e:	e05d      	b.n	80085cc <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	e04c      	b.n	80085b0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	3b20      	subs	r3, #32
 800851c:	7979      	ldrb	r1, [r7, #5]
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	4619      	mov	r1, r3
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	440b      	add	r3, r1
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e034      	b.n	80085a0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d012      	beq.n	800856c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b2da      	uxtb	r2, r3
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	4413      	add	r3, r2
 8008552:	b2d8      	uxtb	r0, r3
 8008554:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 8008556:	885b      	ldrh	r3, [r3, #2]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4413      	add	r3, r2
 8008560:	b2db      	uxtb	r3, r3
 8008562:	7bba      	ldrb	r2, [r7, #14]
 8008564:	4619      	mov	r1, r3
 8008566:	f7ff ff57 	bl	8008418 <ssd1306_DrawPixel>
 800856a:	e016      	b.n	800859a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800856c:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	4413      	add	r3, r2
 8008578:	b2d8      	uxtb	r0, r3
 800857a:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	4413      	add	r3, r2
 8008586:	b2d9      	uxtb	r1, r3
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	f7ff ff3f 	bl	8008418 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3301      	adds	r3, #1
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	793b      	ldrb	r3, [r7, #4]
 80085a2:	461a      	mov	r2, r3
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d3c5      	bcc.n	8008536 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	797b      	ldrb	r3, [r7, #5]
 80085b2:	461a      	mov	r2, r3
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d3ad      	bcc.n	8008516 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	793b      	ldrb	r3, [r7, #4]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	4413      	add	r3, r2
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	4b03      	ldr	r3, [pc, #12]	; (80085d4 <ssd1306_WriteChar+0xfc>)
 80085c8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3724      	adds	r7, #36	; 0x24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd90      	pop	{r4, r7, pc}
 80085d4:	20001cec 	.word	0x20001cec

080085d8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	1d38      	adds	r0, r7, #4
 80085e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80085e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80085e8:	e012      	b.n	8008610 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7818      	ldrb	r0, [r3, #0]
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	1d3a      	adds	r2, r7, #4
 80085f2:	ca06      	ldmia	r2, {r1, r2}
 80085f4:	f7ff ff70 	bl	80084d8 <ssd1306_WriteChar>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d002      	beq.n	800860a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	e008      	b.n	800861c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e8      	bne.n	80085ea <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781b      	ldrb	r3, [r3, #0]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	460a      	mov	r2, r1
 800862e:	71fb      	strb	r3, [r7, #7]
 8008630:	4613      	mov	r3, r2
 8008632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	b29a      	uxth	r2, r3
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <ssd1306_SetCursor+0x2c>)
 800863a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800863c:	79bb      	ldrb	r3, [r7, #6]
 800863e:	b29a      	uxth	r2, r3
 8008640:	4b03      	ldr	r3, [pc, #12]	; (8008650 <ssd1306_SetCursor+0x2c>)
 8008642:	805a      	strh	r2, [r3, #2]
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20001cec 	.word	0x20001cec
 8008654:	00000000 	.word	0x00000000

08008658 <Conversion_ADC1>:

//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Возвращает преобразованное значение в амперах
double Conversion_ADC1(uint16_t ADC_value)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	80fb      	strh	r3, [r7, #6]
	//The average point is 1605mV
	//Sensitivity 66mV
	//Gain 1.56

	double Amps = 0;
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Voltage = 0;
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.8056640625;
 800867a:	a335      	add	r3, pc, #212	; (adr r3, 8008750 <Conversion_ADC1+0xf8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Voltage = ADC_value * Resolution;
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	4618      	mov	r0, r3
 8008688:	f7f7 fec6 	bl	8000418 <__aeabi_i2d>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008694:	f7f7 ff2a 	bl	80004ec <__aeabi_dmul>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	(Voltage >= 1605) ? (Amps += ((Voltage - 1605)/66)*1.56) : (Amps += ((1605 - Voltage)/66)*1.56);
 80086a0:	a32d      	add	r3, pc, #180	; (adr r3, 8008758 <Conversion_ADC1+0x100>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086aa:	f7f8 f9a5 	bl	80009f8 <__aeabi_dcmpge>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d023      	beq.n	80086fc <Conversion_ADC1+0xa4>
 80086b4:	a328      	add	r3, pc, #160	; (adr r3, 8008758 <Conversion_ADC1+0x100>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086be:	f7f7 fd5d 	bl	800017c <__aeabi_dsub>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <Conversion_ADC1+0x110>)
 80086d0:	f7f8 f836 	bl	8000740 <__aeabi_ddiv>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4610      	mov	r0, r2
 80086da:	4619      	mov	r1, r3
 80086dc:	a320      	add	r3, pc, #128	; (adr r3, 8008760 <Conversion_ADC1+0x108>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 ff03 	bl	80004ec <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086ee:	f7f7 fd47 	bl	8000180 <__adddf3>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80086fa:	e022      	b.n	8008742 <Conversion_ADC1+0xea>
 80086fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008700:	a115      	add	r1, pc, #84	; (adr r1, 8008758 <Conversion_ADC1+0x100>)
 8008702:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008706:	f7f7 fd39 	bl	800017c <__aeabi_dsub>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4610      	mov	r0, r2
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <Conversion_ADC1+0x110>)
 8008718:	f7f8 f812 	bl	8000740 <__aeabi_ddiv>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4610      	mov	r0, r2
 8008722:	4619      	mov	r1, r3
 8008724:	a30e      	add	r3, pc, #56	; (adr r3, 8008760 <Conversion_ADC1+0x108>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fedf 	bl	80004ec <__aeabi_dmul>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008736:	f7f7 fd23 	bl	8000180 <__adddf3>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return Amps;
 8008742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	00000000 	.word	0x00000000
 8008754:	3fe9c800 	.word	0x3fe9c800
 8008758:	00000000 	.word	0x00000000
 800875c:	40991400 	.word	0x40991400
 8008760:	8f5c28f6 	.word	0x8f5c28f6
 8008764:	3ff8f5c2 	.word	0x3ff8f5c2
 8008768:	40508000 	.word	0x40508000

0800876c <Сurrent_Сomparison>:
//Функция сравнения значения тока уставки с действующими значениями тока на фазах
void Сurrent_Сomparison(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
    if(cnt == 10)
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <Сurrent_Сomparison+0xec>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b0a      	cmp	r3, #10
 8008776:	d141      	bne.n	80087fc <Сurrent_Сomparison+0x90>
    {
    	run_Сomparison = true;
 8008778:	4b38      	ldr	r3, [pc, #224]	; (800885c <Сurrent_Сomparison+0xf0>)
 800877a:	2201      	movs	r2, #1
 800877c:	701a      	strb	r2, [r3, #0]

    	Amps[0] = adcValue[0]/10;
 800877e:	4b38      	ldr	r3, [pc, #224]	; (8008860 <Сurrent_Сomparison+0xf4>)
 8008780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	4b36      	ldr	r3, [pc, #216]	; (8008864 <Сurrent_Сomparison+0xf8>)
 800878a:	f7f7 ffd9 	bl	8000740 <__aeabi_ddiv>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4935      	ldr	r1, [pc, #212]	; (8008868 <Сurrent_Сomparison+0xfc>)
 8008794:	e9c1 2300 	strd	r2, r3, [r1]
    	Amps[1] = adcValue[1]/10;
 8008798:	4b31      	ldr	r3, [pc, #196]	; (8008860 <Сurrent_Сomparison+0xf4>)
 800879a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	4b30      	ldr	r3, [pc, #192]	; (8008864 <Сurrent_Сomparison+0xf8>)
 80087a4:	f7f7 ffcc 	bl	8000740 <__aeabi_ddiv>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	492e      	ldr	r1, [pc, #184]	; (8008868 <Сurrent_Сomparison+0xfc>)
 80087ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	Amps[2] = adcValue[2]/10;
 80087b2:	4b2b      	ldr	r3, [pc, #172]	; (8008860 <Сurrent_Сomparison+0xf4>)
 80087b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	4b29      	ldr	r3, [pc, #164]	; (8008864 <Сurrent_Сomparison+0xf8>)
 80087be:	f7f7 ffbf 	bl	8000740 <__aeabi_ddiv>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4928      	ldr	r1, [pc, #160]	; (8008868 <Сurrent_Сomparison+0xfc>)
 80087c8:	e9c1 2304 	strd	r2, r3, [r1, #16]

      	adcValue[0] = 0.0;
 80087cc:	4924      	ldr	r1, [pc, #144]	; (8008860 <Сurrent_Сomparison+0xf4>)
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	f04f 0300 	mov.w	r3, #0
 80087d6:	e9c1 2300 	strd	r2, r3, [r1]
      	adcValue[1] = 0.0;
 80087da:	4921      	ldr	r1, [pc, #132]	; (8008860 <Сurrent_Сomparison+0xf4>)
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      	adcValue[2] = 0.0;
 80087e8:	491d      	ldr	r1, [pc, #116]	; (8008860 <Сurrent_Сomparison+0xf4>)
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
//    	snprintf(trans_str, 63, "%.2fA\n", Amps[0]);
//    	SEND_str(trans_str);

    	cnt = 0;
 80087f6:	4b18      	ldr	r3, [pc, #96]	; (8008858 <Сurrent_Сomparison+0xec>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
    }

    if(run_Сomparison)
 80087fc:	4b17      	ldr	r3, [pc, #92]	; (800885c <Сurrent_Сomparison+0xf0>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d027      	beq.n	8008854 <Сurrent_Сomparison+0xe8>
    	(Amps[0] > reserve_Current || Amps[1] > reserve_Current || Amps[2] > reserve_Current) ? (Stop = true) : (Stop = false);
 8008804:	4b18      	ldr	r3, [pc, #96]	; (8008868 <Сurrent_Сomparison+0xfc>)
 8008806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800880a:	4b18      	ldr	r3, [pc, #96]	; (800886c <Сurrent_Сomparison+0x100>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	f7f8 f8fc 	bl	8000a0c <__aeabi_dcmpgt>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d115      	bne.n	8008846 <Сurrent_Сomparison+0xda>
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <Сurrent_Сomparison+0xfc>)
 800881c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <Сurrent_Сomparison+0x100>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f8 f8f1 	bl	8000a0c <__aeabi_dcmpgt>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <Сurrent_Сomparison+0xda>
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <Сurrent_Сomparison+0xfc>)
 8008832:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008836:	4b0d      	ldr	r3, [pc, #52]	; (800886c <Сurrent_Сomparison+0x100>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f8 f8e6 	bl	8000a0c <__aeabi_dcmpgt>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <Сurrent_Сomparison+0xe2>
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <Сurrent_Сomparison+0x104>)
 8008848:	2201      	movs	r2, #1
 800884a:	701a      	strb	r2, [r3, #0]
}
 800884c:	e002      	b.n	8008854 <Сurrent_Сomparison+0xe8>
    	(Amps[0] > reserve_Current || Amps[1] > reserve_Current || Amps[2] > reserve_Current) ? (Stop = true) : (Stop = false);
 800884e:	4b08      	ldr	r3, [pc, #32]	; (8008870 <Сurrent_Сomparison+0x104>)
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
}
 8008854:	bf00      	nop
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000bd0 	.word	0x20000bd0
 800885c:	20000bd1 	.word	0x20000bd1
 8008860:	20000bb0 	.word	0x20000bb0
 8008864:	40240000 	.word	0x40240000
 8008868:	20000b88 	.word	0x20000b88
 800886c:	20000bc8 	.word	0x20000bc8
 8008870:	20000b70 	.word	0x20000b70

08008874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <HAL_Init+0x28>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a07      	ldr	r2, [pc, #28]	; (800889c <HAL_Init+0x28>)
 800887e:	f043 0310 	orr.w	r3, r3, #16
 8008882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008884:	2003      	movs	r0, #3
 8008886:	f000 fd1f 	bl	80092c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800888a:	200f      	movs	r0, #15
 800888c:	f000 f808 	bl	80088a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008890:	f7fb f846 	bl	8003920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40022000 	.word	0x40022000

080088a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088a8:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <HAL_InitTick+0x54>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <HAL_InitTick+0x58>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fd3b 	bl	800933a <HAL_SYSTICK_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e00e      	b.n	80088ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b0f      	cmp	r3, #15
 80088d2:	d80a      	bhi.n	80088ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088d4:	2200      	movs	r2, #0
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	f000 fcff 	bl	80092de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088e0:	4a06      	ldr	r2, [pc, #24]	; (80088fc <HAL_InitTick+0x5c>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	2000000c 	.word	0x2000000c
 80088f8:	20000020 	.word	0x20000020
 80088fc:	2000001c 	.word	0x2000001c

08008900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_IncTick+0x1c>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <HAL_IncTick+0x20>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4413      	add	r3, r2
 8008910:	4a03      	ldr	r2, [pc, #12]	; (8008920 <HAL_IncTick+0x20>)
 8008912:	6013      	str	r3, [r2, #0]
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	20000020 	.word	0x20000020
 8008920:	20001cf4 	.word	0x20001cf4

08008924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  return uwTick;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <HAL_GetTick+0x10>)
 800892a:	681b      	ldr	r3, [r3, #0]
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr
 8008934:	20001cf4 	.word	0x20001cf4

08008938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008940:	f7ff fff0 	bl	8008924 <HAL_GetTick>
 8008944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d005      	beq.n	800895e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008952:	4b0a      	ldr	r3, [pc, #40]	; (800897c <HAL_Delay+0x44>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800895e:	bf00      	nop
 8008960:	f7ff ffe0 	bl	8008924 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	429a      	cmp	r2, r3
 800896e:	d8f7      	bhi.n	8008960 <HAL_Delay+0x28>
  {
  }
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000020 	.word	0x20000020

08008980 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e0be      	b.n	8008b20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d109      	bne.n	80089c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fa fa78 	bl	8002eb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 faf5 	bl	8008fb4 <ADC_ConversionStop_Disable>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 8099 	bne.w	8008b0e <HAL_ADC_Init+0x18e>
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f040 8095 	bne.w	8008b0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80089ec:	f023 0302 	bic.w	r3, r3, #2
 80089f0:	f043 0202 	orr.w	r2, r3, #2
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008a00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7b1b      	ldrb	r3, [r3, #12]
 8008a06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008a08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a18:	d003      	beq.n	8008a22 <HAL_ADC_Init+0xa2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d102      	bne.n	8008a28 <HAL_ADC_Init+0xa8>
 8008a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a26:	e000      	b.n	8008a2a <HAL_ADC_Init+0xaa>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	7d1b      	ldrb	r3, [r3, #20]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d119      	bne.n	8008a6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7b1b      	ldrb	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	035a      	lsls	r2, r3, #13
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e00b      	b.n	8008a6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f043 0220 	orr.w	r2, r3, #32
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	f043 0201 	orr.w	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	4b28      	ldr	r3, [pc, #160]	; (8008b28 <HAL_ADC_Init+0x1a8>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	68b9      	ldr	r1, [r7, #8]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9c:	d003      	beq.n	8008aa6 <HAL_ADC_Init+0x126>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d104      	bne.n	8008ab0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	051b      	lsls	r3, r3, #20
 8008aae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	4b18      	ldr	r3, [pc, #96]	; (8008b2c <HAL_ADC_Init+0x1ac>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d10b      	bne.n	8008aec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	f043 0201 	orr.w	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008aea:	e018      	b.n	8008b1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	f023 0312 	bic.w	r3, r3, #18
 8008af4:	f043 0210 	orr.w	r2, r3, #16
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f043 0201 	orr.w	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008b0c:	e007      	b.n	8008b1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	f043 0210 	orr.w	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	ffe1f7fd 	.word	0xffe1f7fd
 8008b2c:	ff1f0efe 	.word	0xff1f0efe

08008b30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a64      	ldr	r2, [pc, #400]	; (8008cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <HAL_ADC_Start_DMA+0x24>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a63      	ldr	r2, [pc, #396]	; (8008cdc <HAL_ADC_Start_DMA+0x1ac>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d106      	bne.n	8008b62 <HAL_ADC_Start_DMA+0x32>
 8008b54:	4b60      	ldr	r3, [pc, #384]	; (8008cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80b3 	bne.w	8008cc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_ADC_Start_DMA+0x40>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e0ae      	b.n	8008cce <HAL_ADC_Start_DMA+0x19e>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f9c1 	bl	8008f00 <ADC_Enable>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 809a 	bne.w	8008cbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b92:	f023 0301 	bic.w	r3, r3, #1
 8008b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a4e      	ldr	r2, [pc, #312]	; (8008cdc <HAL_ADC_Start_DMA+0x1ac>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d105      	bne.n	8008bb4 <HAL_ADC_Start_DMA+0x84>
 8008ba8:	4b4b      	ldr	r3, [pc, #300]	; (8008cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d115      	bne.n	8008be0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d026      	beq.n	8008c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008bde:	e01d      	b.n	8008c1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a39      	ldr	r2, [pc, #228]	; (8008cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_ADC_Start_DMA+0xd0>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a38      	ldr	r2, [pc, #224]	; (8008cdc <HAL_ADC_Start_DMA+0x1ac>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10d      	bne.n	8008c1c <HAL_ADC_Start_DMA+0xec>
 8008c00:	4b35      	ldr	r3, [pc, #212]	; (8008cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d007      	beq.n	8008c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008c14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	f023 0206 	bic.w	r2, r3, #6
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c34:	e002      	b.n	8008c3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	4a25      	ldr	r2, [pc, #148]	; (8008ce0 <HAL_ADC_Start_DMA+0x1b0>)
 8008c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	4a24      	ldr	r2, [pc, #144]	; (8008ce4 <HAL_ADC_Start_DMA+0x1b4>)
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	4a23      	ldr	r2, [pc, #140]	; (8008ce8 <HAL_ADC_Start_DMA+0x1b8>)
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0202 	mvn.w	r2, #2
 8008c64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a18      	ldr	r0, [r3, #32]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	334c      	adds	r3, #76	; 0x4c
 8008c80:	4619      	mov	r1, r3
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f000 fbbf 	bl	8009408 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008c94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008c98:	d108      	bne.n	8008cac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008ca8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8008caa:	e00f      	b.n	8008ccc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8008cbc:	e006      	b.n	8008ccc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8008cc6:	e001      	b.n	8008ccc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40012400 	.word	0x40012400
 8008cdc:	40012800 	.word	0x40012800
 8008ce0:	08009037 	.word	0x08009037
 8008ce4:	080090b3 	.word	0x080090b3
 8008ce8:	080090cf 	.word	0x080090cf

08008cec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <HAL_ADC_ConfigChannel+0x20>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e0dc      	b.n	8008eea <HAL_ADC_ConfigChannel+0x1da>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d81c      	bhi.n	8008d7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	3b05      	subs	r3, #5
 8008d52:	221f      	movs	r2, #31
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	4019      	ands	r1, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	3b05      	subs	r3, #5
 8008d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	635a      	str	r2, [r3, #52]	; 0x34
 8008d78:	e03c      	b.n	8008df4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b0c      	cmp	r3, #12
 8008d80:	d81c      	bhi.n	8008dbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	3b23      	subs	r3, #35	; 0x23
 8008d94:	221f      	movs	r2, #31
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43db      	mvns	r3, r3
 8008d9c:	4019      	ands	r1, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	3b23      	subs	r3, #35	; 0x23
 8008dae:	fa00 f203 	lsl.w	r2, r0, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
 8008dba:	e01b      	b.n	8008df4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	3b41      	subs	r3, #65	; 0x41
 8008dce:	221f      	movs	r2, #31
 8008dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	4019      	ands	r1, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	3b41      	subs	r3, #65	; 0x41
 8008de8:	fa00 f203 	lsl.w	r2, r0, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b09      	cmp	r3, #9
 8008dfa:	d91c      	bls.n	8008e36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68d9      	ldr	r1, [r3, #12]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3b1e      	subs	r3, #30
 8008e0e:	2207      	movs	r2, #7
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	43db      	mvns	r3, r3
 8008e16:	4019      	ands	r1, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6898      	ldr	r0, [r3, #8]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	4413      	add	r3, r2
 8008e26:	3b1e      	subs	r3, #30
 8008e28:	fa00 f203 	lsl.w	r2, r0, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	e019      	b.n	8008e6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6919      	ldr	r1, [r3, #16]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	4413      	add	r3, r2
 8008e46:	2207      	movs	r2, #7
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	4019      	ands	r1, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6898      	ldr	r0, [r3, #8]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d003      	beq.n	8008e7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008e76:	2b11      	cmp	r3, #17
 8008e78:	d132      	bne.n	8008ee0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <HAL_ADC_ConfigChannel+0x1e4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d125      	bne.n	8008ed0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d126      	bne.n	8008ee0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008ea0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b10      	cmp	r3, #16
 8008ea8:	d11a      	bne.n	8008ee0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008eaa:	4b13      	ldr	r3, [pc, #76]	; (8008ef8 <HAL_ADC_ConfigChannel+0x1e8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a13      	ldr	r2, [pc, #76]	; (8008efc <HAL_ADC_ConfigChannel+0x1ec>)
 8008eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb4:	0c9a      	lsrs	r2, r3, #18
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008ec0:	e002      	b.n	8008ec8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f9      	bne.n	8008ec2 <HAL_ADC_ConfigChannel+0x1b2>
 8008ece:	e007      	b.n	8008ee0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	f043 0220 	orr.w	r2, r3, #32
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr
 8008ef4:	40012400 	.word	0x40012400
 8008ef8:	2000000c 	.word	0x2000000c
 8008efc:	431bde83 	.word	0x431bde83

08008f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d040      	beq.n	8008fa0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0201 	orr.w	r2, r2, #1
 8008f2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f2e:	4b1f      	ldr	r3, [pc, #124]	; (8008fac <ADC_Enable+0xac>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <ADC_Enable+0xb0>)
 8008f34:	fba2 2303 	umull	r2, r3, r2, r3
 8008f38:	0c9b      	lsrs	r3, r3, #18
 8008f3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008f3c:	e002      	b.n	8008f44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f9      	bne.n	8008f3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008f4a:	f7ff fceb 	bl	8008924 <HAL_GetTick>
 8008f4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008f50:	e01f      	b.n	8008f92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008f52:	f7ff fce7 	bl	8008924 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d918      	bls.n	8008f92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d011      	beq.n	8008f92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	f043 0210 	orr.w	r2, r3, #16
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e007      	b.n	8008fa2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d1d8      	bne.n	8008f52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	2000000c 	.word	0x2000000c
 8008fb0:	431bde83 	.word	0x431bde83

08008fb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d12e      	bne.n	800902c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0201 	bic.w	r2, r2, #1
 8008fdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008fde:	f7ff fca1 	bl	8008924 <HAL_GetTick>
 8008fe2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008fe4:	e01b      	b.n	800901e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008fe6:	f7ff fc9d 	bl	8008924 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d914      	bls.n	800901e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d10d      	bne.n	800901e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	f043 0210 	orr.w	r2, r3, #16
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	f043 0201 	orr.w	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e007      	b.n	800902e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d0dc      	beq.n	8008fe6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009048:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800904c:	2b00      	cmp	r3, #0
 800904e:	d127      	bne.n	80090a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8009066:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800906a:	d115      	bne.n	8009098 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009070:	2b00      	cmp	r3, #0
 8009072:	d111      	bne.n	8009098 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d105      	bne.n	8009098 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	f043 0201 	orr.w	r2, r3, #1
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7fa fb59 	bl	8003750 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800909e:	e004      	b.n	80090aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff fe13 	bl	8008cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f043 0204 	orr.w	r2, r3, #4
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7ff fe02 	bl	8008cfe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <__NVIC_SetPriorityGrouping+0x44>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009120:	4013      	ands	r3, r2
 8009122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800912c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009136:	4a04      	ldr	r2, [pc, #16]	; (8009148 <__NVIC_SetPriorityGrouping+0x44>)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	60d3      	str	r3, [r2, #12]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	e000ed00 	.word	0xe000ed00

0800914c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <__NVIC_GetPriorityGrouping+0x18>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	0a1b      	lsrs	r3, r3, #8
 8009156:	f003 0307 	and.w	r3, r3, #7
}
 800915a:	4618      	mov	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	e000ed00 	.word	0xe000ed00

08009168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	db0b      	blt.n	8009192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	f003 021f 	and.w	r2, r3, #31
 8009180:	4906      	ldr	r1, [pc, #24]	; (800919c <__NVIC_EnableIRQ+0x34>)
 8009182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	2001      	movs	r0, #1
 800918a:	fa00 f202 	lsl.w	r2, r0, r2
 800918e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	bc80      	pop	{r7}
 800919a:	4770      	bx	lr
 800919c:	e000e100 	.word	0xe000e100

080091a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	db0a      	blt.n	80091ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	490c      	ldr	r1, [pc, #48]	; (80091ec <__NVIC_SetPriority+0x4c>)
 80091ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091be:	0112      	lsls	r2, r2, #4
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	440b      	add	r3, r1
 80091c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80091c8:	e00a      	b.n	80091e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	4908      	ldr	r1, [pc, #32]	; (80091f0 <__NVIC_SetPriority+0x50>)
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	3b04      	subs	r3, #4
 80091d8:	0112      	lsls	r2, r2, #4
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	440b      	add	r3, r1
 80091de:	761a      	strb	r2, [r3, #24]
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	e000e100 	.word	0xe000e100
 80091f0:	e000ed00 	.word	0xe000ed00

080091f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b089      	sub	sp, #36	; 0x24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0307 	and.w	r3, r3, #7
 8009206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	f1c3 0307 	rsb	r3, r3, #7
 800920e:	2b04      	cmp	r3, #4
 8009210:	bf28      	it	cs
 8009212:	2304      	movcs	r3, #4
 8009214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	3304      	adds	r3, #4
 800921a:	2b06      	cmp	r3, #6
 800921c:	d902      	bls.n	8009224 <NVIC_EncodePriority+0x30>
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	3b03      	subs	r3, #3
 8009222:	e000      	b.n	8009226 <NVIC_EncodePriority+0x32>
 8009224:	2300      	movs	r3, #0
 8009226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009228:	f04f 32ff 	mov.w	r2, #4294967295
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	fa02 f303 	lsl.w	r3, r2, r3
 8009232:	43da      	mvns	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	401a      	ands	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800923c:	f04f 31ff 	mov.w	r1, #4294967295
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	fa01 f303 	lsl.w	r3, r1, r3
 8009246:	43d9      	mvns	r1, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800924c:	4313      	orrs	r3, r2
         );
}
 800924e:	4618      	mov	r0, r3
 8009250:	3724      	adds	r7, #36	; 0x24
 8009252:	46bd      	mov	sp, r7
 8009254:	bc80      	pop	{r7}
 8009256:	4770      	bx	lr

08009258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800925c:	f3bf 8f4f 	dsb	sy
}
 8009260:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <__NVIC_SystemReset+0x24>)
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800926a:	4904      	ldr	r1, [pc, #16]	; (800927c <__NVIC_SystemReset+0x24>)
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <__NVIC_SystemReset+0x28>)
 800926e:	4313      	orrs	r3, r2
 8009270:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009272:	f3bf 8f4f 	dsb	sy
}
 8009276:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <__NVIC_SystemReset+0x20>
 800927c:	e000ed00 	.word	0xe000ed00
 8009280:	05fa0004 	.word	0x05fa0004

08009284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3b01      	subs	r3, #1
 8009290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009294:	d301      	bcc.n	800929a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009296:	2301      	movs	r3, #1
 8009298:	e00f      	b.n	80092ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800929a:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <SysTick_Config+0x40>)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3b01      	subs	r3, #1
 80092a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092a2:	210f      	movs	r1, #15
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	f7ff ff7a 	bl	80091a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <SysTick_Config+0x40>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092b2:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <SysTick_Config+0x40>)
 80092b4:	2207      	movs	r2, #7
 80092b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	e000e010 	.word	0xe000e010

080092c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ff17 	bl	8009104 <__NVIC_SetPriorityGrouping>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80092de:	b580      	push	{r7, lr}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	4603      	mov	r3, r0
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80092f0:	f7ff ff2c 	bl	800914c <__NVIC_GetPriorityGrouping>
 80092f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f7ff ff7a 	bl	80091f4 <NVIC_EncodePriority>
 8009300:	4602      	mov	r2, r0
 8009302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff ff49 	bl	80091a0 <__NVIC_SetPriority>
}
 800930e:	bf00      	nop
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	4603      	mov	r3, r0
 800931e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff ff1f 	bl	8009168 <__NVIC_EnableIRQ>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009336:	f7ff ff8f 	bl	8009258 <__NVIC_SystemReset>

0800933a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff ff9e 	bl	8009284 <SysTick_Config>
 8009348:	4603      	mov	r3, r0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e043      	b.n	80093f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	4b22      	ldr	r3, [pc, #136]	; (80093fc <HAL_DMA_Init+0xa8>)
 8009372:	4413      	add	r3, r2
 8009374:	4a22      	ldr	r2, [pc, #136]	; (8009400 <HAL_DMA_Init+0xac>)
 8009376:	fba2 2303 	umull	r2, r3, r2, r3
 800937a:	091b      	lsrs	r3, r3, #4
 800937c:	009a      	lsls	r2, r3, #2
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1f      	ldr	r2, [pc, #124]	; (8009404 <HAL_DMA_Init+0xb0>)
 8009386:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800939e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80093a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80093ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80093b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80093c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr
 80093fc:	bffdfff8 	.word	0xbffdfff8
 8009400:	cccccccd 	.word	0xcccccccd
 8009404:	40020000 	.word	0x40020000

08009408 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_DMA_Start_IT+0x20>
 8009424:	2302      	movs	r3, #2
 8009426:	e04a      	b.n	80094be <HAL_DMA_Start_IT+0xb6>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009436:	2b01      	cmp	r3, #1
 8009438:	d13a      	bne.n	80094b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2202      	movs	r2, #2
 800943e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0201 	bic.w	r2, r2, #1
 8009456:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f938 	bl	80096d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d008      	beq.n	800947e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 020e 	orr.w	r2, r2, #14
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	e00f      	b.n	800949e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0204 	bic.w	r2, r2, #4
 800948c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 020a 	orr.w	r2, r2, #10
 800949c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0201 	orr.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e005      	b.n	80094bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
 80094ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	2204      	movs	r2, #4
 80094e6:	409a      	lsls	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4013      	ands	r3, r2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d04f      	beq.n	8009590 <HAL_DMA_IRQHandler+0xc8>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d04a      	beq.n	8009590 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d107      	bne.n	8009518 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 0204 	bic.w	r2, r2, #4
 8009516:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a66      	ldr	r2, [pc, #408]	; (80096b8 <HAL_DMA_IRQHandler+0x1f0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d029      	beq.n	8009576 <HAL_DMA_IRQHandler+0xae>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a65      	ldr	r2, [pc, #404]	; (80096bc <HAL_DMA_IRQHandler+0x1f4>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d022      	beq.n	8009572 <HAL_DMA_IRQHandler+0xaa>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a63      	ldr	r2, [pc, #396]	; (80096c0 <HAL_DMA_IRQHandler+0x1f8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01a      	beq.n	800956c <HAL_DMA_IRQHandler+0xa4>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a62      	ldr	r2, [pc, #392]	; (80096c4 <HAL_DMA_IRQHandler+0x1fc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d012      	beq.n	8009566 <HAL_DMA_IRQHandler+0x9e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a60      	ldr	r2, [pc, #384]	; (80096c8 <HAL_DMA_IRQHandler+0x200>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00a      	beq.n	8009560 <HAL_DMA_IRQHandler+0x98>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a5f      	ldr	r2, [pc, #380]	; (80096cc <HAL_DMA_IRQHandler+0x204>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d102      	bne.n	800955a <HAL_DMA_IRQHandler+0x92>
 8009554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009558:	e00e      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 800955a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800955e:	e00b      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 8009560:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009564:	e008      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 8009566:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800956a:	e005      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 800956c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009570:	e002      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 8009572:	2340      	movs	r3, #64	; 0x40
 8009574:	e000      	b.n	8009578 <HAL_DMA_IRQHandler+0xb0>
 8009576:	2304      	movs	r3, #4
 8009578:	4a55      	ldr	r2, [pc, #340]	; (80096d0 <HAL_DMA_IRQHandler+0x208>)
 800957a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8094 	beq.w	80096ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800958e:	e08e      	b.n	80096ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	2202      	movs	r2, #2
 8009596:	409a      	lsls	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d056      	beq.n	800964e <HAL_DMA_IRQHandler+0x186>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d051      	beq.n	800964e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0320 	and.w	r3, r3, #32
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 020a 	bic.w	r2, r2, #10
 80095c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a38      	ldr	r2, [pc, #224]	; (80096b8 <HAL_DMA_IRQHandler+0x1f0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d029      	beq.n	800962e <HAL_DMA_IRQHandler+0x166>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a37      	ldr	r2, [pc, #220]	; (80096bc <HAL_DMA_IRQHandler+0x1f4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d022      	beq.n	800962a <HAL_DMA_IRQHandler+0x162>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a35      	ldr	r2, [pc, #212]	; (80096c0 <HAL_DMA_IRQHandler+0x1f8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01a      	beq.n	8009624 <HAL_DMA_IRQHandler+0x15c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a34      	ldr	r2, [pc, #208]	; (80096c4 <HAL_DMA_IRQHandler+0x1fc>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d012      	beq.n	800961e <HAL_DMA_IRQHandler+0x156>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a32      	ldr	r2, [pc, #200]	; (80096c8 <HAL_DMA_IRQHandler+0x200>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00a      	beq.n	8009618 <HAL_DMA_IRQHandler+0x150>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a31      	ldr	r2, [pc, #196]	; (80096cc <HAL_DMA_IRQHandler+0x204>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d102      	bne.n	8009612 <HAL_DMA_IRQHandler+0x14a>
 800960c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009610:	e00e      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 8009612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009616:	e00b      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 8009618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800961c:	e008      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 800961e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009622:	e005      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 8009624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009628:	e002      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 800962a:	2320      	movs	r3, #32
 800962c:	e000      	b.n	8009630 <HAL_DMA_IRQHandler+0x168>
 800962e:	2302      	movs	r3, #2
 8009630:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <HAL_DMA_IRQHandler+0x208>)
 8009632:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	2b00      	cmp	r3, #0
 8009642:	d034      	beq.n	80096ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800964c:	e02f      	b.n	80096ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	2208      	movs	r2, #8
 8009654:	409a      	lsls	r2, r3
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4013      	ands	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d028      	beq.n	80096b0 <HAL_DMA_IRQHandler+0x1e8>
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d023      	beq.n	80096b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 020e 	bic.w	r2, r2, #14
 8009676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009680:	2101      	movs	r1, #1
 8009682:	fa01 f202 	lsl.w	r2, r1, r2
 8009686:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
    }
  }
  return;
 80096ae:	bf00      	nop
 80096b0:	bf00      	nop
}
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	40020008 	.word	0x40020008
 80096bc:	4002001c 	.word	0x4002001c
 80096c0:	40020030 	.word	0x40020030
 80096c4:	40020044 	.word	0x40020044
 80096c8:	40020058 	.word	0x40020058
 80096cc:	4002006c 	.word	0x4002006c
 80096d0:	40020000 	.word	0x40020000

080096d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	2101      	movs	r1, #1
 80096ec:	fa01 f202 	lsl.w	r2, r1, r2
 80096f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b10      	cmp	r3, #16
 8009700:	d108      	bne.n	8009714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009712:	e007      	b.n	8009724 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	60da      	str	r2, [r3, #12]
}
 8009724:	bf00      	nop
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr
	...

08009730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009730:	b480      	push	{r7}
 8009732:	b08b      	sub	sp, #44	; 0x2c
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800973a:	2300      	movs	r3, #0
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800973e:	2300      	movs	r3, #0
 8009740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009742:	e169      	b.n	8009a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009744:	2201      	movs	r2, #1
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	4013      	ands	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	429a      	cmp	r2, r3
 800975e:	f040 8158 	bne.w	8009a12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	4a9a      	ldr	r2, [pc, #616]	; (80099d0 <HAL_GPIO_Init+0x2a0>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d05e      	beq.n	800982a <HAL_GPIO_Init+0xfa>
 800976c:	4a98      	ldr	r2, [pc, #608]	; (80099d0 <HAL_GPIO_Init+0x2a0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d875      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 8009772:	4a98      	ldr	r2, [pc, #608]	; (80099d4 <HAL_GPIO_Init+0x2a4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d058      	beq.n	800982a <HAL_GPIO_Init+0xfa>
 8009778:	4a96      	ldr	r2, [pc, #600]	; (80099d4 <HAL_GPIO_Init+0x2a4>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d86f      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 800977e:	4a96      	ldr	r2, [pc, #600]	; (80099d8 <HAL_GPIO_Init+0x2a8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d052      	beq.n	800982a <HAL_GPIO_Init+0xfa>
 8009784:	4a94      	ldr	r2, [pc, #592]	; (80099d8 <HAL_GPIO_Init+0x2a8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d869      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 800978a:	4a94      	ldr	r2, [pc, #592]	; (80099dc <HAL_GPIO_Init+0x2ac>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d04c      	beq.n	800982a <HAL_GPIO_Init+0xfa>
 8009790:	4a92      	ldr	r2, [pc, #584]	; (80099dc <HAL_GPIO_Init+0x2ac>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d863      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 8009796:	4a92      	ldr	r2, [pc, #584]	; (80099e0 <HAL_GPIO_Init+0x2b0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d046      	beq.n	800982a <HAL_GPIO_Init+0xfa>
 800979c:	4a90      	ldr	r2, [pc, #576]	; (80099e0 <HAL_GPIO_Init+0x2b0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d85d      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 80097a2:	2b12      	cmp	r3, #18
 80097a4:	d82a      	bhi.n	80097fc <HAL_GPIO_Init+0xcc>
 80097a6:	2b12      	cmp	r3, #18
 80097a8:	d859      	bhi.n	800985e <HAL_GPIO_Init+0x12e>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <HAL_GPIO_Init+0x80>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	0800982b 	.word	0x0800982b
 80097b4:	08009805 	.word	0x08009805
 80097b8:	08009817 	.word	0x08009817
 80097bc:	08009859 	.word	0x08009859
 80097c0:	0800985f 	.word	0x0800985f
 80097c4:	0800985f 	.word	0x0800985f
 80097c8:	0800985f 	.word	0x0800985f
 80097cc:	0800985f 	.word	0x0800985f
 80097d0:	0800985f 	.word	0x0800985f
 80097d4:	0800985f 	.word	0x0800985f
 80097d8:	0800985f 	.word	0x0800985f
 80097dc:	0800985f 	.word	0x0800985f
 80097e0:	0800985f 	.word	0x0800985f
 80097e4:	0800985f 	.word	0x0800985f
 80097e8:	0800985f 	.word	0x0800985f
 80097ec:	0800985f 	.word	0x0800985f
 80097f0:	0800985f 	.word	0x0800985f
 80097f4:	0800980d 	.word	0x0800980d
 80097f8:	08009821 	.word	0x08009821
 80097fc:	4a79      	ldr	r2, [pc, #484]	; (80099e4 <HAL_GPIO_Init+0x2b4>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d013      	beq.n	800982a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009802:	e02c      	b.n	800985e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	623b      	str	r3, [r7, #32]
          break;
 800980a:	e029      	b.n	8009860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	3304      	adds	r3, #4
 8009812:	623b      	str	r3, [r7, #32]
          break;
 8009814:	e024      	b.n	8009860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	3308      	adds	r3, #8
 800981c:	623b      	str	r3, [r7, #32]
          break;
 800981e:	e01f      	b.n	8009860 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	330c      	adds	r3, #12
 8009826:	623b      	str	r3, [r7, #32]
          break;
 8009828:	e01a      	b.n	8009860 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009832:	2304      	movs	r3, #4
 8009834:	623b      	str	r3, [r7, #32]
          break;
 8009836:	e013      	b.n	8009860 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d105      	bne.n	800984c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009840:	2308      	movs	r3, #8
 8009842:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	611a      	str	r2, [r3, #16]
          break;
 800984a:	e009      	b.n	8009860 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800984c:	2308      	movs	r3, #8
 800984e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	69fa      	ldr	r2, [r7, #28]
 8009854:	615a      	str	r2, [r3, #20]
          break;
 8009856:	e003      	b.n	8009860 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009858:	2300      	movs	r3, #0
 800985a:	623b      	str	r3, [r7, #32]
          break;
 800985c:	e000      	b.n	8009860 <HAL_GPIO_Init+0x130>
          break;
 800985e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2bff      	cmp	r3, #255	; 0xff
 8009864:	d801      	bhi.n	800986a <HAL_GPIO_Init+0x13a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	e001      	b.n	800986e <HAL_GPIO_Init+0x13e>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3304      	adds	r3, #4
 800986e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	2bff      	cmp	r3, #255	; 0xff
 8009874:	d802      	bhi.n	800987c <HAL_GPIO_Init+0x14c>
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	e002      	b.n	8009882 <HAL_GPIO_Init+0x152>
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	3b08      	subs	r3, #8
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	210f      	movs	r1, #15
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	fa01 f303 	lsl.w	r3, r1, r3
 8009890:	43db      	mvns	r3, r3
 8009892:	401a      	ands	r2, r3
 8009894:	6a39      	ldr	r1, [r7, #32]
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	fa01 f303 	lsl.w	r3, r1, r3
 800989c:	431a      	orrs	r2, r3
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80b1 	beq.w	8009a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80098b0:	4b4d      	ldr	r3, [pc, #308]	; (80099e8 <HAL_GPIO_Init+0x2b8>)
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	4a4c      	ldr	r2, [pc, #304]	; (80099e8 <HAL_GPIO_Init+0x2b8>)
 80098b6:	f043 0301 	orr.w	r3, r3, #1
 80098ba:	6193      	str	r3, [r2, #24]
 80098bc:	4b4a      	ldr	r3, [pc, #296]	; (80099e8 <HAL_GPIO_Init+0x2b8>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	60bb      	str	r3, [r7, #8]
 80098c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80098c8:	4a48      	ldr	r2, [pc, #288]	; (80099ec <HAL_GPIO_Init+0x2bc>)
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	3302      	adds	r3, #2
 80098d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	f003 0303 	and.w	r3, r3, #3
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	220f      	movs	r2, #15
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	43db      	mvns	r3, r3
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4013      	ands	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a40      	ldr	r2, [pc, #256]	; (80099f0 <HAL_GPIO_Init+0x2c0>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d013      	beq.n	800991c <HAL_GPIO_Init+0x1ec>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a3f      	ldr	r2, [pc, #252]	; (80099f4 <HAL_GPIO_Init+0x2c4>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00d      	beq.n	8009918 <HAL_GPIO_Init+0x1e8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a3e      	ldr	r2, [pc, #248]	; (80099f8 <HAL_GPIO_Init+0x2c8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d007      	beq.n	8009914 <HAL_GPIO_Init+0x1e4>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a3d      	ldr	r2, [pc, #244]	; (80099fc <HAL_GPIO_Init+0x2cc>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d101      	bne.n	8009910 <HAL_GPIO_Init+0x1e0>
 800990c:	2303      	movs	r3, #3
 800990e:	e006      	b.n	800991e <HAL_GPIO_Init+0x1ee>
 8009910:	2304      	movs	r3, #4
 8009912:	e004      	b.n	800991e <HAL_GPIO_Init+0x1ee>
 8009914:	2302      	movs	r3, #2
 8009916:	e002      	b.n	800991e <HAL_GPIO_Init+0x1ee>
 8009918:	2301      	movs	r3, #1
 800991a:	e000      	b.n	800991e <HAL_GPIO_Init+0x1ee>
 800991c:	2300      	movs	r3, #0
 800991e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009920:	f002 0203 	and.w	r2, r2, #3
 8009924:	0092      	lsls	r2, r2, #2
 8009926:	4093      	lsls	r3, r2
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800992e:	492f      	ldr	r1, [pc, #188]	; (80099ec <HAL_GPIO_Init+0x2bc>)
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	089b      	lsrs	r3, r3, #2
 8009934:	3302      	adds	r3, #2
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d006      	beq.n	8009956 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009948:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	492c      	ldr	r1, [pc, #176]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	4313      	orrs	r3, r2
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	e006      	b.n	8009964 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	43db      	mvns	r3, r3
 800995e:	4928      	ldr	r1, [pc, #160]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009960:	4013      	ands	r3, r2
 8009962:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009970:	4b23      	ldr	r3, [pc, #140]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	4922      	ldr	r1, [pc, #136]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	4313      	orrs	r3, r2
 800997a:	604b      	str	r3, [r1, #4]
 800997c:	e006      	b.n	800998c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800997e:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	43db      	mvns	r3, r3
 8009986:	491e      	ldr	r1, [pc, #120]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 8009988:	4013      	ands	r3, r2
 800998a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d006      	beq.n	80099a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009998:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	4918      	ldr	r1, [pc, #96]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	608b      	str	r3, [r1, #8]
 80099a4:	e006      	b.n	80099b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80099a6:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	43db      	mvns	r3, r3
 80099ae:	4914      	ldr	r1, [pc, #80]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d021      	beq.n	8009a04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80099c0:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	490e      	ldr	r1, [pc, #56]	; (8009a00 <HAL_GPIO_Init+0x2d0>)
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60cb      	str	r3, [r1, #12]
 80099cc:	e021      	b.n	8009a12 <HAL_GPIO_Init+0x2e2>
 80099ce:	bf00      	nop
 80099d0:	10320000 	.word	0x10320000
 80099d4:	10310000 	.word	0x10310000
 80099d8:	10220000 	.word	0x10220000
 80099dc:	10210000 	.word	0x10210000
 80099e0:	10120000 	.word	0x10120000
 80099e4:	10110000 	.word	0x10110000
 80099e8:	40021000 	.word	0x40021000
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40010800 	.word	0x40010800
 80099f4:	40010c00 	.word	0x40010c00
 80099f8:	40011000 	.word	0x40011000
 80099fc:	40011400 	.word	0x40011400
 8009a00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <HAL_GPIO_Init+0x304>)
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	43db      	mvns	r3, r3
 8009a0c:	4909      	ldr	r1, [pc, #36]	; (8009a34 <HAL_GPIO_Init+0x304>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	3301      	adds	r3, #1
 8009a16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f47f ae8e 	bne.w	8009744 <HAL_GPIO_Init+0x14>
  }
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	372c      	adds	r7, #44	; 0x2c
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	40010400 	.word	0x40010400

08009a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	807b      	strh	r3, [r7, #2]
 8009a44:	4613      	mov	r3, r2
 8009a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a48:	787b      	ldrb	r3, [r7, #1]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a4e:	887a      	ldrh	r2, [r7, #2]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009a54:	e003      	b.n	8009a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009a56:	887b      	ldrh	r3, [r7, #2]
 8009a58:	041a      	lsls	r2, r3, #16
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	611a      	str	r2, [r3, #16]
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr

08009a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a74:	695a      	ldr	r2, [r3, #20]
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d006      	beq.n	8009a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a7e:	4a05      	ldr	r2, [pc, #20]	; (8009a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f9 fd84 	bl	8003594 <HAL_GPIO_EXTI_Callback>
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40010400 	.word	0x40010400

08009a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e12b      	b.n	8009d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7f9 fc82 	bl	80033c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2224      	movs	r2, #36	; 0x24
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 0201 	bic.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009afc:	f000 fffa 	bl	800aaf4 <HAL_RCC_GetPCLK1Freq>
 8009b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	4a81      	ldr	r2, [pc, #516]	; (8009d0c <HAL_I2C_Init+0x274>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d807      	bhi.n	8009b1c <HAL_I2C_Init+0x84>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a80      	ldr	r2, [pc, #512]	; (8009d10 <HAL_I2C_Init+0x278>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	bf94      	ite	ls
 8009b14:	2301      	movls	r3, #1
 8009b16:	2300      	movhi	r3, #0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	e006      	b.n	8009b2a <HAL_I2C_Init+0x92>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4a7d      	ldr	r2, [pc, #500]	; (8009d14 <HAL_I2C_Init+0x27c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bf94      	ite	ls
 8009b24:	2301      	movls	r3, #1
 8009b26:	2300      	movhi	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e0e7      	b.n	8009d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4a78      	ldr	r2, [pc, #480]	; (8009d18 <HAL_I2C_Init+0x280>)
 8009b36:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3a:	0c9b      	lsrs	r3, r3, #18
 8009b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4a6a      	ldr	r2, [pc, #424]	; (8009d0c <HAL_I2C_Init+0x274>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d802      	bhi.n	8009b6c <HAL_I2C_Init+0xd4>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	e009      	b.n	8009b80 <HAL_I2C_Init+0xe8>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	4a69      	ldr	r2, [pc, #420]	; (8009d1c <HAL_I2C_Init+0x284>)
 8009b78:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7c:	099b      	lsrs	r3, r3, #6
 8009b7e:	3301      	adds	r3, #1
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009b92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	495c      	ldr	r1, [pc, #368]	; (8009d0c <HAL_I2C_Init+0x274>)
 8009b9c:	428b      	cmp	r3, r1
 8009b9e:	d819      	bhi.n	8009bd4 <HAL_I2C_Init+0x13c>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	1e59      	subs	r1, r3, #1
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009bb4:	400b      	ands	r3, r1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <HAL_I2C_Init+0x138>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1e59      	subs	r1, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bce:	e051      	b.n	8009c74 <HAL_I2C_Init+0x1dc>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	e04f      	b.n	8009c74 <HAL_I2C_Init+0x1dc>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d111      	bne.n	8009c00 <HAL_I2C_Init+0x168>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	1e58      	subs	r0, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6859      	ldr	r1, [r3, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	440b      	add	r3, r1
 8009bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bee:	3301      	adds	r3, #1
 8009bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2301      	moveq	r3, #1
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	e012      	b.n	8009c26 <HAL_I2C_Init+0x18e>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	1e58      	subs	r0, r3, #1
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6859      	ldr	r1, [r3, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	0099      	lsls	r1, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c16:	3301      	adds	r3, #1
 8009c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bf0c      	ite	eq
 8009c20:	2301      	moveq	r3, #1
 8009c22:	2300      	movne	r3, #0
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <HAL_I2C_Init+0x196>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e022      	b.n	8009c74 <HAL_I2C_Init+0x1dc>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10e      	bne.n	8009c54 <HAL_I2C_Init+0x1bc>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	1e58      	subs	r0, r3, #1
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6859      	ldr	r1, [r3, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	440b      	add	r3, r1
 8009c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c48:	3301      	adds	r3, #1
 8009c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c52:	e00f      	b.n	8009c74 <HAL_I2C_Init+0x1dc>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	1e58      	subs	r0, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6859      	ldr	r1, [r3, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	0099      	lsls	r1, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	6809      	ldr	r1, [r1, #0]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69da      	ldr	r2, [r3, #28]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	6911      	ldr	r1, [r2, #16]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	68d2      	ldr	r2, [r2, #12]
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695a      	ldr	r2, [r3, #20]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	000186a0 	.word	0x000186a0
 8009d10:	001e847f 	.word	0x001e847f
 8009d14:	003d08ff 	.word	0x003d08ff
 8009d18:	431bde83 	.word	0x431bde83
 8009d1c:	10624dd3 	.word	0x10624dd3

08009d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	817b      	strh	r3, [r7, #10]
 8009d32:	460b      	mov	r3, r1
 8009d34:	813b      	strh	r3, [r7, #8]
 8009d36:	4613      	mov	r3, r2
 8009d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d3a:	f7fe fdf3 	bl	8008924 <HAL_GetTick>
 8009d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	f040 80d9 	bne.w	8009f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	2319      	movs	r3, #25
 8009d54:	2201      	movs	r2, #1
 8009d56:	496d      	ldr	r1, [pc, #436]	; (8009f0c <HAL_I2C_Mem_Write+0x1ec>)
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f971 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009d64:	2302      	movs	r3, #2
 8009d66:	e0cc      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_I2C_Mem_Write+0x56>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e0c5      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d007      	beq.n	8009d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0201 	orr.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2221      	movs	r2, #33	; 0x21
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2240      	movs	r2, #64	; 0x40
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a3a      	ldr	r2, [r7, #32]
 8009dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4a4d      	ldr	r2, [pc, #308]	; (8009f10 <HAL_I2C_Mem_Write+0x1f0>)
 8009ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009dde:	88f8      	ldrh	r0, [r7, #6]
 8009de0:	893a      	ldrh	r2, [r7, #8]
 8009de2:	8979      	ldrh	r1, [r7, #10]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	4603      	mov	r3, r0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f890 	bl	8009f14 <I2C_RequestMemoryWrite>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d052      	beq.n	8009ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e081      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f9f2 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00d      	beq.n	8009e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d107      	bne.n	8009e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e06b      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d11b      	bne.n	8009ea0 <HAL_I2C_Mem_Write+0x180>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d017      	beq.n	8009ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1aa      	bne.n	8009dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f9de 	bl	800a26e <I2C_WaitOnBTFFlagUntilTimeout>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d107      	bne.n	8009ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e016      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	e000      	b.n	8009f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009f00:	2302      	movs	r3, #2
  }
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	00100002 	.word	0x00100002
 8009f10:	ffff0000 	.word	0xffff0000

08009f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	817b      	strh	r3, [r7, #10]
 8009f26:	460b      	mov	r3, r1
 8009f28:	813b      	strh	r3, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 f878 	bl	800a040 <I2C_WaitOnFlagUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00d      	beq.n	8009f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f64:	d103      	bne.n	8009f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e05f      	b.n	800a032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	6a3a      	ldr	r2, [r7, #32]
 8009f86:	492d      	ldr	r1, [pc, #180]	; (800a03c <I2C_RequestMemoryWrite+0x128>)
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f8b0 	bl	800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e04c      	b.n	800a032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb0:	6a39      	ldr	r1, [r7, #32]
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f91a 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d107      	bne.n	8009fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e02b      	b.n	800a032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fda:	88fb      	ldrh	r3, [r7, #6]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d105      	bne.n	8009fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009fe0:	893b      	ldrh	r3, [r7, #8]
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	611a      	str	r2, [r3, #16]
 8009fea:	e021      	b.n	800a030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009fec:	893b      	ldrh	r3, [r7, #8]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffc:	6a39      	ldr	r1, [r7, #32]
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f000 f8f4 	bl	800a1ec <I2C_WaitOnTXEFlagUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00d      	beq.n	800a026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d107      	bne.n	800a022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e005      	b.n	800a032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	00010002 	.word	0x00010002

0800a040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a050:	e025      	b.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a058:	d021      	beq.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05a:	f7fe fc63 	bl	8008924 <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d302      	bcc.n	800a070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d116      	bne.n	800a09e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	f043 0220 	orr.w	r2, r3, #32
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e023      	b.n	800a0e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d10d      	bne.n	800a0c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	43da      	mvns	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	e00c      	b.n	800a0de <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	43da      	mvns	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf0c      	ite	eq
 800a0d6:	2301      	moveq	r3, #1
 800a0d8:	2300      	movne	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d0b6      	beq.n	800a052 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0fc:	e051      	b.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a10c:	d123      	bne.n	800a156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a11c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a126:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	f043 0204 	orr.w	r2, r3, #4
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e046      	b.n	800a1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d021      	beq.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15e:	f7fe fbe1 	bl	8008924 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d302      	bcc.n	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d116      	bne.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f043 0220 	orr.w	r2, r3, #32
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e020      	b.n	800a1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10c      	bne.n	800a1c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	43da      	mvns	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf14      	ite	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	2300      	moveq	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	e00b      	b.n	800a1de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	43da      	mvns	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf14      	ite	ne
 800a1d8:	2301      	movne	r3, #1
 800a1da:	2300      	moveq	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d18d      	bne.n	800a0fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f8:	e02d      	b.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f000 f878 	bl	800a2f0 <I2C_IsAcknowledgeFailed>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e02d      	b.n	800a266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a210:	d021      	beq.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a212:	f7fe fb87 	bl	8008924 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d302      	bcc.n	800a228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d116      	bne.n	800a256 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2220      	movs	r2, #32
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	f043 0220 	orr.w	r2, r3, #32
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e007      	b.n	800a266 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a260:	2b80      	cmp	r3, #128	; 0x80
 800a262:	d1ca      	bne.n	800a1fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a27a:	e02d      	b.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f837 	bl	800a2f0 <I2C_IsAcknowledgeFailed>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e02d      	b.n	800a2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d021      	beq.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a294:	f7fe fb46 	bl	8008924 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d302      	bcc.n	800a2aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d116      	bne.n	800a2d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	f043 0220 	orr.w	r2, r3, #32
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e007      	b.n	800a2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d1ca      	bne.n	800a27c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a306:	d11b      	bne.n	800a340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	f043 0204 	orr.w	r2, r3, #4
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	bc80      	pop	{r7}
 800a34a:	4770      	bx	lr

0800a34c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e272      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8087 	beq.w	800a47a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a36c:	4b92      	ldr	r3, [pc, #584]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f003 030c 	and.w	r3, r3, #12
 800a374:	2b04      	cmp	r3, #4
 800a376:	d00c      	beq.n	800a392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a378:	4b8f      	ldr	r3, [pc, #572]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f003 030c 	and.w	r3, r3, #12
 800a380:	2b08      	cmp	r3, #8
 800a382:	d112      	bne.n	800a3aa <HAL_RCC_OscConfig+0x5e>
 800a384:	4b8c      	ldr	r3, [pc, #560]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a390:	d10b      	bne.n	800a3aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a392:	4b89      	ldr	r3, [pc, #548]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d06c      	beq.n	800a478 <HAL_RCC_OscConfig+0x12c>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d168      	bne.n	800a478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e24c      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x76>
 800a3b4:	4b80      	ldr	r3, [pc, #512]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a7f      	ldr	r2, [pc, #508]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e02e      	b.n	800a420 <HAL_RCC_OscConfig+0xd4>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10c      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x98>
 800a3ca:	4b7b      	ldr	r3, [pc, #492]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a7a      	ldr	r2, [pc, #488]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	4b78      	ldr	r3, [pc, #480]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a77      	ldr	r2, [pc, #476]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	e01d      	b.n	800a420 <HAL_RCC_OscConfig+0xd4>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3ec:	d10c      	bne.n	800a408 <HAL_RCC_OscConfig+0xbc>
 800a3ee:	4b72      	ldr	r3, [pc, #456]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a71      	ldr	r2, [pc, #452]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3f8:	6013      	str	r3, [r2, #0]
 800a3fa:	4b6f      	ldr	r3, [pc, #444]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a6e      	ldr	r2, [pc, #440]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	e00b      	b.n	800a420 <HAL_RCC_OscConfig+0xd4>
 800a408:	4b6b      	ldr	r3, [pc, #428]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a6a      	ldr	r2, [pc, #424]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a40e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4b68      	ldr	r3, [pc, #416]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a67      	ldr	r2, [pc, #412]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a41a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a41e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d013      	beq.n	800a450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a428:	f7fe fa7c 	bl	8008924 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a430:	f7fe fa78 	bl	8008924 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b64      	cmp	r3, #100	; 0x64
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e200      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a442:	4b5d      	ldr	r3, [pc, #372]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0f0      	beq.n	800a430 <HAL_RCC_OscConfig+0xe4>
 800a44e:	e014      	b.n	800a47a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a450:	f7fe fa68 	bl	8008924 <HAL_GetTick>
 800a454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a458:	f7fe fa64 	bl	8008924 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b64      	cmp	r3, #100	; 0x64
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e1ec      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a46a:	4b53      	ldr	r3, [pc, #332]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f0      	bne.n	800a458 <HAL_RCC_OscConfig+0x10c>
 800a476:	e000      	b.n	800a47a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d063      	beq.n	800a54e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a486:	4b4c      	ldr	r3, [pc, #304]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f003 030c 	and.w	r3, r3, #12
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00b      	beq.n	800a4aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a492:	4b49      	ldr	r3, [pc, #292]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f003 030c 	and.w	r3, r3, #12
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d11c      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x18c>
 800a49e:	4b46      	ldr	r3, [pc, #280]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d116      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4aa:	4b43      	ldr	r3, [pc, #268]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x176>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d001      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e1c0      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4c2:	4b3d      	ldr	r3, [pc, #244]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	4939      	ldr	r1, [pc, #228]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4d6:	e03a      	b.n	800a54e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d020      	beq.n	800a522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4e0:	4b36      	ldr	r3, [pc, #216]	; (800a5bc <HAL_RCC_OscConfig+0x270>)
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4e6:	f7fe fa1d 	bl	8008924 <HAL_GetTick>
 800a4ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4ec:	e008      	b.n	800a500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ee:	f7fe fa19 	bl	8008924 <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d901      	bls.n	800a500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e1a1      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a500:	4b2d      	ldr	r3, [pc, #180]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0f0      	beq.n	800a4ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a50c:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	4927      	ldr	r1, [pc, #156]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	600b      	str	r3, [r1, #0]
 800a520:	e015      	b.n	800a54e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a522:	4b26      	ldr	r3, [pc, #152]	; (800a5bc <HAL_RCC_OscConfig+0x270>)
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a528:	f7fe f9fc 	bl	8008924 <HAL_GetTick>
 800a52c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a52e:	e008      	b.n	800a542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a530:	f7fe f9f8 	bl	8008924 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e180      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a542:	4b1d      	ldr	r3, [pc, #116]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1f0      	bne.n	800a530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03a      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d019      	beq.n	800a596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a562:	4b17      	ldr	r3, [pc, #92]	; (800a5c0 <HAL_RCC_OscConfig+0x274>)
 800a564:	2201      	movs	r2, #1
 800a566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a568:	f7fe f9dc 	bl	8008924 <HAL_GetTick>
 800a56c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a56e:	e008      	b.n	800a582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a570:	f7fe f9d8 	bl	8008924 <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e160      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a582:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <HAL_RCC_OscConfig+0x26c>)
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0f0      	beq.n	800a570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a58e:	2001      	movs	r0, #1
 800a590:	f000 fad8 	bl	800ab44 <RCC_Delay>
 800a594:	e01c      	b.n	800a5d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a596:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <HAL_RCC_OscConfig+0x274>)
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a59c:	f7fe f9c2 	bl	8008924 <HAL_GetTick>
 800a5a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5a2:	e00f      	b.n	800a5c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5a4:	f7fe f9be 	bl	8008924 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d908      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e146      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
 800a5b6:	bf00      	nop
 800a5b8:	40021000 	.word	0x40021000
 800a5bc:	42420000 	.word	0x42420000
 800a5c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5c4:	4b92      	ldr	r3, [pc, #584]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e9      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80a6 	beq.w	800a72a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5e2:	4b8b      	ldr	r3, [pc, #556]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10d      	bne.n	800a60a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5ee:	4b88      	ldr	r3, [pc, #544]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4a87      	ldr	r2, [pc, #540]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a5f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5f8:	61d3      	str	r3, [r2, #28]
 800a5fa:	4b85      	ldr	r3, [pc, #532]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a602:	60bb      	str	r3, [r7, #8]
 800a604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a606:	2301      	movs	r3, #1
 800a608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a60a:	4b82      	ldr	r3, [pc, #520]	; (800a814 <HAL_RCC_OscConfig+0x4c8>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a612:	2b00      	cmp	r3, #0
 800a614:	d118      	bne.n	800a648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a616:	4b7f      	ldr	r3, [pc, #508]	; (800a814 <HAL_RCC_OscConfig+0x4c8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a7e      	ldr	r2, [pc, #504]	; (800a814 <HAL_RCC_OscConfig+0x4c8>)
 800a61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a622:	f7fe f97f 	bl	8008924 <HAL_GetTick>
 800a626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a628:	e008      	b.n	800a63c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a62a:	f7fe f97b 	bl	8008924 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	2b64      	cmp	r3, #100	; 0x64
 800a636:	d901      	bls.n	800a63c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e103      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a63c:	4b75      	ldr	r3, [pc, #468]	; (800a814 <HAL_RCC_OscConfig+0x4c8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0f0      	beq.n	800a62a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d106      	bne.n	800a65e <HAL_RCC_OscConfig+0x312>
 800a650:	4b6f      	ldr	r3, [pc, #444]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	4a6e      	ldr	r2, [pc, #440]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	6213      	str	r3, [r2, #32]
 800a65c:	e02d      	b.n	800a6ba <HAL_RCC_OscConfig+0x36e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10c      	bne.n	800a680 <HAL_RCC_OscConfig+0x334>
 800a666:	4b6a      	ldr	r3, [pc, #424]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	4a69      	ldr	r2, [pc, #420]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a66c:	f023 0301 	bic.w	r3, r3, #1
 800a670:	6213      	str	r3, [r2, #32]
 800a672:	4b67      	ldr	r3, [pc, #412]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	4a66      	ldr	r2, [pc, #408]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a678:	f023 0304 	bic.w	r3, r3, #4
 800a67c:	6213      	str	r3, [r2, #32]
 800a67e:	e01c      	b.n	800a6ba <HAL_RCC_OscConfig+0x36e>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2b05      	cmp	r3, #5
 800a686:	d10c      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x356>
 800a688:	4b61      	ldr	r3, [pc, #388]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	4a60      	ldr	r2, [pc, #384]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a68e:	f043 0304 	orr.w	r3, r3, #4
 800a692:	6213      	str	r3, [r2, #32]
 800a694:	4b5e      	ldr	r3, [pc, #376]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	4a5d      	ldr	r2, [pc, #372]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	6213      	str	r3, [r2, #32]
 800a6a0:	e00b      	b.n	800a6ba <HAL_RCC_OscConfig+0x36e>
 800a6a2:	4b5b      	ldr	r3, [pc, #364]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	4a5a      	ldr	r2, [pc, #360]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a6a8:	f023 0301 	bic.w	r3, r3, #1
 800a6ac:	6213      	str	r3, [r2, #32]
 800a6ae:	4b58      	ldr	r3, [pc, #352]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	4a57      	ldr	r2, [pc, #348]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a6b4:	f023 0304 	bic.w	r3, r3, #4
 800a6b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d015      	beq.n	800a6ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6c2:	f7fe f92f 	bl	8008924 <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6c8:	e00a      	b.n	800a6e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f7fe f92b 	bl	8008924 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e0b1      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6e0:	4b4b      	ldr	r3, [pc, #300]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0ee      	beq.n	800a6ca <HAL_RCC_OscConfig+0x37e>
 800a6ec:	e014      	b.n	800a718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6ee:	f7fe f919 	bl	8008924 <HAL_GetTick>
 800a6f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6f4:	e00a      	b.n	800a70c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6f6:	f7fe f915 	bl	8008924 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	f241 3288 	movw	r2, #5000	; 0x1388
 800a704:	4293      	cmp	r3, r2
 800a706:	d901      	bls.n	800a70c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e09b      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a70c:	4b40      	ldr	r3, [pc, #256]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1ee      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d105      	bne.n	800a72a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a71e:	4b3c      	ldr	r3, [pc, #240]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	4a3b      	ldr	r2, [pc, #236]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 8087 	beq.w	800a842 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a734:	4b36      	ldr	r3, [pc, #216]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f003 030c 	and.w	r3, r3, #12
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d061      	beq.n	800a804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d146      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a748:	4b33      	ldr	r3, [pc, #204]	; (800a818 <HAL_RCC_OscConfig+0x4cc>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a74e:	f7fe f8e9 	bl	8008924 <HAL_GetTick>
 800a752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a754:	e008      	b.n	800a768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a756:	f7fe f8e5 	bl	8008924 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e06d      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a768:	4b29      	ldr	r3, [pc, #164]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1f0      	bne.n	800a756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d108      	bne.n	800a790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	4921      	ldr	r1, [pc, #132]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a790:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a19      	ldr	r1, [r3, #32]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	491b      	ldr	r1, [pc, #108]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7a8:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <HAL_RCC_OscConfig+0x4cc>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ae:	f7fe f8b9 	bl	8008924 <HAL_GetTick>
 800a7b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7b4:	e008      	b.n	800a7c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b6:	f7fe f8b5 	bl	8008924 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d901      	bls.n	800a7c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e03d      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7c8:	4b11      	ldr	r3, [pc, #68]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0f0      	beq.n	800a7b6 <HAL_RCC_OscConfig+0x46a>
 800a7d4:	e035      	b.n	800a842 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d6:	4b10      	ldr	r3, [pc, #64]	; (800a818 <HAL_RCC_OscConfig+0x4cc>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7dc:	f7fe f8a2 	bl	8008924 <HAL_GetTick>
 800a7e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7e2:	e008      	b.n	800a7f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e4:	f7fe f89e 	bl	8008924 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d901      	bls.n	800a7f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e026      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7f6:	4b06      	ldr	r3, [pc, #24]	; (800a810 <HAL_RCC_OscConfig+0x4c4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1f0      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x498>
 800a802:	e01e      	b.n	800a842 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d107      	bne.n	800a81c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e019      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
 800a810:	40021000 	.word	0x40021000
 800a814:	40007000 	.word	0x40007000
 800a818:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a81c:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <HAL_RCC_OscConfig+0x500>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a1b      	ldr	r3, [r3, #32]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d106      	bne.n	800a83e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d001      	beq.n	800a842 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40021000 	.word	0x40021000

0800a850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e0d0      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a864:	4b6a      	ldr	r3, [pc, #424]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d910      	bls.n	800a894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a872:	4b67      	ldr	r3, [pc, #412]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 0207 	bic.w	r2, r3, #7
 800a87a:	4965      	ldr	r1, [pc, #404]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a882:	4b63      	ldr	r3, [pc, #396]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d001      	beq.n	800a894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e0b8      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0302 	and.w	r3, r3, #2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d020      	beq.n	800a8e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8ac:	4b59      	ldr	r3, [pc, #356]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4a58      	ldr	r2, [pc, #352]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a8b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8c4:	4b53      	ldr	r3, [pc, #332]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4a52      	ldr	r2, [pc, #328]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a8ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8d0:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	494d      	ldr	r1, [pc, #308]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d040      	beq.n	800a970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d107      	bne.n	800a906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8f6:	4b47      	ldr	r3, [pc, #284]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d115      	bne.n	800a92e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e07f      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d107      	bne.n	800a91e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a90e:	4b41      	ldr	r3, [pc, #260]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d109      	bne.n	800a92e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e073      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a91e:	4b3d      	ldr	r3, [pc, #244]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e06b      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a92e:	4b39      	ldr	r3, [pc, #228]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f023 0203 	bic.w	r2, r3, #3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	4936      	ldr	r1, [pc, #216]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a940:	f7fd fff0 	bl	8008924 <HAL_GetTick>
 800a944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a946:	e00a      	b.n	800a95e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a948:	f7fd ffec 	bl	8008924 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	f241 3288 	movw	r2, #5000	; 0x1388
 800a956:	4293      	cmp	r3, r2
 800a958:	d901      	bls.n	800a95e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e053      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a95e:	4b2d      	ldr	r3, [pc, #180]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f003 020c 	and.w	r2, r3, #12
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d1eb      	bne.n	800a948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a970:	4b27      	ldr	r3, [pc, #156]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0307 	and.w	r3, r3, #7
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d210      	bcs.n	800a9a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a97e:	4b24      	ldr	r3, [pc, #144]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f023 0207 	bic.w	r2, r3, #7
 800a986:	4922      	ldr	r1, [pc, #136]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a98e:	4b20      	ldr	r3, [pc, #128]	; (800aa10 <HAL_RCC_ClockConfig+0x1c0>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d001      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e032      	b.n	800aa06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d008      	beq.n	800a9be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9ac:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	4916      	ldr	r1, [pc, #88]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9ca:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	490e      	ldr	r1, [pc, #56]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9de:	f000 f821 	bl	800aa24 <HAL_RCC_GetSysClockFreq>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <HAL_RCC_ClockConfig+0x1c4>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	f003 030f 	and.w	r3, r3, #15
 800a9ee:	490a      	ldr	r1, [pc, #40]	; (800aa18 <HAL_RCC_ClockConfig+0x1c8>)
 800a9f0:	5ccb      	ldrb	r3, [r1, r3]
 800a9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <HAL_RCC_ClockConfig+0x1cc>)
 800a9f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <HAL_RCC_ClockConfig+0x1d0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd ff4e 	bl	80088a0 <HAL_InitTick>

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	40022000 	.word	0x40022000
 800aa14:	40021000 	.word	0x40021000
 800aa18:	08010b74 	.word	0x08010b74
 800aa1c:	2000000c 	.word	0x2000000c
 800aa20:	2000001c 	.word	0x2000001c

0800aa24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa24:	b490      	push	{r4, r7}
 800aa26:	b08a      	sub	sp, #40	; 0x28
 800aa28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800aa2a:	4b29      	ldr	r3, [pc, #164]	; (800aad0 <HAL_RCC_GetSysClockFreq+0xac>)
 800aa2c:	1d3c      	adds	r4, r7, #4
 800aa2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800aa34:	f240 2301 	movw	r3, #513	; 0x201
 800aa38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61fb      	str	r3, [r7, #28]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61bb      	str	r3, [r7, #24]
 800aa42:	2300      	movs	r3, #0
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
 800aa46:	2300      	movs	r3, #0
 800aa48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aa4e:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	f003 030c 	and.w	r3, r3, #12
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d002      	beq.n	800aa64 <HAL_RCC_GetSysClockFreq+0x40>
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d003      	beq.n	800aa6a <HAL_RCC_GetSysClockFreq+0x46>
 800aa62:	e02b      	b.n	800aabc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aa64:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800aa66:	623b      	str	r3, [r7, #32]
      break;
 800aa68:	e02b      	b.n	800aac2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	0c9b      	lsrs	r3, r3, #18
 800aa6e:	f003 030f 	and.w	r3, r3, #15
 800aa72:	3328      	adds	r3, #40	; 0x28
 800aa74:	443b      	add	r3, r7
 800aa76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800aa7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aa86:	4b13      	ldr	r3, [pc, #76]	; (800aad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	0c5b      	lsrs	r3, r3, #17
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	3328      	adds	r3, #40	; 0x28
 800aa92:	443b      	add	r3, r7
 800aa94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800aa98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4a0e      	ldr	r2, [pc, #56]	; (800aad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800aa9e:	fb03 f202 	mul.w	r2, r3, r2
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaaa:	e004      	b.n	800aab6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	4a0b      	ldr	r2, [pc, #44]	; (800aadc <HAL_RCC_GetSysClockFreq+0xb8>)
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	623b      	str	r3, [r7, #32]
      break;
 800aaba:	e002      	b.n	800aac2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800aabe:	623b      	str	r3, [r7, #32]
      break;
 800aac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aac2:	6a3b      	ldr	r3, [r7, #32]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3728      	adds	r7, #40	; 0x28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc90      	pop	{r4, r7}
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	08010b5c 	.word	0x08010b5c
 800aad4:	40021000 	.word	0x40021000
 800aad8:	007a1200 	.word	0x007a1200
 800aadc:	003d0900 	.word	0x003d0900

0800aae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aae4:	4b02      	ldr	r3, [pc, #8]	; (800aaf0 <HAL_RCC_GetHCLKFreq+0x10>)
 800aae6:	681b      	ldr	r3, [r3, #0]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bc80      	pop	{r7}
 800aaee:	4770      	bx	lr
 800aaf0:	2000000c 	.word	0x2000000c

0800aaf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aaf8:	f7ff fff2 	bl	800aae0 <HAL_RCC_GetHCLKFreq>
 800aafc:	4602      	mov	r2, r0
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	0a1b      	lsrs	r3, r3, #8
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	4903      	ldr	r1, [pc, #12]	; (800ab18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab0a:	5ccb      	ldrb	r3, [r1, r3]
 800ab0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	40021000 	.word	0x40021000
 800ab18:	08010b84 	.word	0x08010b84

0800ab1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab20:	f7ff ffde 	bl	800aae0 <HAL_RCC_GetHCLKFreq>
 800ab24:	4602      	mov	r2, r0
 800ab26:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	0adb      	lsrs	r3, r3, #11
 800ab2c:	f003 0307 	and.w	r3, r3, #7
 800ab30:	4903      	ldr	r1, [pc, #12]	; (800ab40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab32:	5ccb      	ldrb	r3, [r1, r3]
 800ab34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	40021000 	.word	0x40021000
 800ab40:	08010b84 	.word	0x08010b84

0800ab44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <RCC_Delay+0x34>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <RCC_Delay+0x38>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	0a5b      	lsrs	r3, r3, #9
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
 800ab5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ab60:	bf00      	nop
  }
  while (Delay --);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	60fa      	str	r2, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1f9      	bne.n	800ab60 <RCC_Delay+0x1c>
}
 800ab6c:	bf00      	nop
 800ab6e:	bf00      	nop
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr
 800ab78:	2000000c 	.word	0x2000000c
 800ab7c:	10624dd3 	.word	0x10624dd3

0800ab80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d07d      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aba0:	4b4f      	ldr	r3, [pc, #316]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abac:	4b4c      	ldr	r3, [pc, #304]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	4a4b      	ldr	r2, [pc, #300]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb6:	61d3      	str	r3, [r2, #28]
 800abb8:	4b49      	ldr	r3, [pc, #292]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abc0:	60bb      	str	r3, [r7, #8]
 800abc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800abc4:	2301      	movs	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abc8:	4b46      	ldr	r3, [pc, #280]	; (800ace4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d118      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abd4:	4b43      	ldr	r3, [pc, #268]	; (800ace4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a42      	ldr	r2, [pc, #264]	; (800ace4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800abda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abe0:	f7fd fea0 	bl	8008924 <HAL_GetTick>
 800abe4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abe6:	e008      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abe8:	f7fd fe9c 	bl	8008924 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b64      	cmp	r3, #100	; 0x64
 800abf4:	d901      	bls.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e06d      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abfa:	4b3a      	ldr	r3, [pc, #232]	; (800ace4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0f0      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ac06:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d02e      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d027      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac24:	4b2e      	ldr	r3, [pc, #184]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac2e:	4b2e      	ldr	r3, [pc, #184]	; (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ac30:	2201      	movs	r2, #1
 800ac32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac34:	4b2c      	ldr	r3, [pc, #176]	; (800ace8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ac3a:	4a29      	ldr	r2, [pc, #164]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d014      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac4a:	f7fd fe6b 	bl	8008924 <HAL_GetTick>
 800ac4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac50:	e00a      	b.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac52:	f7fd fe67 	bl	8008924 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d901      	bls.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e036      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac68:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0ee      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac74:	4b1a      	ldr	r3, [pc, #104]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4917      	ldr	r1, [pc, #92]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d105      	bne.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac8c:	4b14      	ldr	r3, [pc, #80]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d008      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aca4:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	490b      	ldr	r1, [pc, #44]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0310 	and.w	r3, r3, #16
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d008      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acc2:	4b07      	ldr	r3, [pc, #28]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	4904      	ldr	r1, [pc, #16]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	40021000 	.word	0x40021000
 800ace4:	40007000 	.word	0x40007000
 800ace8:	42420440 	.word	0x42420440

0800acec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e076      	b.n	800adec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d108      	bne.n	800ad18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad0e:	d009      	beq.n	800ad24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	61da      	str	r2, [r3, #28]
 800ad16:	e005      	b.n	800ad24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7f8 fda4 	bl	800388c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad76:	431a      	orrs	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad94:	431a      	orrs	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada8:	ea42 0103 	orr.w	r1, r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	0c1a      	lsrs	r2, r3, #16
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f002 0204 	and.w	r2, r2, #4
 800adca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69da      	ldr	r2, [r3, #28]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08c      	sub	sp, #48	; 0x30
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae02:	2301      	movs	r3, #1
 800ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_SPI_TransmitReceive+0x26>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e18a      	b.n	800b130 <HAL_SPI_TransmitReceive+0x33c>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae22:	f7fd fd7f 	bl	8008924 <HAL_GetTick>
 800ae26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae38:	887b      	ldrh	r3, [r7, #2]
 800ae3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d00f      	beq.n	800ae64 <HAL_SPI_TransmitReceive+0x70>
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae4a:	d107      	bne.n	800ae5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d103      	bne.n	800ae5c <HAL_SPI_TransmitReceive+0x68>
 800ae54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d003      	beq.n	800ae64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae62:	e15b      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d005      	beq.n	800ae76 <HAL_SPI_TransmitReceive+0x82>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <HAL_SPI_TransmitReceive+0x82>
 800ae70:	887b      	ldrh	r3, [r7, #2]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae7c:	e14e      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d003      	beq.n	800ae92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2205      	movs	r2, #5
 800ae8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	887a      	ldrh	r2, [r7, #2]
 800aea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	887a      	ldrh	r2, [r7, #2]
 800aea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	887a      	ldrh	r2, [r7, #2]
 800aeb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	887a      	ldrh	r2, [r7, #2]
 800aeba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed2:	2b40      	cmp	r3, #64	; 0x40
 800aed4:	d007      	beq.n	800aee6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aeee:	d178      	bne.n	800afe2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <HAL_SPI_TransmitReceive+0x10a>
 800aef8:	8b7b      	ldrh	r3, [r7, #26]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d166      	bne.n	800afcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	881a      	ldrh	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	1c9a      	adds	r2, r3, #2
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af18:	b29b      	uxth	r3, r3
 800af1a:	3b01      	subs	r3, #1
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af22:	e053      	b.n	800afcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d11b      	bne.n	800af6a <HAL_SPI_TransmitReceive+0x176>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d016      	beq.n	800af6a <HAL_SPI_TransmitReceive+0x176>
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d113      	bne.n	800af6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	881a      	ldrh	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	1c9a      	adds	r2, r3, #2
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	3b01      	subs	r3, #1
 800af60:	b29a      	uxth	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b01      	cmp	r3, #1
 800af76:	d119      	bne.n	800afac <HAL_SPI_TransmitReceive+0x1b8>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d014      	beq.n	800afac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	b292      	uxth	r2, r2
 800af8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af94:	1c9a      	adds	r2, r3, #2
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800afa8:	2301      	movs	r3, #1
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800afac:	f7fd fcba 	bl	8008924 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb8:	429a      	cmp	r2, r3
 800afba:	d807      	bhi.n	800afcc <HAL_SPI_TransmitReceive+0x1d8>
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d003      	beq.n	800afcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800afca:	e0a7      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1a6      	bne.n	800af24 <HAL_SPI_TransmitReceive+0x130>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afda:	b29b      	uxth	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1a1      	bne.n	800af24 <HAL_SPI_TransmitReceive+0x130>
 800afe0:	e07c      	b.n	800b0dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <HAL_SPI_TransmitReceive+0x1fc>
 800afea:	8b7b      	ldrh	r3, [r7, #26]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d16b      	bne.n	800b0c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	330c      	adds	r3, #12
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b016:	e057      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	2b02      	cmp	r3, #2
 800b024:	d11c      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x26c>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d017      	beq.n	800b060 <HAL_SPI_TransmitReceive+0x26c>
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	2b01      	cmp	r3, #1
 800b034:	d114      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	330c      	adds	r3, #12
 800b040:	7812      	ldrb	r2, [r2, #0]
 800b042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b052:	b29b      	uxth	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d119      	bne.n	800b0a2 <HAL_SPI_TransmitReceive+0x2ae>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d014      	beq.n	800b0a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68da      	ldr	r2, [r3, #12]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b094:	b29b      	uxth	r3, r3
 800b096:	3b01      	subs	r3, #1
 800b098:	b29a      	uxth	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0a2:	f7fd fc3f 	bl	8008924 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d803      	bhi.n	800b0ba <HAL_SPI_TransmitReceive+0x2c6>
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d102      	bne.n	800b0c0 <HAL_SPI_TransmitReceive+0x2cc>
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d103      	bne.n	800b0c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b0c6:	e029      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1a2      	bne.n	800b018 <HAL_SPI_TransmitReceive+0x224>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d19d      	bne.n	800b018 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f8b1 	bl	800b248 <SPI_EndRxTxTransaction>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b0f8:	e010      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10b      	bne.n	800b11a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	e000      	b.n	800b11c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b11a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b12c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b130:	4618      	mov	r0, r3
 800b132:	3730      	adds	r7, #48	; 0x30
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	603b      	str	r3, [r7, #0]
 800b144:	4613      	mov	r3, r2
 800b146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b148:	f7fd fbec 	bl	8008924 <HAL_GetTick>
 800b14c:	4602      	mov	r2, r0
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4413      	add	r3, r2
 800b156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b158:	f7fd fbe4 	bl	8008924 <HAL_GetTick>
 800b15c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b15e:	4b39      	ldr	r3, [pc, #228]	; (800b244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	015b      	lsls	r3, r3, #5
 800b164:	0d1b      	lsrs	r3, r3, #20
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	fb02 f303 	mul.w	r3, r2, r3
 800b16c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b16e:	e054      	b.n	800b21a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b176:	d050      	beq.n	800b21a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b178:	f7fd fbd4 	bl	8008924 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	69fa      	ldr	r2, [r7, #28]
 800b184:	429a      	cmp	r2, r3
 800b186:	d902      	bls.n	800b18e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d13d      	bne.n	800b20a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b19c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1a6:	d111      	bne.n	800b1cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1b0:	d004      	beq.n	800b1bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ba:	d107      	bne.n	800b1cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d4:	d10f      	bne.n	800b1f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e017      	b.n	800b23a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b210:	2300      	movs	r3, #0
 800b212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	3b01      	subs	r3, #1
 800b218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	689a      	ldr	r2, [r3, #8]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	4013      	ands	r3, r2
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	429a      	cmp	r2, r3
 800b228:	bf0c      	ite	eq
 800b22a:	2301      	moveq	r3, #1
 800b22c:	2300      	movne	r3, #0
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	461a      	mov	r2, r3
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	429a      	cmp	r2, r3
 800b236:	d19b      	bne.n	800b170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3720      	adds	r7, #32
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	2000000c 	.word	0x2000000c

0800b248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2200      	movs	r2, #0
 800b25c:	2180      	movs	r1, #128	; 0x80
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff ff6a 	bl	800b138 <SPI_WaitFlagStateUntilTimeout>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f043 0220 	orr.w	r2, r3, #32
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e000      	b.n	800b27c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e041      	b.n	800b31a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7f8 ff3c 	bl	8004128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f000 fcfc 	bl	800bcc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e041      	b.n	800b3b8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f839 	bl	800b3c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2202      	movs	r2, #2
 800b352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f000 fcad 	bl	800bcc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d109      	bne.n	800b3f8 <HAL_TIM_OC_Start+0x24>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	bf14      	ite	ne
 800b3f0:	2301      	movne	r3, #1
 800b3f2:	2300      	moveq	r3, #0
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	e022      	b.n	800b43e <HAL_TIM_OC_Start+0x6a>
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d109      	bne.n	800b412 <HAL_TIM_OC_Start+0x3e>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b01      	cmp	r3, #1
 800b408:	bf14      	ite	ne
 800b40a:	2301      	movne	r3, #1
 800b40c:	2300      	moveq	r3, #0
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	e015      	b.n	800b43e <HAL_TIM_OC_Start+0x6a>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b08      	cmp	r3, #8
 800b416:	d109      	bne.n	800b42c <HAL_TIM_OC_Start+0x58>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b01      	cmp	r3, #1
 800b422:	bf14      	ite	ne
 800b424:	2301      	movne	r3, #1
 800b426:	2300      	moveq	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	e008      	b.n	800b43e <HAL_TIM_OC_Start+0x6a>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b01      	cmp	r3, #1
 800b436:	bf14      	ite	ne
 800b438:	2301      	movne	r3, #1
 800b43a:	2300      	moveq	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e05e      	b.n	800b504 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <HAL_TIM_OC_Start+0x82>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b454:	e013      	b.n	800b47e <HAL_TIM_OC_Start+0xaa>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d104      	bne.n	800b466 <HAL_TIM_OC_Start+0x92>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b464:	e00b      	b.n	800b47e <HAL_TIM_OC_Start+0xaa>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d104      	bne.n	800b476 <HAL_TIM_OC_Start+0xa2>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2202      	movs	r2, #2
 800b470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b474:	e003      	b.n	800b47e <HAL_TIM_OC_Start+0xaa>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2202      	movs	r2, #2
 800b47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2201      	movs	r2, #1
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 ff28 	bl	800c2dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a1e      	ldr	r2, [pc, #120]	; (800b50c <HAL_TIM_OC_Start+0x138>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d107      	bne.n	800b4a6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a18      	ldr	r2, [pc, #96]	; (800b50c <HAL_TIM_OC_Start+0x138>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00e      	beq.n	800b4ce <HAL_TIM_OC_Start+0xfa>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4b8:	d009      	beq.n	800b4ce <HAL_TIM_OC_Start+0xfa>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a14      	ldr	r2, [pc, #80]	; (800b510 <HAL_TIM_OC_Start+0x13c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d004      	beq.n	800b4ce <HAL_TIM_OC_Start+0xfa>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a12      	ldr	r2, [pc, #72]	; (800b514 <HAL_TIM_OC_Start+0x140>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d111      	bne.n	800b4f2 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b06      	cmp	r3, #6
 800b4de:	d010      	beq.n	800b502 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f042 0201 	orr.w	r2, r2, #1
 800b4ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f0:	e007      	b.n	800b502 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f042 0201 	orr.w	r2, r2, #1
 800b500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	40012c00 	.word	0x40012c00
 800b510:	40000400 	.word	0x40000400
 800b514:	40000800 	.word	0x40000800

0800b518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e041      	b.n	800b5ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f839 	bl	800b5b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f000 fbb2 	bl	800bcc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d109      	bne.n	800b5ec <HAL_TIM_PWM_Start+0x24>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	bf14      	ite	ne
 800b5e4:	2301      	movne	r3, #1
 800b5e6:	2300      	moveq	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	e022      	b.n	800b632 <HAL_TIM_PWM_Start+0x6a>
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d109      	bne.n	800b606 <HAL_TIM_PWM_Start+0x3e>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	bf14      	ite	ne
 800b5fe:	2301      	movne	r3, #1
 800b600:	2300      	moveq	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	e015      	b.n	800b632 <HAL_TIM_PWM_Start+0x6a>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d109      	bne.n	800b620 <HAL_TIM_PWM_Start+0x58>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b01      	cmp	r3, #1
 800b616:	bf14      	ite	ne
 800b618:	2301      	movne	r3, #1
 800b61a:	2300      	moveq	r3, #0
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	e008      	b.n	800b632 <HAL_TIM_PWM_Start+0x6a>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b01      	cmp	r3, #1
 800b62a:	bf14      	ite	ne
 800b62c:	2301      	movne	r3, #1
 800b62e:	2300      	moveq	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e05e      	b.n	800b6f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d104      	bne.n	800b64a <HAL_TIM_PWM_Start+0x82>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2202      	movs	r2, #2
 800b644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b648:	e013      	b.n	800b672 <HAL_TIM_PWM_Start+0xaa>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d104      	bne.n	800b65a <HAL_TIM_PWM_Start+0x92>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b658:	e00b      	b.n	800b672 <HAL_TIM_PWM_Start+0xaa>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b08      	cmp	r3, #8
 800b65e:	d104      	bne.n	800b66a <HAL_TIM_PWM_Start+0xa2>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2202      	movs	r2, #2
 800b664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b668:	e003      	b.n	800b672 <HAL_TIM_PWM_Start+0xaa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2202      	movs	r2, #2
 800b66e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2201      	movs	r2, #1
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fe2e 	bl	800c2dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a1e      	ldr	r2, [pc, #120]	; (800b700 <HAL_TIM_PWM_Start+0x138>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d107      	bne.n	800b69a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a18      	ldr	r2, [pc, #96]	; (800b700 <HAL_TIM_PWM_Start+0x138>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00e      	beq.n	800b6c2 <HAL_TIM_PWM_Start+0xfa>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ac:	d009      	beq.n	800b6c2 <HAL_TIM_PWM_Start+0xfa>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a14      	ldr	r2, [pc, #80]	; (800b704 <HAL_TIM_PWM_Start+0x13c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d004      	beq.n	800b6c2 <HAL_TIM_PWM_Start+0xfa>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a12      	ldr	r2, [pc, #72]	; (800b708 <HAL_TIM_PWM_Start+0x140>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d111      	bne.n	800b6e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 0307 	and.w	r3, r3, #7
 800b6cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b06      	cmp	r3, #6
 800b6d2:	d010      	beq.n	800b6f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f042 0201 	orr.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6e4:	e007      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f042 0201 	orr.w	r2, r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	40012c00 	.word	0x40012c00
 800b704:	40000400 	.word	0x40000400
 800b708:	40000800 	.word	0x40000800

0800b70c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2200      	movs	r2, #0
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fddc 	bl	800c2dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a29      	ldr	r2, [pc, #164]	; (800b7d0 <HAL_TIM_PWM_Stop+0xc4>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d117      	bne.n	800b75e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6a1a      	ldr	r2, [r3, #32]
 800b734:	f241 1311 	movw	r3, #4369	; 0x1111
 800b738:	4013      	ands	r3, r2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10f      	bne.n	800b75e <HAL_TIM_PWM_Stop+0x52>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6a1a      	ldr	r2, [r3, #32]
 800b744:	f240 4344 	movw	r3, #1092	; 0x444
 800b748:	4013      	ands	r3, r2
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d107      	bne.n	800b75e <HAL_TIM_PWM_Stop+0x52>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b75c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6a1a      	ldr	r2, [r3, #32]
 800b764:	f241 1311 	movw	r3, #4369	; 0x1111
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10f      	bne.n	800b78e <HAL_TIM_PWM_Stop+0x82>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6a1a      	ldr	r2, [r3, #32]
 800b774:	f240 4344 	movw	r3, #1092	; 0x444
 800b778:	4013      	ands	r3, r2
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d107      	bne.n	800b78e <HAL_TIM_PWM_Stop+0x82>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0201 	bic.w	r2, r2, #1
 800b78c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d104      	bne.n	800b79e <HAL_TIM_PWM_Stop+0x92>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b79c:	e013      	b.n	800b7c6 <HAL_TIM_PWM_Stop+0xba>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	2b04      	cmp	r3, #4
 800b7a2:	d104      	bne.n	800b7ae <HAL_TIM_PWM_Stop+0xa2>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7ac:	e00b      	b.n	800b7c6 <HAL_TIM_PWM_Stop+0xba>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d104      	bne.n	800b7be <HAL_TIM_PWM_Stop+0xb2>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7bc:	e003      	b.n	800b7c6 <HAL_TIM_PWM_Stop+0xba>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	40012c00 	.word	0x40012c00

0800b7d4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e041      	b.n	800b86c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d106      	bne.n	800b802 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f839 	bl	800b874 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2202      	movs	r2, #2
 800b806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3304      	adds	r3, #4
 800b812:	4619      	mov	r1, r3
 800b814:	4610      	mov	r0, r2
 800b816:	f000 fa53 	bl	800bcc0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0208 	bic.w	r2, r2, #8
 800b828:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6819      	ldr	r1, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	bc80      	pop	{r7}
 800b884:	4770      	bx	lr
	...

0800b888 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d101      	bne.n	800b8a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800b89e:	2302      	movs	r3, #2
 800b8a0:	e046      	b.n	800b930 <HAL_TIM_OC_ConfigChannel+0xa8>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b0c      	cmp	r3, #12
 800b8ae:	d839      	bhi.n	800b924 <HAL_TIM_OC_ConfigChannel+0x9c>
 800b8b0:	a201      	add	r2, pc, #4	; (adr r2, 800b8b8 <HAL_TIM_OC_ConfigChannel+0x30>)
 800b8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b6:	bf00      	nop
 800b8b8:	0800b8ed 	.word	0x0800b8ed
 800b8bc:	0800b925 	.word	0x0800b925
 800b8c0:	0800b925 	.word	0x0800b925
 800b8c4:	0800b925 	.word	0x0800b925
 800b8c8:	0800b8fb 	.word	0x0800b8fb
 800b8cc:	0800b925 	.word	0x0800b925
 800b8d0:	0800b925 	.word	0x0800b925
 800b8d4:	0800b925 	.word	0x0800b925
 800b8d8:	0800b909 	.word	0x0800b909
 800b8dc:	0800b925 	.word	0x0800b925
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b925 	.word	0x0800b925
 800b8e8:	0800b917 	.word	0x0800b917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 fa46 	bl	800bd84 <TIM_OC1_SetConfig>
      break;
 800b8f8:	e015      	b.n	800b926 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 faa5 	bl	800be50 <TIM_OC2_SetConfig>
      break;
 800b906:	e00e      	b.n	800b926 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 fb08 	bl	800bf24 <TIM_OC3_SetConfig>
      break;
 800b914:	e007      	b.n	800b926 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 fb6b 	bl	800bff8 <TIM_OC4_SetConfig>
      break;
 800b922:	e000      	b.n	800b926 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800b924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b94e:	2302      	movs	r3, #2
 800b950:	e0ac      	b.n	800baac <HAL_TIM_PWM_ConfigChannel+0x174>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b0c      	cmp	r3, #12
 800b95e:	f200 809f 	bhi.w	800baa0 <HAL_TIM_PWM_ConfigChannel+0x168>
 800b962:	a201      	add	r2, pc, #4	; (adr r2, 800b968 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b968:	0800b99d 	.word	0x0800b99d
 800b96c:	0800baa1 	.word	0x0800baa1
 800b970:	0800baa1 	.word	0x0800baa1
 800b974:	0800baa1 	.word	0x0800baa1
 800b978:	0800b9dd 	.word	0x0800b9dd
 800b97c:	0800baa1 	.word	0x0800baa1
 800b980:	0800baa1 	.word	0x0800baa1
 800b984:	0800baa1 	.word	0x0800baa1
 800b988:	0800ba1f 	.word	0x0800ba1f
 800b98c:	0800baa1 	.word	0x0800baa1
 800b990:	0800baa1 	.word	0x0800baa1
 800b994:	0800baa1 	.word	0x0800baa1
 800b998:	0800ba5f 	.word	0x0800ba5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f9ee 	bl	800bd84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f042 0208 	orr.w	r2, r2, #8
 800b9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f022 0204 	bic.w	r2, r2, #4
 800b9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6999      	ldr	r1, [r3, #24]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	619a      	str	r2, [r3, #24]
      break;
 800b9da:	e062      	b.n	800baa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fa34 	bl	800be50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	699a      	ldr	r2, [r3, #24]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699a      	ldr	r2, [r3, #24]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6999      	ldr	r1, [r3, #24]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	021a      	lsls	r2, r3, #8
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	619a      	str	r2, [r3, #24]
      break;
 800ba1c:	e041      	b.n	800baa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fa7d 	bl	800bf24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f042 0208 	orr.w	r2, r2, #8
 800ba38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0204 	bic.w	r2, r2, #4
 800ba48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69d9      	ldr	r1, [r3, #28]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	691a      	ldr	r2, [r3, #16]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	61da      	str	r2, [r3, #28]
      break;
 800ba5c:	e021      	b.n	800baa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68b9      	ldr	r1, [r7, #8]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fac7 	bl	800bff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	69da      	ldr	r2, [r3, #28]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	69da      	ldr	r2, [r3, #28]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	69d9      	ldr	r1, [r3, #28]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	021a      	lsls	r2, r3, #8
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	61da      	str	r2, [r3, #28]
      break;
 800ba9e:	e000      	b.n	800baa2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800baa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d101      	bne.n	800bacc <HAL_TIM_ConfigClockSource+0x18>
 800bac8:	2302      	movs	r3, #2
 800baca:	e0b3      	b.n	800bc34 <HAL_TIM_ConfigClockSource+0x180>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2202      	movs	r2, #2
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800baea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800baf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb04:	d03e      	beq.n	800bb84 <HAL_TIM_ConfigClockSource+0xd0>
 800bb06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb0a:	f200 8087 	bhi.w	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb12:	f000 8085 	beq.w	800bc20 <HAL_TIM_ConfigClockSource+0x16c>
 800bb16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb1a:	d87f      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb1c:	2b70      	cmp	r3, #112	; 0x70
 800bb1e:	d01a      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0xa2>
 800bb20:	2b70      	cmp	r3, #112	; 0x70
 800bb22:	d87b      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb24:	2b60      	cmp	r3, #96	; 0x60
 800bb26:	d050      	beq.n	800bbca <HAL_TIM_ConfigClockSource+0x116>
 800bb28:	2b60      	cmp	r3, #96	; 0x60
 800bb2a:	d877      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb2c:	2b50      	cmp	r3, #80	; 0x50
 800bb2e:	d03c      	beq.n	800bbaa <HAL_TIM_ConfigClockSource+0xf6>
 800bb30:	2b50      	cmp	r3, #80	; 0x50
 800bb32:	d873      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb34:	2b40      	cmp	r3, #64	; 0x40
 800bb36:	d058      	beq.n	800bbea <HAL_TIM_ConfigClockSource+0x136>
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	d86f      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb3c:	2b30      	cmp	r3, #48	; 0x30
 800bb3e:	d064      	beq.n	800bc0a <HAL_TIM_ConfigClockSource+0x156>
 800bb40:	2b30      	cmp	r3, #48	; 0x30
 800bb42:	d86b      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	d060      	beq.n	800bc0a <HAL_TIM_ConfigClockSource+0x156>
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d867      	bhi.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05c      	beq.n	800bc0a <HAL_TIM_ConfigClockSource+0x156>
 800bb50:	2b10      	cmp	r3, #16
 800bb52:	d05a      	beq.n	800bc0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bb54:	e062      	b.n	800bc1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6899      	ldr	r1, [r3, #8]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f000 fb9a 	bl	800c29e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	609a      	str	r2, [r3, #8]
      break;
 800bb82:	e04e      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	6899      	ldr	r1, [r3, #8]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	f000 fb83 	bl	800c29e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689a      	ldr	r2, [r3, #8]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bba6:	609a      	str	r2, [r3, #8]
      break;
 800bba8:	e03b      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6818      	ldr	r0, [r3, #0]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	6859      	ldr	r1, [r3, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f000 fafa 	bl	800c1b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2150      	movs	r1, #80	; 0x50
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fb51 	bl	800c26a <TIM_ITRx_SetConfig>
      break;
 800bbc8:	e02b      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6818      	ldr	r0, [r3, #0]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	6859      	ldr	r1, [r3, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f000 fb18 	bl	800c20c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2160      	movs	r1, #96	; 0x60
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fb41 	bl	800c26a <TIM_ITRx_SetConfig>
      break;
 800bbe8:	e01b      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	6859      	ldr	r1, [r3, #4]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f000 fada 	bl	800c1b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2140      	movs	r1, #64	; 0x40
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 fb31 	bl	800c26a <TIM_ITRx_SetConfig>
      break;
 800bc08:	e00b      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f000 fb28 	bl	800c26a <TIM_ITRx_SetConfig>
        break;
 800bc1a:	e002      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bc1c:	bf00      	nop
 800bc1e:	e000      	b.n	800bc22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bc20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_TIM_SlaveConfigSynchro+0x18>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e031      	b.n	800bcb8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa14 	bl	800c094 <TIM_SlaveTimer_SetConfig>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e018      	b.n	800bcb8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc94:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bca4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a29      	ldr	r2, [pc, #164]	; (800bd78 <TIM_Base_SetConfig+0xb8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00b      	beq.n	800bcf0 <TIM_Base_SetConfig+0x30>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcde:	d007      	beq.n	800bcf0 <TIM_Base_SetConfig+0x30>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a26      	ldr	r2, [pc, #152]	; (800bd7c <TIM_Base_SetConfig+0xbc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_Base_SetConfig+0x30>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a25      	ldr	r2, [pc, #148]	; (800bd80 <TIM_Base_SetConfig+0xc0>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d108      	bne.n	800bd02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a1c      	ldr	r2, [pc, #112]	; (800bd78 <TIM_Base_SetConfig+0xb8>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00b      	beq.n	800bd22 <TIM_Base_SetConfig+0x62>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd10:	d007      	beq.n	800bd22 <TIM_Base_SetConfig+0x62>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a19      	ldr	r2, [pc, #100]	; (800bd7c <TIM_Base_SetConfig+0xbc>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d003      	beq.n	800bd22 <TIM_Base_SetConfig+0x62>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a18      	ldr	r2, [pc, #96]	; (800bd80 <TIM_Base_SetConfig+0xc0>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d108      	bne.n	800bd34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a07      	ldr	r2, [pc, #28]	; (800bd78 <TIM_Base_SetConfig+0xb8>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d103      	bne.n	800bd68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	691a      	ldr	r2, [r3, #16]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	615a      	str	r2, [r3, #20]
}
 800bd6e:	bf00      	nop
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bc80      	pop	{r7}
 800bd76:	4770      	bx	lr
 800bd78:	40012c00 	.word	0x40012c00
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800

0800bd84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b087      	sub	sp, #28
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	f023 0201 	bic.w	r2, r3, #1
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0303 	bic.w	r3, r3, #3
 800bdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f023 0302 	bic.w	r3, r3, #2
 800bdcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a1c      	ldr	r2, [pc, #112]	; (800be4c <TIM_OC1_SetConfig+0xc8>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d10c      	bne.n	800bdfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f023 0308 	bic.w	r3, r3, #8
 800bde6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f023 0304 	bic.w	r3, r3, #4
 800bdf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a13      	ldr	r2, [pc, #76]	; (800be4c <TIM_OC1_SetConfig+0xc8>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d111      	bne.n	800be26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	4313      	orrs	r3, r2
 800be24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	621a      	str	r2, [r3, #32]
}
 800be40:	bf00      	nop
 800be42:	371c      	adds	r7, #28
 800be44:	46bd      	mov	sp, r7
 800be46:	bc80      	pop	{r7}
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	40012c00 	.word	0x40012c00

0800be50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	f023 0210 	bic.w	r2, r3, #16
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f023 0320 	bic.w	r3, r3, #32
 800be9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a1d      	ldr	r2, [pc, #116]	; (800bf20 <TIM_OC2_SetConfig+0xd0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d10d      	bne.n	800becc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a14      	ldr	r2, [pc, #80]	; (800bf20 <TIM_OC2_SetConfig+0xd0>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d113      	bne.n	800befc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800beda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	4313      	orrs	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	4313      	orrs	r3, r2
 800befa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	621a      	str	r2, [r3, #32]
}
 800bf16:	bf00      	nop
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bc80      	pop	{r7}
 800bf1e:	4770      	bx	lr
 800bf20:	40012c00 	.word	0x40012c00

0800bf24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <TIM_OC3_SetConfig+0xd0>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d10d      	bne.n	800bf9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	021b      	lsls	r3, r3, #8
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a14      	ldr	r2, [pc, #80]	; (800bff4 <TIM_OC3_SetConfig+0xd0>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d113      	bne.n	800bfce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	621a      	str	r2, [r3, #32]
}
 800bfe8:	bf00      	nop
 800bfea:	371c      	adds	r7, #28
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bc80      	pop	{r7}
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	40012c00 	.word	0x40012c00

0800bff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4313      	orrs	r3, r2
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	031b      	lsls	r3, r3, #12
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a0f      	ldr	r2, [pc, #60]	; (800c090 <TIM_OC4_SetConfig+0x98>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d109      	bne.n	800c06c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c05e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	019b      	lsls	r3, r3, #6
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	621a      	str	r2, [r3, #32]
}
 800c086:	bf00      	nop
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bc80      	pop	{r7}
 800c08e:	4770      	bx	lr
 800c090:	40012c00 	.word	0x40012c00

0800c094 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0ac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 0307 	bic.w	r3, r3, #7
 800c0be:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	2b70      	cmp	r3, #112	; 0x70
 800c0d8:	d01a      	beq.n	800c110 <TIM_SlaveTimer_SetConfig+0x7c>
 800c0da:	2b70      	cmp	r3, #112	; 0x70
 800c0dc:	d860      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c0de:	2b60      	cmp	r3, #96	; 0x60
 800c0e0:	d054      	beq.n	800c18c <TIM_SlaveTimer_SetConfig+0xf8>
 800c0e2:	2b60      	cmp	r3, #96	; 0x60
 800c0e4:	d85c      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c0e6:	2b50      	cmp	r3, #80	; 0x50
 800c0e8:	d046      	beq.n	800c178 <TIM_SlaveTimer_SetConfig+0xe4>
 800c0ea:	2b50      	cmp	r3, #80	; 0x50
 800c0ec:	d858      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c0ee:	2b40      	cmp	r3, #64	; 0x40
 800c0f0:	d019      	beq.n	800c126 <TIM_SlaveTimer_SetConfig+0x92>
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d854      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c0f6:	2b30      	cmp	r3, #48	; 0x30
 800c0f8:	d054      	beq.n	800c1a4 <TIM_SlaveTimer_SetConfig+0x110>
 800c0fa:	2b30      	cmp	r3, #48	; 0x30
 800c0fc:	d850      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d050      	beq.n	800c1a4 <TIM_SlaveTimer_SetConfig+0x110>
 800c102:	2b20      	cmp	r3, #32
 800c104:	d84c      	bhi.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d04c      	beq.n	800c1a4 <TIM_SlaveTimer_SetConfig+0x110>
 800c10a:	2b10      	cmp	r3, #16
 800c10c:	d04a      	beq.n	800c1a4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800c10e:	e047      	b.n	800c1a0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	68d9      	ldr	r1, [r3, #12]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	689a      	ldr	r2, [r3, #8]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	f000 f8bd 	bl	800c29e <TIM_ETR_SetConfig>
      break;
 800c124:	e03f      	b.n	800c1a6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d101      	bne.n	800c132 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e03a      	b.n	800c1a8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6a1a      	ldr	r2, [r3, #32]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0201 	bic.w	r2, r2, #1
 800c148:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c158:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	621a      	str	r2, [r3, #32]
      break;
 800c176:	e016      	b.n	800c1a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	6899      	ldr	r1, [r3, #8]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	461a      	mov	r2, r3
 800c186:	f000 f813 	bl	800c1b0 <TIM_TI1_ConfigInputStage>
      break;
 800c18a:	e00c      	b.n	800c1a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6818      	ldr	r0, [r3, #0]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	6899      	ldr	r1, [r3, #8]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	461a      	mov	r2, r3
 800c19a:	f000 f837 	bl	800c20c <TIM_TI2_ConfigInputStage>
      break;
 800c19e:	e002      	b.n	800c1a6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800c1a4:	bf00      	nop
  }
  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	f023 0201 	bic.w	r2, r3, #1
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f023 030a 	bic.w	r3, r3, #10
 800c1ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	621a      	str	r2, [r3, #32]
}
 800c202:	bf00      	nop
 800c204:	371c      	adds	r7, #28
 800c206:	46bd      	mov	sp, r7
 800c208:	bc80      	pop	{r7}
 800c20a:	4770      	bx	lr

0800c20c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	f023 0210 	bic.w	r2, r3, #16
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c236:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	031b      	lsls	r3, r3, #12
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	4313      	orrs	r3, r2
 800c240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	4313      	orrs	r3, r2
 800c252:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	621a      	str	r2, [r3, #32]
}
 800c260:	bf00      	nop
 800c262:	371c      	adds	r7, #28
 800c264:	46bd      	mov	sp, r7
 800c266:	bc80      	pop	{r7}
 800c268:	4770      	bx	lr

0800c26a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b085      	sub	sp, #20
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4313      	orrs	r3, r2
 800c288:	f043 0307 	orr.w	r3, r3, #7
 800c28c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	609a      	str	r2, [r3, #8]
}
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	bc80      	pop	{r7}
 800c29c:	4770      	bx	lr

0800c29e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b087      	sub	sp, #28
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	607a      	str	r2, [r7, #4]
 800c2aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	021a      	lsls	r2, r3, #8
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	609a      	str	r2, [r3, #8]
}
 800c2d2:	bf00      	nop
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bc80      	pop	{r7}
 800c2da:	4770      	bx	lr

0800c2dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f003 031f 	and.w	r3, r3, #31
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1a      	ldr	r2, [r3, #32]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	43db      	mvns	r3, r3
 800c2fe:	401a      	ands	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a1a      	ldr	r2, [r3, #32]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f003 031f 	and.w	r3, r3, #31
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	fa01 f303 	lsl.w	r3, r1, r3
 800c314:	431a      	orrs	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bc80      	pop	{r7}
 800c322:	4770      	bx	lr

0800c324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c334:	2b01      	cmp	r3, #1
 800c336:	d101      	bne.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c338:	2302      	movs	r3, #2
 800c33a:	e046      	b.n	800c3ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2202      	movs	r2, #2
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a16      	ldr	r2, [pc, #88]	; (800c3d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00e      	beq.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c388:	d009      	beq.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a12      	ldr	r2, [pc, #72]	; (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d004      	beq.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a10      	ldr	r2, [pc, #64]	; (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d10c      	bne.n	800c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bc80      	pop	{r7}
 800c3d2:	4770      	bx	lr
 800c3d4:	40012c00 	.word	0x40012c00
 800c3d8:	40000400 	.word	0x40000400
 800c3dc:	40000800 	.word	0x40000800

0800c3e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e03d      	b.n	800c478 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4313      	orrs	r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	4313      	orrs	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	4313      	orrs	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bc80      	pop	{r7}
 800c480:	4770      	bx	lr

0800c482 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e03f      	b.n	800c514 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7f7 fff9 	bl	80044a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2224      	movs	r2, #36	; 0x24
 800c4b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68da      	ldr	r2, [r3, #12]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f904 	bl	800c6d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	695a      	ldr	r2, [r3, #20]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68da      	ldr	r2, [r3, #12]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2220      	movs	r2, #32
 800c506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08a      	sub	sp, #40	; 0x28
 800c520:	af02      	add	r7, sp, #8
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	4613      	mov	r3, r2
 800c52a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b20      	cmp	r3, #32
 800c53a:	d17c      	bne.n	800c636 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <HAL_UART_Transmit+0x2c>
 800c542:	88fb      	ldrh	r3, [r7, #6]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e075      	b.n	800c638 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <HAL_UART_Transmit+0x3e>
 800c556:	2302      	movs	r3, #2
 800c558:	e06e      	b.n	800c638 <HAL_UART_Transmit+0x11c>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2221      	movs	r2, #33	; 0x21
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c570:	f7fc f9d8 	bl	8008924 <HAL_GetTick>
 800c574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	88fa      	ldrh	r2, [r7, #6]
 800c57a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	88fa      	ldrh	r2, [r7, #6]
 800c580:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58a:	d108      	bne.n	800c59e <HAL_UART_Transmit+0x82>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d104      	bne.n	800c59e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c594:	2300      	movs	r3, #0
 800c596:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	61bb      	str	r3, [r7, #24]
 800c59c:	e003      	b.n	800c5a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c5ae:	e02a      	b.n	800c606 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2180      	movs	r1, #128	; 0x80
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 f840 	bl	800c640 <UART_WaitOnFlagUntilTimeout>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e036      	b.n	800c638 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	3302      	adds	r3, #2
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e007      	b.n	800c5f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	781a      	ldrb	r2, [r3, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	3b01      	subs	r3, #1
 800c600:	b29a      	uxth	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1cf      	bne.n	800c5b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2200      	movs	r2, #0
 800c618:	2140      	movs	r1, #64	; 0x40
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 f810 	bl	800c640 <UART_WaitOnFlagUntilTimeout>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e006      	b.n	800c638 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2220      	movs	r2, #32
 800c62e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	e000      	b.n	800c638 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c636:	2302      	movs	r3, #2
  }
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	4613      	mov	r3, r2
 800c64e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c650:	e02c      	b.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c658:	d028      	beq.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d007      	beq.n	800c670 <UART_WaitOnFlagUntilTimeout+0x30>
 800c660:	f7fc f960 	bl	8008924 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d21d      	bcs.n	800c6ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c67e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	695a      	ldr	r2, [r3, #20]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f022 0201 	bic.w	r2, r2, #1
 800c68e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2220      	movs	r2, #32
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2220      	movs	r2, #32
 800c69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e00f      	b.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	bf0c      	ite	eq
 800c6bc:	2301      	moveq	r3, #1
 800c6be:	2300      	movne	r3, #0
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d0c3      	beq.n	800c652 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	689a      	ldr	r2, [r3, #8]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	4313      	orrs	r3, r2
 800c702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c70e:	f023 030c 	bic.w	r3, r3, #12
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6812      	ldr	r2, [r2, #0]
 800c716:	68b9      	ldr	r1, [r7, #8]
 800c718:	430b      	orrs	r3, r1
 800c71a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	430a      	orrs	r2, r1
 800c730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a2c      	ldr	r2, [pc, #176]	; (800c7e8 <UART_SetConfig+0x114>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d103      	bne.n	800c744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c73c:	f7fe f9ee 	bl	800ab1c <HAL_RCC_GetPCLK2Freq>
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	e002      	b.n	800c74a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c744:	f7fe f9d6 	bl	800aaf4 <HAL_RCC_GetPCLK1Freq>
 800c748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4613      	mov	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	009a      	lsls	r2, r3, #2
 800c754:	441a      	add	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c760:	4a22      	ldr	r2, [pc, #136]	; (800c7ec <UART_SetConfig+0x118>)
 800c762:	fba2 2303 	umull	r2, r3, r2, r3
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	0119      	lsls	r1, r3, #4
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	4613      	mov	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	009a      	lsls	r2, r3, #2
 800c774:	441a      	add	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c780:	4b1a      	ldr	r3, [pc, #104]	; (800c7ec <UART_SetConfig+0x118>)
 800c782:	fba3 0302 	umull	r0, r3, r3, r2
 800c786:	095b      	lsrs	r3, r3, #5
 800c788:	2064      	movs	r0, #100	; 0x64
 800c78a:	fb00 f303 	mul.w	r3, r0, r3
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	011b      	lsls	r3, r3, #4
 800c792:	3332      	adds	r3, #50	; 0x32
 800c794:	4a15      	ldr	r2, [pc, #84]	; (800c7ec <UART_SetConfig+0x118>)
 800c796:	fba2 2303 	umull	r2, r3, r2, r3
 800c79a:	095b      	lsrs	r3, r3, #5
 800c79c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7a0:	4419      	add	r1, r3
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009a      	lsls	r2, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <UART_SetConfig+0x118>)
 800c7ba:	fba3 0302 	umull	r0, r3, r3, r2
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	2064      	movs	r0, #100	; 0x64
 800c7c2:	fb00 f303 	mul.w	r3, r0, r3
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	011b      	lsls	r3, r3, #4
 800c7ca:	3332      	adds	r3, #50	; 0x32
 800c7cc:	4a07      	ldr	r2, [pc, #28]	; (800c7ec <UART_SetConfig+0x118>)
 800c7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d2:	095b      	lsrs	r3, r3, #5
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	440a      	add	r2, r1
 800c7de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c7e0:	bf00      	nop
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	40013800 	.word	0x40013800
 800c7ec:	51eb851f 	.word	0x51eb851f

0800c7f0 <atoi>:
 800c7f0:	220a      	movs	r2, #10
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	f000 beac 	b.w	800d550 <strtol>

0800c7f8 <__errno>:
 800c7f8:	4b01      	ldr	r3, [pc, #4]	; (800c800 <__errno+0x8>)
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20000024 	.word	0x20000024

0800c804 <__libc_init_array>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	2600      	movs	r6, #0
 800c808:	4d0c      	ldr	r5, [pc, #48]	; (800c83c <__libc_init_array+0x38>)
 800c80a:	4c0d      	ldr	r4, [pc, #52]	; (800c840 <__libc_init_array+0x3c>)
 800c80c:	1b64      	subs	r4, r4, r5
 800c80e:	10a4      	asrs	r4, r4, #2
 800c810:	42a6      	cmp	r6, r4
 800c812:	d109      	bne.n	800c828 <__libc_init_array+0x24>
 800c814:	f003 ff62 	bl	80106dc <_init>
 800c818:	2600      	movs	r6, #0
 800c81a:	4d0a      	ldr	r5, [pc, #40]	; (800c844 <__libc_init_array+0x40>)
 800c81c:	4c0a      	ldr	r4, [pc, #40]	; (800c848 <__libc_init_array+0x44>)
 800c81e:	1b64      	subs	r4, r4, r5
 800c820:	10a4      	asrs	r4, r4, #2
 800c822:	42a6      	cmp	r6, r4
 800c824:	d105      	bne.n	800c832 <__libc_init_array+0x2e>
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82c:	4798      	blx	r3
 800c82e:	3601      	adds	r6, #1
 800c830:	e7ee      	b.n	800c810 <__libc_init_array+0xc>
 800c832:	f855 3b04 	ldr.w	r3, [r5], #4
 800c836:	4798      	blx	r3
 800c838:	3601      	adds	r6, #1
 800c83a:	e7f2      	b.n	800c822 <__libc_init_array+0x1e>
 800c83c:	08012248 	.word	0x08012248
 800c840:	08012248 	.word	0x08012248
 800c844:	08012248 	.word	0x08012248
 800c848:	0801224c 	.word	0x0801224c

0800c84c <malloc>:
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <malloc+0xc>)
 800c84e:	4601      	mov	r1, r0
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	f000 b889 	b.w	800c968 <_malloc_r>
 800c856:	bf00      	nop
 800c858:	20000024 	.word	0x20000024

0800c85c <free>:
 800c85c:	4b02      	ldr	r3, [pc, #8]	; (800c868 <free+0xc>)
 800c85e:	4601      	mov	r1, r0
 800c860:	6818      	ldr	r0, [r3, #0]
 800c862:	f000 b819 	b.w	800c898 <_free_r>
 800c866:	bf00      	nop
 800c868:	20000024 	.word	0x20000024

0800c86c <memcpy>:
 800c86c:	440a      	add	r2, r1
 800c86e:	4291      	cmp	r1, r2
 800c870:	f100 33ff 	add.w	r3, r0, #4294967295
 800c874:	d100      	bne.n	800c878 <memcpy+0xc>
 800c876:	4770      	bx	lr
 800c878:	b510      	push	{r4, lr}
 800c87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c87e:	4291      	cmp	r1, r2
 800c880:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c884:	d1f9      	bne.n	800c87a <memcpy+0xe>
 800c886:	bd10      	pop	{r4, pc}

0800c888 <memset>:
 800c888:	4603      	mov	r3, r0
 800c88a:	4402      	add	r2, r0
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d100      	bne.n	800c892 <memset+0xa>
 800c890:	4770      	bx	lr
 800c892:	f803 1b01 	strb.w	r1, [r3], #1
 800c896:	e7f9      	b.n	800c88c <memset+0x4>

0800c898 <_free_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4605      	mov	r5, r0
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d040      	beq.n	800c922 <_free_r+0x8a>
 800c8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a4:	1f0c      	subs	r4, r1, #4
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bfb8      	it	lt
 800c8aa:	18e4      	addlt	r4, r4, r3
 800c8ac:	f001 fce8 	bl	800e280 <__malloc_lock>
 800c8b0:	4a1c      	ldr	r2, [pc, #112]	; (800c924 <_free_r+0x8c>)
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	b933      	cbnz	r3, 800c8c4 <_free_r+0x2c>
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6014      	str	r4, [r2, #0]
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c0:	f001 bce4 	b.w	800e28c <__malloc_unlock>
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d908      	bls.n	800c8da <_free_r+0x42>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	1821      	adds	r1, r4, r0
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf01      	itttt	eq
 800c8d0:	6819      	ldreq	r1, [r3, #0]
 800c8d2:	685b      	ldreq	r3, [r3, #4]
 800c8d4:	1809      	addeq	r1, r1, r0
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	e7ed      	b.n	800c8b6 <_free_r+0x1e>
 800c8da:	461a      	mov	r2, r3
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	b10b      	cbz	r3, 800c8e4 <_free_r+0x4c>
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d9fa      	bls.n	800c8da <_free_r+0x42>
 800c8e4:	6811      	ldr	r1, [r2, #0]
 800c8e6:	1850      	adds	r0, r2, r1
 800c8e8:	42a0      	cmp	r0, r4
 800c8ea:	d10b      	bne.n	800c904 <_free_r+0x6c>
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	4401      	add	r1, r0
 800c8f0:	1850      	adds	r0, r2, r1
 800c8f2:	4283      	cmp	r3, r0
 800c8f4:	6011      	str	r1, [r2, #0]
 800c8f6:	d1e0      	bne.n	800c8ba <_free_r+0x22>
 800c8f8:	6818      	ldr	r0, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	4401      	add	r1, r0
 800c8fe:	6011      	str	r1, [r2, #0]
 800c900:	6053      	str	r3, [r2, #4]
 800c902:	e7da      	b.n	800c8ba <_free_r+0x22>
 800c904:	d902      	bls.n	800c90c <_free_r+0x74>
 800c906:	230c      	movs	r3, #12
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	e7d6      	b.n	800c8ba <_free_r+0x22>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	1821      	adds	r1, r4, r0
 800c910:	428b      	cmp	r3, r1
 800c912:	bf01      	itttt	eq
 800c914:	6819      	ldreq	r1, [r3, #0]
 800c916:	685b      	ldreq	r3, [r3, #4]
 800c918:	1809      	addeq	r1, r1, r0
 800c91a:	6021      	streq	r1, [r4, #0]
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	6054      	str	r4, [r2, #4]
 800c920:	e7cb      	b.n	800c8ba <_free_r+0x22>
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	20001cf8 	.word	0x20001cf8

0800c928 <sbrk_aligned>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	4e0e      	ldr	r6, [pc, #56]	; (800c964 <sbrk_aligned+0x3c>)
 800c92c:	460c      	mov	r4, r1
 800c92e:	6831      	ldr	r1, [r6, #0]
 800c930:	4605      	mov	r5, r0
 800c932:	b911      	cbnz	r1, 800c93a <sbrk_aligned+0x12>
 800c934:	f000 fcec 	bl	800d310 <_sbrk_r>
 800c938:	6030      	str	r0, [r6, #0]
 800c93a:	4621      	mov	r1, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	f000 fce7 	bl	800d310 <_sbrk_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	d00a      	beq.n	800c95c <sbrk_aligned+0x34>
 800c946:	1cc4      	adds	r4, r0, #3
 800c948:	f024 0403 	bic.w	r4, r4, #3
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d007      	beq.n	800c960 <sbrk_aligned+0x38>
 800c950:	1a21      	subs	r1, r4, r0
 800c952:	4628      	mov	r0, r5
 800c954:	f000 fcdc 	bl	800d310 <_sbrk_r>
 800c958:	3001      	adds	r0, #1
 800c95a:	d101      	bne.n	800c960 <sbrk_aligned+0x38>
 800c95c:	f04f 34ff 	mov.w	r4, #4294967295
 800c960:	4620      	mov	r0, r4
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	20001cfc 	.word	0x20001cfc

0800c968 <_malloc_r>:
 800c968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c96c:	1ccd      	adds	r5, r1, #3
 800c96e:	f025 0503 	bic.w	r5, r5, #3
 800c972:	3508      	adds	r5, #8
 800c974:	2d0c      	cmp	r5, #12
 800c976:	bf38      	it	cc
 800c978:	250c      	movcc	r5, #12
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	4607      	mov	r7, r0
 800c97e:	db01      	blt.n	800c984 <_malloc_r+0x1c>
 800c980:	42a9      	cmp	r1, r5
 800c982:	d905      	bls.n	800c990 <_malloc_r+0x28>
 800c984:	230c      	movs	r3, #12
 800c986:	2600      	movs	r6, #0
 800c988:	603b      	str	r3, [r7, #0]
 800c98a:	4630      	mov	r0, r6
 800c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c990:	4e2e      	ldr	r6, [pc, #184]	; (800ca4c <_malloc_r+0xe4>)
 800c992:	f001 fc75 	bl	800e280 <__malloc_lock>
 800c996:	6833      	ldr	r3, [r6, #0]
 800c998:	461c      	mov	r4, r3
 800c99a:	bb34      	cbnz	r4, 800c9ea <_malloc_r+0x82>
 800c99c:	4629      	mov	r1, r5
 800c99e:	4638      	mov	r0, r7
 800c9a0:	f7ff ffc2 	bl	800c928 <sbrk_aligned>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	d14d      	bne.n	800ca46 <_malloc_r+0xde>
 800c9aa:	6834      	ldr	r4, [r6, #0]
 800c9ac:	4626      	mov	r6, r4
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	d140      	bne.n	800ca34 <_malloc_r+0xcc>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	eb04 0803 	add.w	r8, r4, r3
 800c9bc:	f000 fca8 	bl	800d310 <_sbrk_r>
 800c9c0:	4580      	cmp	r8, r0
 800c9c2:	d13a      	bne.n	800ca3a <_malloc_r+0xd2>
 800c9c4:	6821      	ldr	r1, [r4, #0]
 800c9c6:	3503      	adds	r5, #3
 800c9c8:	1a6d      	subs	r5, r5, r1
 800c9ca:	f025 0503 	bic.w	r5, r5, #3
 800c9ce:	3508      	adds	r5, #8
 800c9d0:	2d0c      	cmp	r5, #12
 800c9d2:	bf38      	it	cc
 800c9d4:	250c      	movcc	r5, #12
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7ff ffa5 	bl	800c928 <sbrk_aligned>
 800c9de:	3001      	adds	r0, #1
 800c9e0:	d02b      	beq.n	800ca3a <_malloc_r+0xd2>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	442b      	add	r3, r5
 800c9e6:	6023      	str	r3, [r4, #0]
 800c9e8:	e00e      	b.n	800ca08 <_malloc_r+0xa0>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	1b52      	subs	r2, r2, r5
 800c9ee:	d41e      	bmi.n	800ca2e <_malloc_r+0xc6>
 800c9f0:	2a0b      	cmp	r2, #11
 800c9f2:	d916      	bls.n	800ca22 <_malloc_r+0xba>
 800c9f4:	1961      	adds	r1, r4, r5
 800c9f6:	42a3      	cmp	r3, r4
 800c9f8:	6025      	str	r5, [r4, #0]
 800c9fa:	bf18      	it	ne
 800c9fc:	6059      	strne	r1, [r3, #4]
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	bf08      	it	eq
 800ca02:	6031      	streq	r1, [r6, #0]
 800ca04:	5162      	str	r2, [r4, r5]
 800ca06:	604b      	str	r3, [r1, #4]
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f104 060b 	add.w	r6, r4, #11
 800ca0e:	f001 fc3d 	bl	800e28c <__malloc_unlock>
 800ca12:	f026 0607 	bic.w	r6, r6, #7
 800ca16:	1d23      	adds	r3, r4, #4
 800ca18:	1af2      	subs	r2, r6, r3
 800ca1a:	d0b6      	beq.n	800c98a <_malloc_r+0x22>
 800ca1c:	1b9b      	subs	r3, r3, r6
 800ca1e:	50a3      	str	r3, [r4, r2]
 800ca20:	e7b3      	b.n	800c98a <_malloc_r+0x22>
 800ca22:	6862      	ldr	r2, [r4, #4]
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	bf0c      	ite	eq
 800ca28:	6032      	streq	r2, [r6, #0]
 800ca2a:	605a      	strne	r2, [r3, #4]
 800ca2c:	e7ec      	b.n	800ca08 <_malloc_r+0xa0>
 800ca2e:	4623      	mov	r3, r4
 800ca30:	6864      	ldr	r4, [r4, #4]
 800ca32:	e7b2      	b.n	800c99a <_malloc_r+0x32>
 800ca34:	4634      	mov	r4, r6
 800ca36:	6876      	ldr	r6, [r6, #4]
 800ca38:	e7b9      	b.n	800c9ae <_malloc_r+0x46>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	f001 fc24 	bl	800e28c <__malloc_unlock>
 800ca44:	e7a1      	b.n	800c98a <_malloc_r+0x22>
 800ca46:	6025      	str	r5, [r4, #0]
 800ca48:	e7de      	b.n	800ca08 <_malloc_r+0xa0>
 800ca4a:	bf00      	nop
 800ca4c:	20001cf8 	.word	0x20001cf8

0800ca50 <__cvt>:
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca56:	461f      	mov	r7, r3
 800ca58:	bfbb      	ittet	lt
 800ca5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ca5e:	461f      	movlt	r7, r3
 800ca60:	2300      	movge	r3, #0
 800ca62:	232d      	movlt	r3, #45	; 0x2d
 800ca64:	b088      	sub	sp, #32
 800ca66:	4614      	mov	r4, r2
 800ca68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ca6c:	7013      	strb	r3, [r2, #0]
 800ca6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ca74:	f023 0820 	bic.w	r8, r3, #32
 800ca78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca7c:	d005      	beq.n	800ca8a <__cvt+0x3a>
 800ca7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca82:	d100      	bne.n	800ca86 <__cvt+0x36>
 800ca84:	3501      	adds	r5, #1
 800ca86:	2302      	movs	r3, #2
 800ca88:	e000      	b.n	800ca8c <__cvt+0x3c>
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	aa07      	add	r2, sp, #28
 800ca8e:	9204      	str	r2, [sp, #16]
 800ca90:	aa06      	add	r2, sp, #24
 800ca92:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ca96:	e9cd 3500 	strd	r3, r5, [sp]
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	463b      	mov	r3, r7
 800ca9e:	f000 fdef 	bl	800d680 <_dtoa_r>
 800caa2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800caa6:	4606      	mov	r6, r0
 800caa8:	d102      	bne.n	800cab0 <__cvt+0x60>
 800caaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caac:	07db      	lsls	r3, r3, #31
 800caae:	d522      	bpl.n	800caf6 <__cvt+0xa6>
 800cab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cab4:	eb06 0905 	add.w	r9, r6, r5
 800cab8:	d110      	bne.n	800cadc <__cvt+0x8c>
 800caba:	7833      	ldrb	r3, [r6, #0]
 800cabc:	2b30      	cmp	r3, #48	; 0x30
 800cabe:	d10a      	bne.n	800cad6 <__cvt+0x86>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4620      	mov	r0, r4
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f3 ff78 	bl	80009bc <__aeabi_dcmpeq>
 800cacc:	b918      	cbnz	r0, 800cad6 <__cvt+0x86>
 800cace:	f1c5 0501 	rsb	r5, r5, #1
 800cad2:	f8ca 5000 	str.w	r5, [sl]
 800cad6:	f8da 3000 	ldr.w	r3, [sl]
 800cada:	4499      	add	r9, r3
 800cadc:	2200      	movs	r2, #0
 800cade:	2300      	movs	r3, #0
 800cae0:	4620      	mov	r0, r4
 800cae2:	4639      	mov	r1, r7
 800cae4:	f7f3 ff6a 	bl	80009bc <__aeabi_dcmpeq>
 800cae8:	b108      	cbz	r0, 800caee <__cvt+0x9e>
 800caea:	f8cd 901c 	str.w	r9, [sp, #28]
 800caee:	2230      	movs	r2, #48	; 0x30
 800caf0:	9b07      	ldr	r3, [sp, #28]
 800caf2:	454b      	cmp	r3, r9
 800caf4:	d307      	bcc.n	800cb06 <__cvt+0xb6>
 800caf6:	4630      	mov	r0, r6
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cafc:	1b9b      	subs	r3, r3, r6
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	b008      	add	sp, #32
 800cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb06:	1c59      	adds	r1, r3, #1
 800cb08:	9107      	str	r1, [sp, #28]
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	e7f0      	b.n	800caf0 <__cvt+0xa0>

0800cb0e <__exponent>:
 800cb0e:	4603      	mov	r3, r0
 800cb10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb12:	2900      	cmp	r1, #0
 800cb14:	f803 2b02 	strb.w	r2, [r3], #2
 800cb18:	bfb6      	itet	lt
 800cb1a:	222d      	movlt	r2, #45	; 0x2d
 800cb1c:	222b      	movge	r2, #43	; 0x2b
 800cb1e:	4249      	neglt	r1, r1
 800cb20:	2909      	cmp	r1, #9
 800cb22:	7042      	strb	r2, [r0, #1]
 800cb24:	dd2b      	ble.n	800cb7e <__exponent+0x70>
 800cb26:	f10d 0407 	add.w	r4, sp, #7
 800cb2a:	46a4      	mov	ip, r4
 800cb2c:	270a      	movs	r7, #10
 800cb2e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb32:	460a      	mov	r2, r1
 800cb34:	46a6      	mov	lr, r4
 800cb36:	fb07 1516 	mls	r5, r7, r6, r1
 800cb3a:	2a63      	cmp	r2, #99	; 0x63
 800cb3c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800cb40:	4631      	mov	r1, r6
 800cb42:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb4a:	dcf0      	bgt.n	800cb2e <__exponent+0x20>
 800cb4c:	3130      	adds	r1, #48	; 0x30
 800cb4e:	f1ae 0502 	sub.w	r5, lr, #2
 800cb52:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb56:	4629      	mov	r1, r5
 800cb58:	1c44      	adds	r4, r0, #1
 800cb5a:	4561      	cmp	r1, ip
 800cb5c:	d30a      	bcc.n	800cb74 <__exponent+0x66>
 800cb5e:	f10d 0209 	add.w	r2, sp, #9
 800cb62:	eba2 020e 	sub.w	r2, r2, lr
 800cb66:	4565      	cmp	r5, ip
 800cb68:	bf88      	it	hi
 800cb6a:	2200      	movhi	r2, #0
 800cb6c:	4413      	add	r3, r2
 800cb6e:	1a18      	subs	r0, r3, r0
 800cb70:	b003      	add	sp, #12
 800cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb78:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb7c:	e7ed      	b.n	800cb5a <__exponent+0x4c>
 800cb7e:	2330      	movs	r3, #48	; 0x30
 800cb80:	3130      	adds	r1, #48	; 0x30
 800cb82:	7083      	strb	r3, [r0, #2]
 800cb84:	70c1      	strb	r1, [r0, #3]
 800cb86:	1d03      	adds	r3, r0, #4
 800cb88:	e7f1      	b.n	800cb6e <__exponent+0x60>
	...

0800cb8c <_printf_float>:
 800cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	b091      	sub	sp, #68	; 0x44
 800cb92:	460c      	mov	r4, r1
 800cb94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cb98:	4616      	mov	r6, r2
 800cb9a:	461f      	mov	r7, r3
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	f001 fb5d 	bl	800e25c <_localeconv_r>
 800cba2:	6803      	ldr	r3, [r0, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	f7f3 fadc 	bl	8000164 <strlen>
 800cbac:	2300      	movs	r3, #0
 800cbae:	930e      	str	r3, [sp, #56]	; 0x38
 800cbb0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbb4:	900a      	str	r0, [sp, #40]	; 0x28
 800cbb6:	3307      	adds	r3, #7
 800cbb8:	f023 0307 	bic.w	r3, r3, #7
 800cbbc:	f103 0208 	add.w	r2, r3, #8
 800cbc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cbc4:	f8d4 b000 	ldr.w	fp, [r4]
 800cbc8:	f8c8 2000 	str.w	r2, [r8]
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbd4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800cbd8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800cbdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbde:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	4b9c      	ldr	r3, [pc, #624]	; (800ce58 <_printf_float+0x2cc>)
 800cbe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbe8:	f7f3 ff1a 	bl	8000a20 <__aeabi_dcmpun>
 800cbec:	bb70      	cbnz	r0, 800cc4c <_printf_float+0xc0>
 800cbee:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4b98      	ldr	r3, [pc, #608]	; (800ce58 <_printf_float+0x2cc>)
 800cbf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbf8:	f7f3 fef4 	bl	80009e4 <__aeabi_dcmple>
 800cbfc:	bb30      	cbnz	r0, 800cc4c <_printf_float+0xc0>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	4640      	mov	r0, r8
 800cc04:	4651      	mov	r1, sl
 800cc06:	f7f3 fee3 	bl	80009d0 <__aeabi_dcmplt>
 800cc0a:	b110      	cbz	r0, 800cc12 <_printf_float+0x86>
 800cc0c:	232d      	movs	r3, #45	; 0x2d
 800cc0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc12:	4b92      	ldr	r3, [pc, #584]	; (800ce5c <_printf_float+0x2d0>)
 800cc14:	4892      	ldr	r0, [pc, #584]	; (800ce60 <_printf_float+0x2d4>)
 800cc16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc1a:	bf94      	ite	ls
 800cc1c:	4698      	movls	r8, r3
 800cc1e:	4680      	movhi	r8, r0
 800cc20:	2303      	movs	r3, #3
 800cc22:	f04f 0a00 	mov.w	sl, #0
 800cc26:	6123      	str	r3, [r4, #16]
 800cc28:	f02b 0304 	bic.w	r3, fp, #4
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	4633      	mov	r3, r6
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	9700      	str	r7, [sp, #0]
 800cc36:	aa0f      	add	r2, sp, #60	; 0x3c
 800cc38:	f000 f9d4 	bl	800cfe4 <_printf_common>
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	f040 8090 	bne.w	800cd62 <_printf_float+0x1d6>
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295
 800cc46:	b011      	add	sp, #68	; 0x44
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	4642      	mov	r2, r8
 800cc4e:	4653      	mov	r3, sl
 800cc50:	4640      	mov	r0, r8
 800cc52:	4651      	mov	r1, sl
 800cc54:	f7f3 fee4 	bl	8000a20 <__aeabi_dcmpun>
 800cc58:	b148      	cbz	r0, 800cc6e <_printf_float+0xe2>
 800cc5a:	f1ba 0f00 	cmp.w	sl, #0
 800cc5e:	bfb8      	it	lt
 800cc60:	232d      	movlt	r3, #45	; 0x2d
 800cc62:	4880      	ldr	r0, [pc, #512]	; (800ce64 <_printf_float+0x2d8>)
 800cc64:	bfb8      	it	lt
 800cc66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc6a:	4b7f      	ldr	r3, [pc, #508]	; (800ce68 <_printf_float+0x2dc>)
 800cc6c:	e7d3      	b.n	800cc16 <_printf_float+0x8a>
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	d142      	bne.n	800ccfe <_printf_float+0x172>
 800cc78:	2306      	movs	r3, #6
 800cc7a:	6063      	str	r3, [r4, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	9206      	str	r2, [sp, #24]
 800cc80:	aa0e      	add	r2, sp, #56	; 0x38
 800cc82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800cc86:	aa0d      	add	r2, sp, #52	; 0x34
 800cc88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800cc8c:	9203      	str	r2, [sp, #12]
 800cc8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800cc92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cc96:	6023      	str	r3, [r4, #0]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	4642      	mov	r2, r8
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	4628      	mov	r0, r5
 800cca0:	4653      	mov	r3, sl
 800cca2:	910b      	str	r1, [sp, #44]	; 0x2c
 800cca4:	f7ff fed4 	bl	800ca50 <__cvt>
 800cca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccaa:	4680      	mov	r8, r0
 800ccac:	2947      	cmp	r1, #71	; 0x47
 800ccae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ccb0:	d108      	bne.n	800ccc4 <_printf_float+0x138>
 800ccb2:	1cc8      	adds	r0, r1, #3
 800ccb4:	db02      	blt.n	800ccbc <_printf_float+0x130>
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	dd40      	ble.n	800cd3e <_printf_float+0x1b2>
 800ccbc:	f1a9 0902 	sub.w	r9, r9, #2
 800ccc0:	fa5f f989 	uxtb.w	r9, r9
 800ccc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ccc8:	d81f      	bhi.n	800cd0a <_printf_float+0x17e>
 800ccca:	464a      	mov	r2, r9
 800cccc:	3901      	subs	r1, #1
 800ccce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccd2:	910d      	str	r1, [sp, #52]	; 0x34
 800ccd4:	f7ff ff1b 	bl	800cb0e <__exponent>
 800ccd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccda:	4682      	mov	sl, r0
 800ccdc:	1813      	adds	r3, r2, r0
 800ccde:	2a01      	cmp	r2, #1
 800cce0:	6123      	str	r3, [r4, #16]
 800cce2:	dc02      	bgt.n	800ccea <_printf_float+0x15e>
 800cce4:	6822      	ldr	r2, [r4, #0]
 800cce6:	07d2      	lsls	r2, r2, #31
 800cce8:	d501      	bpl.n	800ccee <_printf_float+0x162>
 800ccea:	3301      	adds	r3, #1
 800ccec:	6123      	str	r3, [r4, #16]
 800ccee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d09b      	beq.n	800cc2e <_printf_float+0xa2>
 800ccf6:	232d      	movs	r3, #45	; 0x2d
 800ccf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccfc:	e797      	b.n	800cc2e <_printf_float+0xa2>
 800ccfe:	2947      	cmp	r1, #71	; 0x47
 800cd00:	d1bc      	bne.n	800cc7c <_printf_float+0xf0>
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1ba      	bne.n	800cc7c <_printf_float+0xf0>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e7b7      	b.n	800cc7a <_printf_float+0xee>
 800cd0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd0e:	d118      	bne.n	800cd42 <_printf_float+0x1b6>
 800cd10:	2900      	cmp	r1, #0
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	dd0b      	ble.n	800cd2e <_printf_float+0x1a2>
 800cd16:	6121      	str	r1, [r4, #16]
 800cd18:	b913      	cbnz	r3, 800cd20 <_printf_float+0x194>
 800cd1a:	6822      	ldr	r2, [r4, #0]
 800cd1c:	07d0      	lsls	r0, r2, #31
 800cd1e:	d502      	bpl.n	800cd26 <_printf_float+0x19a>
 800cd20:	3301      	adds	r3, #1
 800cd22:	440b      	add	r3, r1
 800cd24:	6123      	str	r3, [r4, #16]
 800cd26:	f04f 0a00 	mov.w	sl, #0
 800cd2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd2c:	e7df      	b.n	800ccee <_printf_float+0x162>
 800cd2e:	b913      	cbnz	r3, 800cd36 <_printf_float+0x1aa>
 800cd30:	6822      	ldr	r2, [r4, #0]
 800cd32:	07d2      	lsls	r2, r2, #31
 800cd34:	d501      	bpl.n	800cd3a <_printf_float+0x1ae>
 800cd36:	3302      	adds	r3, #2
 800cd38:	e7f4      	b.n	800cd24 <_printf_float+0x198>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7f2      	b.n	800cd24 <_printf_float+0x198>
 800cd3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd44:	4299      	cmp	r1, r3
 800cd46:	db05      	blt.n	800cd54 <_printf_float+0x1c8>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	6121      	str	r1, [r4, #16]
 800cd4c:	07d8      	lsls	r0, r3, #31
 800cd4e:	d5ea      	bpl.n	800cd26 <_printf_float+0x19a>
 800cd50:	1c4b      	adds	r3, r1, #1
 800cd52:	e7e7      	b.n	800cd24 <_printf_float+0x198>
 800cd54:	2900      	cmp	r1, #0
 800cd56:	bfcc      	ite	gt
 800cd58:	2201      	movgt	r2, #1
 800cd5a:	f1c1 0202 	rsble	r2, r1, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	e7e0      	b.n	800cd24 <_printf_float+0x198>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	055a      	lsls	r2, r3, #21
 800cd66:	d407      	bmi.n	800cd78 <_printf_float+0x1ec>
 800cd68:	6923      	ldr	r3, [r4, #16]
 800cd6a:	4642      	mov	r2, r8
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b8      	blx	r7
 800cd72:	3001      	adds	r0, #1
 800cd74:	d12b      	bne.n	800cdce <_printf_float+0x242>
 800cd76:	e764      	b.n	800cc42 <_printf_float+0xb6>
 800cd78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd7c:	f240 80dd 	bls.w	800cf3a <_printf_float+0x3ae>
 800cd80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	f7f3 fe18 	bl	80009bc <__aeabi_dcmpeq>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d033      	beq.n	800cdf8 <_printf_float+0x26c>
 800cd90:	2301      	movs	r3, #1
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	4a35      	ldr	r2, [pc, #212]	; (800ce6c <_printf_float+0x2e0>)
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f43f af51 	beq.w	800cc42 <_printf_float+0xb6>
 800cda0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cda4:	429a      	cmp	r2, r3
 800cda6:	db02      	blt.n	800cdae <_printf_float+0x222>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	07d8      	lsls	r0, r3, #31
 800cdac:	d50f      	bpl.n	800cdce <_printf_float+0x242>
 800cdae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b8      	blx	r7
 800cdb8:	3001      	adds	r0, #1
 800cdba:	f43f af42 	beq.w	800cc42 <_printf_float+0xb6>
 800cdbe:	f04f 0800 	mov.w	r8, #0
 800cdc2:	f104 091a 	add.w	r9, r4, #26
 800cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	4543      	cmp	r3, r8
 800cdcc:	dc09      	bgt.n	800cde2 <_printf_float+0x256>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	079b      	lsls	r3, r3, #30
 800cdd2:	f100 8102 	bmi.w	800cfda <_printf_float+0x44e>
 800cdd6:	68e0      	ldr	r0, [r4, #12]
 800cdd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdda:	4298      	cmp	r0, r3
 800cddc:	bfb8      	it	lt
 800cdde:	4618      	movlt	r0, r3
 800cde0:	e731      	b.n	800cc46 <_printf_float+0xba>
 800cde2:	2301      	movs	r3, #1
 800cde4:	464a      	mov	r2, r9
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f af28 	beq.w	800cc42 <_printf_float+0xb6>
 800cdf2:	f108 0801 	add.w	r8, r8, #1
 800cdf6:	e7e6      	b.n	800cdc6 <_printf_float+0x23a>
 800cdf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	dc38      	bgt.n	800ce70 <_printf_float+0x2e4>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	4a19      	ldr	r2, [pc, #100]	; (800ce6c <_printf_float+0x2e0>)
 800ce06:	47b8      	blx	r7
 800ce08:	3001      	adds	r0, #1
 800ce0a:	f43f af1a 	beq.w	800cc42 <_printf_float+0xb6>
 800ce0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ce12:	4313      	orrs	r3, r2
 800ce14:	d102      	bne.n	800ce1c <_printf_float+0x290>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	07d9      	lsls	r1, r3, #31
 800ce1a:	d5d8      	bpl.n	800cdce <_printf_float+0x242>
 800ce1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce20:	4631      	mov	r1, r6
 800ce22:	4628      	mov	r0, r5
 800ce24:	47b8      	blx	r7
 800ce26:	3001      	adds	r0, #1
 800ce28:	f43f af0b 	beq.w	800cc42 <_printf_float+0xb6>
 800ce2c:	f04f 0900 	mov.w	r9, #0
 800ce30:	f104 0a1a 	add.w	sl, r4, #26
 800ce34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce36:	425b      	negs	r3, r3
 800ce38:	454b      	cmp	r3, r9
 800ce3a:	dc01      	bgt.n	800ce40 <_printf_float+0x2b4>
 800ce3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce3e:	e794      	b.n	800cd6a <_printf_float+0x1de>
 800ce40:	2301      	movs	r3, #1
 800ce42:	4652      	mov	r2, sl
 800ce44:	4631      	mov	r1, r6
 800ce46:	4628      	mov	r0, r5
 800ce48:	47b8      	blx	r7
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	f43f aef9 	beq.w	800cc42 <_printf_float+0xb6>
 800ce50:	f109 0901 	add.w	r9, r9, #1
 800ce54:	e7ee      	b.n	800ce34 <_printf_float+0x2a8>
 800ce56:	bf00      	nop
 800ce58:	7fefffff 	.word	0x7fefffff
 800ce5c:	08011f40 	.word	0x08011f40
 800ce60:	08011f44 	.word	0x08011f44
 800ce64:	08011f4c 	.word	0x08011f4c
 800ce68:	08011f48 	.word	0x08011f48
 800ce6c:	08011f50 	.word	0x08011f50
 800ce70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce74:	429a      	cmp	r2, r3
 800ce76:	bfa8      	it	ge
 800ce78:	461a      	movge	r2, r3
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	4691      	mov	r9, r2
 800ce7e:	dc37      	bgt.n	800cef0 <_printf_float+0x364>
 800ce80:	f04f 0b00 	mov.w	fp, #0
 800ce84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce88:	f104 021a 	add.w	r2, r4, #26
 800ce8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ce90:	ebaa 0309 	sub.w	r3, sl, r9
 800ce94:	455b      	cmp	r3, fp
 800ce96:	dc33      	bgt.n	800cf00 <_printf_float+0x374>
 800ce98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	db3b      	blt.n	800cf18 <_printf_float+0x38c>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	07da      	lsls	r2, r3, #31
 800cea4:	d438      	bmi.n	800cf18 <_printf_float+0x38c>
 800cea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cea8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ceaa:	eba3 020a 	sub.w	r2, r3, sl
 800ceae:	eba3 0901 	sub.w	r9, r3, r1
 800ceb2:	4591      	cmp	r9, r2
 800ceb4:	bfa8      	it	ge
 800ceb6:	4691      	movge	r9, r2
 800ceb8:	f1b9 0f00 	cmp.w	r9, #0
 800cebc:	dc34      	bgt.n	800cf28 <_printf_float+0x39c>
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cec6:	f104 0a1a 	add.w	sl, r4, #26
 800ceca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cece:	1a9b      	subs	r3, r3, r2
 800ced0:	eba3 0309 	sub.w	r3, r3, r9
 800ced4:	4543      	cmp	r3, r8
 800ced6:	f77f af7a 	ble.w	800cdce <_printf_float+0x242>
 800ceda:	2301      	movs	r3, #1
 800cedc:	4652      	mov	r2, sl
 800cede:	4631      	mov	r1, r6
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b8      	blx	r7
 800cee4:	3001      	adds	r0, #1
 800cee6:	f43f aeac 	beq.w	800cc42 <_printf_float+0xb6>
 800ceea:	f108 0801 	add.w	r8, r8, #1
 800ceee:	e7ec      	b.n	800ceca <_printf_float+0x33e>
 800cef0:	4613      	mov	r3, r2
 800cef2:	4631      	mov	r1, r6
 800cef4:	4642      	mov	r2, r8
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	d1c0      	bne.n	800ce80 <_printf_float+0x2f4>
 800cefe:	e6a0      	b.n	800cc42 <_printf_float+0xb6>
 800cf00:	2301      	movs	r3, #1
 800cf02:	4631      	mov	r1, r6
 800cf04:	4628      	mov	r0, r5
 800cf06:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f43f ae99 	beq.w	800cc42 <_printf_float+0xb6>
 800cf10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf12:	f10b 0b01 	add.w	fp, fp, #1
 800cf16:	e7b9      	b.n	800ce8c <_printf_float+0x300>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b8      	blx	r7
 800cf22:	3001      	adds	r0, #1
 800cf24:	d1bf      	bne.n	800cea6 <_printf_float+0x31a>
 800cf26:	e68c      	b.n	800cc42 <_printf_float+0xb6>
 800cf28:	464b      	mov	r3, r9
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	eb08 020a 	add.w	r2, r8, sl
 800cf32:	47b8      	blx	r7
 800cf34:	3001      	adds	r0, #1
 800cf36:	d1c2      	bne.n	800cebe <_printf_float+0x332>
 800cf38:	e683      	b.n	800cc42 <_printf_float+0xb6>
 800cf3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf3c:	2a01      	cmp	r2, #1
 800cf3e:	dc01      	bgt.n	800cf44 <_printf_float+0x3b8>
 800cf40:	07db      	lsls	r3, r3, #31
 800cf42:	d537      	bpl.n	800cfb4 <_printf_float+0x428>
 800cf44:	2301      	movs	r3, #1
 800cf46:	4642      	mov	r2, r8
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b8      	blx	r7
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f43f ae77 	beq.w	800cc42 <_printf_float+0xb6>
 800cf54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f43f ae6f 	beq.w	800cc42 <_printf_float+0xb6>
 800cf64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f7f3 fd26 	bl	80009bc <__aeabi_dcmpeq>
 800cf70:	b9d8      	cbnz	r0, 800cfaa <_printf_float+0x41e>
 800cf72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf74:	f108 0201 	add.w	r2, r8, #1
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	47b8      	blx	r7
 800cf80:	3001      	adds	r0, #1
 800cf82:	d10e      	bne.n	800cfa2 <_printf_float+0x416>
 800cf84:	e65d      	b.n	800cc42 <_printf_float+0xb6>
 800cf86:	2301      	movs	r3, #1
 800cf88:	464a      	mov	r2, r9
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	47b8      	blx	r7
 800cf90:	3001      	adds	r0, #1
 800cf92:	f43f ae56 	beq.w	800cc42 <_printf_float+0xb6>
 800cf96:	f108 0801 	add.w	r8, r8, #1
 800cf9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4543      	cmp	r3, r8
 800cfa0:	dcf1      	bgt.n	800cf86 <_printf_float+0x3fa>
 800cfa2:	4653      	mov	r3, sl
 800cfa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfa8:	e6e0      	b.n	800cd6c <_printf_float+0x1e0>
 800cfaa:	f04f 0800 	mov.w	r8, #0
 800cfae:	f104 091a 	add.w	r9, r4, #26
 800cfb2:	e7f2      	b.n	800cf9a <_printf_float+0x40e>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	4642      	mov	r2, r8
 800cfb8:	e7df      	b.n	800cf7a <_printf_float+0x3ee>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	464a      	mov	r2, r9
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	47b8      	blx	r7
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f43f ae3c 	beq.w	800cc42 <_printf_float+0xb6>
 800cfca:	f108 0801 	add.w	r8, r8, #1
 800cfce:	68e3      	ldr	r3, [r4, #12]
 800cfd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cfd2:	1a5b      	subs	r3, r3, r1
 800cfd4:	4543      	cmp	r3, r8
 800cfd6:	dcf0      	bgt.n	800cfba <_printf_float+0x42e>
 800cfd8:	e6fd      	b.n	800cdd6 <_printf_float+0x24a>
 800cfda:	f04f 0800 	mov.w	r8, #0
 800cfde:	f104 0919 	add.w	r9, r4, #25
 800cfe2:	e7f4      	b.n	800cfce <_printf_float+0x442>

0800cfe4 <_printf_common>:
 800cfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe8:	4616      	mov	r6, r2
 800cfea:	4699      	mov	r9, r3
 800cfec:	688a      	ldr	r2, [r1, #8]
 800cfee:	690b      	ldr	r3, [r1, #16]
 800cff0:	4607      	mov	r7, r0
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bfb8      	it	lt
 800cff6:	4613      	movlt	r3, r2
 800cff8:	6033      	str	r3, [r6, #0]
 800cffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cffe:	460c      	mov	r4, r1
 800d000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d004:	b10a      	cbz	r2, 800d00a <_printf_common+0x26>
 800d006:	3301      	adds	r3, #1
 800d008:	6033      	str	r3, [r6, #0]
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	0699      	lsls	r1, r3, #26
 800d00e:	bf42      	ittt	mi
 800d010:	6833      	ldrmi	r3, [r6, #0]
 800d012:	3302      	addmi	r3, #2
 800d014:	6033      	strmi	r3, [r6, #0]
 800d016:	6825      	ldr	r5, [r4, #0]
 800d018:	f015 0506 	ands.w	r5, r5, #6
 800d01c:	d106      	bne.n	800d02c <_printf_common+0x48>
 800d01e:	f104 0a19 	add.w	sl, r4, #25
 800d022:	68e3      	ldr	r3, [r4, #12]
 800d024:	6832      	ldr	r2, [r6, #0]
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	42ab      	cmp	r3, r5
 800d02a:	dc28      	bgt.n	800d07e <_printf_common+0x9a>
 800d02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d030:	1e13      	subs	r3, r2, #0
 800d032:	6822      	ldr	r2, [r4, #0]
 800d034:	bf18      	it	ne
 800d036:	2301      	movne	r3, #1
 800d038:	0692      	lsls	r2, r2, #26
 800d03a:	d42d      	bmi.n	800d098 <_printf_common+0xb4>
 800d03c:	4649      	mov	r1, r9
 800d03e:	4638      	mov	r0, r7
 800d040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d044:	47c0      	blx	r8
 800d046:	3001      	adds	r0, #1
 800d048:	d020      	beq.n	800d08c <_printf_common+0xa8>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	68e5      	ldr	r5, [r4, #12]
 800d04e:	f003 0306 	and.w	r3, r3, #6
 800d052:	2b04      	cmp	r3, #4
 800d054:	bf18      	it	ne
 800d056:	2500      	movne	r5, #0
 800d058:	6832      	ldr	r2, [r6, #0]
 800d05a:	f04f 0600 	mov.w	r6, #0
 800d05e:	68a3      	ldr	r3, [r4, #8]
 800d060:	bf08      	it	eq
 800d062:	1aad      	subeq	r5, r5, r2
 800d064:	6922      	ldr	r2, [r4, #16]
 800d066:	bf08      	it	eq
 800d068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d06c:	4293      	cmp	r3, r2
 800d06e:	bfc4      	itt	gt
 800d070:	1a9b      	subgt	r3, r3, r2
 800d072:	18ed      	addgt	r5, r5, r3
 800d074:	341a      	adds	r4, #26
 800d076:	42b5      	cmp	r5, r6
 800d078:	d11a      	bne.n	800d0b0 <_printf_common+0xcc>
 800d07a:	2000      	movs	r0, #0
 800d07c:	e008      	b.n	800d090 <_printf_common+0xac>
 800d07e:	2301      	movs	r3, #1
 800d080:	4652      	mov	r2, sl
 800d082:	4649      	mov	r1, r9
 800d084:	4638      	mov	r0, r7
 800d086:	47c0      	blx	r8
 800d088:	3001      	adds	r0, #1
 800d08a:	d103      	bne.n	800d094 <_printf_common+0xb0>
 800d08c:	f04f 30ff 	mov.w	r0, #4294967295
 800d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d094:	3501      	adds	r5, #1
 800d096:	e7c4      	b.n	800d022 <_printf_common+0x3e>
 800d098:	2030      	movs	r0, #48	; 0x30
 800d09a:	18e1      	adds	r1, r4, r3
 800d09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a6:	4422      	add	r2, r4
 800d0a8:	3302      	adds	r3, #2
 800d0aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0ae:	e7c5      	b.n	800d03c <_printf_common+0x58>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	47c0      	blx	r8
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d0e6      	beq.n	800d08c <_printf_common+0xa8>
 800d0be:	3601      	adds	r6, #1
 800d0c0:	e7d9      	b.n	800d076 <_printf_common+0x92>
	...

0800d0c4 <_printf_i>:
 800d0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	7e0f      	ldrb	r7, [r1, #24]
 800d0ca:	4691      	mov	r9, r2
 800d0cc:	2f78      	cmp	r7, #120	; 0x78
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	469a      	mov	sl, r3
 800d0d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0da:	d807      	bhi.n	800d0ec <_printf_i+0x28>
 800d0dc:	2f62      	cmp	r7, #98	; 0x62
 800d0de:	d80a      	bhi.n	800d0f6 <_printf_i+0x32>
 800d0e0:	2f00      	cmp	r7, #0
 800d0e2:	f000 80d9 	beq.w	800d298 <_printf_i+0x1d4>
 800d0e6:	2f58      	cmp	r7, #88	; 0x58
 800d0e8:	f000 80a4 	beq.w	800d234 <_printf_i+0x170>
 800d0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0f4:	e03a      	b.n	800d16c <_printf_i+0xa8>
 800d0f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0fa:	2b15      	cmp	r3, #21
 800d0fc:	d8f6      	bhi.n	800d0ec <_printf_i+0x28>
 800d0fe:	a101      	add	r1, pc, #4	; (adr r1, 800d104 <_printf_i+0x40>)
 800d100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d171 	.word	0x0800d171
 800d10c:	0800d0ed 	.word	0x0800d0ed
 800d110:	0800d0ed 	.word	0x0800d0ed
 800d114:	0800d0ed 	.word	0x0800d0ed
 800d118:	0800d0ed 	.word	0x0800d0ed
 800d11c:	0800d171 	.word	0x0800d171
 800d120:	0800d0ed 	.word	0x0800d0ed
 800d124:	0800d0ed 	.word	0x0800d0ed
 800d128:	0800d0ed 	.word	0x0800d0ed
 800d12c:	0800d0ed 	.word	0x0800d0ed
 800d130:	0800d27f 	.word	0x0800d27f
 800d134:	0800d1a1 	.word	0x0800d1a1
 800d138:	0800d261 	.word	0x0800d261
 800d13c:	0800d0ed 	.word	0x0800d0ed
 800d140:	0800d0ed 	.word	0x0800d0ed
 800d144:	0800d2a1 	.word	0x0800d2a1
 800d148:	0800d0ed 	.word	0x0800d0ed
 800d14c:	0800d1a1 	.word	0x0800d1a1
 800d150:	0800d0ed 	.word	0x0800d0ed
 800d154:	0800d0ed 	.word	0x0800d0ed
 800d158:	0800d269 	.word	0x0800d269
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	602a      	str	r2, [r5, #0]
 800d164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d16c:	2301      	movs	r3, #1
 800d16e:	e0a4      	b.n	800d2ba <_printf_i+0x1f6>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	6829      	ldr	r1, [r5, #0]
 800d174:	0606      	lsls	r6, r0, #24
 800d176:	f101 0304 	add.w	r3, r1, #4
 800d17a:	d50a      	bpl.n	800d192 <_printf_i+0xce>
 800d17c:	680e      	ldr	r6, [r1, #0]
 800d17e:	602b      	str	r3, [r5, #0]
 800d180:	2e00      	cmp	r6, #0
 800d182:	da03      	bge.n	800d18c <_printf_i+0xc8>
 800d184:	232d      	movs	r3, #45	; 0x2d
 800d186:	4276      	negs	r6, r6
 800d188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d18c:	230a      	movs	r3, #10
 800d18e:	485e      	ldr	r0, [pc, #376]	; (800d308 <_printf_i+0x244>)
 800d190:	e019      	b.n	800d1c6 <_printf_i+0x102>
 800d192:	680e      	ldr	r6, [r1, #0]
 800d194:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d198:	602b      	str	r3, [r5, #0]
 800d19a:	bf18      	it	ne
 800d19c:	b236      	sxthne	r6, r6
 800d19e:	e7ef      	b.n	800d180 <_printf_i+0xbc>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	6820      	ldr	r0, [r4, #0]
 800d1a4:	1d19      	adds	r1, r3, #4
 800d1a6:	6029      	str	r1, [r5, #0]
 800d1a8:	0601      	lsls	r1, r0, #24
 800d1aa:	d501      	bpl.n	800d1b0 <_printf_i+0xec>
 800d1ac:	681e      	ldr	r6, [r3, #0]
 800d1ae:	e002      	b.n	800d1b6 <_printf_i+0xf2>
 800d1b0:	0646      	lsls	r6, r0, #25
 800d1b2:	d5fb      	bpl.n	800d1ac <_printf_i+0xe8>
 800d1b4:	881e      	ldrh	r6, [r3, #0]
 800d1b6:	2f6f      	cmp	r7, #111	; 0x6f
 800d1b8:	bf0c      	ite	eq
 800d1ba:	2308      	moveq	r3, #8
 800d1bc:	230a      	movne	r3, #10
 800d1be:	4852      	ldr	r0, [pc, #328]	; (800d308 <_printf_i+0x244>)
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1c6:	6865      	ldr	r5, [r4, #4]
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	bfa8      	it	ge
 800d1cc:	6821      	ldrge	r1, [r4, #0]
 800d1ce:	60a5      	str	r5, [r4, #8]
 800d1d0:	bfa4      	itt	ge
 800d1d2:	f021 0104 	bicge.w	r1, r1, #4
 800d1d6:	6021      	strge	r1, [r4, #0]
 800d1d8:	b90e      	cbnz	r6, 800d1de <_printf_i+0x11a>
 800d1da:	2d00      	cmp	r5, #0
 800d1dc:	d04d      	beq.n	800d27a <_printf_i+0x1b6>
 800d1de:	4615      	mov	r5, r2
 800d1e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1e4:	fb03 6711 	mls	r7, r3, r1, r6
 800d1e8:	5dc7      	ldrb	r7, [r0, r7]
 800d1ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1ee:	4637      	mov	r7, r6
 800d1f0:	42bb      	cmp	r3, r7
 800d1f2:	460e      	mov	r6, r1
 800d1f4:	d9f4      	bls.n	800d1e0 <_printf_i+0x11c>
 800d1f6:	2b08      	cmp	r3, #8
 800d1f8:	d10b      	bne.n	800d212 <_printf_i+0x14e>
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	07de      	lsls	r6, r3, #31
 800d1fe:	d508      	bpl.n	800d212 <_printf_i+0x14e>
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	6861      	ldr	r1, [r4, #4]
 800d204:	4299      	cmp	r1, r3
 800d206:	bfde      	ittt	le
 800d208:	2330      	movle	r3, #48	; 0x30
 800d20a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d20e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d212:	1b52      	subs	r2, r2, r5
 800d214:	6122      	str	r2, [r4, #16]
 800d216:	464b      	mov	r3, r9
 800d218:	4621      	mov	r1, r4
 800d21a:	4640      	mov	r0, r8
 800d21c:	f8cd a000 	str.w	sl, [sp]
 800d220:	aa03      	add	r2, sp, #12
 800d222:	f7ff fedf 	bl	800cfe4 <_printf_common>
 800d226:	3001      	adds	r0, #1
 800d228:	d14c      	bne.n	800d2c4 <_printf_i+0x200>
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	b004      	add	sp, #16
 800d230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d234:	4834      	ldr	r0, [pc, #208]	; (800d308 <_printf_i+0x244>)
 800d236:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d23a:	6829      	ldr	r1, [r5, #0]
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d242:	6029      	str	r1, [r5, #0]
 800d244:	061d      	lsls	r5, r3, #24
 800d246:	d514      	bpl.n	800d272 <_printf_i+0x1ae>
 800d248:	07df      	lsls	r7, r3, #31
 800d24a:	bf44      	itt	mi
 800d24c:	f043 0320 	orrmi.w	r3, r3, #32
 800d250:	6023      	strmi	r3, [r4, #0]
 800d252:	b91e      	cbnz	r6, 800d25c <_printf_i+0x198>
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	f023 0320 	bic.w	r3, r3, #32
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	2310      	movs	r3, #16
 800d25e:	e7af      	b.n	800d1c0 <_printf_i+0xfc>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	f043 0320 	orr.w	r3, r3, #32
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	2378      	movs	r3, #120	; 0x78
 800d26a:	4828      	ldr	r0, [pc, #160]	; (800d30c <_printf_i+0x248>)
 800d26c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d270:	e7e3      	b.n	800d23a <_printf_i+0x176>
 800d272:	0659      	lsls	r1, r3, #25
 800d274:	bf48      	it	mi
 800d276:	b2b6      	uxthmi	r6, r6
 800d278:	e7e6      	b.n	800d248 <_printf_i+0x184>
 800d27a:	4615      	mov	r5, r2
 800d27c:	e7bb      	b.n	800d1f6 <_printf_i+0x132>
 800d27e:	682b      	ldr	r3, [r5, #0]
 800d280:	6826      	ldr	r6, [r4, #0]
 800d282:	1d18      	adds	r0, r3, #4
 800d284:	6961      	ldr	r1, [r4, #20]
 800d286:	6028      	str	r0, [r5, #0]
 800d288:	0635      	lsls	r5, r6, #24
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	d501      	bpl.n	800d292 <_printf_i+0x1ce>
 800d28e:	6019      	str	r1, [r3, #0]
 800d290:	e002      	b.n	800d298 <_printf_i+0x1d4>
 800d292:	0670      	lsls	r0, r6, #25
 800d294:	d5fb      	bpl.n	800d28e <_printf_i+0x1ca>
 800d296:	8019      	strh	r1, [r3, #0]
 800d298:	2300      	movs	r3, #0
 800d29a:	4615      	mov	r5, r2
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	e7ba      	b.n	800d216 <_printf_i+0x152>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	1d1a      	adds	r2, r3, #4
 800d2a6:	602a      	str	r2, [r5, #0]
 800d2a8:	681d      	ldr	r5, [r3, #0]
 800d2aa:	6862      	ldr	r2, [r4, #4]
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	f000 ffd9 	bl	800e264 <memchr>
 800d2b2:	b108      	cbz	r0, 800d2b8 <_printf_i+0x1f4>
 800d2b4:	1b40      	subs	r0, r0, r5
 800d2b6:	6060      	str	r0, [r4, #4]
 800d2b8:	6863      	ldr	r3, [r4, #4]
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2c2:	e7a8      	b.n	800d216 <_printf_i+0x152>
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	47d0      	blx	sl
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d0ab      	beq.n	800d22a <_printf_i+0x166>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	079b      	lsls	r3, r3, #30
 800d2d6:	d413      	bmi.n	800d300 <_printf_i+0x23c>
 800d2d8:	68e0      	ldr	r0, [r4, #12]
 800d2da:	9b03      	ldr	r3, [sp, #12]
 800d2dc:	4298      	cmp	r0, r3
 800d2de:	bfb8      	it	lt
 800d2e0:	4618      	movlt	r0, r3
 800d2e2:	e7a4      	b.n	800d22e <_printf_i+0x16a>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	47d0      	blx	sl
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	d09b      	beq.n	800d22a <_printf_i+0x166>
 800d2f2:	3501      	adds	r5, #1
 800d2f4:	68e3      	ldr	r3, [r4, #12]
 800d2f6:	9903      	ldr	r1, [sp, #12]
 800d2f8:	1a5b      	subs	r3, r3, r1
 800d2fa:	42ab      	cmp	r3, r5
 800d2fc:	dcf2      	bgt.n	800d2e4 <_printf_i+0x220>
 800d2fe:	e7eb      	b.n	800d2d8 <_printf_i+0x214>
 800d300:	2500      	movs	r5, #0
 800d302:	f104 0619 	add.w	r6, r4, #25
 800d306:	e7f5      	b.n	800d2f4 <_printf_i+0x230>
 800d308:	08011f52 	.word	0x08011f52
 800d30c:	08011f63 	.word	0x08011f63

0800d310 <_sbrk_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	2300      	movs	r3, #0
 800d314:	4d05      	ldr	r5, [pc, #20]	; (800d32c <_sbrk_r+0x1c>)
 800d316:	4604      	mov	r4, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	602b      	str	r3, [r5, #0]
 800d31c:	f7f6 fc46 	bl	8003bac <_sbrk>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_sbrk_r+0x1a>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_sbrk_r+0x1a>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	20001d00 	.word	0x20001d00

0800d330 <sniprintf>:
 800d330:	b40c      	push	{r2, r3}
 800d332:	b530      	push	{r4, r5, lr}
 800d334:	4b17      	ldr	r3, [pc, #92]	; (800d394 <sniprintf+0x64>)
 800d336:	1e0c      	subs	r4, r1, #0
 800d338:	681d      	ldr	r5, [r3, #0]
 800d33a:	b09d      	sub	sp, #116	; 0x74
 800d33c:	da08      	bge.n	800d350 <sniprintf+0x20>
 800d33e:	238b      	movs	r3, #139	; 0x8b
 800d340:	f04f 30ff 	mov.w	r0, #4294967295
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	b01d      	add	sp, #116	; 0x74
 800d348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d34c:	b002      	add	sp, #8
 800d34e:	4770      	bx	lr
 800d350:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d354:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d358:	bf0c      	ite	eq
 800d35a:	4623      	moveq	r3, r4
 800d35c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	9307      	str	r3, [sp, #28]
 800d364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d368:	9002      	str	r0, [sp, #8]
 800d36a:	9006      	str	r0, [sp, #24]
 800d36c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d370:	4628      	mov	r0, r5
 800d372:	ab21      	add	r3, sp, #132	; 0x84
 800d374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d376:	a902      	add	r1, sp, #8
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	f001 fb7f 	bl	800ea7c <_svfiprintf_r>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	bfbc      	itt	lt
 800d382:	238b      	movlt	r3, #139	; 0x8b
 800d384:	602b      	strlt	r3, [r5, #0]
 800d386:	2c00      	cmp	r4, #0
 800d388:	d0dd      	beq.n	800d346 <sniprintf+0x16>
 800d38a:	2200      	movs	r2, #0
 800d38c:	9b02      	ldr	r3, [sp, #8]
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	e7d9      	b.n	800d346 <sniprintf+0x16>
 800d392:	bf00      	nop
 800d394:	20000024 	.word	0x20000024

0800d398 <siprintf>:
 800d398:	b40e      	push	{r1, r2, r3}
 800d39a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d39e:	b500      	push	{lr}
 800d3a0:	b09c      	sub	sp, #112	; 0x70
 800d3a2:	ab1d      	add	r3, sp, #116	; 0x74
 800d3a4:	9002      	str	r0, [sp, #8]
 800d3a6:	9006      	str	r0, [sp, #24]
 800d3a8:	9107      	str	r1, [sp, #28]
 800d3aa:	9104      	str	r1, [sp, #16]
 800d3ac:	4808      	ldr	r0, [pc, #32]	; (800d3d0 <siprintf+0x38>)
 800d3ae:	4909      	ldr	r1, [pc, #36]	; (800d3d4 <siprintf+0x3c>)
 800d3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b4:	9105      	str	r1, [sp, #20]
 800d3b6:	6800      	ldr	r0, [r0, #0]
 800d3b8:	a902      	add	r1, sp, #8
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	f001 fb5e 	bl	800ea7c <_svfiprintf_r>
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	9b02      	ldr	r3, [sp, #8]
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	b01c      	add	sp, #112	; 0x70
 800d3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3cc:	b003      	add	sp, #12
 800d3ce:	4770      	bx	lr
 800d3d0:	20000024 	.word	0x20000024
 800d3d4:	ffff0208 	.word	0xffff0208

0800d3d8 <strchr>:
 800d3d8:	4603      	mov	r3, r0
 800d3da:	b2c9      	uxtb	r1, r1
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e2:	b112      	cbz	r2, 800d3ea <strchr+0x12>
 800d3e4:	428a      	cmp	r2, r1
 800d3e6:	d1f9      	bne.n	800d3dc <strchr+0x4>
 800d3e8:	4770      	bx	lr
 800d3ea:	2900      	cmp	r1, #0
 800d3ec:	bf18      	it	ne
 800d3ee:	2000      	movne	r0, #0
 800d3f0:	4770      	bx	lr

0800d3f2 <strcpy>:
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3f8:	f803 2b01 	strb.w	r2, [r3], #1
 800d3fc:	2a00      	cmp	r2, #0
 800d3fe:	d1f9      	bne.n	800d3f4 <strcpy+0x2>
 800d400:	4770      	bx	lr

0800d402 <strncmp>:
 800d402:	4603      	mov	r3, r0
 800d404:	b510      	push	{r4, lr}
 800d406:	b172      	cbz	r2, 800d426 <strncmp+0x24>
 800d408:	3901      	subs	r1, #1
 800d40a:	1884      	adds	r4, r0, r2
 800d40c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d410:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d414:	4290      	cmp	r0, r2
 800d416:	d101      	bne.n	800d41c <strncmp+0x1a>
 800d418:	42a3      	cmp	r3, r4
 800d41a:	d101      	bne.n	800d420 <strncmp+0x1e>
 800d41c:	1a80      	subs	r0, r0, r2
 800d41e:	bd10      	pop	{r4, pc}
 800d420:	2800      	cmp	r0, #0
 800d422:	d1f3      	bne.n	800d40c <strncmp+0xa>
 800d424:	e7fa      	b.n	800d41c <strncmp+0x1a>
 800d426:	4610      	mov	r0, r2
 800d428:	e7f9      	b.n	800d41e <strncmp+0x1c>

0800d42a <strstr>:
 800d42a:	780a      	ldrb	r2, [r1, #0]
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	b96a      	cbnz	r2, 800d44c <strstr+0x22>
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	429a      	cmp	r2, r3
 800d434:	d109      	bne.n	800d44a <strstr+0x20>
 800d436:	460c      	mov	r4, r1
 800d438:	4605      	mov	r5, r0
 800d43a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0f6      	beq.n	800d430 <strstr+0x6>
 800d442:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d446:	429e      	cmp	r6, r3
 800d448:	d0f7      	beq.n	800d43a <strstr+0x10>
 800d44a:	3001      	adds	r0, #1
 800d44c:	7803      	ldrb	r3, [r0, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1ef      	bne.n	800d432 <strstr+0x8>
 800d452:	4618      	mov	r0, r3
 800d454:	e7ec      	b.n	800d430 <strstr+0x6>
	...

0800d458 <_strtol_l.constprop.0>:
 800d458:	2b01      	cmp	r3, #1
 800d45a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d45e:	4680      	mov	r8, r0
 800d460:	d001      	beq.n	800d466 <_strtol_l.constprop.0+0xe>
 800d462:	2b24      	cmp	r3, #36	; 0x24
 800d464:	d906      	bls.n	800d474 <_strtol_l.constprop.0+0x1c>
 800d466:	f7ff f9c7 	bl	800c7f8 <__errno>
 800d46a:	2316      	movs	r3, #22
 800d46c:	6003      	str	r3, [r0, #0]
 800d46e:	2000      	movs	r0, #0
 800d470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d474:	460d      	mov	r5, r1
 800d476:	4f35      	ldr	r7, [pc, #212]	; (800d54c <_strtol_l.constprop.0+0xf4>)
 800d478:	4628      	mov	r0, r5
 800d47a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d47e:	5de6      	ldrb	r6, [r4, r7]
 800d480:	f016 0608 	ands.w	r6, r6, #8
 800d484:	d1f8      	bne.n	800d478 <_strtol_l.constprop.0+0x20>
 800d486:	2c2d      	cmp	r4, #45	; 0x2d
 800d488:	d12f      	bne.n	800d4ea <_strtol_l.constprop.0+0x92>
 800d48a:	2601      	movs	r6, #1
 800d48c:	782c      	ldrb	r4, [r5, #0]
 800d48e:	1c85      	adds	r5, r0, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d057      	beq.n	800d544 <_strtol_l.constprop.0+0xec>
 800d494:	2b10      	cmp	r3, #16
 800d496:	d109      	bne.n	800d4ac <_strtol_l.constprop.0+0x54>
 800d498:	2c30      	cmp	r4, #48	; 0x30
 800d49a:	d107      	bne.n	800d4ac <_strtol_l.constprop.0+0x54>
 800d49c:	7828      	ldrb	r0, [r5, #0]
 800d49e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d4a2:	2858      	cmp	r0, #88	; 0x58
 800d4a4:	d149      	bne.n	800d53a <_strtol_l.constprop.0+0xe2>
 800d4a6:	2310      	movs	r3, #16
 800d4a8:	786c      	ldrb	r4, [r5, #1]
 800d4aa:	3502      	adds	r5, #2
 800d4ac:	2700      	movs	r7, #0
 800d4ae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800d4b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d4b6:	fbbe f9f3 	udiv	r9, lr, r3
 800d4ba:	4638      	mov	r0, r7
 800d4bc:	fb03 ea19 	mls	sl, r3, r9, lr
 800d4c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4c4:	f1bc 0f09 	cmp.w	ip, #9
 800d4c8:	d814      	bhi.n	800d4f4 <_strtol_l.constprop.0+0x9c>
 800d4ca:	4664      	mov	r4, ip
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	dd22      	ble.n	800d516 <_strtol_l.constprop.0+0xbe>
 800d4d0:	2f00      	cmp	r7, #0
 800d4d2:	db1d      	blt.n	800d510 <_strtol_l.constprop.0+0xb8>
 800d4d4:	4581      	cmp	r9, r0
 800d4d6:	d31b      	bcc.n	800d510 <_strtol_l.constprop.0+0xb8>
 800d4d8:	d101      	bne.n	800d4de <_strtol_l.constprop.0+0x86>
 800d4da:	45a2      	cmp	sl, r4
 800d4dc:	db18      	blt.n	800d510 <_strtol_l.constprop.0+0xb8>
 800d4de:	2701      	movs	r7, #1
 800d4e0:	fb00 4003 	mla	r0, r0, r3, r4
 800d4e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4e8:	e7ea      	b.n	800d4c0 <_strtol_l.constprop.0+0x68>
 800d4ea:	2c2b      	cmp	r4, #43	; 0x2b
 800d4ec:	bf04      	itt	eq
 800d4ee:	782c      	ldrbeq	r4, [r5, #0]
 800d4f0:	1c85      	addeq	r5, r0, #2
 800d4f2:	e7cd      	b.n	800d490 <_strtol_l.constprop.0+0x38>
 800d4f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d4f8:	f1bc 0f19 	cmp.w	ip, #25
 800d4fc:	d801      	bhi.n	800d502 <_strtol_l.constprop.0+0xaa>
 800d4fe:	3c37      	subs	r4, #55	; 0x37
 800d500:	e7e4      	b.n	800d4cc <_strtol_l.constprop.0+0x74>
 800d502:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d506:	f1bc 0f19 	cmp.w	ip, #25
 800d50a:	d804      	bhi.n	800d516 <_strtol_l.constprop.0+0xbe>
 800d50c:	3c57      	subs	r4, #87	; 0x57
 800d50e:	e7dd      	b.n	800d4cc <_strtol_l.constprop.0+0x74>
 800d510:	f04f 37ff 	mov.w	r7, #4294967295
 800d514:	e7e6      	b.n	800d4e4 <_strtol_l.constprop.0+0x8c>
 800d516:	2f00      	cmp	r7, #0
 800d518:	da07      	bge.n	800d52a <_strtol_l.constprop.0+0xd2>
 800d51a:	2322      	movs	r3, #34	; 0x22
 800d51c:	4670      	mov	r0, lr
 800d51e:	f8c8 3000 	str.w	r3, [r8]
 800d522:	2a00      	cmp	r2, #0
 800d524:	d0a4      	beq.n	800d470 <_strtol_l.constprop.0+0x18>
 800d526:	1e69      	subs	r1, r5, #1
 800d528:	e005      	b.n	800d536 <_strtol_l.constprop.0+0xde>
 800d52a:	b106      	cbz	r6, 800d52e <_strtol_l.constprop.0+0xd6>
 800d52c:	4240      	negs	r0, r0
 800d52e:	2a00      	cmp	r2, #0
 800d530:	d09e      	beq.n	800d470 <_strtol_l.constprop.0+0x18>
 800d532:	2f00      	cmp	r7, #0
 800d534:	d1f7      	bne.n	800d526 <_strtol_l.constprop.0+0xce>
 800d536:	6011      	str	r1, [r2, #0]
 800d538:	e79a      	b.n	800d470 <_strtol_l.constprop.0+0x18>
 800d53a:	2430      	movs	r4, #48	; 0x30
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1b5      	bne.n	800d4ac <_strtol_l.constprop.0+0x54>
 800d540:	2308      	movs	r3, #8
 800d542:	e7b3      	b.n	800d4ac <_strtol_l.constprop.0+0x54>
 800d544:	2c30      	cmp	r4, #48	; 0x30
 800d546:	d0a9      	beq.n	800d49c <_strtol_l.constprop.0+0x44>
 800d548:	230a      	movs	r3, #10
 800d54a:	e7af      	b.n	800d4ac <_strtol_l.constprop.0+0x54>
 800d54c:	08011e39 	.word	0x08011e39

0800d550 <strtol>:
 800d550:	4613      	mov	r3, r2
 800d552:	460a      	mov	r2, r1
 800d554:	4601      	mov	r1, r0
 800d556:	4802      	ldr	r0, [pc, #8]	; (800d560 <strtol+0x10>)
 800d558:	6800      	ldr	r0, [r0, #0]
 800d55a:	f7ff bf7d 	b.w	800d458 <_strtol_l.constprop.0>
 800d55e:	bf00      	nop
 800d560:	20000024 	.word	0x20000024

0800d564 <quorem>:
 800d564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	6903      	ldr	r3, [r0, #16]
 800d56a:	690c      	ldr	r4, [r1, #16]
 800d56c:	4607      	mov	r7, r0
 800d56e:	42a3      	cmp	r3, r4
 800d570:	f2c0 8082 	blt.w	800d678 <quorem+0x114>
 800d574:	3c01      	subs	r4, #1
 800d576:	f100 0514 	add.w	r5, r0, #20
 800d57a:	f101 0814 	add.w	r8, r1, #20
 800d57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d58c:	3301      	adds	r3, #1
 800d58e:	429a      	cmp	r2, r3
 800d590:	fbb2 f6f3 	udiv	r6, r2, r3
 800d594:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d59c:	d331      	bcc.n	800d602 <quorem+0x9e>
 800d59e:	f04f 0e00 	mov.w	lr, #0
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	46ac      	mov	ip, r5
 800d5a6:	46f2      	mov	sl, lr
 800d5a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d5ac:	b293      	uxth	r3, r2
 800d5ae:	fb06 e303 	mla	r3, r6, r3, lr
 800d5b2:	0c12      	lsrs	r2, r2, #16
 800d5b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	fb06 e202 	mla	r2, r6, r2, lr
 800d5be:	ebaa 0303 	sub.w	r3, sl, r3
 800d5c2:	f8dc a000 	ldr.w	sl, [ip]
 800d5c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5ca:	fa1f fa8a 	uxth.w	sl, sl
 800d5ce:	4453      	add	r3, sl
 800d5d0:	f8dc a000 	ldr.w	sl, [ip]
 800d5d4:	b292      	uxth	r2, r2
 800d5d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5e4:	4581      	cmp	r9, r0
 800d5e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5ea:	f84c 3b04 	str.w	r3, [ip], #4
 800d5ee:	d2db      	bcs.n	800d5a8 <quorem+0x44>
 800d5f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5f4:	b92b      	cbnz	r3, 800d602 <quorem+0x9e>
 800d5f6:	9b01      	ldr	r3, [sp, #4]
 800d5f8:	3b04      	subs	r3, #4
 800d5fa:	429d      	cmp	r5, r3
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	d32f      	bcc.n	800d660 <quorem+0xfc>
 800d600:	613c      	str	r4, [r7, #16]
 800d602:	4638      	mov	r0, r7
 800d604:	f001 f8c6 	bl	800e794 <__mcmp>
 800d608:	2800      	cmp	r0, #0
 800d60a:	db25      	blt.n	800d658 <quorem+0xf4>
 800d60c:	4628      	mov	r0, r5
 800d60e:	f04f 0c00 	mov.w	ip, #0
 800d612:	3601      	adds	r6, #1
 800d614:	f858 1b04 	ldr.w	r1, [r8], #4
 800d618:	f8d0 e000 	ldr.w	lr, [r0]
 800d61c:	b28b      	uxth	r3, r1
 800d61e:	ebac 0303 	sub.w	r3, ip, r3
 800d622:	fa1f f28e 	uxth.w	r2, lr
 800d626:	4413      	add	r3, r2
 800d628:	0c0a      	lsrs	r2, r1, #16
 800d62a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d62e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d632:	b29b      	uxth	r3, r3
 800d634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d638:	45c1      	cmp	r9, r8
 800d63a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d63e:	f840 3b04 	str.w	r3, [r0], #4
 800d642:	d2e7      	bcs.n	800d614 <quorem+0xb0>
 800d644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d648:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d64c:	b922      	cbnz	r2, 800d658 <quorem+0xf4>
 800d64e:	3b04      	subs	r3, #4
 800d650:	429d      	cmp	r5, r3
 800d652:	461a      	mov	r2, r3
 800d654:	d30a      	bcc.n	800d66c <quorem+0x108>
 800d656:	613c      	str	r4, [r7, #16]
 800d658:	4630      	mov	r0, r6
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	6812      	ldr	r2, [r2, #0]
 800d662:	3b04      	subs	r3, #4
 800d664:	2a00      	cmp	r2, #0
 800d666:	d1cb      	bne.n	800d600 <quorem+0x9c>
 800d668:	3c01      	subs	r4, #1
 800d66a:	e7c6      	b.n	800d5fa <quorem+0x96>
 800d66c:	6812      	ldr	r2, [r2, #0]
 800d66e:	3b04      	subs	r3, #4
 800d670:	2a00      	cmp	r2, #0
 800d672:	d1f0      	bne.n	800d656 <quorem+0xf2>
 800d674:	3c01      	subs	r4, #1
 800d676:	e7eb      	b.n	800d650 <quorem+0xec>
 800d678:	2000      	movs	r0, #0
 800d67a:	e7ee      	b.n	800d65a <quorem+0xf6>
 800d67c:	0000      	movs	r0, r0
	...

0800d680 <_dtoa_r>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	4616      	mov	r6, r2
 800d686:	461f      	mov	r7, r3
 800d688:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d68a:	b099      	sub	sp, #100	; 0x64
 800d68c:	4605      	mov	r5, r0
 800d68e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d692:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d696:	b974      	cbnz	r4, 800d6b6 <_dtoa_r+0x36>
 800d698:	2010      	movs	r0, #16
 800d69a:	f7ff f8d7 	bl	800c84c <malloc>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6268      	str	r0, [r5, #36]	; 0x24
 800d6a2:	b920      	cbnz	r0, 800d6ae <_dtoa_r+0x2e>
 800d6a4:	21ea      	movs	r1, #234	; 0xea
 800d6a6:	4ba8      	ldr	r3, [pc, #672]	; (800d948 <_dtoa_r+0x2c8>)
 800d6a8:	48a8      	ldr	r0, [pc, #672]	; (800d94c <_dtoa_r+0x2cc>)
 800d6aa:	f001 fae7 	bl	800ec7c <__assert_func>
 800d6ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6b2:	6004      	str	r4, [r0, #0]
 800d6b4:	60c4      	str	r4, [r0, #12]
 800d6b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	b151      	cbz	r1, 800d6d2 <_dtoa_r+0x52>
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	4093      	lsls	r3, r2
 800d6c2:	604a      	str	r2, [r1, #4]
 800d6c4:	608b      	str	r3, [r1, #8]
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	f000 fe26 	bl	800e318 <_Bfree>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6d0:	601a      	str	r2, [r3, #0]
 800d6d2:	1e3b      	subs	r3, r7, #0
 800d6d4:	bfaf      	iteee	ge
 800d6d6:	2300      	movge	r3, #0
 800d6d8:	2201      	movlt	r2, #1
 800d6da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6de:	9305      	strlt	r3, [sp, #20]
 800d6e0:	bfa8      	it	ge
 800d6e2:	f8c8 3000 	strge.w	r3, [r8]
 800d6e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d6ea:	4b99      	ldr	r3, [pc, #612]	; (800d950 <_dtoa_r+0x2d0>)
 800d6ec:	bfb8      	it	lt
 800d6ee:	f8c8 2000 	strlt.w	r2, [r8]
 800d6f2:	ea33 0309 	bics.w	r3, r3, r9
 800d6f6:	d119      	bne.n	800d72c <_dtoa_r+0xac>
 800d6f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d6fe:	6013      	str	r3, [r2, #0]
 800d700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d704:	4333      	orrs	r3, r6
 800d706:	f000 857f 	beq.w	800e208 <_dtoa_r+0xb88>
 800d70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d70c:	b953      	cbnz	r3, 800d724 <_dtoa_r+0xa4>
 800d70e:	4b91      	ldr	r3, [pc, #580]	; (800d954 <_dtoa_r+0x2d4>)
 800d710:	e022      	b.n	800d758 <_dtoa_r+0xd8>
 800d712:	4b91      	ldr	r3, [pc, #580]	; (800d958 <_dtoa_r+0x2d8>)
 800d714:	9303      	str	r3, [sp, #12]
 800d716:	3308      	adds	r3, #8
 800d718:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d71a:	6013      	str	r3, [r2, #0]
 800d71c:	9803      	ldr	r0, [sp, #12]
 800d71e:	b019      	add	sp, #100	; 0x64
 800d720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d724:	4b8b      	ldr	r3, [pc, #556]	; (800d954 <_dtoa_r+0x2d4>)
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	3303      	adds	r3, #3
 800d72a:	e7f5      	b.n	800d718 <_dtoa_r+0x98>
 800d72c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d730:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d738:	2200      	movs	r2, #0
 800d73a:	2300      	movs	r3, #0
 800d73c:	f7f3 f93e 	bl	80009bc <__aeabi_dcmpeq>
 800d740:	4680      	mov	r8, r0
 800d742:	b158      	cbz	r0, 800d75c <_dtoa_r+0xdc>
 800d744:	2301      	movs	r3, #1
 800d746:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 8558 	beq.w	800e202 <_dtoa_r+0xb82>
 800d752:	4882      	ldr	r0, [pc, #520]	; (800d95c <_dtoa_r+0x2dc>)
 800d754:	6018      	str	r0, [r3, #0]
 800d756:	1e43      	subs	r3, r0, #1
 800d758:	9303      	str	r3, [sp, #12]
 800d75a:	e7df      	b.n	800d71c <_dtoa_r+0x9c>
 800d75c:	ab16      	add	r3, sp, #88	; 0x58
 800d75e:	9301      	str	r3, [sp, #4]
 800d760:	ab17      	add	r3, sp, #92	; 0x5c
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	4628      	mov	r0, r5
 800d766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d76a:	f001 f8bb 	bl	800e8e4 <__d2b>
 800d76e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d772:	4683      	mov	fp, r0
 800d774:	2c00      	cmp	r4, #0
 800d776:	d07f      	beq.n	800d878 <_dtoa_r+0x1f8>
 800d778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d77e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d786:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d78a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d78e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d792:	2200      	movs	r2, #0
 800d794:	4b72      	ldr	r3, [pc, #456]	; (800d960 <_dtoa_r+0x2e0>)
 800d796:	f7f2 fcf1 	bl	800017c <__aeabi_dsub>
 800d79a:	a365      	add	r3, pc, #404	; (adr r3, 800d930 <_dtoa_r+0x2b0>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fea4 	bl	80004ec <__aeabi_dmul>
 800d7a4:	a364      	add	r3, pc, #400	; (adr r3, 800d938 <_dtoa_r+0x2b8>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 fce9 	bl	8000180 <__adddf3>
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	f7f2 fe30 	bl	8000418 <__aeabi_i2d>
 800d7b8:	a361      	add	r3, pc, #388	; (adr r3, 800d940 <_dtoa_r+0x2c0>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	f7f2 fe95 	bl	80004ec <__aeabi_dmul>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f2 fcd9 	bl	8000180 <__adddf3>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	f7f3 f93b 	bl	8000a4c <__aeabi_d2iz>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4682      	mov	sl, r0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	4630      	mov	r0, r6
 800d7de:	4639      	mov	r1, r7
 800d7e0:	f7f3 f8f6 	bl	80009d0 <__aeabi_dcmplt>
 800d7e4:	b148      	cbz	r0, 800d7fa <_dtoa_r+0x17a>
 800d7e6:	4650      	mov	r0, sl
 800d7e8:	f7f2 fe16 	bl	8000418 <__aeabi_i2d>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	f7f3 f8e4 	bl	80009bc <__aeabi_dcmpeq>
 800d7f4:	b908      	cbnz	r0, 800d7fa <_dtoa_r+0x17a>
 800d7f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7fa:	f1ba 0f16 	cmp.w	sl, #22
 800d7fe:	d858      	bhi.n	800d8b2 <_dtoa_r+0x232>
 800d800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d804:	4b57      	ldr	r3, [pc, #348]	; (800d964 <_dtoa_r+0x2e4>)
 800d806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f3 f8df 	bl	80009d0 <__aeabi_dcmplt>
 800d812:	2800      	cmp	r0, #0
 800d814:	d04f      	beq.n	800d8b6 <_dtoa_r+0x236>
 800d816:	2300      	movs	r3, #0
 800d818:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d81c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d81e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d820:	1b1c      	subs	r4, r3, r4
 800d822:	1e63      	subs	r3, r4, #1
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	bf49      	itett	mi
 800d828:	f1c4 0301 	rsbmi	r3, r4, #1
 800d82c:	2300      	movpl	r3, #0
 800d82e:	9306      	strmi	r3, [sp, #24]
 800d830:	2300      	movmi	r3, #0
 800d832:	bf54      	ite	pl
 800d834:	9306      	strpl	r3, [sp, #24]
 800d836:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d838:	f1ba 0f00 	cmp.w	sl, #0
 800d83c:	db3d      	blt.n	800d8ba <_dtoa_r+0x23a>
 800d83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d840:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d844:	4453      	add	r3, sl
 800d846:	9309      	str	r3, [sp, #36]	; 0x24
 800d848:	2300      	movs	r3, #0
 800d84a:	930a      	str	r3, [sp, #40]	; 0x28
 800d84c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d84e:	2b09      	cmp	r3, #9
 800d850:	f200 808c 	bhi.w	800d96c <_dtoa_r+0x2ec>
 800d854:	2b05      	cmp	r3, #5
 800d856:	bfc4      	itt	gt
 800d858:	3b04      	subgt	r3, #4
 800d85a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d85c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d85e:	bfc8      	it	gt
 800d860:	2400      	movgt	r4, #0
 800d862:	f1a3 0302 	sub.w	r3, r3, #2
 800d866:	bfd8      	it	le
 800d868:	2401      	movle	r4, #1
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	f200 808a 	bhi.w	800d984 <_dtoa_r+0x304>
 800d870:	e8df f003 	tbb	[pc, r3]
 800d874:	5b4d4f2d 	.word	0x5b4d4f2d
 800d878:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d87c:	441c      	add	r4, r3
 800d87e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d882:	2b20      	cmp	r3, #32
 800d884:	bfc3      	ittte	gt
 800d886:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d88a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d88e:	fa09 f303 	lslgt.w	r3, r9, r3
 800d892:	f1c3 0320 	rsble	r3, r3, #32
 800d896:	bfc6      	itte	gt
 800d898:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d89c:	4318      	orrgt	r0, r3
 800d89e:	fa06 f003 	lslle.w	r0, r6, r3
 800d8a2:	f7f2 fda9 	bl	80003f8 <__aeabi_ui2d>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d8ac:	3c01      	subs	r4, #1
 800d8ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8b0:	e76f      	b.n	800d792 <_dtoa_r+0x112>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e7b2      	b.n	800d81c <_dtoa_r+0x19c>
 800d8b6:	900f      	str	r0, [sp, #60]	; 0x3c
 800d8b8:	e7b1      	b.n	800d81e <_dtoa_r+0x19e>
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	eba3 030a 	sub.w	r3, r3, sl
 800d8c0:	9306      	str	r3, [sp, #24]
 800d8c2:	f1ca 0300 	rsb	r3, sl, #0
 800d8c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	930e      	str	r3, [sp, #56]	; 0x38
 800d8cc:	e7be      	b.n	800d84c <_dtoa_r+0x1cc>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	dc58      	bgt.n	800d98a <_dtoa_r+0x30a>
 800d8d8:	f04f 0901 	mov.w	r9, #1
 800d8dc:	464b      	mov	r3, r9
 800d8de:	f8cd 9020 	str.w	r9, [sp, #32]
 800d8e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d8ea:	6042      	str	r2, [r0, #4]
 800d8ec:	2204      	movs	r2, #4
 800d8ee:	f102 0614 	add.w	r6, r2, #20
 800d8f2:	429e      	cmp	r6, r3
 800d8f4:	6841      	ldr	r1, [r0, #4]
 800d8f6:	d94e      	bls.n	800d996 <_dtoa_r+0x316>
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f000 fccd 	bl	800e298 <_Balloc>
 800d8fe:	9003      	str	r0, [sp, #12]
 800d900:	2800      	cmp	r0, #0
 800d902:	d14c      	bne.n	800d99e <_dtoa_r+0x31e>
 800d904:	4602      	mov	r2, r0
 800d906:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d90a:	4b17      	ldr	r3, [pc, #92]	; (800d968 <_dtoa_r+0x2e8>)
 800d90c:	e6cc      	b.n	800d6a8 <_dtoa_r+0x28>
 800d90e:	2301      	movs	r3, #1
 800d910:	e7de      	b.n	800d8d0 <_dtoa_r+0x250>
 800d912:	2300      	movs	r3, #0
 800d914:	930b      	str	r3, [sp, #44]	; 0x2c
 800d916:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d918:	eb0a 0903 	add.w	r9, sl, r3
 800d91c:	f109 0301 	add.w	r3, r9, #1
 800d920:	2b01      	cmp	r3, #1
 800d922:	9308      	str	r3, [sp, #32]
 800d924:	bfb8      	it	lt
 800d926:	2301      	movlt	r3, #1
 800d928:	e7dd      	b.n	800d8e6 <_dtoa_r+0x266>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e7f2      	b.n	800d914 <_dtoa_r+0x294>
 800d92e:	bf00      	nop
 800d930:	636f4361 	.word	0x636f4361
 800d934:	3fd287a7 	.word	0x3fd287a7
 800d938:	8b60c8b3 	.word	0x8b60c8b3
 800d93c:	3fc68a28 	.word	0x3fc68a28
 800d940:	509f79fb 	.word	0x509f79fb
 800d944:	3fd34413 	.word	0x3fd34413
 800d948:	08011f81 	.word	0x08011f81
 800d94c:	08011f98 	.word	0x08011f98
 800d950:	7ff00000 	.word	0x7ff00000
 800d954:	08011f7d 	.word	0x08011f7d
 800d958:	08011f74 	.word	0x08011f74
 800d95c:	08011f51 	.word	0x08011f51
 800d960:	3ff80000 	.word	0x3ff80000
 800d964:	08012088 	.word	0x08012088
 800d968:	08011ff3 	.word	0x08011ff3
 800d96c:	2401      	movs	r4, #1
 800d96e:	2300      	movs	r3, #0
 800d970:	940b      	str	r4, [sp, #44]	; 0x2c
 800d972:	9322      	str	r3, [sp, #136]	; 0x88
 800d974:	f04f 39ff 	mov.w	r9, #4294967295
 800d978:	2200      	movs	r2, #0
 800d97a:	2312      	movs	r3, #18
 800d97c:	f8cd 9020 	str.w	r9, [sp, #32]
 800d980:	9223      	str	r2, [sp, #140]	; 0x8c
 800d982:	e7b0      	b.n	800d8e6 <_dtoa_r+0x266>
 800d984:	2301      	movs	r3, #1
 800d986:	930b      	str	r3, [sp, #44]	; 0x2c
 800d988:	e7f4      	b.n	800d974 <_dtoa_r+0x2f4>
 800d98a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800d98e:	464b      	mov	r3, r9
 800d990:	f8cd 9020 	str.w	r9, [sp, #32]
 800d994:	e7a7      	b.n	800d8e6 <_dtoa_r+0x266>
 800d996:	3101      	adds	r1, #1
 800d998:	6041      	str	r1, [r0, #4]
 800d99a:	0052      	lsls	r2, r2, #1
 800d99c:	e7a7      	b.n	800d8ee <_dtoa_r+0x26e>
 800d99e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d9a0:	9a03      	ldr	r2, [sp, #12]
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	9b08      	ldr	r3, [sp, #32]
 800d9a6:	2b0e      	cmp	r3, #14
 800d9a8:	f200 80a8 	bhi.w	800dafc <_dtoa_r+0x47c>
 800d9ac:	2c00      	cmp	r4, #0
 800d9ae:	f000 80a5 	beq.w	800dafc <_dtoa_r+0x47c>
 800d9b2:	f1ba 0f00 	cmp.w	sl, #0
 800d9b6:	dd34      	ble.n	800da22 <_dtoa_r+0x3a2>
 800d9b8:	4a9a      	ldr	r2, [pc, #616]	; (800dc24 <_dtoa_r+0x5a4>)
 800d9ba:	f00a 030f 	and.w	r3, sl, #15
 800d9be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d9c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d9c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d9ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d9ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 800d9d2:	d016      	beq.n	800da02 <_dtoa_r+0x382>
 800d9d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d9d8:	4b93      	ldr	r3, [pc, #588]	; (800dc28 <_dtoa_r+0x5a8>)
 800d9da:	2703      	movs	r7, #3
 800d9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9e0:	f7f2 feae 	bl	8000740 <__aeabi_ddiv>
 800d9e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9e8:	f004 040f 	and.w	r4, r4, #15
 800d9ec:	4e8e      	ldr	r6, [pc, #568]	; (800dc28 <_dtoa_r+0x5a8>)
 800d9ee:	b954      	cbnz	r4, 800da06 <_dtoa_r+0x386>
 800d9f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9f8:	f7f2 fea2 	bl	8000740 <__aeabi_ddiv>
 800d9fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da00:	e029      	b.n	800da56 <_dtoa_r+0x3d6>
 800da02:	2702      	movs	r7, #2
 800da04:	e7f2      	b.n	800d9ec <_dtoa_r+0x36c>
 800da06:	07e1      	lsls	r1, r4, #31
 800da08:	d508      	bpl.n	800da1c <_dtoa_r+0x39c>
 800da0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da12:	f7f2 fd6b 	bl	80004ec <__aeabi_dmul>
 800da16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800da1a:	3701      	adds	r7, #1
 800da1c:	1064      	asrs	r4, r4, #1
 800da1e:	3608      	adds	r6, #8
 800da20:	e7e5      	b.n	800d9ee <_dtoa_r+0x36e>
 800da22:	f000 80a5 	beq.w	800db70 <_dtoa_r+0x4f0>
 800da26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da2a:	f1ca 0400 	rsb	r4, sl, #0
 800da2e:	4b7d      	ldr	r3, [pc, #500]	; (800dc24 <_dtoa_r+0x5a4>)
 800da30:	f004 020f 	and.w	r2, r4, #15
 800da34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3c:	f7f2 fd56 	bl	80004ec <__aeabi_dmul>
 800da40:	2702      	movs	r7, #2
 800da42:	2300      	movs	r3, #0
 800da44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da48:	4e77      	ldr	r6, [pc, #476]	; (800dc28 <_dtoa_r+0x5a8>)
 800da4a:	1124      	asrs	r4, r4, #4
 800da4c:	2c00      	cmp	r4, #0
 800da4e:	f040 8084 	bne.w	800db5a <_dtoa_r+0x4da>
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1d2      	bne.n	800d9fc <_dtoa_r+0x37c>
 800da56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 808b 	beq.w	800db74 <_dtoa_r+0x4f4>
 800da5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800da62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800da66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da6a:	2200      	movs	r2, #0
 800da6c:	4b6f      	ldr	r3, [pc, #444]	; (800dc2c <_dtoa_r+0x5ac>)
 800da6e:	f7f2 ffaf 	bl	80009d0 <__aeabi_dcmplt>
 800da72:	2800      	cmp	r0, #0
 800da74:	d07e      	beq.n	800db74 <_dtoa_r+0x4f4>
 800da76:	9b08      	ldr	r3, [sp, #32]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d07b      	beq.n	800db74 <_dtoa_r+0x4f4>
 800da7c:	f1b9 0f00 	cmp.w	r9, #0
 800da80:	dd38      	ble.n	800daf4 <_dtoa_r+0x474>
 800da82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da86:	2200      	movs	r2, #0
 800da88:	4b69      	ldr	r3, [pc, #420]	; (800dc30 <_dtoa_r+0x5b0>)
 800da8a:	f7f2 fd2f 	bl	80004ec <__aeabi_dmul>
 800da8e:	464c      	mov	r4, r9
 800da90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da94:	f10a 38ff 	add.w	r8, sl, #4294967295
 800da98:	3701      	adds	r7, #1
 800da9a:	4638      	mov	r0, r7
 800da9c:	f7f2 fcbc 	bl	8000418 <__aeabi_i2d>
 800daa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daa4:	f7f2 fd22 	bl	80004ec <__aeabi_dmul>
 800daa8:	2200      	movs	r2, #0
 800daaa:	4b62      	ldr	r3, [pc, #392]	; (800dc34 <_dtoa_r+0x5b4>)
 800daac:	f7f2 fb68 	bl	8000180 <__adddf3>
 800dab0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dab8:	9611      	str	r6, [sp, #68]	; 0x44
 800daba:	2c00      	cmp	r4, #0
 800dabc:	d15d      	bne.n	800db7a <_dtoa_r+0x4fa>
 800dabe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dac2:	2200      	movs	r2, #0
 800dac4:	4b5c      	ldr	r3, [pc, #368]	; (800dc38 <_dtoa_r+0x5b8>)
 800dac6:	f7f2 fb59 	bl	800017c <__aeabi_dsub>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dad2:	4633      	mov	r3, r6
 800dad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dad6:	f7f2 ff99 	bl	8000a0c <__aeabi_dcmpgt>
 800dada:	2800      	cmp	r0, #0
 800dadc:	f040 829c 	bne.w	800e018 <_dtoa_r+0x998>
 800dae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dae6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800daea:	f7f2 ff71 	bl	80009d0 <__aeabi_dcmplt>
 800daee:	2800      	cmp	r0, #0
 800daf0:	f040 8290 	bne.w	800e014 <_dtoa_r+0x994>
 800daf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800daf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dafc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f2c0 8152 	blt.w	800dda8 <_dtoa_r+0x728>
 800db04:	f1ba 0f0e 	cmp.w	sl, #14
 800db08:	f300 814e 	bgt.w	800dda8 <_dtoa_r+0x728>
 800db0c:	4b45      	ldr	r3, [pc, #276]	; (800dc24 <_dtoa_r+0x5a4>)
 800db0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800db16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800db1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f280 80db 	bge.w	800dcd8 <_dtoa_r+0x658>
 800db22:	9b08      	ldr	r3, [sp, #32]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f300 80d7 	bgt.w	800dcd8 <_dtoa_r+0x658>
 800db2a:	f040 8272 	bne.w	800e012 <_dtoa_r+0x992>
 800db2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db32:	2200      	movs	r2, #0
 800db34:	4b40      	ldr	r3, [pc, #256]	; (800dc38 <_dtoa_r+0x5b8>)
 800db36:	f7f2 fcd9 	bl	80004ec <__aeabi_dmul>
 800db3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db3e:	f7f2 ff5b 	bl	80009f8 <__aeabi_dcmpge>
 800db42:	9c08      	ldr	r4, [sp, #32]
 800db44:	4626      	mov	r6, r4
 800db46:	2800      	cmp	r0, #0
 800db48:	f040 8248 	bne.w	800dfdc <_dtoa_r+0x95c>
 800db4c:	2331      	movs	r3, #49	; 0x31
 800db4e:	9f03      	ldr	r7, [sp, #12]
 800db50:	f10a 0a01 	add.w	sl, sl, #1
 800db54:	f807 3b01 	strb.w	r3, [r7], #1
 800db58:	e244      	b.n	800dfe4 <_dtoa_r+0x964>
 800db5a:	07e2      	lsls	r2, r4, #31
 800db5c:	d505      	bpl.n	800db6a <_dtoa_r+0x4ea>
 800db5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db62:	f7f2 fcc3 	bl	80004ec <__aeabi_dmul>
 800db66:	2301      	movs	r3, #1
 800db68:	3701      	adds	r7, #1
 800db6a:	1064      	asrs	r4, r4, #1
 800db6c:	3608      	adds	r6, #8
 800db6e:	e76d      	b.n	800da4c <_dtoa_r+0x3cc>
 800db70:	2702      	movs	r7, #2
 800db72:	e770      	b.n	800da56 <_dtoa_r+0x3d6>
 800db74:	46d0      	mov	r8, sl
 800db76:	9c08      	ldr	r4, [sp, #32]
 800db78:	e78f      	b.n	800da9a <_dtoa_r+0x41a>
 800db7a:	9903      	ldr	r1, [sp, #12]
 800db7c:	4b29      	ldr	r3, [pc, #164]	; (800dc24 <_dtoa_r+0x5a4>)
 800db7e:	4421      	add	r1, r4
 800db80:	9112      	str	r1, [sp, #72]	; 0x48
 800db82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800db8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db90:	2900      	cmp	r1, #0
 800db92:	d055      	beq.n	800dc40 <_dtoa_r+0x5c0>
 800db94:	2000      	movs	r0, #0
 800db96:	4929      	ldr	r1, [pc, #164]	; (800dc3c <_dtoa_r+0x5bc>)
 800db98:	f7f2 fdd2 	bl	8000740 <__aeabi_ddiv>
 800db9c:	463b      	mov	r3, r7
 800db9e:	4632      	mov	r2, r6
 800dba0:	f7f2 faec 	bl	800017c <__aeabi_dsub>
 800dba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dba8:	9f03      	ldr	r7, [sp, #12]
 800dbaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbae:	f7f2 ff4d 	bl	8000a4c <__aeabi_d2iz>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	f7f2 fc30 	bl	8000418 <__aeabi_i2d>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbc0:	f7f2 fadc 	bl	800017c <__aeabi_dsub>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	3430      	adds	r4, #48	; 0x30
 800dbca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dbce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbd2:	f807 4b01 	strb.w	r4, [r7], #1
 800dbd6:	f7f2 fefb 	bl	80009d0 <__aeabi_dcmplt>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d174      	bne.n	800dcc8 <_dtoa_r+0x648>
 800dbde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	4911      	ldr	r1, [pc, #68]	; (800dc2c <_dtoa_r+0x5ac>)
 800dbe6:	f7f2 fac9 	bl	800017c <__aeabi_dsub>
 800dbea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbee:	f7f2 feef 	bl	80009d0 <__aeabi_dcmplt>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	f040 80b7 	bne.w	800dd66 <_dtoa_r+0x6e6>
 800dbf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbfa:	429f      	cmp	r7, r3
 800dbfc:	f43f af7a 	beq.w	800daf4 <_dtoa_r+0x474>
 800dc00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dc04:	2200      	movs	r2, #0
 800dc06:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <_dtoa_r+0x5b0>)
 800dc08:	f7f2 fc70 	bl	80004ec <__aeabi_dmul>
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dc12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc16:	4b06      	ldr	r3, [pc, #24]	; (800dc30 <_dtoa_r+0x5b0>)
 800dc18:	f7f2 fc68 	bl	80004ec <__aeabi_dmul>
 800dc1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc20:	e7c3      	b.n	800dbaa <_dtoa_r+0x52a>
 800dc22:	bf00      	nop
 800dc24:	08012088 	.word	0x08012088
 800dc28:	08012060 	.word	0x08012060
 800dc2c:	3ff00000 	.word	0x3ff00000
 800dc30:	40240000 	.word	0x40240000
 800dc34:	401c0000 	.word	0x401c0000
 800dc38:	40140000 	.word	0x40140000
 800dc3c:	3fe00000 	.word	0x3fe00000
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 fc52 	bl	80004ec <__aeabi_dmul>
 800dc48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dc4e:	9c03      	ldr	r4, [sp, #12]
 800dc50:	9314      	str	r3, [sp, #80]	; 0x50
 800dc52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc56:	f7f2 fef9 	bl	8000a4c <__aeabi_d2iz>
 800dc5a:	9015      	str	r0, [sp, #84]	; 0x54
 800dc5c:	f7f2 fbdc 	bl	8000418 <__aeabi_i2d>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc68:	f7f2 fa88 	bl	800017c <__aeabi_dsub>
 800dc6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc6e:	4606      	mov	r6, r0
 800dc70:	3330      	adds	r3, #48	; 0x30
 800dc72:	f804 3b01 	strb.w	r3, [r4], #1
 800dc76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc78:	460f      	mov	r7, r1
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	f04f 0200 	mov.w	r2, #0
 800dc80:	d124      	bne.n	800dccc <_dtoa_r+0x64c>
 800dc82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dc86:	4bb0      	ldr	r3, [pc, #704]	; (800df48 <_dtoa_r+0x8c8>)
 800dc88:	f7f2 fa7a 	bl	8000180 <__adddf3>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 feba 	bl	8000a0c <__aeabi_dcmpgt>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d163      	bne.n	800dd64 <_dtoa_r+0x6e4>
 800dc9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dca0:	2000      	movs	r0, #0
 800dca2:	49a9      	ldr	r1, [pc, #676]	; (800df48 <_dtoa_r+0x8c8>)
 800dca4:	f7f2 fa6a 	bl	800017c <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f7f2 fe8e 	bl	80009d0 <__aeabi_dcmplt>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f43f af1d 	beq.w	800daf4 <_dtoa_r+0x474>
 800dcba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800dcbc:	1e7b      	subs	r3, r7, #1
 800dcbe:	9314      	str	r3, [sp, #80]	; 0x50
 800dcc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800dcc4:	2b30      	cmp	r3, #48	; 0x30
 800dcc6:	d0f8      	beq.n	800dcba <_dtoa_r+0x63a>
 800dcc8:	46c2      	mov	sl, r8
 800dcca:	e03b      	b.n	800dd44 <_dtoa_r+0x6c4>
 800dccc:	4b9f      	ldr	r3, [pc, #636]	; (800df4c <_dtoa_r+0x8cc>)
 800dcce:	f7f2 fc0d 	bl	80004ec <__aeabi_dmul>
 800dcd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcd6:	e7bc      	b.n	800dc52 <_dtoa_r+0x5d2>
 800dcd8:	9f03      	ldr	r7, [sp, #12]
 800dcda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dcde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 fd2b 	bl	8000740 <__aeabi_ddiv>
 800dcea:	f7f2 feaf 	bl	8000a4c <__aeabi_d2iz>
 800dcee:	4604      	mov	r4, r0
 800dcf0:	f7f2 fb92 	bl	8000418 <__aeabi_i2d>
 800dcf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dcf8:	f7f2 fbf8 	bl	80004ec <__aeabi_dmul>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4640      	mov	r0, r8
 800dd02:	4649      	mov	r1, r9
 800dd04:	f7f2 fa3a 	bl	800017c <__aeabi_dsub>
 800dd08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800dd0c:	f807 6b01 	strb.w	r6, [r7], #1
 800dd10:	9e03      	ldr	r6, [sp, #12]
 800dd12:	f8dd c020 	ldr.w	ip, [sp, #32]
 800dd16:	1bbe      	subs	r6, r7, r6
 800dd18:	45b4      	cmp	ip, r6
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	d136      	bne.n	800dd8e <_dtoa_r+0x70e>
 800dd20:	f7f2 fa2e 	bl	8000180 <__adddf3>
 800dd24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd28:	4680      	mov	r8, r0
 800dd2a:	4689      	mov	r9, r1
 800dd2c:	f7f2 fe6e 	bl	8000a0c <__aeabi_dcmpgt>
 800dd30:	bb58      	cbnz	r0, 800dd8a <_dtoa_r+0x70a>
 800dd32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd36:	4640      	mov	r0, r8
 800dd38:	4649      	mov	r1, r9
 800dd3a:	f7f2 fe3f 	bl	80009bc <__aeabi_dcmpeq>
 800dd3e:	b108      	cbz	r0, 800dd44 <_dtoa_r+0x6c4>
 800dd40:	07e1      	lsls	r1, r4, #31
 800dd42:	d422      	bmi.n	800dd8a <_dtoa_r+0x70a>
 800dd44:	4628      	mov	r0, r5
 800dd46:	4659      	mov	r1, fp
 800dd48:	f000 fae6 	bl	800e318 <_Bfree>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	703b      	strb	r3, [r7, #0]
 800dd50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dd52:	f10a 0001 	add.w	r0, sl, #1
 800dd56:	6018      	str	r0, [r3, #0]
 800dd58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f43f acde 	beq.w	800d71c <_dtoa_r+0x9c>
 800dd60:	601f      	str	r7, [r3, #0]
 800dd62:	e4db      	b.n	800d71c <_dtoa_r+0x9c>
 800dd64:	4627      	mov	r7, r4
 800dd66:	463b      	mov	r3, r7
 800dd68:	461f      	mov	r7, r3
 800dd6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd6e:	2a39      	cmp	r2, #57	; 0x39
 800dd70:	d107      	bne.n	800dd82 <_dtoa_r+0x702>
 800dd72:	9a03      	ldr	r2, [sp, #12]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d1f7      	bne.n	800dd68 <_dtoa_r+0x6e8>
 800dd78:	2230      	movs	r2, #48	; 0x30
 800dd7a:	9903      	ldr	r1, [sp, #12]
 800dd7c:	f108 0801 	add.w	r8, r8, #1
 800dd80:	700a      	strb	r2, [r1, #0]
 800dd82:	781a      	ldrb	r2, [r3, #0]
 800dd84:	3201      	adds	r2, #1
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	e79e      	b.n	800dcc8 <_dtoa_r+0x648>
 800dd8a:	46d0      	mov	r8, sl
 800dd8c:	e7eb      	b.n	800dd66 <_dtoa_r+0x6e6>
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4b6e      	ldr	r3, [pc, #440]	; (800df4c <_dtoa_r+0x8cc>)
 800dd92:	f7f2 fbab 	bl	80004ec <__aeabi_dmul>
 800dd96:	2200      	movs	r2, #0
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4680      	mov	r8, r0
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	f7f2 fe0d 	bl	80009bc <__aeabi_dcmpeq>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d09b      	beq.n	800dcde <_dtoa_r+0x65e>
 800dda6:	e7cd      	b.n	800dd44 <_dtoa_r+0x6c4>
 800dda8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ddaa:	2a00      	cmp	r2, #0
 800ddac:	f000 80d0 	beq.w	800df50 <_dtoa_r+0x8d0>
 800ddb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ddb2:	2a01      	cmp	r2, #1
 800ddb4:	f300 80ae 	bgt.w	800df14 <_dtoa_r+0x894>
 800ddb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	f000 80a6 	beq.w	800df0c <_dtoa_r+0x88c>
 800ddc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ddc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ddc6:	9f06      	ldr	r7, [sp, #24]
 800ddc8:	9a06      	ldr	r2, [sp, #24]
 800ddca:	2101      	movs	r1, #1
 800ddcc:	441a      	add	r2, r3
 800ddce:	9206      	str	r2, [sp, #24]
 800ddd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	441a      	add	r2, r3
 800ddd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ddd8:	f000 fb54 	bl	800e484 <__i2b>
 800dddc:	4606      	mov	r6, r0
 800ddde:	2f00      	cmp	r7, #0
 800dde0:	dd0c      	ble.n	800ddfc <_dtoa_r+0x77c>
 800dde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd09      	ble.n	800ddfc <_dtoa_r+0x77c>
 800dde8:	42bb      	cmp	r3, r7
 800ddea:	bfa8      	it	ge
 800ddec:	463b      	movge	r3, r7
 800ddee:	9a06      	ldr	r2, [sp, #24]
 800ddf0:	1aff      	subs	r7, r7, r3
 800ddf2:	1ad2      	subs	r2, r2, r3
 800ddf4:	9206      	str	r2, [sp, #24]
 800ddf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfe:	b1f3      	cbz	r3, 800de3e <_dtoa_r+0x7be>
 800de00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 80a8 	beq.w	800df58 <_dtoa_r+0x8d8>
 800de08:	2c00      	cmp	r4, #0
 800de0a:	dd10      	ble.n	800de2e <_dtoa_r+0x7ae>
 800de0c:	4631      	mov	r1, r6
 800de0e:	4622      	mov	r2, r4
 800de10:	4628      	mov	r0, r5
 800de12:	f000 fbf5 	bl	800e600 <__pow5mult>
 800de16:	465a      	mov	r2, fp
 800de18:	4601      	mov	r1, r0
 800de1a:	4606      	mov	r6, r0
 800de1c:	4628      	mov	r0, r5
 800de1e:	f000 fb47 	bl	800e4b0 <__multiply>
 800de22:	4680      	mov	r8, r0
 800de24:	4659      	mov	r1, fp
 800de26:	4628      	mov	r0, r5
 800de28:	f000 fa76 	bl	800e318 <_Bfree>
 800de2c:	46c3      	mov	fp, r8
 800de2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de30:	1b1a      	subs	r2, r3, r4
 800de32:	d004      	beq.n	800de3e <_dtoa_r+0x7be>
 800de34:	4659      	mov	r1, fp
 800de36:	4628      	mov	r0, r5
 800de38:	f000 fbe2 	bl	800e600 <__pow5mult>
 800de3c:	4683      	mov	fp, r0
 800de3e:	2101      	movs	r1, #1
 800de40:	4628      	mov	r0, r5
 800de42:	f000 fb1f 	bl	800e484 <__i2b>
 800de46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de48:	4604      	mov	r4, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f340 8086 	ble.w	800df5c <_dtoa_r+0x8dc>
 800de50:	461a      	mov	r2, r3
 800de52:	4601      	mov	r1, r0
 800de54:	4628      	mov	r0, r5
 800de56:	f000 fbd3 	bl	800e600 <__pow5mult>
 800de5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de5c:	4604      	mov	r4, r0
 800de5e:	2b01      	cmp	r3, #1
 800de60:	dd7f      	ble.n	800df62 <_dtoa_r+0x8e2>
 800de62:	f04f 0800 	mov.w	r8, #0
 800de66:	6923      	ldr	r3, [r4, #16]
 800de68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de6c:	6918      	ldr	r0, [r3, #16]
 800de6e:	f000 fabb 	bl	800e3e8 <__hi0bits>
 800de72:	f1c0 0020 	rsb	r0, r0, #32
 800de76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de78:	4418      	add	r0, r3
 800de7a:	f010 001f 	ands.w	r0, r0, #31
 800de7e:	f000 8092 	beq.w	800dfa6 <_dtoa_r+0x926>
 800de82:	f1c0 0320 	rsb	r3, r0, #32
 800de86:	2b04      	cmp	r3, #4
 800de88:	f340 808a 	ble.w	800dfa0 <_dtoa_r+0x920>
 800de8c:	f1c0 001c 	rsb	r0, r0, #28
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	4407      	add	r7, r0
 800de94:	4403      	add	r3, r0
 800de96:	9306      	str	r3, [sp, #24]
 800de98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de9a:	4403      	add	r3, r0
 800de9c:	9309      	str	r3, [sp, #36]	; 0x24
 800de9e:	9b06      	ldr	r3, [sp, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dd05      	ble.n	800deb0 <_dtoa_r+0x830>
 800dea4:	4659      	mov	r1, fp
 800dea6:	461a      	mov	r2, r3
 800dea8:	4628      	mov	r0, r5
 800deaa:	f000 fc03 	bl	800e6b4 <__lshift>
 800deae:	4683      	mov	fp, r0
 800deb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dd05      	ble.n	800dec2 <_dtoa_r+0x842>
 800deb6:	4621      	mov	r1, r4
 800deb8:	461a      	mov	r2, r3
 800deba:	4628      	mov	r0, r5
 800debc:	f000 fbfa 	bl	800e6b4 <__lshift>
 800dec0:	4604      	mov	r4, r0
 800dec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d070      	beq.n	800dfaa <_dtoa_r+0x92a>
 800dec8:	4621      	mov	r1, r4
 800deca:	4658      	mov	r0, fp
 800decc:	f000 fc62 	bl	800e794 <__mcmp>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	da6a      	bge.n	800dfaa <_dtoa_r+0x92a>
 800ded4:	2300      	movs	r3, #0
 800ded6:	4659      	mov	r1, fp
 800ded8:	220a      	movs	r2, #10
 800deda:	4628      	mov	r0, r5
 800dedc:	f000 fa3e 	bl	800e35c <__multadd>
 800dee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dee2:	4683      	mov	fp, r0
 800dee4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 8194 	beq.w	800e216 <_dtoa_r+0xb96>
 800deee:	4631      	mov	r1, r6
 800def0:	2300      	movs	r3, #0
 800def2:	220a      	movs	r2, #10
 800def4:	4628      	mov	r0, r5
 800def6:	f000 fa31 	bl	800e35c <__multadd>
 800defa:	f1b9 0f00 	cmp.w	r9, #0
 800defe:	4606      	mov	r6, r0
 800df00:	f300 8093 	bgt.w	800e02a <_dtoa_r+0x9aa>
 800df04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df06:	2b02      	cmp	r3, #2
 800df08:	dc57      	bgt.n	800dfba <_dtoa_r+0x93a>
 800df0a:	e08e      	b.n	800e02a <_dtoa_r+0x9aa>
 800df0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800df0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df12:	e757      	b.n	800ddc4 <_dtoa_r+0x744>
 800df14:	9b08      	ldr	r3, [sp, #32]
 800df16:	1e5c      	subs	r4, r3, #1
 800df18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df1a:	42a3      	cmp	r3, r4
 800df1c:	bfb7      	itett	lt
 800df1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800df20:	1b1c      	subge	r4, r3, r4
 800df22:	1ae2      	sublt	r2, r4, r3
 800df24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800df26:	bfbe      	ittt	lt
 800df28:	940a      	strlt	r4, [sp, #40]	; 0x28
 800df2a:	189b      	addlt	r3, r3, r2
 800df2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800df2e:	9b08      	ldr	r3, [sp, #32]
 800df30:	bfb8      	it	lt
 800df32:	2400      	movlt	r4, #0
 800df34:	2b00      	cmp	r3, #0
 800df36:	bfbb      	ittet	lt
 800df38:	9b06      	ldrlt	r3, [sp, #24]
 800df3a:	9a08      	ldrlt	r2, [sp, #32]
 800df3c:	9f06      	ldrge	r7, [sp, #24]
 800df3e:	1a9f      	sublt	r7, r3, r2
 800df40:	bfac      	ite	ge
 800df42:	9b08      	ldrge	r3, [sp, #32]
 800df44:	2300      	movlt	r3, #0
 800df46:	e73f      	b.n	800ddc8 <_dtoa_r+0x748>
 800df48:	3fe00000 	.word	0x3fe00000
 800df4c:	40240000 	.word	0x40240000
 800df50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800df52:	9f06      	ldr	r7, [sp, #24]
 800df54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800df56:	e742      	b.n	800ddde <_dtoa_r+0x75e>
 800df58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df5a:	e76b      	b.n	800de34 <_dtoa_r+0x7b4>
 800df5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df5e:	2b01      	cmp	r3, #1
 800df60:	dc19      	bgt.n	800df96 <_dtoa_r+0x916>
 800df62:	9b04      	ldr	r3, [sp, #16]
 800df64:	b9bb      	cbnz	r3, 800df96 <_dtoa_r+0x916>
 800df66:	9b05      	ldr	r3, [sp, #20]
 800df68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df6c:	b99b      	cbnz	r3, 800df96 <_dtoa_r+0x916>
 800df6e:	9b05      	ldr	r3, [sp, #20]
 800df70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df74:	0d1b      	lsrs	r3, r3, #20
 800df76:	051b      	lsls	r3, r3, #20
 800df78:	b183      	cbz	r3, 800df9c <_dtoa_r+0x91c>
 800df7a:	f04f 0801 	mov.w	r8, #1
 800df7e:	9b06      	ldr	r3, [sp, #24]
 800df80:	3301      	adds	r3, #1
 800df82:	9306      	str	r3, [sp, #24]
 800df84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df86:	3301      	adds	r3, #1
 800df88:	9309      	str	r3, [sp, #36]	; 0x24
 800df8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f47f af6a 	bne.w	800de66 <_dtoa_r+0x7e6>
 800df92:	2001      	movs	r0, #1
 800df94:	e76f      	b.n	800de76 <_dtoa_r+0x7f6>
 800df96:	f04f 0800 	mov.w	r8, #0
 800df9a:	e7f6      	b.n	800df8a <_dtoa_r+0x90a>
 800df9c:	4698      	mov	r8, r3
 800df9e:	e7f4      	b.n	800df8a <_dtoa_r+0x90a>
 800dfa0:	f43f af7d 	beq.w	800de9e <_dtoa_r+0x81e>
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	301c      	adds	r0, #28
 800dfa8:	e772      	b.n	800de90 <_dtoa_r+0x810>
 800dfaa:	9b08      	ldr	r3, [sp, #32]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dc36      	bgt.n	800e01e <_dtoa_r+0x99e>
 800dfb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	dd33      	ble.n	800e01e <_dtoa_r+0x99e>
 800dfb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dfba:	f1b9 0f00 	cmp.w	r9, #0
 800dfbe:	d10d      	bne.n	800dfdc <_dtoa_r+0x95c>
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	464b      	mov	r3, r9
 800dfc4:	2205      	movs	r2, #5
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f000 f9c8 	bl	800e35c <__multadd>
 800dfcc:	4601      	mov	r1, r0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4658      	mov	r0, fp
 800dfd2:	f000 fbdf 	bl	800e794 <__mcmp>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f73f adb8 	bgt.w	800db4c <_dtoa_r+0x4cc>
 800dfdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dfde:	9f03      	ldr	r7, [sp, #12]
 800dfe0:	ea6f 0a03 	mvn.w	sl, r3
 800dfe4:	f04f 0800 	mov.w	r8, #0
 800dfe8:	4621      	mov	r1, r4
 800dfea:	4628      	mov	r0, r5
 800dfec:	f000 f994 	bl	800e318 <_Bfree>
 800dff0:	2e00      	cmp	r6, #0
 800dff2:	f43f aea7 	beq.w	800dd44 <_dtoa_r+0x6c4>
 800dff6:	f1b8 0f00 	cmp.w	r8, #0
 800dffa:	d005      	beq.n	800e008 <_dtoa_r+0x988>
 800dffc:	45b0      	cmp	r8, r6
 800dffe:	d003      	beq.n	800e008 <_dtoa_r+0x988>
 800e000:	4641      	mov	r1, r8
 800e002:	4628      	mov	r0, r5
 800e004:	f000 f988 	bl	800e318 <_Bfree>
 800e008:	4631      	mov	r1, r6
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 f984 	bl	800e318 <_Bfree>
 800e010:	e698      	b.n	800dd44 <_dtoa_r+0x6c4>
 800e012:	2400      	movs	r4, #0
 800e014:	4626      	mov	r6, r4
 800e016:	e7e1      	b.n	800dfdc <_dtoa_r+0x95c>
 800e018:	46c2      	mov	sl, r8
 800e01a:	4626      	mov	r6, r4
 800e01c:	e596      	b.n	800db4c <_dtoa_r+0x4cc>
 800e01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 80fd 	beq.w	800e224 <_dtoa_r+0xba4>
 800e02a:	2f00      	cmp	r7, #0
 800e02c:	dd05      	ble.n	800e03a <_dtoa_r+0x9ba>
 800e02e:	4631      	mov	r1, r6
 800e030:	463a      	mov	r2, r7
 800e032:	4628      	mov	r0, r5
 800e034:	f000 fb3e 	bl	800e6b4 <__lshift>
 800e038:	4606      	mov	r6, r0
 800e03a:	f1b8 0f00 	cmp.w	r8, #0
 800e03e:	d05c      	beq.n	800e0fa <_dtoa_r+0xa7a>
 800e040:	4628      	mov	r0, r5
 800e042:	6871      	ldr	r1, [r6, #4]
 800e044:	f000 f928 	bl	800e298 <_Balloc>
 800e048:	4607      	mov	r7, r0
 800e04a:	b928      	cbnz	r0, 800e058 <_dtoa_r+0x9d8>
 800e04c:	4602      	mov	r2, r0
 800e04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e052:	4b7f      	ldr	r3, [pc, #508]	; (800e250 <_dtoa_r+0xbd0>)
 800e054:	f7ff bb28 	b.w	800d6a8 <_dtoa_r+0x28>
 800e058:	6932      	ldr	r2, [r6, #16]
 800e05a:	f106 010c 	add.w	r1, r6, #12
 800e05e:	3202      	adds	r2, #2
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	300c      	adds	r0, #12
 800e064:	f7fe fc02 	bl	800c86c <memcpy>
 800e068:	2201      	movs	r2, #1
 800e06a:	4639      	mov	r1, r7
 800e06c:	4628      	mov	r0, r5
 800e06e:	f000 fb21 	bl	800e6b4 <__lshift>
 800e072:	46b0      	mov	r8, r6
 800e074:	4606      	mov	r6, r0
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	3301      	adds	r3, #1
 800e07a:	9308      	str	r3, [sp, #32]
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	444b      	add	r3, r9
 800e080:	930a      	str	r3, [sp, #40]	; 0x28
 800e082:	9b04      	ldr	r3, [sp, #16]
 800e084:	f003 0301 	and.w	r3, r3, #1
 800e088:	9309      	str	r3, [sp, #36]	; 0x24
 800e08a:	9b08      	ldr	r3, [sp, #32]
 800e08c:	4621      	mov	r1, r4
 800e08e:	3b01      	subs	r3, #1
 800e090:	4658      	mov	r0, fp
 800e092:	9304      	str	r3, [sp, #16]
 800e094:	f7ff fa66 	bl	800d564 <quorem>
 800e098:	4603      	mov	r3, r0
 800e09a:	4641      	mov	r1, r8
 800e09c:	3330      	adds	r3, #48	; 0x30
 800e09e:	9006      	str	r0, [sp, #24]
 800e0a0:	4658      	mov	r0, fp
 800e0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0a4:	f000 fb76 	bl	800e794 <__mcmp>
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	4681      	mov	r9, r0
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f000 fb8c 	bl	800e7cc <__mdiff>
 800e0b4:	68c2      	ldr	r2, [r0, #12]
 800e0b6:	4607      	mov	r7, r0
 800e0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ba:	bb02      	cbnz	r2, 800e0fe <_dtoa_r+0xa7e>
 800e0bc:	4601      	mov	r1, r0
 800e0be:	4658      	mov	r0, fp
 800e0c0:	f000 fb68 	bl	800e794 <__mcmp>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e0d0:	f000 f922 	bl	800e318 <_Bfree>
 800e0d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0d8:	9f08      	ldr	r7, [sp, #32]
 800e0da:	ea43 0102 	orr.w	r1, r3, r2
 800e0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0e0:	430b      	orrs	r3, r1
 800e0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0e4:	d10d      	bne.n	800e102 <_dtoa_r+0xa82>
 800e0e6:	2b39      	cmp	r3, #57	; 0x39
 800e0e8:	d029      	beq.n	800e13e <_dtoa_r+0xabe>
 800e0ea:	f1b9 0f00 	cmp.w	r9, #0
 800e0ee:	dd01      	ble.n	800e0f4 <_dtoa_r+0xa74>
 800e0f0:	9b06      	ldr	r3, [sp, #24]
 800e0f2:	3331      	adds	r3, #49	; 0x31
 800e0f4:	9a04      	ldr	r2, [sp, #16]
 800e0f6:	7013      	strb	r3, [r2, #0]
 800e0f8:	e776      	b.n	800dfe8 <_dtoa_r+0x968>
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	e7b9      	b.n	800e072 <_dtoa_r+0x9f2>
 800e0fe:	2201      	movs	r2, #1
 800e100:	e7e2      	b.n	800e0c8 <_dtoa_r+0xa48>
 800e102:	f1b9 0f00 	cmp.w	r9, #0
 800e106:	db06      	blt.n	800e116 <_dtoa_r+0xa96>
 800e108:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e10a:	ea41 0909 	orr.w	r9, r1, r9
 800e10e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e110:	ea59 0101 	orrs.w	r1, r9, r1
 800e114:	d120      	bne.n	800e158 <_dtoa_r+0xad8>
 800e116:	2a00      	cmp	r2, #0
 800e118:	ddec      	ble.n	800e0f4 <_dtoa_r+0xa74>
 800e11a:	4659      	mov	r1, fp
 800e11c:	2201      	movs	r2, #1
 800e11e:	4628      	mov	r0, r5
 800e120:	9308      	str	r3, [sp, #32]
 800e122:	f000 fac7 	bl	800e6b4 <__lshift>
 800e126:	4621      	mov	r1, r4
 800e128:	4683      	mov	fp, r0
 800e12a:	f000 fb33 	bl	800e794 <__mcmp>
 800e12e:	2800      	cmp	r0, #0
 800e130:	9b08      	ldr	r3, [sp, #32]
 800e132:	dc02      	bgt.n	800e13a <_dtoa_r+0xaba>
 800e134:	d1de      	bne.n	800e0f4 <_dtoa_r+0xa74>
 800e136:	07da      	lsls	r2, r3, #31
 800e138:	d5dc      	bpl.n	800e0f4 <_dtoa_r+0xa74>
 800e13a:	2b39      	cmp	r3, #57	; 0x39
 800e13c:	d1d8      	bne.n	800e0f0 <_dtoa_r+0xa70>
 800e13e:	2339      	movs	r3, #57	; 0x39
 800e140:	9a04      	ldr	r2, [sp, #16]
 800e142:	7013      	strb	r3, [r2, #0]
 800e144:	463b      	mov	r3, r7
 800e146:	461f      	mov	r7, r3
 800e148:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	2a39      	cmp	r2, #57	; 0x39
 800e150:	d050      	beq.n	800e1f4 <_dtoa_r+0xb74>
 800e152:	3201      	adds	r2, #1
 800e154:	701a      	strb	r2, [r3, #0]
 800e156:	e747      	b.n	800dfe8 <_dtoa_r+0x968>
 800e158:	2a00      	cmp	r2, #0
 800e15a:	dd03      	ble.n	800e164 <_dtoa_r+0xae4>
 800e15c:	2b39      	cmp	r3, #57	; 0x39
 800e15e:	d0ee      	beq.n	800e13e <_dtoa_r+0xabe>
 800e160:	3301      	adds	r3, #1
 800e162:	e7c7      	b.n	800e0f4 <_dtoa_r+0xa74>
 800e164:	9a08      	ldr	r2, [sp, #32]
 800e166:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e168:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e16c:	428a      	cmp	r2, r1
 800e16e:	d02a      	beq.n	800e1c6 <_dtoa_r+0xb46>
 800e170:	4659      	mov	r1, fp
 800e172:	2300      	movs	r3, #0
 800e174:	220a      	movs	r2, #10
 800e176:	4628      	mov	r0, r5
 800e178:	f000 f8f0 	bl	800e35c <__multadd>
 800e17c:	45b0      	cmp	r8, r6
 800e17e:	4683      	mov	fp, r0
 800e180:	f04f 0300 	mov.w	r3, #0
 800e184:	f04f 020a 	mov.w	r2, #10
 800e188:	4641      	mov	r1, r8
 800e18a:	4628      	mov	r0, r5
 800e18c:	d107      	bne.n	800e19e <_dtoa_r+0xb1e>
 800e18e:	f000 f8e5 	bl	800e35c <__multadd>
 800e192:	4680      	mov	r8, r0
 800e194:	4606      	mov	r6, r0
 800e196:	9b08      	ldr	r3, [sp, #32]
 800e198:	3301      	adds	r3, #1
 800e19a:	9308      	str	r3, [sp, #32]
 800e19c:	e775      	b.n	800e08a <_dtoa_r+0xa0a>
 800e19e:	f000 f8dd 	bl	800e35c <__multadd>
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4680      	mov	r8, r0
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	220a      	movs	r2, #10
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f000 f8d6 	bl	800e35c <__multadd>
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	e7f0      	b.n	800e196 <_dtoa_r+0xb16>
 800e1b4:	f1b9 0f00 	cmp.w	r9, #0
 800e1b8:	bfcc      	ite	gt
 800e1ba:	464f      	movgt	r7, r9
 800e1bc:	2701      	movle	r7, #1
 800e1be:	f04f 0800 	mov.w	r8, #0
 800e1c2:	9a03      	ldr	r2, [sp, #12]
 800e1c4:	4417      	add	r7, r2
 800e1c6:	4659      	mov	r1, fp
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	9308      	str	r3, [sp, #32]
 800e1ce:	f000 fa71 	bl	800e6b4 <__lshift>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	4683      	mov	fp, r0
 800e1d6:	f000 fadd 	bl	800e794 <__mcmp>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	dcb2      	bgt.n	800e144 <_dtoa_r+0xac4>
 800e1de:	d102      	bne.n	800e1e6 <_dtoa_r+0xb66>
 800e1e0:	9b08      	ldr	r3, [sp, #32]
 800e1e2:	07db      	lsls	r3, r3, #31
 800e1e4:	d4ae      	bmi.n	800e144 <_dtoa_r+0xac4>
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	461f      	mov	r7, r3
 800e1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1ee:	2a30      	cmp	r2, #48	; 0x30
 800e1f0:	d0fa      	beq.n	800e1e8 <_dtoa_r+0xb68>
 800e1f2:	e6f9      	b.n	800dfe8 <_dtoa_r+0x968>
 800e1f4:	9a03      	ldr	r2, [sp, #12]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d1a5      	bne.n	800e146 <_dtoa_r+0xac6>
 800e1fa:	2331      	movs	r3, #49	; 0x31
 800e1fc:	f10a 0a01 	add.w	sl, sl, #1
 800e200:	e779      	b.n	800e0f6 <_dtoa_r+0xa76>
 800e202:	4b14      	ldr	r3, [pc, #80]	; (800e254 <_dtoa_r+0xbd4>)
 800e204:	f7ff baa8 	b.w	800d758 <_dtoa_r+0xd8>
 800e208:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f47f aa81 	bne.w	800d712 <_dtoa_r+0x92>
 800e210:	4b11      	ldr	r3, [pc, #68]	; (800e258 <_dtoa_r+0xbd8>)
 800e212:	f7ff baa1 	b.w	800d758 <_dtoa_r+0xd8>
 800e216:	f1b9 0f00 	cmp.w	r9, #0
 800e21a:	dc03      	bgt.n	800e224 <_dtoa_r+0xba4>
 800e21c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e21e:	2b02      	cmp	r3, #2
 800e220:	f73f aecb 	bgt.w	800dfba <_dtoa_r+0x93a>
 800e224:	9f03      	ldr	r7, [sp, #12]
 800e226:	4621      	mov	r1, r4
 800e228:	4658      	mov	r0, fp
 800e22a:	f7ff f99b 	bl	800d564 <quorem>
 800e22e:	9a03      	ldr	r2, [sp, #12]
 800e230:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e234:	f807 3b01 	strb.w	r3, [r7], #1
 800e238:	1aba      	subs	r2, r7, r2
 800e23a:	4591      	cmp	r9, r2
 800e23c:	ddba      	ble.n	800e1b4 <_dtoa_r+0xb34>
 800e23e:	4659      	mov	r1, fp
 800e240:	2300      	movs	r3, #0
 800e242:	220a      	movs	r2, #10
 800e244:	4628      	mov	r0, r5
 800e246:	f000 f889 	bl	800e35c <__multadd>
 800e24a:	4683      	mov	fp, r0
 800e24c:	e7eb      	b.n	800e226 <_dtoa_r+0xba6>
 800e24e:	bf00      	nop
 800e250:	08011ff3 	.word	0x08011ff3
 800e254:	08011f50 	.word	0x08011f50
 800e258:	08011f74 	.word	0x08011f74

0800e25c <_localeconv_r>:
 800e25c:	4800      	ldr	r0, [pc, #0]	; (800e260 <_localeconv_r+0x4>)
 800e25e:	4770      	bx	lr
 800e260:	20000178 	.word	0x20000178

0800e264 <memchr>:
 800e264:	4603      	mov	r3, r0
 800e266:	b510      	push	{r4, lr}
 800e268:	b2c9      	uxtb	r1, r1
 800e26a:	4402      	add	r2, r0
 800e26c:	4293      	cmp	r3, r2
 800e26e:	4618      	mov	r0, r3
 800e270:	d101      	bne.n	800e276 <memchr+0x12>
 800e272:	2000      	movs	r0, #0
 800e274:	e003      	b.n	800e27e <memchr+0x1a>
 800e276:	7804      	ldrb	r4, [r0, #0]
 800e278:	3301      	adds	r3, #1
 800e27a:	428c      	cmp	r4, r1
 800e27c:	d1f6      	bne.n	800e26c <memchr+0x8>
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <__malloc_lock>:
 800e280:	4801      	ldr	r0, [pc, #4]	; (800e288 <__malloc_lock+0x8>)
 800e282:	f000 bd2c 	b.w	800ecde <__retarget_lock_acquire_recursive>
 800e286:	bf00      	nop
 800e288:	20001d04 	.word	0x20001d04

0800e28c <__malloc_unlock>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__malloc_unlock+0x8>)
 800e28e:	f000 bd27 	b.w	800ece0 <__retarget_lock_release_recursive>
 800e292:	bf00      	nop
 800e294:	20001d04 	.word	0x20001d04

0800e298 <_Balloc>:
 800e298:	b570      	push	{r4, r5, r6, lr}
 800e29a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e29c:	4604      	mov	r4, r0
 800e29e:	460d      	mov	r5, r1
 800e2a0:	b976      	cbnz	r6, 800e2c0 <_Balloc+0x28>
 800e2a2:	2010      	movs	r0, #16
 800e2a4:	f7fe fad2 	bl	800c84c <malloc>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	6260      	str	r0, [r4, #36]	; 0x24
 800e2ac:	b920      	cbnz	r0, 800e2b8 <_Balloc+0x20>
 800e2ae:	2166      	movs	r1, #102	; 0x66
 800e2b0:	4b17      	ldr	r3, [pc, #92]	; (800e310 <_Balloc+0x78>)
 800e2b2:	4818      	ldr	r0, [pc, #96]	; (800e314 <_Balloc+0x7c>)
 800e2b4:	f000 fce2 	bl	800ec7c <__assert_func>
 800e2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2bc:	6006      	str	r6, [r0, #0]
 800e2be:	60c6      	str	r6, [r0, #12]
 800e2c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2c2:	68f3      	ldr	r3, [r6, #12]
 800e2c4:	b183      	cbz	r3, 800e2e8 <_Balloc+0x50>
 800e2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2ce:	b9b8      	cbnz	r0, 800e300 <_Balloc+0x68>
 800e2d0:	2101      	movs	r1, #1
 800e2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e2d6:	1d72      	adds	r2, r6, #5
 800e2d8:	4620      	mov	r0, r4
 800e2da:	0092      	lsls	r2, r2, #2
 800e2dc:	f000 fb5e 	bl	800e99c <_calloc_r>
 800e2e0:	b160      	cbz	r0, 800e2fc <_Balloc+0x64>
 800e2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2e6:	e00e      	b.n	800e306 <_Balloc+0x6e>
 800e2e8:	2221      	movs	r2, #33	; 0x21
 800e2ea:	2104      	movs	r1, #4
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f000 fb55 	bl	800e99c <_calloc_r>
 800e2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f4:	60f0      	str	r0, [r6, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1e4      	bne.n	800e2c6 <_Balloc+0x2e>
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	bd70      	pop	{r4, r5, r6, pc}
 800e300:	6802      	ldr	r2, [r0, #0]
 800e302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e306:	2300      	movs	r3, #0
 800e308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e30c:	e7f7      	b.n	800e2fe <_Balloc+0x66>
 800e30e:	bf00      	nop
 800e310:	08011f81 	.word	0x08011f81
 800e314:	08012004 	.word	0x08012004

0800e318 <_Bfree>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e31c:	4605      	mov	r5, r0
 800e31e:	460c      	mov	r4, r1
 800e320:	b976      	cbnz	r6, 800e340 <_Bfree+0x28>
 800e322:	2010      	movs	r0, #16
 800e324:	f7fe fa92 	bl	800c84c <malloc>
 800e328:	4602      	mov	r2, r0
 800e32a:	6268      	str	r0, [r5, #36]	; 0x24
 800e32c:	b920      	cbnz	r0, 800e338 <_Bfree+0x20>
 800e32e:	218a      	movs	r1, #138	; 0x8a
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <_Bfree+0x3c>)
 800e332:	4809      	ldr	r0, [pc, #36]	; (800e358 <_Bfree+0x40>)
 800e334:	f000 fca2 	bl	800ec7c <__assert_func>
 800e338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e33c:	6006      	str	r6, [r0, #0]
 800e33e:	60c6      	str	r6, [r0, #12]
 800e340:	b13c      	cbz	r4, 800e352 <_Bfree+0x3a>
 800e342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e344:	6862      	ldr	r2, [r4, #4]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e34c:	6021      	str	r1, [r4, #0]
 800e34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e352:	bd70      	pop	{r4, r5, r6, pc}
 800e354:	08011f81 	.word	0x08011f81
 800e358:	08012004 	.word	0x08012004

0800e35c <__multadd>:
 800e35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e360:	4607      	mov	r7, r0
 800e362:	460c      	mov	r4, r1
 800e364:	461e      	mov	r6, r3
 800e366:	2000      	movs	r0, #0
 800e368:	690d      	ldr	r5, [r1, #16]
 800e36a:	f101 0c14 	add.w	ip, r1, #20
 800e36e:	f8dc 3000 	ldr.w	r3, [ip]
 800e372:	3001      	adds	r0, #1
 800e374:	b299      	uxth	r1, r3
 800e376:	fb02 6101 	mla	r1, r2, r1, r6
 800e37a:	0c1e      	lsrs	r6, r3, #16
 800e37c:	0c0b      	lsrs	r3, r1, #16
 800e37e:	fb02 3306 	mla	r3, r2, r6, r3
 800e382:	b289      	uxth	r1, r1
 800e384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e388:	4285      	cmp	r5, r0
 800e38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e38e:	f84c 1b04 	str.w	r1, [ip], #4
 800e392:	dcec      	bgt.n	800e36e <__multadd+0x12>
 800e394:	b30e      	cbz	r6, 800e3da <__multadd+0x7e>
 800e396:	68a3      	ldr	r3, [r4, #8]
 800e398:	42ab      	cmp	r3, r5
 800e39a:	dc19      	bgt.n	800e3d0 <__multadd+0x74>
 800e39c:	6861      	ldr	r1, [r4, #4]
 800e39e:	4638      	mov	r0, r7
 800e3a0:	3101      	adds	r1, #1
 800e3a2:	f7ff ff79 	bl	800e298 <_Balloc>
 800e3a6:	4680      	mov	r8, r0
 800e3a8:	b928      	cbnz	r0, 800e3b6 <__multadd+0x5a>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	21b5      	movs	r1, #181	; 0xb5
 800e3ae:	4b0c      	ldr	r3, [pc, #48]	; (800e3e0 <__multadd+0x84>)
 800e3b0:	480c      	ldr	r0, [pc, #48]	; (800e3e4 <__multadd+0x88>)
 800e3b2:	f000 fc63 	bl	800ec7c <__assert_func>
 800e3b6:	6922      	ldr	r2, [r4, #16]
 800e3b8:	f104 010c 	add.w	r1, r4, #12
 800e3bc:	3202      	adds	r2, #2
 800e3be:	0092      	lsls	r2, r2, #2
 800e3c0:	300c      	adds	r0, #12
 800e3c2:	f7fe fa53 	bl	800c86c <memcpy>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff ffa5 	bl	800e318 <_Bfree>
 800e3ce:	4644      	mov	r4, r8
 800e3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	615e      	str	r6, [r3, #20]
 800e3d8:	6125      	str	r5, [r4, #16]
 800e3da:	4620      	mov	r0, r4
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	08011ff3 	.word	0x08011ff3
 800e3e4:	08012004 	.word	0x08012004

0800e3e8 <__hi0bits>:
 800e3e8:	0c02      	lsrs	r2, r0, #16
 800e3ea:	0412      	lsls	r2, r2, #16
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	b9ca      	cbnz	r2, 800e424 <__hi0bits+0x3c>
 800e3f0:	0403      	lsls	r3, r0, #16
 800e3f2:	2010      	movs	r0, #16
 800e3f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e3f8:	bf04      	itt	eq
 800e3fa:	021b      	lsleq	r3, r3, #8
 800e3fc:	3008      	addeq	r0, #8
 800e3fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e402:	bf04      	itt	eq
 800e404:	011b      	lsleq	r3, r3, #4
 800e406:	3004      	addeq	r0, #4
 800e408:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e40c:	bf04      	itt	eq
 800e40e:	009b      	lsleq	r3, r3, #2
 800e410:	3002      	addeq	r0, #2
 800e412:	2b00      	cmp	r3, #0
 800e414:	db05      	blt.n	800e422 <__hi0bits+0x3a>
 800e416:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e41a:	f100 0001 	add.w	r0, r0, #1
 800e41e:	bf08      	it	eq
 800e420:	2020      	moveq	r0, #32
 800e422:	4770      	bx	lr
 800e424:	2000      	movs	r0, #0
 800e426:	e7e5      	b.n	800e3f4 <__hi0bits+0xc>

0800e428 <__lo0bits>:
 800e428:	6803      	ldr	r3, [r0, #0]
 800e42a:	4602      	mov	r2, r0
 800e42c:	f013 0007 	ands.w	r0, r3, #7
 800e430:	d00b      	beq.n	800e44a <__lo0bits+0x22>
 800e432:	07d9      	lsls	r1, r3, #31
 800e434:	d421      	bmi.n	800e47a <__lo0bits+0x52>
 800e436:	0798      	lsls	r0, r3, #30
 800e438:	bf49      	itett	mi
 800e43a:	085b      	lsrmi	r3, r3, #1
 800e43c:	089b      	lsrpl	r3, r3, #2
 800e43e:	2001      	movmi	r0, #1
 800e440:	6013      	strmi	r3, [r2, #0]
 800e442:	bf5c      	itt	pl
 800e444:	2002      	movpl	r0, #2
 800e446:	6013      	strpl	r3, [r2, #0]
 800e448:	4770      	bx	lr
 800e44a:	b299      	uxth	r1, r3
 800e44c:	b909      	cbnz	r1, 800e452 <__lo0bits+0x2a>
 800e44e:	2010      	movs	r0, #16
 800e450:	0c1b      	lsrs	r3, r3, #16
 800e452:	b2d9      	uxtb	r1, r3
 800e454:	b909      	cbnz	r1, 800e45a <__lo0bits+0x32>
 800e456:	3008      	adds	r0, #8
 800e458:	0a1b      	lsrs	r3, r3, #8
 800e45a:	0719      	lsls	r1, r3, #28
 800e45c:	bf04      	itt	eq
 800e45e:	091b      	lsreq	r3, r3, #4
 800e460:	3004      	addeq	r0, #4
 800e462:	0799      	lsls	r1, r3, #30
 800e464:	bf04      	itt	eq
 800e466:	089b      	lsreq	r3, r3, #2
 800e468:	3002      	addeq	r0, #2
 800e46a:	07d9      	lsls	r1, r3, #31
 800e46c:	d403      	bmi.n	800e476 <__lo0bits+0x4e>
 800e46e:	085b      	lsrs	r3, r3, #1
 800e470:	f100 0001 	add.w	r0, r0, #1
 800e474:	d003      	beq.n	800e47e <__lo0bits+0x56>
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	4770      	bx	lr
 800e47a:	2000      	movs	r0, #0
 800e47c:	4770      	bx	lr
 800e47e:	2020      	movs	r0, #32
 800e480:	4770      	bx	lr
	...

0800e484 <__i2b>:
 800e484:	b510      	push	{r4, lr}
 800e486:	460c      	mov	r4, r1
 800e488:	2101      	movs	r1, #1
 800e48a:	f7ff ff05 	bl	800e298 <_Balloc>
 800e48e:	4602      	mov	r2, r0
 800e490:	b928      	cbnz	r0, 800e49e <__i2b+0x1a>
 800e492:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e496:	4b04      	ldr	r3, [pc, #16]	; (800e4a8 <__i2b+0x24>)
 800e498:	4804      	ldr	r0, [pc, #16]	; (800e4ac <__i2b+0x28>)
 800e49a:	f000 fbef 	bl	800ec7c <__assert_func>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	6144      	str	r4, [r0, #20]
 800e4a2:	6103      	str	r3, [r0, #16]
 800e4a4:	bd10      	pop	{r4, pc}
 800e4a6:	bf00      	nop
 800e4a8:	08011ff3 	.word	0x08011ff3
 800e4ac:	08012004 	.word	0x08012004

0800e4b0 <__multiply>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	4691      	mov	r9, r2
 800e4b6:	690a      	ldr	r2, [r1, #16]
 800e4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4bc:	460c      	mov	r4, r1
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	bfbe      	ittt	lt
 800e4c2:	460b      	movlt	r3, r1
 800e4c4:	464c      	movlt	r4, r9
 800e4c6:	4699      	movlt	r9, r3
 800e4c8:	6927      	ldr	r7, [r4, #16]
 800e4ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4ce:	68a3      	ldr	r3, [r4, #8]
 800e4d0:	6861      	ldr	r1, [r4, #4]
 800e4d2:	eb07 060a 	add.w	r6, r7, sl
 800e4d6:	42b3      	cmp	r3, r6
 800e4d8:	b085      	sub	sp, #20
 800e4da:	bfb8      	it	lt
 800e4dc:	3101      	addlt	r1, #1
 800e4de:	f7ff fedb 	bl	800e298 <_Balloc>
 800e4e2:	b930      	cbnz	r0, 800e4f2 <__multiply+0x42>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	f240 115d 	movw	r1, #349	; 0x15d
 800e4ea:	4b43      	ldr	r3, [pc, #268]	; (800e5f8 <__multiply+0x148>)
 800e4ec:	4843      	ldr	r0, [pc, #268]	; (800e5fc <__multiply+0x14c>)
 800e4ee:	f000 fbc5 	bl	800ec7c <__assert_func>
 800e4f2:	f100 0514 	add.w	r5, r0, #20
 800e4f6:	462b      	mov	r3, r5
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4fe:	4543      	cmp	r3, r8
 800e500:	d321      	bcc.n	800e546 <__multiply+0x96>
 800e502:	f104 0314 	add.w	r3, r4, #20
 800e506:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e50a:	f109 0314 	add.w	r3, r9, #20
 800e50e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e512:	9202      	str	r2, [sp, #8]
 800e514:	1b3a      	subs	r2, r7, r4
 800e516:	3a15      	subs	r2, #21
 800e518:	f022 0203 	bic.w	r2, r2, #3
 800e51c:	3204      	adds	r2, #4
 800e51e:	f104 0115 	add.w	r1, r4, #21
 800e522:	428f      	cmp	r7, r1
 800e524:	bf38      	it	cc
 800e526:	2204      	movcc	r2, #4
 800e528:	9201      	str	r2, [sp, #4]
 800e52a:	9a02      	ldr	r2, [sp, #8]
 800e52c:	9303      	str	r3, [sp, #12]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d80c      	bhi.n	800e54c <__multiply+0x9c>
 800e532:	2e00      	cmp	r6, #0
 800e534:	dd03      	ble.n	800e53e <__multiply+0x8e>
 800e536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d059      	beq.n	800e5f2 <__multiply+0x142>
 800e53e:	6106      	str	r6, [r0, #16]
 800e540:	b005      	add	sp, #20
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	f843 2b04 	str.w	r2, [r3], #4
 800e54a:	e7d8      	b.n	800e4fe <__multiply+0x4e>
 800e54c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e550:	f1ba 0f00 	cmp.w	sl, #0
 800e554:	d023      	beq.n	800e59e <__multiply+0xee>
 800e556:	46a9      	mov	r9, r5
 800e558:	f04f 0c00 	mov.w	ip, #0
 800e55c:	f104 0e14 	add.w	lr, r4, #20
 800e560:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e564:	f8d9 1000 	ldr.w	r1, [r9]
 800e568:	fa1f fb82 	uxth.w	fp, r2
 800e56c:	b289      	uxth	r1, r1
 800e56e:	fb0a 110b 	mla	r1, sl, fp, r1
 800e572:	4461      	add	r1, ip
 800e574:	f8d9 c000 	ldr.w	ip, [r9]
 800e578:	0c12      	lsrs	r2, r2, #16
 800e57a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e57e:	fb0a c202 	mla	r2, sl, r2, ip
 800e582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e586:	b289      	uxth	r1, r1
 800e588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e58c:	4577      	cmp	r7, lr
 800e58e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e592:	f849 1b04 	str.w	r1, [r9], #4
 800e596:	d8e3      	bhi.n	800e560 <__multiply+0xb0>
 800e598:	9a01      	ldr	r2, [sp, #4]
 800e59a:	f845 c002 	str.w	ip, [r5, r2]
 800e59e:	9a03      	ldr	r2, [sp, #12]
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5a6:	f1b9 0f00 	cmp.w	r9, #0
 800e5aa:	d020      	beq.n	800e5ee <__multiply+0x13e>
 800e5ac:	46ae      	mov	lr, r5
 800e5ae:	f04f 0a00 	mov.w	sl, #0
 800e5b2:	6829      	ldr	r1, [r5, #0]
 800e5b4:	f104 0c14 	add.w	ip, r4, #20
 800e5b8:	f8bc b000 	ldrh.w	fp, [ip]
 800e5bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e5c0:	b289      	uxth	r1, r1
 800e5c2:	fb09 220b 	mla	r2, r9, fp, r2
 800e5c6:	4492      	add	sl, r2
 800e5c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e5cc:	f84e 1b04 	str.w	r1, [lr], #4
 800e5d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e5d4:	f8be 1000 	ldrh.w	r1, [lr]
 800e5d8:	0c12      	lsrs	r2, r2, #16
 800e5da:	fb09 1102 	mla	r1, r9, r2, r1
 800e5de:	4567      	cmp	r7, ip
 800e5e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e5e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e5e8:	d8e6      	bhi.n	800e5b8 <__multiply+0x108>
 800e5ea:	9a01      	ldr	r2, [sp, #4]
 800e5ec:	50a9      	str	r1, [r5, r2]
 800e5ee:	3504      	adds	r5, #4
 800e5f0:	e79b      	b.n	800e52a <__multiply+0x7a>
 800e5f2:	3e01      	subs	r6, #1
 800e5f4:	e79d      	b.n	800e532 <__multiply+0x82>
 800e5f6:	bf00      	nop
 800e5f8:	08011ff3 	.word	0x08011ff3
 800e5fc:	08012004 	.word	0x08012004

0800e600 <__pow5mult>:
 800e600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e604:	4615      	mov	r5, r2
 800e606:	f012 0203 	ands.w	r2, r2, #3
 800e60a:	4606      	mov	r6, r0
 800e60c:	460f      	mov	r7, r1
 800e60e:	d007      	beq.n	800e620 <__pow5mult+0x20>
 800e610:	4c25      	ldr	r4, [pc, #148]	; (800e6a8 <__pow5mult+0xa8>)
 800e612:	3a01      	subs	r2, #1
 800e614:	2300      	movs	r3, #0
 800e616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e61a:	f7ff fe9f 	bl	800e35c <__multadd>
 800e61e:	4607      	mov	r7, r0
 800e620:	10ad      	asrs	r5, r5, #2
 800e622:	d03d      	beq.n	800e6a0 <__pow5mult+0xa0>
 800e624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e626:	b97c      	cbnz	r4, 800e648 <__pow5mult+0x48>
 800e628:	2010      	movs	r0, #16
 800e62a:	f7fe f90f 	bl	800c84c <malloc>
 800e62e:	4602      	mov	r2, r0
 800e630:	6270      	str	r0, [r6, #36]	; 0x24
 800e632:	b928      	cbnz	r0, 800e640 <__pow5mult+0x40>
 800e634:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e638:	4b1c      	ldr	r3, [pc, #112]	; (800e6ac <__pow5mult+0xac>)
 800e63a:	481d      	ldr	r0, [pc, #116]	; (800e6b0 <__pow5mult+0xb0>)
 800e63c:	f000 fb1e 	bl	800ec7c <__assert_func>
 800e640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e644:	6004      	str	r4, [r0, #0]
 800e646:	60c4      	str	r4, [r0, #12]
 800e648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e64c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e650:	b94c      	cbnz	r4, 800e666 <__pow5mult+0x66>
 800e652:	f240 2171 	movw	r1, #625	; 0x271
 800e656:	4630      	mov	r0, r6
 800e658:	f7ff ff14 	bl	800e484 <__i2b>
 800e65c:	2300      	movs	r3, #0
 800e65e:	4604      	mov	r4, r0
 800e660:	f8c8 0008 	str.w	r0, [r8, #8]
 800e664:	6003      	str	r3, [r0, #0]
 800e666:	f04f 0900 	mov.w	r9, #0
 800e66a:	07eb      	lsls	r3, r5, #31
 800e66c:	d50a      	bpl.n	800e684 <__pow5mult+0x84>
 800e66e:	4639      	mov	r1, r7
 800e670:	4622      	mov	r2, r4
 800e672:	4630      	mov	r0, r6
 800e674:	f7ff ff1c 	bl	800e4b0 <__multiply>
 800e678:	4680      	mov	r8, r0
 800e67a:	4639      	mov	r1, r7
 800e67c:	4630      	mov	r0, r6
 800e67e:	f7ff fe4b 	bl	800e318 <_Bfree>
 800e682:	4647      	mov	r7, r8
 800e684:	106d      	asrs	r5, r5, #1
 800e686:	d00b      	beq.n	800e6a0 <__pow5mult+0xa0>
 800e688:	6820      	ldr	r0, [r4, #0]
 800e68a:	b938      	cbnz	r0, 800e69c <__pow5mult+0x9c>
 800e68c:	4622      	mov	r2, r4
 800e68e:	4621      	mov	r1, r4
 800e690:	4630      	mov	r0, r6
 800e692:	f7ff ff0d 	bl	800e4b0 <__multiply>
 800e696:	6020      	str	r0, [r4, #0]
 800e698:	f8c0 9000 	str.w	r9, [r0]
 800e69c:	4604      	mov	r4, r0
 800e69e:	e7e4      	b.n	800e66a <__pow5mult+0x6a>
 800e6a0:	4638      	mov	r0, r7
 800e6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a6:	bf00      	nop
 800e6a8:	08012150 	.word	0x08012150
 800e6ac:	08011f81 	.word	0x08011f81
 800e6b0:	08012004 	.word	0x08012004

0800e6b4 <__lshift>:
 800e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	460c      	mov	r4, r1
 800e6ba:	4607      	mov	r7, r0
 800e6bc:	4691      	mov	r9, r2
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	6849      	ldr	r1, [r1, #4]
 800e6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6c6:	68a3      	ldr	r3, [r4, #8]
 800e6c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6cc:	f108 0601 	add.w	r6, r8, #1
 800e6d0:	42b3      	cmp	r3, r6
 800e6d2:	db0b      	blt.n	800e6ec <__lshift+0x38>
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	f7ff fddf 	bl	800e298 <_Balloc>
 800e6da:	4605      	mov	r5, r0
 800e6dc:	b948      	cbnz	r0, 800e6f2 <__lshift+0x3e>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e6e4:	4b29      	ldr	r3, [pc, #164]	; (800e78c <__lshift+0xd8>)
 800e6e6:	482a      	ldr	r0, [pc, #168]	; (800e790 <__lshift+0xdc>)
 800e6e8:	f000 fac8 	bl	800ec7c <__assert_func>
 800e6ec:	3101      	adds	r1, #1
 800e6ee:	005b      	lsls	r3, r3, #1
 800e6f0:	e7ee      	b.n	800e6d0 <__lshift+0x1c>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f100 0114 	add.w	r1, r0, #20
 800e6f8:	f100 0210 	add.w	r2, r0, #16
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	4553      	cmp	r3, sl
 800e700:	db37      	blt.n	800e772 <__lshift+0xbe>
 800e702:	6920      	ldr	r0, [r4, #16]
 800e704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e708:	f104 0314 	add.w	r3, r4, #20
 800e70c:	f019 091f 	ands.w	r9, r9, #31
 800e710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e714:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e718:	d02f      	beq.n	800e77a <__lshift+0xc6>
 800e71a:	468a      	mov	sl, r1
 800e71c:	f04f 0c00 	mov.w	ip, #0
 800e720:	f1c9 0e20 	rsb	lr, r9, #32
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	fa02 f209 	lsl.w	r2, r2, r9
 800e72a:	ea42 020c 	orr.w	r2, r2, ip
 800e72e:	f84a 2b04 	str.w	r2, [sl], #4
 800e732:	f853 2b04 	ldr.w	r2, [r3], #4
 800e736:	4298      	cmp	r0, r3
 800e738:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e73c:	d8f2      	bhi.n	800e724 <__lshift+0x70>
 800e73e:	1b03      	subs	r3, r0, r4
 800e740:	3b15      	subs	r3, #21
 800e742:	f023 0303 	bic.w	r3, r3, #3
 800e746:	3304      	adds	r3, #4
 800e748:	f104 0215 	add.w	r2, r4, #21
 800e74c:	4290      	cmp	r0, r2
 800e74e:	bf38      	it	cc
 800e750:	2304      	movcc	r3, #4
 800e752:	f841 c003 	str.w	ip, [r1, r3]
 800e756:	f1bc 0f00 	cmp.w	ip, #0
 800e75a:	d001      	beq.n	800e760 <__lshift+0xac>
 800e75c:	f108 0602 	add.w	r6, r8, #2
 800e760:	3e01      	subs	r6, #1
 800e762:	4638      	mov	r0, r7
 800e764:	4621      	mov	r1, r4
 800e766:	612e      	str	r6, [r5, #16]
 800e768:	f7ff fdd6 	bl	800e318 <_Bfree>
 800e76c:	4628      	mov	r0, r5
 800e76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e772:	f842 0f04 	str.w	r0, [r2, #4]!
 800e776:	3301      	adds	r3, #1
 800e778:	e7c1      	b.n	800e6fe <__lshift+0x4a>
 800e77a:	3904      	subs	r1, #4
 800e77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e780:	4298      	cmp	r0, r3
 800e782:	f841 2f04 	str.w	r2, [r1, #4]!
 800e786:	d8f9      	bhi.n	800e77c <__lshift+0xc8>
 800e788:	e7ea      	b.n	800e760 <__lshift+0xac>
 800e78a:	bf00      	nop
 800e78c:	08011ff3 	.word	0x08011ff3
 800e790:	08012004 	.word	0x08012004

0800e794 <__mcmp>:
 800e794:	4603      	mov	r3, r0
 800e796:	690a      	ldr	r2, [r1, #16]
 800e798:	6900      	ldr	r0, [r0, #16]
 800e79a:	b530      	push	{r4, r5, lr}
 800e79c:	1a80      	subs	r0, r0, r2
 800e79e:	d10d      	bne.n	800e7bc <__mcmp+0x28>
 800e7a0:	3314      	adds	r3, #20
 800e7a2:	3114      	adds	r1, #20
 800e7a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7b4:	4295      	cmp	r5, r2
 800e7b6:	d002      	beq.n	800e7be <__mcmp+0x2a>
 800e7b8:	d304      	bcc.n	800e7c4 <__mcmp+0x30>
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	bd30      	pop	{r4, r5, pc}
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	d3f4      	bcc.n	800e7ac <__mcmp+0x18>
 800e7c2:	e7fb      	b.n	800e7bc <__mcmp+0x28>
 800e7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c8:	e7f8      	b.n	800e7bc <__mcmp+0x28>
	...

0800e7cc <__mdiff>:
 800e7cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	4607      	mov	r7, r0
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	4614      	mov	r4, r2
 800e7da:	f7ff ffdb 	bl	800e794 <__mcmp>
 800e7de:	1e06      	subs	r6, r0, #0
 800e7e0:	d111      	bne.n	800e806 <__mdiff+0x3a>
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f7ff fd57 	bl	800e298 <_Balloc>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	b928      	cbnz	r0, 800e7fa <__mdiff+0x2e>
 800e7ee:	f240 2132 	movw	r1, #562	; 0x232
 800e7f2:	4b3a      	ldr	r3, [pc, #232]	; (800e8dc <__mdiff+0x110>)
 800e7f4:	483a      	ldr	r0, [pc, #232]	; (800e8e0 <__mdiff+0x114>)
 800e7f6:	f000 fa41 	bl	800ec7c <__assert_func>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e800:	4610      	mov	r0, r2
 800e802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	bfa4      	itt	ge
 800e808:	4623      	movge	r3, r4
 800e80a:	462c      	movge	r4, r5
 800e80c:	4638      	mov	r0, r7
 800e80e:	6861      	ldr	r1, [r4, #4]
 800e810:	bfa6      	itte	ge
 800e812:	461d      	movge	r5, r3
 800e814:	2600      	movge	r6, #0
 800e816:	2601      	movlt	r6, #1
 800e818:	f7ff fd3e 	bl	800e298 <_Balloc>
 800e81c:	4602      	mov	r2, r0
 800e81e:	b918      	cbnz	r0, 800e828 <__mdiff+0x5c>
 800e820:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e824:	4b2d      	ldr	r3, [pc, #180]	; (800e8dc <__mdiff+0x110>)
 800e826:	e7e5      	b.n	800e7f4 <__mdiff+0x28>
 800e828:	f102 0814 	add.w	r8, r2, #20
 800e82c:	46c2      	mov	sl, r8
 800e82e:	f04f 0c00 	mov.w	ip, #0
 800e832:	6927      	ldr	r7, [r4, #16]
 800e834:	60c6      	str	r6, [r0, #12]
 800e836:	692e      	ldr	r6, [r5, #16]
 800e838:	f104 0014 	add.w	r0, r4, #20
 800e83c:	f105 0914 	add.w	r9, r5, #20
 800e840:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800e844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e848:	3410      	adds	r4, #16
 800e84a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e84e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e852:	fa1f f18b 	uxth.w	r1, fp
 800e856:	448c      	add	ip, r1
 800e858:	b299      	uxth	r1, r3
 800e85a:	0c1b      	lsrs	r3, r3, #16
 800e85c:	ebac 0101 	sub.w	r1, ip, r1
 800e860:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e864:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e868:	b289      	uxth	r1, r1
 800e86a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800e86e:	454e      	cmp	r6, r9
 800e870:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e874:	f84a 3b04 	str.w	r3, [sl], #4
 800e878:	d8e7      	bhi.n	800e84a <__mdiff+0x7e>
 800e87a:	1b73      	subs	r3, r6, r5
 800e87c:	3b15      	subs	r3, #21
 800e87e:	f023 0303 	bic.w	r3, r3, #3
 800e882:	3515      	adds	r5, #21
 800e884:	3304      	adds	r3, #4
 800e886:	42ae      	cmp	r6, r5
 800e888:	bf38      	it	cc
 800e88a:	2304      	movcc	r3, #4
 800e88c:	4418      	add	r0, r3
 800e88e:	4443      	add	r3, r8
 800e890:	461e      	mov	r6, r3
 800e892:	4605      	mov	r5, r0
 800e894:	4575      	cmp	r5, lr
 800e896:	d30e      	bcc.n	800e8b6 <__mdiff+0xea>
 800e898:	f10e 0103 	add.w	r1, lr, #3
 800e89c:	1a09      	subs	r1, r1, r0
 800e89e:	f021 0103 	bic.w	r1, r1, #3
 800e8a2:	3803      	subs	r0, #3
 800e8a4:	4586      	cmp	lr, r0
 800e8a6:	bf38      	it	cc
 800e8a8:	2100      	movcc	r1, #0
 800e8aa:	4419      	add	r1, r3
 800e8ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e8b0:	b18b      	cbz	r3, 800e8d6 <__mdiff+0x10a>
 800e8b2:	6117      	str	r7, [r2, #16]
 800e8b4:	e7a4      	b.n	800e800 <__mdiff+0x34>
 800e8b6:	f855 8b04 	ldr.w	r8, [r5], #4
 800e8ba:	fa1f f188 	uxth.w	r1, r8
 800e8be:	4461      	add	r1, ip
 800e8c0:	140c      	asrs	r4, r1, #16
 800e8c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e8c6:	b289      	uxth	r1, r1
 800e8c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e8cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800e8d0:	f846 1b04 	str.w	r1, [r6], #4
 800e8d4:	e7de      	b.n	800e894 <__mdiff+0xc8>
 800e8d6:	3f01      	subs	r7, #1
 800e8d8:	e7e8      	b.n	800e8ac <__mdiff+0xe0>
 800e8da:	bf00      	nop
 800e8dc:	08011ff3 	.word	0x08011ff3
 800e8e0:	08012004 	.word	0x08012004

0800e8e4 <__d2b>:
 800e8e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e8ee:	4690      	mov	r8, r2
 800e8f0:	461d      	mov	r5, r3
 800e8f2:	f7ff fcd1 	bl	800e298 <_Balloc>
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	b930      	cbnz	r0, 800e908 <__d2b+0x24>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	f240 310a 	movw	r1, #778	; 0x30a
 800e900:	4b24      	ldr	r3, [pc, #144]	; (800e994 <__d2b+0xb0>)
 800e902:	4825      	ldr	r0, [pc, #148]	; (800e998 <__d2b+0xb4>)
 800e904:	f000 f9ba 	bl	800ec7c <__assert_func>
 800e908:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e90c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e910:	bb2d      	cbnz	r5, 800e95e <__d2b+0x7a>
 800e912:	9301      	str	r3, [sp, #4]
 800e914:	f1b8 0300 	subs.w	r3, r8, #0
 800e918:	d026      	beq.n	800e968 <__d2b+0x84>
 800e91a:	4668      	mov	r0, sp
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	f7ff fd83 	bl	800e428 <__lo0bits>
 800e922:	9900      	ldr	r1, [sp, #0]
 800e924:	b1f0      	cbz	r0, 800e964 <__d2b+0x80>
 800e926:	9a01      	ldr	r2, [sp, #4]
 800e928:	f1c0 0320 	rsb	r3, r0, #32
 800e92c:	fa02 f303 	lsl.w	r3, r2, r3
 800e930:	430b      	orrs	r3, r1
 800e932:	40c2      	lsrs	r2, r0
 800e934:	6163      	str	r3, [r4, #20]
 800e936:	9201      	str	r2, [sp, #4]
 800e938:	9b01      	ldr	r3, [sp, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	bf14      	ite	ne
 800e93e:	2102      	movne	r1, #2
 800e940:	2101      	moveq	r1, #1
 800e942:	61a3      	str	r3, [r4, #24]
 800e944:	6121      	str	r1, [r4, #16]
 800e946:	b1c5      	cbz	r5, 800e97a <__d2b+0x96>
 800e948:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e94c:	4405      	add	r5, r0
 800e94e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e952:	603d      	str	r5, [r7, #0]
 800e954:	6030      	str	r0, [r6, #0]
 800e956:	4620      	mov	r0, r4
 800e958:	b002      	add	sp, #8
 800e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e962:	e7d6      	b.n	800e912 <__d2b+0x2e>
 800e964:	6161      	str	r1, [r4, #20]
 800e966:	e7e7      	b.n	800e938 <__d2b+0x54>
 800e968:	a801      	add	r0, sp, #4
 800e96a:	f7ff fd5d 	bl	800e428 <__lo0bits>
 800e96e:	2101      	movs	r1, #1
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	6121      	str	r1, [r4, #16]
 800e974:	6163      	str	r3, [r4, #20]
 800e976:	3020      	adds	r0, #32
 800e978:	e7e5      	b.n	800e946 <__d2b+0x62>
 800e97a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e97e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e982:	6038      	str	r0, [r7, #0]
 800e984:	6918      	ldr	r0, [r3, #16]
 800e986:	f7ff fd2f 	bl	800e3e8 <__hi0bits>
 800e98a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e98e:	6031      	str	r1, [r6, #0]
 800e990:	e7e1      	b.n	800e956 <__d2b+0x72>
 800e992:	bf00      	nop
 800e994:	08011ff3 	.word	0x08011ff3
 800e998:	08012004 	.word	0x08012004

0800e99c <_calloc_r>:
 800e99c:	b570      	push	{r4, r5, r6, lr}
 800e99e:	fba1 5402 	umull	r5, r4, r1, r2
 800e9a2:	b934      	cbnz	r4, 800e9b2 <_calloc_r+0x16>
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	f7fd ffdf 	bl	800c968 <_malloc_r>
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	b928      	cbnz	r0, 800e9ba <_calloc_r+0x1e>
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	bd70      	pop	{r4, r5, r6, pc}
 800e9b2:	220c      	movs	r2, #12
 800e9b4:	2600      	movs	r6, #0
 800e9b6:	6002      	str	r2, [r0, #0]
 800e9b8:	e7f9      	b.n	800e9ae <_calloc_r+0x12>
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4621      	mov	r1, r4
 800e9be:	f7fd ff63 	bl	800c888 <memset>
 800e9c2:	e7f4      	b.n	800e9ae <_calloc_r+0x12>

0800e9c4 <__ssputs_r>:
 800e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c8:	688e      	ldr	r6, [r1, #8]
 800e9ca:	4682      	mov	sl, r0
 800e9cc:	429e      	cmp	r6, r3
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	4690      	mov	r8, r2
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	d838      	bhi.n	800ea48 <__ssputs_r+0x84>
 800e9d6:	898a      	ldrh	r2, [r1, #12]
 800e9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9dc:	d032      	beq.n	800ea44 <__ssputs_r+0x80>
 800e9de:	6825      	ldr	r5, [r4, #0]
 800e9e0:	6909      	ldr	r1, [r1, #16]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	eba5 0901 	sub.w	r9, r5, r1
 800e9e8:	6965      	ldr	r5, [r4, #20]
 800e9ea:	444b      	add	r3, r9
 800e9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9f4:	106d      	asrs	r5, r5, #1
 800e9f6:	429d      	cmp	r5, r3
 800e9f8:	bf38      	it	cc
 800e9fa:	461d      	movcc	r5, r3
 800e9fc:	0553      	lsls	r3, r2, #21
 800e9fe:	d531      	bpl.n	800ea64 <__ssputs_r+0xa0>
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7fd ffb1 	bl	800c968 <_malloc_r>
 800ea06:	4606      	mov	r6, r0
 800ea08:	b950      	cbnz	r0, 800ea20 <__ssputs_r+0x5c>
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea10:	f8ca 3000 	str.w	r3, [sl]
 800ea14:	89a3      	ldrh	r3, [r4, #12]
 800ea16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1a:	81a3      	strh	r3, [r4, #12]
 800ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea20:	464a      	mov	r2, r9
 800ea22:	6921      	ldr	r1, [r4, #16]
 800ea24:	f7fd ff22 	bl	800c86c <memcpy>
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	6126      	str	r6, [r4, #16]
 800ea36:	444e      	add	r6, r9
 800ea38:	6026      	str	r6, [r4, #0]
 800ea3a:	463e      	mov	r6, r7
 800ea3c:	6165      	str	r5, [r4, #20]
 800ea3e:	eba5 0509 	sub.w	r5, r5, r9
 800ea42:	60a5      	str	r5, [r4, #8]
 800ea44:	42be      	cmp	r6, r7
 800ea46:	d900      	bls.n	800ea4a <__ssputs_r+0x86>
 800ea48:	463e      	mov	r6, r7
 800ea4a:	4632      	mov	r2, r6
 800ea4c:	4641      	mov	r1, r8
 800ea4e:	6820      	ldr	r0, [r4, #0]
 800ea50:	f000 f959 	bl	800ed06 <memmove>
 800ea54:	68a3      	ldr	r3, [r4, #8]
 800ea56:	2000      	movs	r0, #0
 800ea58:	1b9b      	subs	r3, r3, r6
 800ea5a:	60a3      	str	r3, [r4, #8]
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	4433      	add	r3, r6
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	e7db      	b.n	800ea1c <__ssputs_r+0x58>
 800ea64:	462a      	mov	r2, r5
 800ea66:	f000 f968 	bl	800ed3a <_realloc_r>
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1e1      	bne.n	800ea34 <__ssputs_r+0x70>
 800ea70:	4650      	mov	r0, sl
 800ea72:	6921      	ldr	r1, [r4, #16]
 800ea74:	f7fd ff10 	bl	800c898 <_free_r>
 800ea78:	e7c7      	b.n	800ea0a <__ssputs_r+0x46>
	...

0800ea7c <_svfiprintf_r>:
 800ea7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea80:	4698      	mov	r8, r3
 800ea82:	898b      	ldrh	r3, [r1, #12]
 800ea84:	4607      	mov	r7, r0
 800ea86:	061b      	lsls	r3, r3, #24
 800ea88:	460d      	mov	r5, r1
 800ea8a:	4614      	mov	r4, r2
 800ea8c:	b09d      	sub	sp, #116	; 0x74
 800ea8e:	d50e      	bpl.n	800eaae <_svfiprintf_r+0x32>
 800ea90:	690b      	ldr	r3, [r1, #16]
 800ea92:	b963      	cbnz	r3, 800eaae <_svfiprintf_r+0x32>
 800ea94:	2140      	movs	r1, #64	; 0x40
 800ea96:	f7fd ff67 	bl	800c968 <_malloc_r>
 800ea9a:	6028      	str	r0, [r5, #0]
 800ea9c:	6128      	str	r0, [r5, #16]
 800ea9e:	b920      	cbnz	r0, 800eaaa <_svfiprintf_r+0x2e>
 800eaa0:	230c      	movs	r3, #12
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa8:	e0d1      	b.n	800ec4e <_svfiprintf_r+0x1d2>
 800eaaa:	2340      	movs	r3, #64	; 0x40
 800eaac:	616b      	str	r3, [r5, #20]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9309      	str	r3, [sp, #36]	; 0x24
 800eab2:	2320      	movs	r3, #32
 800eab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eab8:	2330      	movs	r3, #48	; 0x30
 800eaba:	f04f 0901 	mov.w	r9, #1
 800eabe:	f8cd 800c 	str.w	r8, [sp, #12]
 800eac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ec68 <_svfiprintf_r+0x1ec>
 800eac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaca:	4623      	mov	r3, r4
 800eacc:	469a      	mov	sl, r3
 800eace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead2:	b10a      	cbz	r2, 800ead8 <_svfiprintf_r+0x5c>
 800ead4:	2a25      	cmp	r2, #37	; 0x25
 800ead6:	d1f9      	bne.n	800eacc <_svfiprintf_r+0x50>
 800ead8:	ebba 0b04 	subs.w	fp, sl, r4
 800eadc:	d00b      	beq.n	800eaf6 <_svfiprintf_r+0x7a>
 800eade:	465b      	mov	r3, fp
 800eae0:	4622      	mov	r2, r4
 800eae2:	4629      	mov	r1, r5
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7ff ff6d 	bl	800e9c4 <__ssputs_r>
 800eaea:	3001      	adds	r0, #1
 800eaec:	f000 80aa 	beq.w	800ec44 <_svfiprintf_r+0x1c8>
 800eaf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf2:	445a      	add	r2, fp
 800eaf4:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 80a2 	beq.w	800ec44 <_svfiprintf_r+0x1c8>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295
 800eb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb0a:	f10a 0a01 	add.w	sl, sl, #1
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	9307      	str	r3, [sp, #28]
 800eb12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb16:	931a      	str	r3, [sp, #104]	; 0x68
 800eb18:	4654      	mov	r4, sl
 800eb1a:	2205      	movs	r2, #5
 800eb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb20:	4851      	ldr	r0, [pc, #324]	; (800ec68 <_svfiprintf_r+0x1ec>)
 800eb22:	f7ff fb9f 	bl	800e264 <memchr>
 800eb26:	9a04      	ldr	r2, [sp, #16]
 800eb28:	b9d8      	cbnz	r0, 800eb62 <_svfiprintf_r+0xe6>
 800eb2a:	06d0      	lsls	r0, r2, #27
 800eb2c:	bf44      	itt	mi
 800eb2e:	2320      	movmi	r3, #32
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb34:	0711      	lsls	r1, r2, #28
 800eb36:	bf44      	itt	mi
 800eb38:	232b      	movmi	r3, #43	; 0x2b
 800eb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb42:	2b2a      	cmp	r3, #42	; 0x2a
 800eb44:	d015      	beq.n	800eb72 <_svfiprintf_r+0xf6>
 800eb46:	4654      	mov	r4, sl
 800eb48:	2000      	movs	r0, #0
 800eb4a:	f04f 0c0a 	mov.w	ip, #10
 800eb4e:	9a07      	ldr	r2, [sp, #28]
 800eb50:	4621      	mov	r1, r4
 800eb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb56:	3b30      	subs	r3, #48	; 0x30
 800eb58:	2b09      	cmp	r3, #9
 800eb5a:	d94e      	bls.n	800ebfa <_svfiprintf_r+0x17e>
 800eb5c:	b1b0      	cbz	r0, 800eb8c <_svfiprintf_r+0x110>
 800eb5e:	9207      	str	r2, [sp, #28]
 800eb60:	e014      	b.n	800eb8c <_svfiprintf_r+0x110>
 800eb62:	eba0 0308 	sub.w	r3, r0, r8
 800eb66:	fa09 f303 	lsl.w	r3, r9, r3
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	46a2      	mov	sl, r4
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	e7d2      	b.n	800eb18 <_svfiprintf_r+0x9c>
 800eb72:	9b03      	ldr	r3, [sp, #12]
 800eb74:	1d19      	adds	r1, r3, #4
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	9103      	str	r1, [sp, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfbb      	ittet	lt
 800eb7e:	425b      	neglt	r3, r3
 800eb80:	f042 0202 	orrlt.w	r2, r2, #2
 800eb84:	9307      	strge	r3, [sp, #28]
 800eb86:	9307      	strlt	r3, [sp, #28]
 800eb88:	bfb8      	it	lt
 800eb8a:	9204      	strlt	r2, [sp, #16]
 800eb8c:	7823      	ldrb	r3, [r4, #0]
 800eb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb90:	d10c      	bne.n	800ebac <_svfiprintf_r+0x130>
 800eb92:	7863      	ldrb	r3, [r4, #1]
 800eb94:	2b2a      	cmp	r3, #42	; 0x2a
 800eb96:	d135      	bne.n	800ec04 <_svfiprintf_r+0x188>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	3402      	adds	r4, #2
 800eb9c:	1d1a      	adds	r2, r3, #4
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	9203      	str	r2, [sp, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bfb8      	it	lt
 800eba6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebaa:	9305      	str	r3, [sp, #20]
 800ebac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ec6c <_svfiprintf_r+0x1f0>
 800ebb0:	2203      	movs	r2, #3
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	7821      	ldrb	r1, [r4, #0]
 800ebb6:	f7ff fb55 	bl	800e264 <memchr>
 800ebba:	b140      	cbz	r0, 800ebce <_svfiprintf_r+0x152>
 800ebbc:	2340      	movs	r3, #64	; 0x40
 800ebbe:	eba0 000a 	sub.w	r0, r0, sl
 800ebc2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	3401      	adds	r4, #1
 800ebca:	4303      	orrs	r3, r0
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd2:	2206      	movs	r2, #6
 800ebd4:	4826      	ldr	r0, [pc, #152]	; (800ec70 <_svfiprintf_r+0x1f4>)
 800ebd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebda:	f7ff fb43 	bl	800e264 <memchr>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d038      	beq.n	800ec54 <_svfiprintf_r+0x1d8>
 800ebe2:	4b24      	ldr	r3, [pc, #144]	; (800ec74 <_svfiprintf_r+0x1f8>)
 800ebe4:	bb1b      	cbnz	r3, 800ec2e <_svfiprintf_r+0x1b2>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	3307      	adds	r3, #7
 800ebea:	f023 0307 	bic.w	r3, r3, #7
 800ebee:	3308      	adds	r3, #8
 800ebf0:	9303      	str	r3, [sp, #12]
 800ebf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf4:	4433      	add	r3, r6
 800ebf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf8:	e767      	b.n	800eaca <_svfiprintf_r+0x4e>
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec02:	e7a5      	b.n	800eb50 <_svfiprintf_r+0xd4>
 800ec04:	2300      	movs	r3, #0
 800ec06:	f04f 0c0a 	mov.w	ip, #10
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	3401      	adds	r4, #1
 800ec0e:	9305      	str	r3, [sp, #20]
 800ec10:	4620      	mov	r0, r4
 800ec12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec16:	3a30      	subs	r2, #48	; 0x30
 800ec18:	2a09      	cmp	r2, #9
 800ec1a:	d903      	bls.n	800ec24 <_svfiprintf_r+0x1a8>
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0c5      	beq.n	800ebac <_svfiprintf_r+0x130>
 800ec20:	9105      	str	r1, [sp, #20]
 800ec22:	e7c3      	b.n	800ebac <_svfiprintf_r+0x130>
 800ec24:	4604      	mov	r4, r0
 800ec26:	2301      	movs	r3, #1
 800ec28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec2c:	e7f0      	b.n	800ec10 <_svfiprintf_r+0x194>
 800ec2e:	ab03      	add	r3, sp, #12
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	462a      	mov	r2, r5
 800ec34:	4638      	mov	r0, r7
 800ec36:	4b10      	ldr	r3, [pc, #64]	; (800ec78 <_svfiprintf_r+0x1fc>)
 800ec38:	a904      	add	r1, sp, #16
 800ec3a:	f7fd ffa7 	bl	800cb8c <_printf_float>
 800ec3e:	1c42      	adds	r2, r0, #1
 800ec40:	4606      	mov	r6, r0
 800ec42:	d1d6      	bne.n	800ebf2 <_svfiprintf_r+0x176>
 800ec44:	89ab      	ldrh	r3, [r5, #12]
 800ec46:	065b      	lsls	r3, r3, #25
 800ec48:	f53f af2c 	bmi.w	800eaa4 <_svfiprintf_r+0x28>
 800ec4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec4e:	b01d      	add	sp, #116	; 0x74
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	ab03      	add	r3, sp, #12
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	462a      	mov	r2, r5
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <_svfiprintf_r+0x1fc>)
 800ec5e:	a904      	add	r1, sp, #16
 800ec60:	f7fe fa30 	bl	800d0c4 <_printf_i>
 800ec64:	e7eb      	b.n	800ec3e <_svfiprintf_r+0x1c2>
 800ec66:	bf00      	nop
 800ec68:	0801215c 	.word	0x0801215c
 800ec6c:	08012162 	.word	0x08012162
 800ec70:	08012166 	.word	0x08012166
 800ec74:	0800cb8d 	.word	0x0800cb8d
 800ec78:	0800e9c5 	.word	0x0800e9c5

0800ec7c <__assert_func>:
 800ec7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec7e:	4614      	mov	r4, r2
 800ec80:	461a      	mov	r2, r3
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <__assert_func+0x2c>)
 800ec84:	4605      	mov	r5, r0
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68d8      	ldr	r0, [r3, #12]
 800ec8a:	b14c      	cbz	r4, 800eca0 <__assert_func+0x24>
 800ec8c:	4b07      	ldr	r3, [pc, #28]	; (800ecac <__assert_func+0x30>)
 800ec8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec92:	9100      	str	r1, [sp, #0]
 800ec94:	462b      	mov	r3, r5
 800ec96:	4906      	ldr	r1, [pc, #24]	; (800ecb0 <__assert_func+0x34>)
 800ec98:	f000 f80e 	bl	800ecb8 <fiprintf>
 800ec9c:	f000 faa2 	bl	800f1e4 <abort>
 800eca0:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <__assert_func+0x38>)
 800eca2:	461c      	mov	r4, r3
 800eca4:	e7f3      	b.n	800ec8e <__assert_func+0x12>
 800eca6:	bf00      	nop
 800eca8:	20000024 	.word	0x20000024
 800ecac:	0801216d 	.word	0x0801216d
 800ecb0:	0801217a 	.word	0x0801217a
 800ecb4:	080121a8 	.word	0x080121a8

0800ecb8 <fiprintf>:
 800ecb8:	b40e      	push	{r1, r2, r3}
 800ecba:	b503      	push	{r0, r1, lr}
 800ecbc:	4601      	mov	r1, r0
 800ecbe:	ab03      	add	r3, sp, #12
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <fiprintf+0x20>)
 800ecc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc6:	6800      	ldr	r0, [r0, #0]
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	f000 f88d 	bl	800ede8 <_vfiprintf_r>
 800ecce:	b002      	add	sp, #8
 800ecd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd4:	b003      	add	sp, #12
 800ecd6:	4770      	bx	lr
 800ecd8:	20000024 	.word	0x20000024

0800ecdc <__retarget_lock_init_recursive>:
 800ecdc:	4770      	bx	lr

0800ecde <__retarget_lock_acquire_recursive>:
 800ecde:	4770      	bx	lr

0800ece0 <__retarget_lock_release_recursive>:
 800ece0:	4770      	bx	lr

0800ece2 <__ascii_mbtowc>:
 800ece2:	b082      	sub	sp, #8
 800ece4:	b901      	cbnz	r1, 800ece8 <__ascii_mbtowc+0x6>
 800ece6:	a901      	add	r1, sp, #4
 800ece8:	b142      	cbz	r2, 800ecfc <__ascii_mbtowc+0x1a>
 800ecea:	b14b      	cbz	r3, 800ed00 <__ascii_mbtowc+0x1e>
 800ecec:	7813      	ldrb	r3, [r2, #0]
 800ecee:	600b      	str	r3, [r1, #0]
 800ecf0:	7812      	ldrb	r2, [r2, #0]
 800ecf2:	1e10      	subs	r0, r2, #0
 800ecf4:	bf18      	it	ne
 800ecf6:	2001      	movne	r0, #1
 800ecf8:	b002      	add	sp, #8
 800ecfa:	4770      	bx	lr
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	e7fb      	b.n	800ecf8 <__ascii_mbtowc+0x16>
 800ed00:	f06f 0001 	mvn.w	r0, #1
 800ed04:	e7f8      	b.n	800ecf8 <__ascii_mbtowc+0x16>

0800ed06 <memmove>:
 800ed06:	4288      	cmp	r0, r1
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	eb01 0402 	add.w	r4, r1, r2
 800ed0e:	d902      	bls.n	800ed16 <memmove+0x10>
 800ed10:	4284      	cmp	r4, r0
 800ed12:	4623      	mov	r3, r4
 800ed14:	d807      	bhi.n	800ed26 <memmove+0x20>
 800ed16:	1e43      	subs	r3, r0, #1
 800ed18:	42a1      	cmp	r1, r4
 800ed1a:	d008      	beq.n	800ed2e <memmove+0x28>
 800ed1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed24:	e7f8      	b.n	800ed18 <memmove+0x12>
 800ed26:	4601      	mov	r1, r0
 800ed28:	4402      	add	r2, r0
 800ed2a:	428a      	cmp	r2, r1
 800ed2c:	d100      	bne.n	800ed30 <memmove+0x2a>
 800ed2e:	bd10      	pop	{r4, pc}
 800ed30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed38:	e7f7      	b.n	800ed2a <memmove+0x24>

0800ed3a <_realloc_r>:
 800ed3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3e:	4680      	mov	r8, r0
 800ed40:	4614      	mov	r4, r2
 800ed42:	460e      	mov	r6, r1
 800ed44:	b921      	cbnz	r1, 800ed50 <_realloc_r+0x16>
 800ed46:	4611      	mov	r1, r2
 800ed48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4c:	f7fd be0c 	b.w	800c968 <_malloc_r>
 800ed50:	b92a      	cbnz	r2, 800ed5e <_realloc_r+0x24>
 800ed52:	f7fd fda1 	bl	800c898 <_free_r>
 800ed56:	4625      	mov	r5, r4
 800ed58:	4628      	mov	r0, r5
 800ed5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5e:	f000 fc61 	bl	800f624 <_malloc_usable_size_r>
 800ed62:	4284      	cmp	r4, r0
 800ed64:	4607      	mov	r7, r0
 800ed66:	d802      	bhi.n	800ed6e <_realloc_r+0x34>
 800ed68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed6c:	d812      	bhi.n	800ed94 <_realloc_r+0x5a>
 800ed6e:	4621      	mov	r1, r4
 800ed70:	4640      	mov	r0, r8
 800ed72:	f7fd fdf9 	bl	800c968 <_malloc_r>
 800ed76:	4605      	mov	r5, r0
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d0ed      	beq.n	800ed58 <_realloc_r+0x1e>
 800ed7c:	42bc      	cmp	r4, r7
 800ed7e:	4622      	mov	r2, r4
 800ed80:	4631      	mov	r1, r6
 800ed82:	bf28      	it	cs
 800ed84:	463a      	movcs	r2, r7
 800ed86:	f7fd fd71 	bl	800c86c <memcpy>
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	f7fd fd83 	bl	800c898 <_free_r>
 800ed92:	e7e1      	b.n	800ed58 <_realloc_r+0x1e>
 800ed94:	4635      	mov	r5, r6
 800ed96:	e7df      	b.n	800ed58 <_realloc_r+0x1e>

0800ed98 <__sfputc_r>:
 800ed98:	6893      	ldr	r3, [r2, #8]
 800ed9a:	b410      	push	{r4}
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	6093      	str	r3, [r2, #8]
 800eda2:	da07      	bge.n	800edb4 <__sfputc_r+0x1c>
 800eda4:	6994      	ldr	r4, [r2, #24]
 800eda6:	42a3      	cmp	r3, r4
 800eda8:	db01      	blt.n	800edae <__sfputc_r+0x16>
 800edaa:	290a      	cmp	r1, #10
 800edac:	d102      	bne.n	800edb4 <__sfputc_r+0x1c>
 800edae:	bc10      	pop	{r4}
 800edb0:	f000 b94a 	b.w	800f048 <__swbuf_r>
 800edb4:	6813      	ldr	r3, [r2, #0]
 800edb6:	1c58      	adds	r0, r3, #1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	7019      	strb	r1, [r3, #0]
 800edbc:	4608      	mov	r0, r1
 800edbe:	bc10      	pop	{r4}
 800edc0:	4770      	bx	lr

0800edc2 <__sfputs_r>:
 800edc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	4614      	mov	r4, r2
 800edca:	18d5      	adds	r5, r2, r3
 800edcc:	42ac      	cmp	r4, r5
 800edce:	d101      	bne.n	800edd4 <__sfputs_r+0x12>
 800edd0:	2000      	movs	r0, #0
 800edd2:	e007      	b.n	800ede4 <__sfputs_r+0x22>
 800edd4:	463a      	mov	r2, r7
 800edd6:	4630      	mov	r0, r6
 800edd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eddc:	f7ff ffdc 	bl	800ed98 <__sfputc_r>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d1f3      	bne.n	800edcc <__sfputs_r+0xa>
 800ede4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ede8 <_vfiprintf_r>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	460d      	mov	r5, r1
 800edee:	4614      	mov	r4, r2
 800edf0:	4698      	mov	r8, r3
 800edf2:	4606      	mov	r6, r0
 800edf4:	b09d      	sub	sp, #116	; 0x74
 800edf6:	b118      	cbz	r0, 800ee00 <_vfiprintf_r+0x18>
 800edf8:	6983      	ldr	r3, [r0, #24]
 800edfa:	b90b      	cbnz	r3, 800ee00 <_vfiprintf_r+0x18>
 800edfc:	f000 fb10 	bl	800f420 <__sinit>
 800ee00:	4b89      	ldr	r3, [pc, #548]	; (800f028 <_vfiprintf_r+0x240>)
 800ee02:	429d      	cmp	r5, r3
 800ee04:	d11b      	bne.n	800ee3e <_vfiprintf_r+0x56>
 800ee06:	6875      	ldr	r5, [r6, #4]
 800ee08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee0a:	07d9      	lsls	r1, r3, #31
 800ee0c:	d405      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	059a      	lsls	r2, r3, #22
 800ee12:	d402      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee16:	f7ff ff62 	bl	800ecde <__retarget_lock_acquire_recursive>
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	071b      	lsls	r3, r3, #28
 800ee1e:	d501      	bpl.n	800ee24 <_vfiprintf_r+0x3c>
 800ee20:	692b      	ldr	r3, [r5, #16]
 800ee22:	b9eb      	cbnz	r3, 800ee60 <_vfiprintf_r+0x78>
 800ee24:	4629      	mov	r1, r5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f000 f96e 	bl	800f108 <__swsetup_r>
 800ee2c:	b1c0      	cbz	r0, 800ee60 <_vfiprintf_r+0x78>
 800ee2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee30:	07dc      	lsls	r4, r3, #31
 800ee32:	d50e      	bpl.n	800ee52 <_vfiprintf_r+0x6a>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	b01d      	add	sp, #116	; 0x74
 800ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3e:	4b7b      	ldr	r3, [pc, #492]	; (800f02c <_vfiprintf_r+0x244>)
 800ee40:	429d      	cmp	r5, r3
 800ee42:	d101      	bne.n	800ee48 <_vfiprintf_r+0x60>
 800ee44:	68b5      	ldr	r5, [r6, #8]
 800ee46:	e7df      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee48:	4b79      	ldr	r3, [pc, #484]	; (800f030 <_vfiprintf_r+0x248>)
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	bf08      	it	eq
 800ee4e:	68f5      	ldreq	r5, [r6, #12]
 800ee50:	e7da      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	0598      	lsls	r0, r3, #22
 800ee56:	d4ed      	bmi.n	800ee34 <_vfiprintf_r+0x4c>
 800ee58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee5a:	f7ff ff41 	bl	800ece0 <__retarget_lock_release_recursive>
 800ee5e:	e7e9      	b.n	800ee34 <_vfiprintf_r+0x4c>
 800ee60:	2300      	movs	r3, #0
 800ee62:	9309      	str	r3, [sp, #36]	; 0x24
 800ee64:	2320      	movs	r3, #32
 800ee66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6a:	2330      	movs	r3, #48	; 0x30
 800ee6c:	f04f 0901 	mov.w	r9, #1
 800ee70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f034 <_vfiprintf_r+0x24c>
 800ee78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee7c:	4623      	mov	r3, r4
 800ee7e:	469a      	mov	sl, r3
 800ee80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee84:	b10a      	cbz	r2, 800ee8a <_vfiprintf_r+0xa2>
 800ee86:	2a25      	cmp	r2, #37	; 0x25
 800ee88:	d1f9      	bne.n	800ee7e <_vfiprintf_r+0x96>
 800ee8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee8e:	d00b      	beq.n	800eea8 <_vfiprintf_r+0xc0>
 800ee90:	465b      	mov	r3, fp
 800ee92:	4622      	mov	r2, r4
 800ee94:	4629      	mov	r1, r5
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7ff ff93 	bl	800edc2 <__sfputs_r>
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f000 80aa 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea4:	445a      	add	r2, fp
 800eea6:	9209      	str	r2, [sp, #36]	; 0x24
 800eea8:	f89a 3000 	ldrb.w	r3, [sl]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 80a2 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebc:	f10a 0a01 	add.w	sl, sl, #1
 800eec0:	9304      	str	r3, [sp, #16]
 800eec2:	9307      	str	r3, [sp, #28]
 800eec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eec8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeca:	4654      	mov	r4, sl
 800eecc:	2205      	movs	r2, #5
 800eece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed2:	4858      	ldr	r0, [pc, #352]	; (800f034 <_vfiprintf_r+0x24c>)
 800eed4:	f7ff f9c6 	bl	800e264 <memchr>
 800eed8:	9a04      	ldr	r2, [sp, #16]
 800eeda:	b9d8      	cbnz	r0, 800ef14 <_vfiprintf_r+0x12c>
 800eedc:	06d1      	lsls	r1, r2, #27
 800eede:	bf44      	itt	mi
 800eee0:	2320      	movmi	r3, #32
 800eee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee6:	0713      	lsls	r3, r2, #28
 800eee8:	bf44      	itt	mi
 800eeea:	232b      	movmi	r3, #43	; 0x2b
 800eeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef0:	f89a 3000 	ldrb.w	r3, [sl]
 800eef4:	2b2a      	cmp	r3, #42	; 0x2a
 800eef6:	d015      	beq.n	800ef24 <_vfiprintf_r+0x13c>
 800eef8:	4654      	mov	r4, sl
 800eefa:	2000      	movs	r0, #0
 800eefc:	f04f 0c0a 	mov.w	ip, #10
 800ef00:	9a07      	ldr	r2, [sp, #28]
 800ef02:	4621      	mov	r1, r4
 800ef04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef08:	3b30      	subs	r3, #48	; 0x30
 800ef0a:	2b09      	cmp	r3, #9
 800ef0c:	d94e      	bls.n	800efac <_vfiprintf_r+0x1c4>
 800ef0e:	b1b0      	cbz	r0, 800ef3e <_vfiprintf_r+0x156>
 800ef10:	9207      	str	r2, [sp, #28]
 800ef12:	e014      	b.n	800ef3e <_vfiprintf_r+0x156>
 800ef14:	eba0 0308 	sub.w	r3, r0, r8
 800ef18:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	46a2      	mov	sl, r4
 800ef20:	9304      	str	r3, [sp, #16]
 800ef22:	e7d2      	b.n	800eeca <_vfiprintf_r+0xe2>
 800ef24:	9b03      	ldr	r3, [sp, #12]
 800ef26:	1d19      	adds	r1, r3, #4
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	9103      	str	r1, [sp, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	bfbb      	ittet	lt
 800ef30:	425b      	neglt	r3, r3
 800ef32:	f042 0202 	orrlt.w	r2, r2, #2
 800ef36:	9307      	strge	r3, [sp, #28]
 800ef38:	9307      	strlt	r3, [sp, #28]
 800ef3a:	bfb8      	it	lt
 800ef3c:	9204      	strlt	r2, [sp, #16]
 800ef3e:	7823      	ldrb	r3, [r4, #0]
 800ef40:	2b2e      	cmp	r3, #46	; 0x2e
 800ef42:	d10c      	bne.n	800ef5e <_vfiprintf_r+0x176>
 800ef44:	7863      	ldrb	r3, [r4, #1]
 800ef46:	2b2a      	cmp	r3, #42	; 0x2a
 800ef48:	d135      	bne.n	800efb6 <_vfiprintf_r+0x1ce>
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	3402      	adds	r4, #2
 800ef4e:	1d1a      	adds	r2, r3, #4
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	9203      	str	r2, [sp, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfb8      	it	lt
 800ef58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef5c:	9305      	str	r3, [sp, #20]
 800ef5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f038 <_vfiprintf_r+0x250>
 800ef62:	2203      	movs	r2, #3
 800ef64:	4650      	mov	r0, sl
 800ef66:	7821      	ldrb	r1, [r4, #0]
 800ef68:	f7ff f97c 	bl	800e264 <memchr>
 800ef6c:	b140      	cbz	r0, 800ef80 <_vfiprintf_r+0x198>
 800ef6e:	2340      	movs	r3, #64	; 0x40
 800ef70:	eba0 000a 	sub.w	r0, r0, sl
 800ef74:	fa03 f000 	lsl.w	r0, r3, r0
 800ef78:	9b04      	ldr	r3, [sp, #16]
 800ef7a:	3401      	adds	r4, #1
 800ef7c:	4303      	orrs	r3, r0
 800ef7e:	9304      	str	r3, [sp, #16]
 800ef80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef84:	2206      	movs	r2, #6
 800ef86:	482d      	ldr	r0, [pc, #180]	; (800f03c <_vfiprintf_r+0x254>)
 800ef88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8c:	f7ff f96a 	bl	800e264 <memchr>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d03f      	beq.n	800f014 <_vfiprintf_r+0x22c>
 800ef94:	4b2a      	ldr	r3, [pc, #168]	; (800f040 <_vfiprintf_r+0x258>)
 800ef96:	bb1b      	cbnz	r3, 800efe0 <_vfiprintf_r+0x1f8>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	3307      	adds	r3, #7
 800ef9c:	f023 0307 	bic.w	r3, r3, #7
 800efa0:	3308      	adds	r3, #8
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa6:	443b      	add	r3, r7
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	e767      	b.n	800ee7c <_vfiprintf_r+0x94>
 800efac:	460c      	mov	r4, r1
 800efae:	2001      	movs	r0, #1
 800efb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb4:	e7a5      	b.n	800ef02 <_vfiprintf_r+0x11a>
 800efb6:	2300      	movs	r3, #0
 800efb8:	f04f 0c0a 	mov.w	ip, #10
 800efbc:	4619      	mov	r1, r3
 800efbe:	3401      	adds	r4, #1
 800efc0:	9305      	str	r3, [sp, #20]
 800efc2:	4620      	mov	r0, r4
 800efc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc8:	3a30      	subs	r2, #48	; 0x30
 800efca:	2a09      	cmp	r2, #9
 800efcc:	d903      	bls.n	800efd6 <_vfiprintf_r+0x1ee>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0c5      	beq.n	800ef5e <_vfiprintf_r+0x176>
 800efd2:	9105      	str	r1, [sp, #20]
 800efd4:	e7c3      	b.n	800ef5e <_vfiprintf_r+0x176>
 800efd6:	4604      	mov	r4, r0
 800efd8:	2301      	movs	r3, #1
 800efda:	fb0c 2101 	mla	r1, ip, r1, r2
 800efde:	e7f0      	b.n	800efc2 <_vfiprintf_r+0x1da>
 800efe0:	ab03      	add	r3, sp, #12
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	462a      	mov	r2, r5
 800efe6:	4630      	mov	r0, r6
 800efe8:	4b16      	ldr	r3, [pc, #88]	; (800f044 <_vfiprintf_r+0x25c>)
 800efea:	a904      	add	r1, sp, #16
 800efec:	f7fd fdce 	bl	800cb8c <_printf_float>
 800eff0:	4607      	mov	r7, r0
 800eff2:	1c78      	adds	r0, r7, #1
 800eff4:	d1d6      	bne.n	800efa4 <_vfiprintf_r+0x1bc>
 800eff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eff8:	07d9      	lsls	r1, r3, #31
 800effa:	d405      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	059a      	lsls	r2, r3, #22
 800f000:	d402      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800f002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f004:	f7ff fe6c 	bl	800ece0 <__retarget_lock_release_recursive>
 800f008:	89ab      	ldrh	r3, [r5, #12]
 800f00a:	065b      	lsls	r3, r3, #25
 800f00c:	f53f af12 	bmi.w	800ee34 <_vfiprintf_r+0x4c>
 800f010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f012:	e711      	b.n	800ee38 <_vfiprintf_r+0x50>
 800f014:	ab03      	add	r3, sp, #12
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	462a      	mov	r2, r5
 800f01a:	4630      	mov	r0, r6
 800f01c:	4b09      	ldr	r3, [pc, #36]	; (800f044 <_vfiprintf_r+0x25c>)
 800f01e:	a904      	add	r1, sp, #16
 800f020:	f7fe f850 	bl	800d0c4 <_printf_i>
 800f024:	e7e4      	b.n	800eff0 <_vfiprintf_r+0x208>
 800f026:	bf00      	nop
 800f028:	080121d4 	.word	0x080121d4
 800f02c:	080121f4 	.word	0x080121f4
 800f030:	080121b4 	.word	0x080121b4
 800f034:	0801215c 	.word	0x0801215c
 800f038:	08012162 	.word	0x08012162
 800f03c:	08012166 	.word	0x08012166
 800f040:	0800cb8d 	.word	0x0800cb8d
 800f044:	0800edc3 	.word	0x0800edc3

0800f048 <__swbuf_r>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	460e      	mov	r6, r1
 800f04c:	4614      	mov	r4, r2
 800f04e:	4605      	mov	r5, r0
 800f050:	b118      	cbz	r0, 800f05a <__swbuf_r+0x12>
 800f052:	6983      	ldr	r3, [r0, #24]
 800f054:	b90b      	cbnz	r3, 800f05a <__swbuf_r+0x12>
 800f056:	f000 f9e3 	bl	800f420 <__sinit>
 800f05a:	4b21      	ldr	r3, [pc, #132]	; (800f0e0 <__swbuf_r+0x98>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	d12b      	bne.n	800f0b8 <__swbuf_r+0x70>
 800f060:	686c      	ldr	r4, [r5, #4]
 800f062:	69a3      	ldr	r3, [r4, #24]
 800f064:	60a3      	str	r3, [r4, #8]
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	071a      	lsls	r2, r3, #28
 800f06a:	d52f      	bpl.n	800f0cc <__swbuf_r+0x84>
 800f06c:	6923      	ldr	r3, [r4, #16]
 800f06e:	b36b      	cbz	r3, 800f0cc <__swbuf_r+0x84>
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	b2f6      	uxtb	r6, r6
 800f076:	1ac0      	subs	r0, r0, r3
 800f078:	6963      	ldr	r3, [r4, #20]
 800f07a:	4637      	mov	r7, r6
 800f07c:	4283      	cmp	r3, r0
 800f07e:	dc04      	bgt.n	800f08a <__swbuf_r+0x42>
 800f080:	4621      	mov	r1, r4
 800f082:	4628      	mov	r0, r5
 800f084:	f000 f938 	bl	800f2f8 <_fflush_r>
 800f088:	bb30      	cbnz	r0, 800f0d8 <__swbuf_r+0x90>
 800f08a:	68a3      	ldr	r3, [r4, #8]
 800f08c:	3001      	adds	r0, #1
 800f08e:	3b01      	subs	r3, #1
 800f090:	60a3      	str	r3, [r4, #8]
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	6022      	str	r2, [r4, #0]
 800f098:	701e      	strb	r6, [r3, #0]
 800f09a:	6963      	ldr	r3, [r4, #20]
 800f09c:	4283      	cmp	r3, r0
 800f09e:	d004      	beq.n	800f0aa <__swbuf_r+0x62>
 800f0a0:	89a3      	ldrh	r3, [r4, #12]
 800f0a2:	07db      	lsls	r3, r3, #31
 800f0a4:	d506      	bpl.n	800f0b4 <__swbuf_r+0x6c>
 800f0a6:	2e0a      	cmp	r6, #10
 800f0a8:	d104      	bne.n	800f0b4 <__swbuf_r+0x6c>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f000 f923 	bl	800f2f8 <_fflush_r>
 800f0b2:	b988      	cbnz	r0, 800f0d8 <__swbuf_r+0x90>
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <__swbuf_r+0x9c>)
 800f0ba:	429c      	cmp	r4, r3
 800f0bc:	d101      	bne.n	800f0c2 <__swbuf_r+0x7a>
 800f0be:	68ac      	ldr	r4, [r5, #8]
 800f0c0:	e7cf      	b.n	800f062 <__swbuf_r+0x1a>
 800f0c2:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <__swbuf_r+0xa0>)
 800f0c4:	429c      	cmp	r4, r3
 800f0c6:	bf08      	it	eq
 800f0c8:	68ec      	ldreq	r4, [r5, #12]
 800f0ca:	e7ca      	b.n	800f062 <__swbuf_r+0x1a>
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f000 f81a 	bl	800f108 <__swsetup_r>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d0cb      	beq.n	800f070 <__swbuf_r+0x28>
 800f0d8:	f04f 37ff 	mov.w	r7, #4294967295
 800f0dc:	e7ea      	b.n	800f0b4 <__swbuf_r+0x6c>
 800f0de:	bf00      	nop
 800f0e0:	080121d4 	.word	0x080121d4
 800f0e4:	080121f4 	.word	0x080121f4
 800f0e8:	080121b4 	.word	0x080121b4

0800f0ec <__ascii_wctomb>:
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	b141      	cbz	r1, 800f104 <__ascii_wctomb+0x18>
 800f0f2:	2aff      	cmp	r2, #255	; 0xff
 800f0f4:	d904      	bls.n	800f100 <__ascii_wctomb+0x14>
 800f0f6:	228a      	movs	r2, #138	; 0x8a
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	601a      	str	r2, [r3, #0]
 800f0fe:	4770      	bx	lr
 800f100:	2001      	movs	r0, #1
 800f102:	700a      	strb	r2, [r1, #0]
 800f104:	4770      	bx	lr
	...

0800f108 <__swsetup_r>:
 800f108:	4b32      	ldr	r3, [pc, #200]	; (800f1d4 <__swsetup_r+0xcc>)
 800f10a:	b570      	push	{r4, r5, r6, lr}
 800f10c:	681d      	ldr	r5, [r3, #0]
 800f10e:	4606      	mov	r6, r0
 800f110:	460c      	mov	r4, r1
 800f112:	b125      	cbz	r5, 800f11e <__swsetup_r+0x16>
 800f114:	69ab      	ldr	r3, [r5, #24]
 800f116:	b913      	cbnz	r3, 800f11e <__swsetup_r+0x16>
 800f118:	4628      	mov	r0, r5
 800f11a:	f000 f981 	bl	800f420 <__sinit>
 800f11e:	4b2e      	ldr	r3, [pc, #184]	; (800f1d8 <__swsetup_r+0xd0>)
 800f120:	429c      	cmp	r4, r3
 800f122:	d10f      	bne.n	800f144 <__swsetup_r+0x3c>
 800f124:	686c      	ldr	r4, [r5, #4]
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f12c:	0719      	lsls	r1, r3, #28
 800f12e:	d42c      	bmi.n	800f18a <__swsetup_r+0x82>
 800f130:	06dd      	lsls	r5, r3, #27
 800f132:	d411      	bmi.n	800f158 <__swsetup_r+0x50>
 800f134:	2309      	movs	r3, #9
 800f136:	6033      	str	r3, [r6, #0]
 800f138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f13c:	f04f 30ff 	mov.w	r0, #4294967295
 800f140:	81a3      	strh	r3, [r4, #12]
 800f142:	e03e      	b.n	800f1c2 <__swsetup_r+0xba>
 800f144:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <__swsetup_r+0xd4>)
 800f146:	429c      	cmp	r4, r3
 800f148:	d101      	bne.n	800f14e <__swsetup_r+0x46>
 800f14a:	68ac      	ldr	r4, [r5, #8]
 800f14c:	e7eb      	b.n	800f126 <__swsetup_r+0x1e>
 800f14e:	4b24      	ldr	r3, [pc, #144]	; (800f1e0 <__swsetup_r+0xd8>)
 800f150:	429c      	cmp	r4, r3
 800f152:	bf08      	it	eq
 800f154:	68ec      	ldreq	r4, [r5, #12]
 800f156:	e7e6      	b.n	800f126 <__swsetup_r+0x1e>
 800f158:	0758      	lsls	r0, r3, #29
 800f15a:	d512      	bpl.n	800f182 <__swsetup_r+0x7a>
 800f15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f15e:	b141      	cbz	r1, 800f172 <__swsetup_r+0x6a>
 800f160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f164:	4299      	cmp	r1, r3
 800f166:	d002      	beq.n	800f16e <__swsetup_r+0x66>
 800f168:	4630      	mov	r0, r6
 800f16a:	f7fd fb95 	bl	800c898 <_free_r>
 800f16e:	2300      	movs	r3, #0
 800f170:	6363      	str	r3, [r4, #52]	; 0x34
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f178:	81a3      	strh	r3, [r4, #12]
 800f17a:	2300      	movs	r3, #0
 800f17c:	6063      	str	r3, [r4, #4]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f043 0308 	orr.w	r3, r3, #8
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <__swsetup_r+0x9a>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f198:	d003      	beq.n	800f1a2 <__swsetup_r+0x9a>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4630      	mov	r0, r6
 800f19e:	f000 fa01 	bl	800f5a4 <__smakebuf_r>
 800f1a2:	89a0      	ldrh	r0, [r4, #12]
 800f1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1a8:	f010 0301 	ands.w	r3, r0, #1
 800f1ac:	d00a      	beq.n	800f1c4 <__swsetup_r+0xbc>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60a3      	str	r3, [r4, #8]
 800f1b2:	6963      	ldr	r3, [r4, #20]
 800f1b4:	425b      	negs	r3, r3
 800f1b6:	61a3      	str	r3, [r4, #24]
 800f1b8:	6923      	ldr	r3, [r4, #16]
 800f1ba:	b943      	cbnz	r3, 800f1ce <__swsetup_r+0xc6>
 800f1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1c0:	d1ba      	bne.n	800f138 <__swsetup_r+0x30>
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}
 800f1c4:	0781      	lsls	r1, r0, #30
 800f1c6:	bf58      	it	pl
 800f1c8:	6963      	ldrpl	r3, [r4, #20]
 800f1ca:	60a3      	str	r3, [r4, #8]
 800f1cc:	e7f4      	b.n	800f1b8 <__swsetup_r+0xb0>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e7f7      	b.n	800f1c2 <__swsetup_r+0xba>
 800f1d2:	bf00      	nop
 800f1d4:	20000024 	.word	0x20000024
 800f1d8:	080121d4 	.word	0x080121d4
 800f1dc:	080121f4 	.word	0x080121f4
 800f1e0:	080121b4 	.word	0x080121b4

0800f1e4 <abort>:
 800f1e4:	2006      	movs	r0, #6
 800f1e6:	b508      	push	{r3, lr}
 800f1e8:	f000 fa4c 	bl	800f684 <raise>
 800f1ec:	2001      	movs	r0, #1
 800f1ee:	f7f4 fc6a 	bl	8003ac6 <_exit>
	...

0800f1f4 <__sflush_r>:
 800f1f4:	898a      	ldrh	r2, [r1, #12]
 800f1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	0710      	lsls	r0, r2, #28
 800f1fc:	460c      	mov	r4, r1
 800f1fe:	d457      	bmi.n	800f2b0 <__sflush_r+0xbc>
 800f200:	684b      	ldr	r3, [r1, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	dc04      	bgt.n	800f210 <__sflush_r+0x1c>
 800f206:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f208:	2b00      	cmp	r3, #0
 800f20a:	dc01      	bgt.n	800f210 <__sflush_r+0x1c>
 800f20c:	2000      	movs	r0, #0
 800f20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f212:	2e00      	cmp	r6, #0
 800f214:	d0fa      	beq.n	800f20c <__sflush_r+0x18>
 800f216:	2300      	movs	r3, #0
 800f218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f21c:	682f      	ldr	r7, [r5, #0]
 800f21e:	602b      	str	r3, [r5, #0]
 800f220:	d032      	beq.n	800f288 <__sflush_r+0x94>
 800f222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	075a      	lsls	r2, r3, #29
 800f228:	d505      	bpl.n	800f236 <__sflush_r+0x42>
 800f22a:	6863      	ldr	r3, [r4, #4]
 800f22c:	1ac0      	subs	r0, r0, r3
 800f22e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f230:	b10b      	cbz	r3, 800f236 <__sflush_r+0x42>
 800f232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f234:	1ac0      	subs	r0, r0, r3
 800f236:	2300      	movs	r3, #0
 800f238:	4602      	mov	r2, r0
 800f23a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f23c:	4628      	mov	r0, r5
 800f23e:	6a21      	ldr	r1, [r4, #32]
 800f240:	47b0      	blx	r6
 800f242:	1c43      	adds	r3, r0, #1
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	d106      	bne.n	800f256 <__sflush_r+0x62>
 800f248:	6829      	ldr	r1, [r5, #0]
 800f24a:	291d      	cmp	r1, #29
 800f24c:	d82c      	bhi.n	800f2a8 <__sflush_r+0xb4>
 800f24e:	4a29      	ldr	r2, [pc, #164]	; (800f2f4 <__sflush_r+0x100>)
 800f250:	40ca      	lsrs	r2, r1
 800f252:	07d6      	lsls	r6, r2, #31
 800f254:	d528      	bpl.n	800f2a8 <__sflush_r+0xb4>
 800f256:	2200      	movs	r2, #0
 800f258:	6062      	str	r2, [r4, #4]
 800f25a:	6922      	ldr	r2, [r4, #16]
 800f25c:	04d9      	lsls	r1, r3, #19
 800f25e:	6022      	str	r2, [r4, #0]
 800f260:	d504      	bpl.n	800f26c <__sflush_r+0x78>
 800f262:	1c42      	adds	r2, r0, #1
 800f264:	d101      	bne.n	800f26a <__sflush_r+0x76>
 800f266:	682b      	ldr	r3, [r5, #0]
 800f268:	b903      	cbnz	r3, 800f26c <__sflush_r+0x78>
 800f26a:	6560      	str	r0, [r4, #84]	; 0x54
 800f26c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f26e:	602f      	str	r7, [r5, #0]
 800f270:	2900      	cmp	r1, #0
 800f272:	d0cb      	beq.n	800f20c <__sflush_r+0x18>
 800f274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f278:	4299      	cmp	r1, r3
 800f27a:	d002      	beq.n	800f282 <__sflush_r+0x8e>
 800f27c:	4628      	mov	r0, r5
 800f27e:	f7fd fb0b 	bl	800c898 <_free_r>
 800f282:	2000      	movs	r0, #0
 800f284:	6360      	str	r0, [r4, #52]	; 0x34
 800f286:	e7c2      	b.n	800f20e <__sflush_r+0x1a>
 800f288:	6a21      	ldr	r1, [r4, #32]
 800f28a:	2301      	movs	r3, #1
 800f28c:	4628      	mov	r0, r5
 800f28e:	47b0      	blx	r6
 800f290:	1c41      	adds	r1, r0, #1
 800f292:	d1c7      	bne.n	800f224 <__sflush_r+0x30>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d0c4      	beq.n	800f224 <__sflush_r+0x30>
 800f29a:	2b1d      	cmp	r3, #29
 800f29c:	d001      	beq.n	800f2a2 <__sflush_r+0xae>
 800f29e:	2b16      	cmp	r3, #22
 800f2a0:	d101      	bne.n	800f2a6 <__sflush_r+0xb2>
 800f2a2:	602f      	str	r7, [r5, #0]
 800f2a4:	e7b2      	b.n	800f20c <__sflush_r+0x18>
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	e7ae      	b.n	800f20e <__sflush_r+0x1a>
 800f2b0:	690f      	ldr	r7, [r1, #16]
 800f2b2:	2f00      	cmp	r7, #0
 800f2b4:	d0aa      	beq.n	800f20c <__sflush_r+0x18>
 800f2b6:	0793      	lsls	r3, r2, #30
 800f2b8:	bf18      	it	ne
 800f2ba:	2300      	movne	r3, #0
 800f2bc:	680e      	ldr	r6, [r1, #0]
 800f2be:	bf08      	it	eq
 800f2c0:	694b      	ldreq	r3, [r1, #20]
 800f2c2:	1bf6      	subs	r6, r6, r7
 800f2c4:	600f      	str	r7, [r1, #0]
 800f2c6:	608b      	str	r3, [r1, #8]
 800f2c8:	2e00      	cmp	r6, #0
 800f2ca:	dd9f      	ble.n	800f20c <__sflush_r+0x18>
 800f2cc:	4633      	mov	r3, r6
 800f2ce:	463a      	mov	r2, r7
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	6a21      	ldr	r1, [r4, #32]
 800f2d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f2d8:	47e0      	blx	ip
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	dc06      	bgt.n	800f2ec <__sflush_r+0xf8>
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2e8:	81a3      	strh	r3, [r4, #12]
 800f2ea:	e790      	b.n	800f20e <__sflush_r+0x1a>
 800f2ec:	4407      	add	r7, r0
 800f2ee:	1a36      	subs	r6, r6, r0
 800f2f0:	e7ea      	b.n	800f2c8 <__sflush_r+0xd4>
 800f2f2:	bf00      	nop
 800f2f4:	20400001 	.word	0x20400001

0800f2f8 <_fflush_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	690b      	ldr	r3, [r1, #16]
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	460c      	mov	r4, r1
 800f300:	b913      	cbnz	r3, 800f308 <_fflush_r+0x10>
 800f302:	2500      	movs	r5, #0
 800f304:	4628      	mov	r0, r5
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	b118      	cbz	r0, 800f312 <_fflush_r+0x1a>
 800f30a:	6983      	ldr	r3, [r0, #24]
 800f30c:	b90b      	cbnz	r3, 800f312 <_fflush_r+0x1a>
 800f30e:	f000 f887 	bl	800f420 <__sinit>
 800f312:	4b14      	ldr	r3, [pc, #80]	; (800f364 <_fflush_r+0x6c>)
 800f314:	429c      	cmp	r4, r3
 800f316:	d11b      	bne.n	800f350 <_fflush_r+0x58>
 800f318:	686c      	ldr	r4, [r5, #4]
 800f31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0ef      	beq.n	800f302 <_fflush_r+0xa>
 800f322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f324:	07d0      	lsls	r0, r2, #31
 800f326:	d404      	bmi.n	800f332 <_fflush_r+0x3a>
 800f328:	0599      	lsls	r1, r3, #22
 800f32a:	d402      	bmi.n	800f332 <_fflush_r+0x3a>
 800f32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f32e:	f7ff fcd6 	bl	800ecde <__retarget_lock_acquire_recursive>
 800f332:	4628      	mov	r0, r5
 800f334:	4621      	mov	r1, r4
 800f336:	f7ff ff5d 	bl	800f1f4 <__sflush_r>
 800f33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f33c:	4605      	mov	r5, r0
 800f33e:	07da      	lsls	r2, r3, #31
 800f340:	d4e0      	bmi.n	800f304 <_fflush_r+0xc>
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	059b      	lsls	r3, r3, #22
 800f346:	d4dd      	bmi.n	800f304 <_fflush_r+0xc>
 800f348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f34a:	f7ff fcc9 	bl	800ece0 <__retarget_lock_release_recursive>
 800f34e:	e7d9      	b.n	800f304 <_fflush_r+0xc>
 800f350:	4b05      	ldr	r3, [pc, #20]	; (800f368 <_fflush_r+0x70>)
 800f352:	429c      	cmp	r4, r3
 800f354:	d101      	bne.n	800f35a <_fflush_r+0x62>
 800f356:	68ac      	ldr	r4, [r5, #8]
 800f358:	e7df      	b.n	800f31a <_fflush_r+0x22>
 800f35a:	4b04      	ldr	r3, [pc, #16]	; (800f36c <_fflush_r+0x74>)
 800f35c:	429c      	cmp	r4, r3
 800f35e:	bf08      	it	eq
 800f360:	68ec      	ldreq	r4, [r5, #12]
 800f362:	e7da      	b.n	800f31a <_fflush_r+0x22>
 800f364:	080121d4 	.word	0x080121d4
 800f368:	080121f4 	.word	0x080121f4
 800f36c:	080121b4 	.word	0x080121b4

0800f370 <std>:
 800f370:	2300      	movs	r3, #0
 800f372:	b510      	push	{r4, lr}
 800f374:	4604      	mov	r4, r0
 800f376:	e9c0 3300 	strd	r3, r3, [r0]
 800f37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f37e:	6083      	str	r3, [r0, #8]
 800f380:	8181      	strh	r1, [r0, #12]
 800f382:	6643      	str	r3, [r0, #100]	; 0x64
 800f384:	81c2      	strh	r2, [r0, #14]
 800f386:	6183      	str	r3, [r0, #24]
 800f388:	4619      	mov	r1, r3
 800f38a:	2208      	movs	r2, #8
 800f38c:	305c      	adds	r0, #92	; 0x5c
 800f38e:	f7fd fa7b 	bl	800c888 <memset>
 800f392:	4b05      	ldr	r3, [pc, #20]	; (800f3a8 <std+0x38>)
 800f394:	6224      	str	r4, [r4, #32]
 800f396:	6263      	str	r3, [r4, #36]	; 0x24
 800f398:	4b04      	ldr	r3, [pc, #16]	; (800f3ac <std+0x3c>)
 800f39a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f39c:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <std+0x40>)
 800f39e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3a0:	4b04      	ldr	r3, [pc, #16]	; (800f3b4 <std+0x44>)
 800f3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800f3a4:	bd10      	pop	{r4, pc}
 800f3a6:	bf00      	nop
 800f3a8:	0800f6bd 	.word	0x0800f6bd
 800f3ac:	0800f6df 	.word	0x0800f6df
 800f3b0:	0800f717 	.word	0x0800f717
 800f3b4:	0800f73b 	.word	0x0800f73b

0800f3b8 <_cleanup_r>:
 800f3b8:	4901      	ldr	r1, [pc, #4]	; (800f3c0 <_cleanup_r+0x8>)
 800f3ba:	f000 b8af 	b.w	800f51c <_fwalk_reent>
 800f3be:	bf00      	nop
 800f3c0:	0800f2f9 	.word	0x0800f2f9

0800f3c4 <__sfmoreglue>:
 800f3c4:	2268      	movs	r2, #104	; 0x68
 800f3c6:	b570      	push	{r4, r5, r6, lr}
 800f3c8:	1e4d      	subs	r5, r1, #1
 800f3ca:	4355      	muls	r5, r2
 800f3cc:	460e      	mov	r6, r1
 800f3ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3d2:	f7fd fac9 	bl	800c968 <_malloc_r>
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	b140      	cbz	r0, 800f3ec <__sfmoreglue+0x28>
 800f3da:	2100      	movs	r1, #0
 800f3dc:	e9c0 1600 	strd	r1, r6, [r0]
 800f3e0:	300c      	adds	r0, #12
 800f3e2:	60a0      	str	r0, [r4, #8]
 800f3e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3e8:	f7fd fa4e 	bl	800c888 <memset>
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	bd70      	pop	{r4, r5, r6, pc}

0800f3f0 <__sfp_lock_acquire>:
 800f3f0:	4801      	ldr	r0, [pc, #4]	; (800f3f8 <__sfp_lock_acquire+0x8>)
 800f3f2:	f7ff bc74 	b.w	800ecde <__retarget_lock_acquire_recursive>
 800f3f6:	bf00      	nop
 800f3f8:	20001d05 	.word	0x20001d05

0800f3fc <__sfp_lock_release>:
 800f3fc:	4801      	ldr	r0, [pc, #4]	; (800f404 <__sfp_lock_release+0x8>)
 800f3fe:	f7ff bc6f 	b.w	800ece0 <__retarget_lock_release_recursive>
 800f402:	bf00      	nop
 800f404:	20001d05 	.word	0x20001d05

0800f408 <__sinit_lock_acquire>:
 800f408:	4801      	ldr	r0, [pc, #4]	; (800f410 <__sinit_lock_acquire+0x8>)
 800f40a:	f7ff bc68 	b.w	800ecde <__retarget_lock_acquire_recursive>
 800f40e:	bf00      	nop
 800f410:	20001d06 	.word	0x20001d06

0800f414 <__sinit_lock_release>:
 800f414:	4801      	ldr	r0, [pc, #4]	; (800f41c <__sinit_lock_release+0x8>)
 800f416:	f7ff bc63 	b.w	800ece0 <__retarget_lock_release_recursive>
 800f41a:	bf00      	nop
 800f41c:	20001d06 	.word	0x20001d06

0800f420 <__sinit>:
 800f420:	b510      	push	{r4, lr}
 800f422:	4604      	mov	r4, r0
 800f424:	f7ff fff0 	bl	800f408 <__sinit_lock_acquire>
 800f428:	69a3      	ldr	r3, [r4, #24]
 800f42a:	b11b      	cbz	r3, 800f434 <__sinit+0x14>
 800f42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f430:	f7ff bff0 	b.w	800f414 <__sinit_lock_release>
 800f434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f438:	6523      	str	r3, [r4, #80]	; 0x50
 800f43a:	4b13      	ldr	r3, [pc, #76]	; (800f488 <__sinit+0x68>)
 800f43c:	4a13      	ldr	r2, [pc, #76]	; (800f48c <__sinit+0x6c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	62a2      	str	r2, [r4, #40]	; 0x28
 800f442:	42a3      	cmp	r3, r4
 800f444:	bf08      	it	eq
 800f446:	2301      	moveq	r3, #1
 800f448:	4620      	mov	r0, r4
 800f44a:	bf08      	it	eq
 800f44c:	61a3      	streq	r3, [r4, #24]
 800f44e:	f000 f81f 	bl	800f490 <__sfp>
 800f452:	6060      	str	r0, [r4, #4]
 800f454:	4620      	mov	r0, r4
 800f456:	f000 f81b 	bl	800f490 <__sfp>
 800f45a:	60a0      	str	r0, [r4, #8]
 800f45c:	4620      	mov	r0, r4
 800f45e:	f000 f817 	bl	800f490 <__sfp>
 800f462:	2200      	movs	r2, #0
 800f464:	2104      	movs	r1, #4
 800f466:	60e0      	str	r0, [r4, #12]
 800f468:	6860      	ldr	r0, [r4, #4]
 800f46a:	f7ff ff81 	bl	800f370 <std>
 800f46e:	2201      	movs	r2, #1
 800f470:	2109      	movs	r1, #9
 800f472:	68a0      	ldr	r0, [r4, #8]
 800f474:	f7ff ff7c 	bl	800f370 <std>
 800f478:	2202      	movs	r2, #2
 800f47a:	2112      	movs	r1, #18
 800f47c:	68e0      	ldr	r0, [r4, #12]
 800f47e:	f7ff ff77 	bl	800f370 <std>
 800f482:	2301      	movs	r3, #1
 800f484:	61a3      	str	r3, [r4, #24]
 800f486:	e7d1      	b.n	800f42c <__sinit+0xc>
 800f488:	08011f3c 	.word	0x08011f3c
 800f48c:	0800f3b9 	.word	0x0800f3b9

0800f490 <__sfp>:
 800f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f492:	4607      	mov	r7, r0
 800f494:	f7ff ffac 	bl	800f3f0 <__sfp_lock_acquire>
 800f498:	4b1e      	ldr	r3, [pc, #120]	; (800f514 <__sfp+0x84>)
 800f49a:	681e      	ldr	r6, [r3, #0]
 800f49c:	69b3      	ldr	r3, [r6, #24]
 800f49e:	b913      	cbnz	r3, 800f4a6 <__sfp+0x16>
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f7ff ffbd 	bl	800f420 <__sinit>
 800f4a6:	3648      	adds	r6, #72	; 0x48
 800f4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	d503      	bpl.n	800f4b8 <__sfp+0x28>
 800f4b0:	6833      	ldr	r3, [r6, #0]
 800f4b2:	b30b      	cbz	r3, 800f4f8 <__sfp+0x68>
 800f4b4:	6836      	ldr	r6, [r6, #0]
 800f4b6:	e7f7      	b.n	800f4a8 <__sfp+0x18>
 800f4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f4bc:	b9d5      	cbnz	r5, 800f4f4 <__sfp+0x64>
 800f4be:	4b16      	ldr	r3, [pc, #88]	; (800f518 <__sfp+0x88>)
 800f4c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f4c4:	60e3      	str	r3, [r4, #12]
 800f4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800f4c8:	f7ff fc08 	bl	800ecdc <__retarget_lock_init_recursive>
 800f4cc:	f7ff ff96 	bl	800f3fc <__sfp_lock_release>
 800f4d0:	2208      	movs	r2, #8
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4dc:	6025      	str	r5, [r4, #0]
 800f4de:	61a5      	str	r5, [r4, #24]
 800f4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4e4:	f7fd f9d0 	bl	800c888 <memset>
 800f4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f4:	3468      	adds	r4, #104	; 0x68
 800f4f6:	e7d9      	b.n	800f4ac <__sfp+0x1c>
 800f4f8:	2104      	movs	r1, #4
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	f7ff ff62 	bl	800f3c4 <__sfmoreglue>
 800f500:	4604      	mov	r4, r0
 800f502:	6030      	str	r0, [r6, #0]
 800f504:	2800      	cmp	r0, #0
 800f506:	d1d5      	bne.n	800f4b4 <__sfp+0x24>
 800f508:	f7ff ff78 	bl	800f3fc <__sfp_lock_release>
 800f50c:	230c      	movs	r3, #12
 800f50e:	603b      	str	r3, [r7, #0]
 800f510:	e7ee      	b.n	800f4f0 <__sfp+0x60>
 800f512:	bf00      	nop
 800f514:	08011f3c 	.word	0x08011f3c
 800f518:	ffff0001 	.word	0xffff0001

0800f51c <_fwalk_reent>:
 800f51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f520:	4606      	mov	r6, r0
 800f522:	4688      	mov	r8, r1
 800f524:	2700      	movs	r7, #0
 800f526:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f52a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f52e:	f1b9 0901 	subs.w	r9, r9, #1
 800f532:	d505      	bpl.n	800f540 <_fwalk_reent+0x24>
 800f534:	6824      	ldr	r4, [r4, #0]
 800f536:	2c00      	cmp	r4, #0
 800f538:	d1f7      	bne.n	800f52a <_fwalk_reent+0xe>
 800f53a:	4638      	mov	r0, r7
 800f53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f540:	89ab      	ldrh	r3, [r5, #12]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d907      	bls.n	800f556 <_fwalk_reent+0x3a>
 800f546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f54a:	3301      	adds	r3, #1
 800f54c:	d003      	beq.n	800f556 <_fwalk_reent+0x3a>
 800f54e:	4629      	mov	r1, r5
 800f550:	4630      	mov	r0, r6
 800f552:	47c0      	blx	r8
 800f554:	4307      	orrs	r7, r0
 800f556:	3568      	adds	r5, #104	; 0x68
 800f558:	e7e9      	b.n	800f52e <_fwalk_reent+0x12>

0800f55a <__swhatbuf_r>:
 800f55a:	b570      	push	{r4, r5, r6, lr}
 800f55c:	460e      	mov	r6, r1
 800f55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f562:	4614      	mov	r4, r2
 800f564:	2900      	cmp	r1, #0
 800f566:	461d      	mov	r5, r3
 800f568:	b096      	sub	sp, #88	; 0x58
 800f56a:	da08      	bge.n	800f57e <__swhatbuf_r+0x24>
 800f56c:	2200      	movs	r2, #0
 800f56e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f572:	602a      	str	r2, [r5, #0]
 800f574:	061a      	lsls	r2, r3, #24
 800f576:	d410      	bmi.n	800f59a <__swhatbuf_r+0x40>
 800f578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f57c:	e00e      	b.n	800f59c <__swhatbuf_r+0x42>
 800f57e:	466a      	mov	r2, sp
 800f580:	f000 f902 	bl	800f788 <_fstat_r>
 800f584:	2800      	cmp	r0, #0
 800f586:	dbf1      	blt.n	800f56c <__swhatbuf_r+0x12>
 800f588:	9a01      	ldr	r2, [sp, #4]
 800f58a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f58e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f592:	425a      	negs	r2, r3
 800f594:	415a      	adcs	r2, r3
 800f596:	602a      	str	r2, [r5, #0]
 800f598:	e7ee      	b.n	800f578 <__swhatbuf_r+0x1e>
 800f59a:	2340      	movs	r3, #64	; 0x40
 800f59c:	2000      	movs	r0, #0
 800f59e:	6023      	str	r3, [r4, #0]
 800f5a0:	b016      	add	sp, #88	; 0x58
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <__smakebuf_r>:
 800f5a4:	898b      	ldrh	r3, [r1, #12]
 800f5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5a8:	079d      	lsls	r5, r3, #30
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	d507      	bpl.n	800f5c0 <__smakebuf_r+0x1c>
 800f5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	6123      	str	r3, [r4, #16]
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	6163      	str	r3, [r4, #20]
 800f5bc:	b002      	add	sp, #8
 800f5be:	bd70      	pop	{r4, r5, r6, pc}
 800f5c0:	466a      	mov	r2, sp
 800f5c2:	ab01      	add	r3, sp, #4
 800f5c4:	f7ff ffc9 	bl	800f55a <__swhatbuf_r>
 800f5c8:	9900      	ldr	r1, [sp, #0]
 800f5ca:	4605      	mov	r5, r0
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	f7fd f9cb 	bl	800c968 <_malloc_r>
 800f5d2:	b948      	cbnz	r0, 800f5e8 <__smakebuf_r+0x44>
 800f5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d8:	059a      	lsls	r2, r3, #22
 800f5da:	d4ef      	bmi.n	800f5bc <__smakebuf_r+0x18>
 800f5dc:	f023 0303 	bic.w	r3, r3, #3
 800f5e0:	f043 0302 	orr.w	r3, r3, #2
 800f5e4:	81a3      	strh	r3, [r4, #12]
 800f5e6:	e7e3      	b.n	800f5b0 <__smakebuf_r+0xc>
 800f5e8:	4b0d      	ldr	r3, [pc, #52]	; (800f620 <__smakebuf_r+0x7c>)
 800f5ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5ec:	89a3      	ldrh	r3, [r4, #12]
 800f5ee:	6020      	str	r0, [r4, #0]
 800f5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	9b00      	ldr	r3, [sp, #0]
 800f5f8:	6120      	str	r0, [r4, #16]
 800f5fa:	6163      	str	r3, [r4, #20]
 800f5fc:	9b01      	ldr	r3, [sp, #4]
 800f5fe:	b15b      	cbz	r3, 800f618 <__smakebuf_r+0x74>
 800f600:	4630      	mov	r0, r6
 800f602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f606:	f000 f8d1 	bl	800f7ac <_isatty_r>
 800f60a:	b128      	cbz	r0, 800f618 <__smakebuf_r+0x74>
 800f60c:	89a3      	ldrh	r3, [r4, #12]
 800f60e:	f023 0303 	bic.w	r3, r3, #3
 800f612:	f043 0301 	orr.w	r3, r3, #1
 800f616:	81a3      	strh	r3, [r4, #12]
 800f618:	89a0      	ldrh	r0, [r4, #12]
 800f61a:	4305      	orrs	r5, r0
 800f61c:	81a5      	strh	r5, [r4, #12]
 800f61e:	e7cd      	b.n	800f5bc <__smakebuf_r+0x18>
 800f620:	0800f3b9 	.word	0x0800f3b9

0800f624 <_malloc_usable_size_r>:
 800f624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f628:	1f18      	subs	r0, r3, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bfbc      	itt	lt
 800f62e:	580b      	ldrlt	r3, [r1, r0]
 800f630:	18c0      	addlt	r0, r0, r3
 800f632:	4770      	bx	lr

0800f634 <_raise_r>:
 800f634:	291f      	cmp	r1, #31
 800f636:	b538      	push	{r3, r4, r5, lr}
 800f638:	4604      	mov	r4, r0
 800f63a:	460d      	mov	r5, r1
 800f63c:	d904      	bls.n	800f648 <_raise_r+0x14>
 800f63e:	2316      	movs	r3, #22
 800f640:	6003      	str	r3, [r0, #0]
 800f642:	f04f 30ff 	mov.w	r0, #4294967295
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f64a:	b112      	cbz	r2, 800f652 <_raise_r+0x1e>
 800f64c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f650:	b94b      	cbnz	r3, 800f666 <_raise_r+0x32>
 800f652:	4620      	mov	r0, r4
 800f654:	f000 f830 	bl	800f6b8 <_getpid_r>
 800f658:	462a      	mov	r2, r5
 800f65a:	4601      	mov	r1, r0
 800f65c:	4620      	mov	r0, r4
 800f65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f662:	f000 b817 	b.w	800f694 <_kill_r>
 800f666:	2b01      	cmp	r3, #1
 800f668:	d00a      	beq.n	800f680 <_raise_r+0x4c>
 800f66a:	1c59      	adds	r1, r3, #1
 800f66c:	d103      	bne.n	800f676 <_raise_r+0x42>
 800f66e:	2316      	movs	r3, #22
 800f670:	6003      	str	r3, [r0, #0]
 800f672:	2001      	movs	r0, #1
 800f674:	e7e7      	b.n	800f646 <_raise_r+0x12>
 800f676:	2400      	movs	r4, #0
 800f678:	4628      	mov	r0, r5
 800f67a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f67e:	4798      	blx	r3
 800f680:	2000      	movs	r0, #0
 800f682:	e7e0      	b.n	800f646 <_raise_r+0x12>

0800f684 <raise>:
 800f684:	4b02      	ldr	r3, [pc, #8]	; (800f690 <raise+0xc>)
 800f686:	4601      	mov	r1, r0
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	f7ff bfd3 	b.w	800f634 <_raise_r>
 800f68e:	bf00      	nop
 800f690:	20000024 	.word	0x20000024

0800f694 <_kill_r>:
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	2300      	movs	r3, #0
 800f698:	4d06      	ldr	r5, [pc, #24]	; (800f6b4 <_kill_r+0x20>)
 800f69a:	4604      	mov	r4, r0
 800f69c:	4608      	mov	r0, r1
 800f69e:	4611      	mov	r1, r2
 800f6a0:	602b      	str	r3, [r5, #0]
 800f6a2:	f7f4 fa00 	bl	8003aa6 <_kill>
 800f6a6:	1c43      	adds	r3, r0, #1
 800f6a8:	d102      	bne.n	800f6b0 <_kill_r+0x1c>
 800f6aa:	682b      	ldr	r3, [r5, #0]
 800f6ac:	b103      	cbz	r3, 800f6b0 <_kill_r+0x1c>
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	bd38      	pop	{r3, r4, r5, pc}
 800f6b2:	bf00      	nop
 800f6b4:	20001d00 	.word	0x20001d00

0800f6b8 <_getpid_r>:
 800f6b8:	f7f4 b9ee 	b.w	8003a98 <_getpid>

0800f6bc <__sread>:
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	460c      	mov	r4, r1
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	f000 f894 	bl	800f7f0 <_read_r>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	bfab      	itete	ge
 800f6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f6d0:	181b      	addge	r3, r3, r0
 800f6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6d6:	bfac      	ite	ge
 800f6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6da:	81a3      	strhlt	r3, [r4, #12]
 800f6dc:	bd10      	pop	{r4, pc}

0800f6de <__swrite>:
 800f6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	898b      	ldrh	r3, [r1, #12]
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	05db      	lsls	r3, r3, #23
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	4616      	mov	r6, r2
 800f6ee:	d505      	bpl.n	800f6fc <__swrite+0x1e>
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f8:	f000 f868 	bl	800f7cc <_lseek_r>
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	4632      	mov	r2, r6
 800f700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f704:	81a3      	strh	r3, [r4, #12]
 800f706:	4628      	mov	r0, r5
 800f708:	463b      	mov	r3, r7
 800f70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f712:	f000 b817 	b.w	800f744 <_write_r>

0800f716 <__sseek>:
 800f716:	b510      	push	{r4, lr}
 800f718:	460c      	mov	r4, r1
 800f71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71e:	f000 f855 	bl	800f7cc <_lseek_r>
 800f722:	1c43      	adds	r3, r0, #1
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	bf15      	itete	ne
 800f728:	6560      	strne	r0, [r4, #84]	; 0x54
 800f72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f732:	81a3      	strheq	r3, [r4, #12]
 800f734:	bf18      	it	ne
 800f736:	81a3      	strhne	r3, [r4, #12]
 800f738:	bd10      	pop	{r4, pc}

0800f73a <__sclose>:
 800f73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f73e:	f000 b813 	b.w	800f768 <_close_r>
	...

0800f744 <_write_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4604      	mov	r4, r0
 800f748:	4608      	mov	r0, r1
 800f74a:	4611      	mov	r1, r2
 800f74c:	2200      	movs	r2, #0
 800f74e:	4d05      	ldr	r5, [pc, #20]	; (800f764 <_write_r+0x20>)
 800f750:	602a      	str	r2, [r5, #0]
 800f752:	461a      	mov	r2, r3
 800f754:	f7f4 f9de 	bl	8003b14 <_write>
 800f758:	1c43      	adds	r3, r0, #1
 800f75a:	d102      	bne.n	800f762 <_write_r+0x1e>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	b103      	cbz	r3, 800f762 <_write_r+0x1e>
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	bd38      	pop	{r3, r4, r5, pc}
 800f764:	20001d00 	.word	0x20001d00

0800f768 <_close_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	2300      	movs	r3, #0
 800f76c:	4d05      	ldr	r5, [pc, #20]	; (800f784 <_close_r+0x1c>)
 800f76e:	4604      	mov	r4, r0
 800f770:	4608      	mov	r0, r1
 800f772:	602b      	str	r3, [r5, #0]
 800f774:	f7f4 f9ea 	bl	8003b4c <_close>
 800f778:	1c43      	adds	r3, r0, #1
 800f77a:	d102      	bne.n	800f782 <_close_r+0x1a>
 800f77c:	682b      	ldr	r3, [r5, #0]
 800f77e:	b103      	cbz	r3, 800f782 <_close_r+0x1a>
 800f780:	6023      	str	r3, [r4, #0]
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	20001d00 	.word	0x20001d00

0800f788 <_fstat_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	2300      	movs	r3, #0
 800f78c:	4d06      	ldr	r5, [pc, #24]	; (800f7a8 <_fstat_r+0x20>)
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	4611      	mov	r1, r2
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	f7f4 f9e4 	bl	8003b62 <_fstat>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	d102      	bne.n	800f7a4 <_fstat_r+0x1c>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	b103      	cbz	r3, 800f7a4 <_fstat_r+0x1c>
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20001d00 	.word	0x20001d00

0800f7ac <_isatty_r>:
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	4d05      	ldr	r5, [pc, #20]	; (800f7c8 <_isatty_r+0x1c>)
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4608      	mov	r0, r1
 800f7b6:	602b      	str	r3, [r5, #0]
 800f7b8:	f7f4 f9e2 	bl	8003b80 <_isatty>
 800f7bc:	1c43      	adds	r3, r0, #1
 800f7be:	d102      	bne.n	800f7c6 <_isatty_r+0x1a>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	b103      	cbz	r3, 800f7c6 <_isatty_r+0x1a>
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	bd38      	pop	{r3, r4, r5, pc}
 800f7c8:	20001d00 	.word	0x20001d00

0800f7cc <_lseek_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	4d05      	ldr	r5, [pc, #20]	; (800f7ec <_lseek_r+0x20>)
 800f7d8:	602a      	str	r2, [r5, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	f7f4 f9da 	bl	8003b94 <_lseek>
 800f7e0:	1c43      	adds	r3, r0, #1
 800f7e2:	d102      	bne.n	800f7ea <_lseek_r+0x1e>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	b103      	cbz	r3, 800f7ea <_lseek_r+0x1e>
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	bd38      	pop	{r3, r4, r5, pc}
 800f7ec:	20001d00 	.word	0x20001d00

0800f7f0 <_read_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	4d05      	ldr	r5, [pc, #20]	; (800f810 <_read_r+0x20>)
 800f7fc:	602a      	str	r2, [r5, #0]
 800f7fe:	461a      	mov	r2, r3
 800f800:	f7f4 f96b 	bl	8003ada <_read>
 800f804:	1c43      	adds	r3, r0, #1
 800f806:	d102      	bne.n	800f80e <_read_r+0x1e>
 800f808:	682b      	ldr	r3, [r5, #0]
 800f80a:	b103      	cbz	r3, 800f80e <_read_r+0x1e>
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	20001d00 	.word	0x20001d00
 800f814:	00000000 	.word	0x00000000

0800f818 <floor>:
 800f818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f81c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800f820:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800f824:	2e13      	cmp	r6, #19
 800f826:	4602      	mov	r2, r0
 800f828:	460b      	mov	r3, r1
 800f82a:	4607      	mov	r7, r0
 800f82c:	460c      	mov	r4, r1
 800f82e:	4605      	mov	r5, r0
 800f830:	dc33      	bgt.n	800f89a <floor+0x82>
 800f832:	2e00      	cmp	r6, #0
 800f834:	da14      	bge.n	800f860 <floor+0x48>
 800f836:	a334      	add	r3, pc, #208	; (adr r3, 800f908 <floor+0xf0>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fca0 	bl	8000180 <__adddf3>
 800f840:	2200      	movs	r2, #0
 800f842:	2300      	movs	r3, #0
 800f844:	f7f1 f8e2 	bl	8000a0c <__aeabi_dcmpgt>
 800f848:	b138      	cbz	r0, 800f85a <floor+0x42>
 800f84a:	2c00      	cmp	r4, #0
 800f84c:	da58      	bge.n	800f900 <floor+0xe8>
 800f84e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f852:	431d      	orrs	r5, r3
 800f854:	d001      	beq.n	800f85a <floor+0x42>
 800f856:	2500      	movs	r5, #0
 800f858:	4c2d      	ldr	r4, [pc, #180]	; (800f910 <floor+0xf8>)
 800f85a:	4623      	mov	r3, r4
 800f85c:	462f      	mov	r7, r5
 800f85e:	e025      	b.n	800f8ac <floor+0x94>
 800f860:	4a2c      	ldr	r2, [pc, #176]	; (800f914 <floor+0xfc>)
 800f862:	fa42 f806 	asr.w	r8, r2, r6
 800f866:	ea01 0208 	and.w	r2, r1, r8
 800f86a:	4302      	orrs	r2, r0
 800f86c:	d01e      	beq.n	800f8ac <floor+0x94>
 800f86e:	a326      	add	r3, pc, #152	; (adr r3, 800f908 <floor+0xf0>)
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	f7f0 fc84 	bl	8000180 <__adddf3>
 800f878:	2200      	movs	r2, #0
 800f87a:	2300      	movs	r3, #0
 800f87c:	f7f1 f8c6 	bl	8000a0c <__aeabi_dcmpgt>
 800f880:	2800      	cmp	r0, #0
 800f882:	d0ea      	beq.n	800f85a <floor+0x42>
 800f884:	2c00      	cmp	r4, #0
 800f886:	bfbe      	ittt	lt
 800f888:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f88c:	fa43 f606 	asrlt.w	r6, r3, r6
 800f890:	19a4      	addlt	r4, r4, r6
 800f892:	2500      	movs	r5, #0
 800f894:	ea24 0408 	bic.w	r4, r4, r8
 800f898:	e7df      	b.n	800f85a <floor+0x42>
 800f89a:	2e33      	cmp	r6, #51	; 0x33
 800f89c:	dd0a      	ble.n	800f8b4 <floor+0x9c>
 800f89e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f8a2:	d103      	bne.n	800f8ac <floor+0x94>
 800f8a4:	f7f0 fc6c 	bl	8000180 <__adddf3>
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	4638      	mov	r0, r7
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800f8bc:	fa22 f808 	lsr.w	r8, r2, r8
 800f8c0:	ea18 0f00 	tst.w	r8, r0
 800f8c4:	d0f2      	beq.n	800f8ac <floor+0x94>
 800f8c6:	a310      	add	r3, pc, #64	; (adr r3, 800f908 <floor+0xf0>)
 800f8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8cc:	f7f0 fc58 	bl	8000180 <__adddf3>
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f7f1 f89a 	bl	8000a0c <__aeabi_dcmpgt>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d0be      	beq.n	800f85a <floor+0x42>
 800f8dc:	2c00      	cmp	r4, #0
 800f8de:	da02      	bge.n	800f8e6 <floor+0xce>
 800f8e0:	2e14      	cmp	r6, #20
 800f8e2:	d103      	bne.n	800f8ec <floor+0xd4>
 800f8e4:	3401      	adds	r4, #1
 800f8e6:	ea25 0508 	bic.w	r5, r5, r8
 800f8ea:	e7b6      	b.n	800f85a <floor+0x42>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f8f2:	fa03 f606 	lsl.w	r6, r3, r6
 800f8f6:	4435      	add	r5, r6
 800f8f8:	42bd      	cmp	r5, r7
 800f8fa:	bf38      	it	cc
 800f8fc:	18e4      	addcc	r4, r4, r3
 800f8fe:	e7f2      	b.n	800f8e6 <floor+0xce>
 800f900:	2500      	movs	r5, #0
 800f902:	462c      	mov	r4, r5
 800f904:	e7a9      	b.n	800f85a <floor+0x42>
 800f906:	bf00      	nop
 800f908:	8800759c 	.word	0x8800759c
 800f90c:	7e37e43c 	.word	0x7e37e43c
 800f910:	bff00000 	.word	0xbff00000
 800f914:	000fffff 	.word	0x000fffff

0800f918 <pow>:
 800f918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f91c:	4614      	mov	r4, r2
 800f91e:	461d      	mov	r5, r3
 800f920:	4680      	mov	r8, r0
 800f922:	4689      	mov	r9, r1
 800f924:	f000 f860 	bl	800f9e8 <__ieee754_pow>
 800f928:	4622      	mov	r2, r4
 800f92a:	4606      	mov	r6, r0
 800f92c:	460f      	mov	r7, r1
 800f92e:	462b      	mov	r3, r5
 800f930:	4620      	mov	r0, r4
 800f932:	4629      	mov	r1, r5
 800f934:	f7f1 f874 	bl	8000a20 <__aeabi_dcmpun>
 800f938:	bbc8      	cbnz	r0, 800f9ae <pow+0x96>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2300      	movs	r3, #0
 800f93e:	4640      	mov	r0, r8
 800f940:	4649      	mov	r1, r9
 800f942:	f7f1 f83b 	bl	80009bc <__aeabi_dcmpeq>
 800f946:	b1b8      	cbz	r0, 800f978 <pow+0x60>
 800f948:	2200      	movs	r2, #0
 800f94a:	2300      	movs	r3, #0
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f1 f834 	bl	80009bc <__aeabi_dcmpeq>
 800f954:	2800      	cmp	r0, #0
 800f956:	d141      	bne.n	800f9dc <pow+0xc4>
 800f958:	4620      	mov	r0, r4
 800f95a:	4629      	mov	r1, r5
 800f95c:	f000 fe39 	bl	80105d2 <finite>
 800f960:	b328      	cbz	r0, 800f9ae <pow+0x96>
 800f962:	2200      	movs	r2, #0
 800f964:	2300      	movs	r3, #0
 800f966:	4620      	mov	r0, r4
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f1 f831 	bl	80009d0 <__aeabi_dcmplt>
 800f96e:	b1f0      	cbz	r0, 800f9ae <pow+0x96>
 800f970:	f7fc ff42 	bl	800c7f8 <__errno>
 800f974:	2322      	movs	r3, #34	; 0x22
 800f976:	e019      	b.n	800f9ac <pow+0x94>
 800f978:	4630      	mov	r0, r6
 800f97a:	4639      	mov	r1, r7
 800f97c:	f000 fe29 	bl	80105d2 <finite>
 800f980:	b9c8      	cbnz	r0, 800f9b6 <pow+0x9e>
 800f982:	4640      	mov	r0, r8
 800f984:	4649      	mov	r1, r9
 800f986:	f000 fe24 	bl	80105d2 <finite>
 800f98a:	b1a0      	cbz	r0, 800f9b6 <pow+0x9e>
 800f98c:	4620      	mov	r0, r4
 800f98e:	4629      	mov	r1, r5
 800f990:	f000 fe1f 	bl	80105d2 <finite>
 800f994:	b178      	cbz	r0, 800f9b6 <pow+0x9e>
 800f996:	4632      	mov	r2, r6
 800f998:	463b      	mov	r3, r7
 800f99a:	4630      	mov	r0, r6
 800f99c:	4639      	mov	r1, r7
 800f99e:	f7f1 f83f 	bl	8000a20 <__aeabi_dcmpun>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d0e4      	beq.n	800f970 <pow+0x58>
 800f9a6:	f7fc ff27 	bl	800c7f8 <__errno>
 800f9aa:	2321      	movs	r3, #33	; 0x21
 800f9ac:	6003      	str	r3, [r0, #0]
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	4639      	mov	r1, r7
 800f9be:	f7f0 fffd 	bl	80009bc <__aeabi_dcmpeq>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d0f3      	beq.n	800f9ae <pow+0x96>
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	4649      	mov	r1, r9
 800f9ca:	f000 fe02 	bl	80105d2 <finite>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d0ed      	beq.n	800f9ae <pow+0x96>
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	f000 fdfc 	bl	80105d2 <finite>
 800f9da:	e7c8      	b.n	800f96e <pow+0x56>
 800f9dc:	2600      	movs	r6, #0
 800f9de:	4f01      	ldr	r7, [pc, #4]	; (800f9e4 <pow+0xcc>)
 800f9e0:	e7e5      	b.n	800f9ae <pow+0x96>
 800f9e2:	bf00      	nop
 800f9e4:	3ff00000 	.word	0x3ff00000

0800f9e8 <__ieee754_pow>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	b093      	sub	sp, #76	; 0x4c
 800f9ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9f2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800f9f6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800f9fa:	4689      	mov	r9, r1
 800f9fc:	ea56 0102 	orrs.w	r1, r6, r2
 800fa00:	4680      	mov	r8, r0
 800fa02:	d111      	bne.n	800fa28 <__ieee754_pow+0x40>
 800fa04:	1803      	adds	r3, r0, r0
 800fa06:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800fa0a:	4152      	adcs	r2, r2
 800fa0c:	4299      	cmp	r1, r3
 800fa0e:	4b82      	ldr	r3, [pc, #520]	; (800fc18 <__ieee754_pow+0x230>)
 800fa10:	4193      	sbcs	r3, r2
 800fa12:	f080 84b9 	bcs.w	8010388 <__ieee754_pow+0x9a0>
 800fa16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	f7f0 fbaf 	bl	8000180 <__adddf3>
 800fa22:	4683      	mov	fp, r0
 800fa24:	468c      	mov	ip, r1
 800fa26:	e06f      	b.n	800fb08 <__ieee754_pow+0x120>
 800fa28:	4b7c      	ldr	r3, [pc, #496]	; (800fc1c <__ieee754_pow+0x234>)
 800fa2a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800fa2e:	429c      	cmp	r4, r3
 800fa30:	464d      	mov	r5, r9
 800fa32:	4682      	mov	sl, r0
 800fa34:	dc06      	bgt.n	800fa44 <__ieee754_pow+0x5c>
 800fa36:	d101      	bne.n	800fa3c <__ieee754_pow+0x54>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d1ec      	bne.n	800fa16 <__ieee754_pow+0x2e>
 800fa3c:	429e      	cmp	r6, r3
 800fa3e:	dc01      	bgt.n	800fa44 <__ieee754_pow+0x5c>
 800fa40:	d10f      	bne.n	800fa62 <__ieee754_pow+0x7a>
 800fa42:	b172      	cbz	r2, 800fa62 <__ieee754_pow+0x7a>
 800fa44:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fa48:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fa4c:	ea55 050a 	orrs.w	r5, r5, sl
 800fa50:	d1e1      	bne.n	800fa16 <__ieee754_pow+0x2e>
 800fa52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fa56:	18db      	adds	r3, r3, r3
 800fa58:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fa5c:	4152      	adcs	r2, r2
 800fa5e:	429d      	cmp	r5, r3
 800fa60:	e7d5      	b.n	800fa0e <__ieee754_pow+0x26>
 800fa62:	2d00      	cmp	r5, #0
 800fa64:	da39      	bge.n	800fada <__ieee754_pow+0xf2>
 800fa66:	4b6e      	ldr	r3, [pc, #440]	; (800fc20 <__ieee754_pow+0x238>)
 800fa68:	429e      	cmp	r6, r3
 800fa6a:	dc52      	bgt.n	800fb12 <__ieee754_pow+0x12a>
 800fa6c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fa70:	429e      	cmp	r6, r3
 800fa72:	f340 849c 	ble.w	80103ae <__ieee754_pow+0x9c6>
 800fa76:	1533      	asrs	r3, r6, #20
 800fa78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fa7c:	2b14      	cmp	r3, #20
 800fa7e:	dd0f      	ble.n	800faa0 <__ieee754_pow+0xb8>
 800fa80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fa84:	fa22 f103 	lsr.w	r1, r2, r3
 800fa88:	fa01 f303 	lsl.w	r3, r1, r3
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	f040 848e 	bne.w	80103ae <__ieee754_pow+0x9c6>
 800fa92:	f001 0101 	and.w	r1, r1, #1
 800fa96:	f1c1 0302 	rsb	r3, r1, #2
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	b182      	cbz	r2, 800fac0 <__ieee754_pow+0xd8>
 800fa9e:	e05d      	b.n	800fb5c <__ieee754_pow+0x174>
 800faa0:	2a00      	cmp	r2, #0
 800faa2:	d159      	bne.n	800fb58 <__ieee754_pow+0x170>
 800faa4:	f1c3 0314 	rsb	r3, r3, #20
 800faa8:	fa46 f103 	asr.w	r1, r6, r3
 800faac:	fa01 f303 	lsl.w	r3, r1, r3
 800fab0:	42b3      	cmp	r3, r6
 800fab2:	f040 8479 	bne.w	80103a8 <__ieee754_pow+0x9c0>
 800fab6:	f001 0101 	and.w	r1, r1, #1
 800faba:	f1c1 0302 	rsb	r3, r1, #2
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	4b58      	ldr	r3, [pc, #352]	; (800fc24 <__ieee754_pow+0x23c>)
 800fac2:	429e      	cmp	r6, r3
 800fac4:	d132      	bne.n	800fb2c <__ieee754_pow+0x144>
 800fac6:	2f00      	cmp	r7, #0
 800fac8:	f280 846a 	bge.w	80103a0 <__ieee754_pow+0x9b8>
 800facc:	4642      	mov	r2, r8
 800face:	464b      	mov	r3, r9
 800fad0:	2000      	movs	r0, #0
 800fad2:	4954      	ldr	r1, [pc, #336]	; (800fc24 <__ieee754_pow+0x23c>)
 800fad4:	f7f0 fe34 	bl	8000740 <__aeabi_ddiv>
 800fad8:	e7a3      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fada:	2300      	movs	r3, #0
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	2a00      	cmp	r2, #0
 800fae0:	d13c      	bne.n	800fb5c <__ieee754_pow+0x174>
 800fae2:	4b4e      	ldr	r3, [pc, #312]	; (800fc1c <__ieee754_pow+0x234>)
 800fae4:	429e      	cmp	r6, r3
 800fae6:	d1eb      	bne.n	800fac0 <__ieee754_pow+0xd8>
 800fae8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800faec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800faf0:	ea53 030a 	orrs.w	r3, r3, sl
 800faf4:	f000 8448 	beq.w	8010388 <__ieee754_pow+0x9a0>
 800faf8:	4b4b      	ldr	r3, [pc, #300]	; (800fc28 <__ieee754_pow+0x240>)
 800fafa:	429c      	cmp	r4, r3
 800fafc:	dd0b      	ble.n	800fb16 <__ieee754_pow+0x12e>
 800fafe:	2f00      	cmp	r7, #0
 800fb00:	f2c0 8448 	blt.w	8010394 <__ieee754_pow+0x9ac>
 800fb04:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800fb08:	4658      	mov	r0, fp
 800fb0a:	4661      	mov	r1, ip
 800fb0c:	b013      	add	sp, #76	; 0x4c
 800fb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb12:	2302      	movs	r3, #2
 800fb14:	e7e2      	b.n	800fadc <__ieee754_pow+0xf4>
 800fb16:	2f00      	cmp	r7, #0
 800fb18:	f04f 0b00 	mov.w	fp, #0
 800fb1c:	f04f 0c00 	mov.w	ip, #0
 800fb20:	daf2      	bge.n	800fb08 <__ieee754_pow+0x120>
 800fb22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800fb26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800fb2a:	e7ed      	b.n	800fb08 <__ieee754_pow+0x120>
 800fb2c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800fb30:	d106      	bne.n	800fb40 <__ieee754_pow+0x158>
 800fb32:	4642      	mov	r2, r8
 800fb34:	464b      	mov	r3, r9
 800fb36:	4640      	mov	r0, r8
 800fb38:	4649      	mov	r1, r9
 800fb3a:	f7f0 fcd7 	bl	80004ec <__aeabi_dmul>
 800fb3e:	e770      	b.n	800fa22 <__ieee754_pow+0x3a>
 800fb40:	4b3a      	ldr	r3, [pc, #232]	; (800fc2c <__ieee754_pow+0x244>)
 800fb42:	429f      	cmp	r7, r3
 800fb44:	d10a      	bne.n	800fb5c <__ieee754_pow+0x174>
 800fb46:	2d00      	cmp	r5, #0
 800fb48:	db08      	blt.n	800fb5c <__ieee754_pow+0x174>
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	b013      	add	sp, #76	; 0x4c
 800fb50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	f000 bc5e 	b.w	8010414 <__ieee754_sqrt>
 800fb58:	2300      	movs	r3, #0
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	4649      	mov	r1, r9
 800fb60:	f000 fd34 	bl	80105cc <fabs>
 800fb64:	4683      	mov	fp, r0
 800fb66:	468c      	mov	ip, r1
 800fb68:	f1ba 0f00 	cmp.w	sl, #0
 800fb6c:	d128      	bne.n	800fbc0 <__ieee754_pow+0x1d8>
 800fb6e:	b124      	cbz	r4, 800fb7a <__ieee754_pow+0x192>
 800fb70:	4b2c      	ldr	r3, [pc, #176]	; (800fc24 <__ieee754_pow+0x23c>)
 800fb72:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d122      	bne.n	800fbc0 <__ieee754_pow+0x1d8>
 800fb7a:	2f00      	cmp	r7, #0
 800fb7c:	da07      	bge.n	800fb8e <__ieee754_pow+0x1a6>
 800fb7e:	465a      	mov	r2, fp
 800fb80:	4663      	mov	r3, ip
 800fb82:	2000      	movs	r0, #0
 800fb84:	4927      	ldr	r1, [pc, #156]	; (800fc24 <__ieee754_pow+0x23c>)
 800fb86:	f7f0 fddb 	bl	8000740 <__aeabi_ddiv>
 800fb8a:	4683      	mov	fp, r0
 800fb8c:	468c      	mov	ip, r1
 800fb8e:	2d00      	cmp	r5, #0
 800fb90:	daba      	bge.n	800fb08 <__ieee754_pow+0x120>
 800fb92:	9b00      	ldr	r3, [sp, #0]
 800fb94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fb98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb9c:	4323      	orrs	r3, r4
 800fb9e:	d108      	bne.n	800fbb2 <__ieee754_pow+0x1ca>
 800fba0:	465a      	mov	r2, fp
 800fba2:	4663      	mov	r3, ip
 800fba4:	4658      	mov	r0, fp
 800fba6:	4661      	mov	r1, ip
 800fba8:	f7f0 fae8 	bl	800017c <__aeabi_dsub>
 800fbac:	4602      	mov	r2, r0
 800fbae:	460b      	mov	r3, r1
 800fbb0:	e790      	b.n	800fad4 <__ieee754_pow+0xec>
 800fbb2:	9b00      	ldr	r3, [sp, #0]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d1a7      	bne.n	800fb08 <__ieee754_pow+0x120>
 800fbb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800fbbc:	469c      	mov	ip, r3
 800fbbe:	e7a3      	b.n	800fb08 <__ieee754_pow+0x120>
 800fbc0:	0feb      	lsrs	r3, r5, #31
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	930c      	str	r3, [sp, #48]	; 0x30
 800fbc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbc8:	9b00      	ldr	r3, [sp, #0]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	d104      	bne.n	800fbd8 <__ieee754_pow+0x1f0>
 800fbce:	4642      	mov	r2, r8
 800fbd0:	464b      	mov	r3, r9
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	e7e7      	b.n	800fba8 <__ieee754_pow+0x1c0>
 800fbd8:	4b15      	ldr	r3, [pc, #84]	; (800fc30 <__ieee754_pow+0x248>)
 800fbda:	429e      	cmp	r6, r3
 800fbdc:	f340 80f6 	ble.w	800fdcc <__ieee754_pow+0x3e4>
 800fbe0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fbe4:	429e      	cmp	r6, r3
 800fbe6:	4b10      	ldr	r3, [pc, #64]	; (800fc28 <__ieee754_pow+0x240>)
 800fbe8:	dd09      	ble.n	800fbfe <__ieee754_pow+0x216>
 800fbea:	429c      	cmp	r4, r3
 800fbec:	dc0c      	bgt.n	800fc08 <__ieee754_pow+0x220>
 800fbee:	2f00      	cmp	r7, #0
 800fbf0:	da0c      	bge.n	800fc0c <__ieee754_pow+0x224>
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	b013      	add	sp, #76	; 0x4c
 800fbf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	f000 bce2 	b.w	80105c2 <__math_oflow>
 800fbfe:	429c      	cmp	r4, r3
 800fc00:	dbf5      	blt.n	800fbee <__ieee754_pow+0x206>
 800fc02:	4b08      	ldr	r3, [pc, #32]	; (800fc24 <__ieee754_pow+0x23c>)
 800fc04:	429c      	cmp	r4, r3
 800fc06:	dd15      	ble.n	800fc34 <__ieee754_pow+0x24c>
 800fc08:	2f00      	cmp	r7, #0
 800fc0a:	dcf2      	bgt.n	800fbf2 <__ieee754_pow+0x20a>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	b013      	add	sp, #76	; 0x4c
 800fc10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	f000 bcd0 	b.w	80105b8 <__math_uflow>
 800fc18:	fff00000 	.word	0xfff00000
 800fc1c:	7ff00000 	.word	0x7ff00000
 800fc20:	433fffff 	.word	0x433fffff
 800fc24:	3ff00000 	.word	0x3ff00000
 800fc28:	3fefffff 	.word	0x3fefffff
 800fc2c:	3fe00000 	.word	0x3fe00000
 800fc30:	41e00000 	.word	0x41e00000
 800fc34:	4661      	mov	r1, ip
 800fc36:	2200      	movs	r2, #0
 800fc38:	4658      	mov	r0, fp
 800fc3a:	4b5f      	ldr	r3, [pc, #380]	; (800fdb8 <__ieee754_pow+0x3d0>)
 800fc3c:	f7f0 fa9e 	bl	800017c <__aeabi_dsub>
 800fc40:	a355      	add	r3, pc, #340	; (adr r3, 800fd98 <__ieee754_pow+0x3b0>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	4604      	mov	r4, r0
 800fc48:	460d      	mov	r5, r1
 800fc4a:	f7f0 fc4f 	bl	80004ec <__aeabi_dmul>
 800fc4e:	a354      	add	r3, pc, #336	; (adr r3, 800fda0 <__ieee754_pow+0x3b8>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	4606      	mov	r6, r0
 800fc56:	460f      	mov	r7, r1
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f7f0 fc46 	bl	80004ec <__aeabi_dmul>
 800fc60:	2200      	movs	r2, #0
 800fc62:	4682      	mov	sl, r0
 800fc64:	468b      	mov	fp, r1
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	4b54      	ldr	r3, [pc, #336]	; (800fdbc <__ieee754_pow+0x3d4>)
 800fc6c:	f7f0 fc3e 	bl	80004ec <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	a14c      	add	r1, pc, #304	; (adr r1, 800fda8 <__ieee754_pow+0x3c0>)
 800fc76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc7a:	f7f0 fa7f 	bl	800017c <__aeabi_dsub>
 800fc7e:	4622      	mov	r2, r4
 800fc80:	462b      	mov	r3, r5
 800fc82:	f7f0 fc33 	bl	80004ec <__aeabi_dmul>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	494c      	ldr	r1, [pc, #304]	; (800fdc0 <__ieee754_pow+0x3d8>)
 800fc8e:	f7f0 fa75 	bl	800017c <__aeabi_dsub>
 800fc92:	4622      	mov	r2, r4
 800fc94:	462b      	mov	r3, r5
 800fc96:	4680      	mov	r8, r0
 800fc98:	4689      	mov	r9, r1
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7f0 fc25 	bl	80004ec <__aeabi_dmul>
 800fca2:	4602      	mov	r2, r0
 800fca4:	460b      	mov	r3, r1
 800fca6:	4640      	mov	r0, r8
 800fca8:	4649      	mov	r1, r9
 800fcaa:	f7f0 fc1f 	bl	80004ec <__aeabi_dmul>
 800fcae:	a340      	add	r3, pc, #256	; (adr r3, 800fdb0 <__ieee754_pow+0x3c8>)
 800fcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb4:	f7f0 fc1a 	bl	80004ec <__aeabi_dmul>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4650      	mov	r0, sl
 800fcbe:	4659      	mov	r1, fp
 800fcc0:	f7f0 fa5c 	bl	800017c <__aeabi_dsub>
 800fcc4:	f04f 0a00 	mov.w	sl, #0
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4604      	mov	r4, r0
 800fcce:	460d      	mov	r5, r1
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	4639      	mov	r1, r7
 800fcd4:	f7f0 fa54 	bl	8000180 <__adddf3>
 800fcd8:	4632      	mov	r2, r6
 800fcda:	463b      	mov	r3, r7
 800fcdc:	4650      	mov	r0, sl
 800fcde:	468b      	mov	fp, r1
 800fce0:	f7f0 fa4c 	bl	800017c <__aeabi_dsub>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	4620      	mov	r0, r4
 800fcea:	4629      	mov	r1, r5
 800fcec:	f7f0 fa46 	bl	800017c <__aeabi_dsub>
 800fcf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fcf4:	9b00      	ldr	r3, [sp, #0]
 800fcf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	f04f 0600 	mov.w	r6, #0
 800fd00:	f04f 0200 	mov.w	r2, #0
 800fd04:	bf0c      	ite	eq
 800fd06:	4b2f      	ldreq	r3, [pc, #188]	; (800fdc4 <__ieee754_pow+0x3dc>)
 800fd08:	4b2b      	ldrne	r3, [pc, #172]	; (800fdb8 <__ieee754_pow+0x3d0>)
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	460d      	mov	r5, r1
 800fd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd12:	e9cd 2300 	strd	r2, r3, [sp]
 800fd16:	4632      	mov	r2, r6
 800fd18:	463b      	mov	r3, r7
 800fd1a:	f7f0 fa2f 	bl	800017c <__aeabi_dsub>
 800fd1e:	4652      	mov	r2, sl
 800fd20:	465b      	mov	r3, fp
 800fd22:	f7f0 fbe3 	bl	80004ec <__aeabi_dmul>
 800fd26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd2a:	4680      	mov	r8, r0
 800fd2c:	4689      	mov	r9, r1
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 fbdb 	bl	80004ec <__aeabi_dmul>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	4640      	mov	r0, r8
 800fd3c:	4649      	mov	r1, r9
 800fd3e:	f7f0 fa1f 	bl	8000180 <__adddf3>
 800fd42:	4632      	mov	r2, r6
 800fd44:	463b      	mov	r3, r7
 800fd46:	4680      	mov	r8, r0
 800fd48:	4689      	mov	r9, r1
 800fd4a:	4650      	mov	r0, sl
 800fd4c:	4659      	mov	r1, fp
 800fd4e:	f7f0 fbcd 	bl	80004ec <__aeabi_dmul>
 800fd52:	4604      	mov	r4, r0
 800fd54:	460d      	mov	r5, r1
 800fd56:	460b      	mov	r3, r1
 800fd58:	4602      	mov	r2, r0
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fd62:	f7f0 fa0d 	bl	8000180 <__adddf3>
 800fd66:	4b18      	ldr	r3, [pc, #96]	; (800fdc8 <__ieee754_pow+0x3e0>)
 800fd68:	4682      	mov	sl, r0
 800fd6a:	4299      	cmp	r1, r3
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	460e      	mov	r6, r1
 800fd70:	f340 82e5 	ble.w	801033e <__ieee754_pow+0x956>
 800fd74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fd78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fd7c:	4303      	orrs	r3, r0
 800fd7e:	f000 81df 	beq.w	8010140 <__ieee754_pow+0x758>
 800fd82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd86:	2200      	movs	r2, #0
 800fd88:	2300      	movs	r3, #0
 800fd8a:	f7f0 fe21 	bl	80009d0 <__aeabi_dcmplt>
 800fd8e:	3800      	subs	r0, #0
 800fd90:	bf18      	it	ne
 800fd92:	2001      	movne	r0, #1
 800fd94:	e72e      	b.n	800fbf4 <__ieee754_pow+0x20c>
 800fd96:	bf00      	nop
 800fd98:	60000000 	.word	0x60000000
 800fd9c:	3ff71547 	.word	0x3ff71547
 800fda0:	f85ddf44 	.word	0xf85ddf44
 800fda4:	3e54ae0b 	.word	0x3e54ae0b
 800fda8:	55555555 	.word	0x55555555
 800fdac:	3fd55555 	.word	0x3fd55555
 800fdb0:	652b82fe 	.word	0x652b82fe
 800fdb4:	3ff71547 	.word	0x3ff71547
 800fdb8:	3ff00000 	.word	0x3ff00000
 800fdbc:	3fd00000 	.word	0x3fd00000
 800fdc0:	3fe00000 	.word	0x3fe00000
 800fdc4:	bff00000 	.word	0xbff00000
 800fdc8:	408fffff 	.word	0x408fffff
 800fdcc:	4bd2      	ldr	r3, [pc, #840]	; (8010118 <__ieee754_pow+0x730>)
 800fdce:	2200      	movs	r2, #0
 800fdd0:	402b      	ands	r3, r5
 800fdd2:	b943      	cbnz	r3, 800fde6 <__ieee754_pow+0x3fe>
 800fdd4:	4658      	mov	r0, fp
 800fdd6:	4661      	mov	r1, ip
 800fdd8:	4bd0      	ldr	r3, [pc, #832]	; (801011c <__ieee754_pow+0x734>)
 800fdda:	f7f0 fb87 	bl	80004ec <__aeabi_dmul>
 800fdde:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fde2:	4683      	mov	fp, r0
 800fde4:	460c      	mov	r4, r1
 800fde6:	1523      	asrs	r3, r4, #20
 800fde8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fdec:	4413      	add	r3, r2
 800fdee:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdf0:	4bcb      	ldr	r3, [pc, #812]	; (8010120 <__ieee754_pow+0x738>)
 800fdf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fdf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fdfa:	429c      	cmp	r4, r3
 800fdfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fe00:	dd08      	ble.n	800fe14 <__ieee754_pow+0x42c>
 800fe02:	4bc8      	ldr	r3, [pc, #800]	; (8010124 <__ieee754_pow+0x73c>)
 800fe04:	429c      	cmp	r4, r3
 800fe06:	f340 8199 	ble.w	801013c <__ieee754_pow+0x754>
 800fe0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe0c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fe10:	3301      	adds	r3, #1
 800fe12:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe14:	2600      	movs	r6, #0
 800fe16:	00f3      	lsls	r3, r6, #3
 800fe18:	930d      	str	r3, [sp, #52]	; 0x34
 800fe1a:	4bc3      	ldr	r3, [pc, #780]	; (8010128 <__ieee754_pow+0x740>)
 800fe1c:	4658      	mov	r0, fp
 800fe1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe22:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe26:	4629      	mov	r1, r5
 800fe28:	461a      	mov	r2, r3
 800fe2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800fe2e:	4623      	mov	r3, r4
 800fe30:	f7f0 f9a4 	bl	800017c <__aeabi_dsub>
 800fe34:	46da      	mov	sl, fp
 800fe36:	462b      	mov	r3, r5
 800fe38:	4652      	mov	r2, sl
 800fe3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fe3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fe42:	f7f0 f99d 	bl	8000180 <__adddf3>
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	49b7      	ldr	r1, [pc, #732]	; (801012c <__ieee754_pow+0x744>)
 800fe4e:	f7f0 fc77 	bl	8000740 <__aeabi_ddiv>
 800fe52:	4602      	mov	r2, r0
 800fe54:	460b      	mov	r3, r1
 800fe56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fe5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fe5e:	f7f0 fb45 	bl	80004ec <__aeabi_dmul>
 800fe62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800fe6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fe6e:	2300      	movs	r3, #0
 800fe70:	2200      	movs	r2, #0
 800fe72:	46ab      	mov	fp, r5
 800fe74:	106d      	asrs	r5, r5, #1
 800fe76:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fe7a:	9304      	str	r3, [sp, #16]
 800fe7c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fe80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fe84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800fe88:	4640      	mov	r0, r8
 800fe8a:	4649      	mov	r1, r9
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	461d      	mov	r5, r3
 800fe90:	f7f0 fb2c 	bl	80004ec <__aeabi_dmul>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fe9c:	f7f0 f96e 	bl	800017c <__aeabi_dsub>
 800fea0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fea4:	4606      	mov	r6, r0
 800fea6:	460f      	mov	r7, r1
 800fea8:	4620      	mov	r0, r4
 800feaa:	4629      	mov	r1, r5
 800feac:	f7f0 f966 	bl	800017c <__aeabi_dsub>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4650      	mov	r0, sl
 800feb6:	4659      	mov	r1, fp
 800feb8:	f7f0 f960 	bl	800017c <__aeabi_dsub>
 800febc:	4642      	mov	r2, r8
 800febe:	464b      	mov	r3, r9
 800fec0:	f7f0 fb14 	bl	80004ec <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4630      	mov	r0, r6
 800feca:	4639      	mov	r1, r7
 800fecc:	f7f0 f956 	bl	800017c <__aeabi_dsub>
 800fed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fed4:	f7f0 fb0a 	bl	80004ec <__aeabi_dmul>
 800fed8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fedc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fee0:	4610      	mov	r0, r2
 800fee2:	4619      	mov	r1, r3
 800fee4:	f7f0 fb02 	bl	80004ec <__aeabi_dmul>
 800fee8:	a379      	add	r3, pc, #484	; (adr r3, 80100d0 <__ieee754_pow+0x6e8>)
 800feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feee:	4604      	mov	r4, r0
 800fef0:	460d      	mov	r5, r1
 800fef2:	f7f0 fafb 	bl	80004ec <__aeabi_dmul>
 800fef6:	a378      	add	r3, pc, #480	; (adr r3, 80100d8 <__ieee754_pow+0x6f0>)
 800fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefc:	f7f0 f940 	bl	8000180 <__adddf3>
 800ff00:	4622      	mov	r2, r4
 800ff02:	462b      	mov	r3, r5
 800ff04:	f7f0 faf2 	bl	80004ec <__aeabi_dmul>
 800ff08:	a375      	add	r3, pc, #468	; (adr r3, 80100e0 <__ieee754_pow+0x6f8>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	f7f0 f937 	bl	8000180 <__adddf3>
 800ff12:	4622      	mov	r2, r4
 800ff14:	462b      	mov	r3, r5
 800ff16:	f7f0 fae9 	bl	80004ec <__aeabi_dmul>
 800ff1a:	a373      	add	r3, pc, #460	; (adr r3, 80100e8 <__ieee754_pow+0x700>)
 800ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff20:	f7f0 f92e 	bl	8000180 <__adddf3>
 800ff24:	4622      	mov	r2, r4
 800ff26:	462b      	mov	r3, r5
 800ff28:	f7f0 fae0 	bl	80004ec <__aeabi_dmul>
 800ff2c:	a370      	add	r3, pc, #448	; (adr r3, 80100f0 <__ieee754_pow+0x708>)
 800ff2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff32:	f7f0 f925 	bl	8000180 <__adddf3>
 800ff36:	4622      	mov	r2, r4
 800ff38:	462b      	mov	r3, r5
 800ff3a:	f7f0 fad7 	bl	80004ec <__aeabi_dmul>
 800ff3e:	a36e      	add	r3, pc, #440	; (adr r3, 80100f8 <__ieee754_pow+0x710>)
 800ff40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff44:	f7f0 f91c 	bl	8000180 <__adddf3>
 800ff48:	4622      	mov	r2, r4
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	460f      	mov	r7, r1
 800ff4e:	462b      	mov	r3, r5
 800ff50:	4620      	mov	r0, r4
 800ff52:	4629      	mov	r1, r5
 800ff54:	f7f0 faca 	bl	80004ec <__aeabi_dmul>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	4630      	mov	r0, r6
 800ff5e:	4639      	mov	r1, r7
 800ff60:	f7f0 fac4 	bl	80004ec <__aeabi_dmul>
 800ff64:	4604      	mov	r4, r0
 800ff66:	460d      	mov	r5, r1
 800ff68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff6c:	4642      	mov	r2, r8
 800ff6e:	464b      	mov	r3, r9
 800ff70:	f7f0 f906 	bl	8000180 <__adddf3>
 800ff74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff78:	f7f0 fab8 	bl	80004ec <__aeabi_dmul>
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	462b      	mov	r3, r5
 800ff80:	f7f0 f8fe 	bl	8000180 <__adddf3>
 800ff84:	4642      	mov	r2, r8
 800ff86:	4606      	mov	r6, r0
 800ff88:	460f      	mov	r7, r1
 800ff8a:	464b      	mov	r3, r9
 800ff8c:	4640      	mov	r0, r8
 800ff8e:	4649      	mov	r1, r9
 800ff90:	f7f0 faac 	bl	80004ec <__aeabi_dmul>
 800ff94:	2200      	movs	r2, #0
 800ff96:	4b66      	ldr	r3, [pc, #408]	; (8010130 <__ieee754_pow+0x748>)
 800ff98:	4682      	mov	sl, r0
 800ff9a:	468b      	mov	fp, r1
 800ff9c:	f7f0 f8f0 	bl	8000180 <__adddf3>
 800ffa0:	4632      	mov	r2, r6
 800ffa2:	463b      	mov	r3, r7
 800ffa4:	f7f0 f8ec 	bl	8000180 <__adddf3>
 800ffa8:	2400      	movs	r4, #0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	4622      	mov	r2, r4
 800ffae:	460b      	mov	r3, r1
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	f7f0 fa9a 	bl	80004ec <__aeabi_dmul>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	4680      	mov	r8, r0
 800ffbc:	4689      	mov	r9, r1
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4b5b      	ldr	r3, [pc, #364]	; (8010130 <__ieee754_pow+0x748>)
 800ffc4:	f7f0 f8da 	bl	800017c <__aeabi_dsub>
 800ffc8:	4652      	mov	r2, sl
 800ffca:	465b      	mov	r3, fp
 800ffcc:	f7f0 f8d6 	bl	800017c <__aeabi_dsub>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	4639      	mov	r1, r7
 800ffd8:	f7f0 f8d0 	bl	800017c <__aeabi_dsub>
 800ffdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ffe0:	f7f0 fa84 	bl	80004ec <__aeabi_dmul>
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	460f      	mov	r7, r1
 800ffea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ffee:	462b      	mov	r3, r5
 800fff0:	f7f0 fa7c 	bl	80004ec <__aeabi_dmul>
 800fff4:	4602      	mov	r2, r0
 800fff6:	460b      	mov	r3, r1
 800fff8:	4630      	mov	r0, r6
 800fffa:	4639      	mov	r1, r7
 800fffc:	f7f0 f8c0 	bl	8000180 <__adddf3>
 8010000:	2400      	movs	r4, #0
 8010002:	4606      	mov	r6, r0
 8010004:	460f      	mov	r7, r1
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	4640      	mov	r0, r8
 801000c:	4649      	mov	r1, r9
 801000e:	f7f0 f8b7 	bl	8000180 <__adddf3>
 8010012:	a33b      	add	r3, pc, #236	; (adr r3, 8010100 <__ieee754_pow+0x718>)
 8010014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010018:	4620      	mov	r0, r4
 801001a:	460d      	mov	r5, r1
 801001c:	f7f0 fa66 	bl	80004ec <__aeabi_dmul>
 8010020:	4642      	mov	r2, r8
 8010022:	464b      	mov	r3, r9
 8010024:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	f7f0 f8a6 	bl	800017c <__aeabi_dsub>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	4630      	mov	r0, r6
 8010036:	4639      	mov	r1, r7
 8010038:	f7f0 f8a0 	bl	800017c <__aeabi_dsub>
 801003c:	a332      	add	r3, pc, #200	; (adr r3, 8010108 <__ieee754_pow+0x720>)
 801003e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010042:	f7f0 fa53 	bl	80004ec <__aeabi_dmul>
 8010046:	a332      	add	r3, pc, #200	; (adr r3, 8010110 <__ieee754_pow+0x728>)
 8010048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004c:	4606      	mov	r6, r0
 801004e:	460f      	mov	r7, r1
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 fa4a 	bl	80004ec <__aeabi_dmul>
 8010058:	4602      	mov	r2, r0
 801005a:	460b      	mov	r3, r1
 801005c:	4630      	mov	r0, r6
 801005e:	4639      	mov	r1, r7
 8010060:	f7f0 f88e 	bl	8000180 <__adddf3>
 8010064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010066:	4b33      	ldr	r3, [pc, #204]	; (8010134 <__ieee754_pow+0x74c>)
 8010068:	f04f 0a00 	mov.w	sl, #0
 801006c:	4413      	add	r3, r2
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f0 f885 	bl	8000180 <__adddf3>
 8010076:	4680      	mov	r8, r0
 8010078:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801007a:	4689      	mov	r9, r1
 801007c:	f7f0 f9cc 	bl	8000418 <__aeabi_i2d>
 8010080:	4604      	mov	r4, r0
 8010082:	460d      	mov	r5, r1
 8010084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010086:	4b2c      	ldr	r3, [pc, #176]	; (8010138 <__ieee754_pow+0x750>)
 8010088:	4413      	add	r3, r2
 801008a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801008e:	4642      	mov	r2, r8
 8010090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010094:	464b      	mov	r3, r9
 8010096:	f7f0 f873 	bl	8000180 <__adddf3>
 801009a:	4632      	mov	r2, r6
 801009c:	463b      	mov	r3, r7
 801009e:	f7f0 f86f 	bl	8000180 <__adddf3>
 80100a2:	4622      	mov	r2, r4
 80100a4:	462b      	mov	r3, r5
 80100a6:	f7f0 f86b 	bl	8000180 <__adddf3>
 80100aa:	4622      	mov	r2, r4
 80100ac:	462b      	mov	r3, r5
 80100ae:	4650      	mov	r0, sl
 80100b0:	468b      	mov	fp, r1
 80100b2:	f7f0 f863 	bl	800017c <__aeabi_dsub>
 80100b6:	4632      	mov	r2, r6
 80100b8:	463b      	mov	r3, r7
 80100ba:	f7f0 f85f 	bl	800017c <__aeabi_dsub>
 80100be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100c2:	f7f0 f85b 	bl	800017c <__aeabi_dsub>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	e60d      	b.n	800fcec <__ieee754_pow+0x304>
 80100d0:	4a454eef 	.word	0x4a454eef
 80100d4:	3fca7e28 	.word	0x3fca7e28
 80100d8:	93c9db65 	.word	0x93c9db65
 80100dc:	3fcd864a 	.word	0x3fcd864a
 80100e0:	a91d4101 	.word	0xa91d4101
 80100e4:	3fd17460 	.word	0x3fd17460
 80100e8:	518f264d 	.word	0x518f264d
 80100ec:	3fd55555 	.word	0x3fd55555
 80100f0:	db6fabff 	.word	0xdb6fabff
 80100f4:	3fdb6db6 	.word	0x3fdb6db6
 80100f8:	33333303 	.word	0x33333303
 80100fc:	3fe33333 	.word	0x3fe33333
 8010100:	e0000000 	.word	0xe0000000
 8010104:	3feec709 	.word	0x3feec709
 8010108:	dc3a03fd 	.word	0xdc3a03fd
 801010c:	3feec709 	.word	0x3feec709
 8010110:	145b01f5 	.word	0x145b01f5
 8010114:	be3e2fe0 	.word	0xbe3e2fe0
 8010118:	7ff00000 	.word	0x7ff00000
 801011c:	43400000 	.word	0x43400000
 8010120:	0003988e 	.word	0x0003988e
 8010124:	000bb679 	.word	0x000bb679
 8010128:	08012218 	.word	0x08012218
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	40080000 	.word	0x40080000
 8010134:	08012238 	.word	0x08012238
 8010138:	08012228 	.word	0x08012228
 801013c:	2601      	movs	r6, #1
 801013e:	e66a      	b.n	800fe16 <__ieee754_pow+0x42e>
 8010140:	a39d      	add	r3, pc, #628	; (adr r3, 80103b8 <__ieee754_pow+0x9d0>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	4640      	mov	r0, r8
 8010148:	4649      	mov	r1, r9
 801014a:	f7f0 f819 	bl	8000180 <__adddf3>
 801014e:	4622      	mov	r2, r4
 8010150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010154:	462b      	mov	r3, r5
 8010156:	4650      	mov	r0, sl
 8010158:	4639      	mov	r1, r7
 801015a:	f7f0 f80f 	bl	800017c <__aeabi_dsub>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010166:	f7f0 fc51 	bl	8000a0c <__aeabi_dcmpgt>
 801016a:	2800      	cmp	r0, #0
 801016c:	f47f ae09 	bne.w	800fd82 <__ieee754_pow+0x39a>
 8010170:	4aa3      	ldr	r2, [pc, #652]	; (8010400 <__ieee754_pow+0xa18>)
 8010172:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8010176:	4293      	cmp	r3, r2
 8010178:	f340 8101 	ble.w	801037e <__ieee754_pow+0x996>
 801017c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010180:	2000      	movs	r0, #0
 8010182:	151b      	asrs	r3, r3, #20
 8010184:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010188:	fa4a f303 	asr.w	r3, sl, r3
 801018c:	4433      	add	r3, r6
 801018e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010192:	4f9c      	ldr	r7, [pc, #624]	; (8010404 <__ieee754_pow+0xa1c>)
 8010194:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010198:	4117      	asrs	r7, r2
 801019a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801019e:	ea23 0107 	bic.w	r1, r3, r7
 80101a2:	f1c2 0214 	rsb	r2, r2, #20
 80101a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80101aa:	460b      	mov	r3, r1
 80101ac:	fa4a fa02 	asr.w	sl, sl, r2
 80101b0:	2e00      	cmp	r6, #0
 80101b2:	4602      	mov	r2, r0
 80101b4:	4629      	mov	r1, r5
 80101b6:	4620      	mov	r0, r4
 80101b8:	bfb8      	it	lt
 80101ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80101be:	f7ef ffdd 	bl	800017c <__aeabi_dsub>
 80101c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ca:	2400      	movs	r4, #0
 80101cc:	4642      	mov	r2, r8
 80101ce:	464b      	mov	r3, r9
 80101d0:	f7ef ffd6 	bl	8000180 <__adddf3>
 80101d4:	a37a      	add	r3, pc, #488	; (adr r3, 80103c0 <__ieee754_pow+0x9d8>)
 80101d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101da:	4620      	mov	r0, r4
 80101dc:	460d      	mov	r5, r1
 80101de:	f7f0 f985 	bl	80004ec <__aeabi_dmul>
 80101e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101e6:	4606      	mov	r6, r0
 80101e8:	460f      	mov	r7, r1
 80101ea:	4620      	mov	r0, r4
 80101ec:	4629      	mov	r1, r5
 80101ee:	f7ef ffc5 	bl	800017c <__aeabi_dsub>
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4640      	mov	r0, r8
 80101f8:	4649      	mov	r1, r9
 80101fa:	f7ef ffbf 	bl	800017c <__aeabi_dsub>
 80101fe:	a372      	add	r3, pc, #456	; (adr r3, 80103c8 <__ieee754_pow+0x9e0>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 f972 	bl	80004ec <__aeabi_dmul>
 8010208:	a371      	add	r3, pc, #452	; (adr r3, 80103d0 <__ieee754_pow+0x9e8>)
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	4680      	mov	r8, r0
 8010210:	4689      	mov	r9, r1
 8010212:	4620      	mov	r0, r4
 8010214:	4629      	mov	r1, r5
 8010216:	f7f0 f969 	bl	80004ec <__aeabi_dmul>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4640      	mov	r0, r8
 8010220:	4649      	mov	r1, r9
 8010222:	f7ef ffad 	bl	8000180 <__adddf3>
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4630      	mov	r0, r6
 8010230:	4639      	mov	r1, r7
 8010232:	f7ef ffa5 	bl	8000180 <__adddf3>
 8010236:	4632      	mov	r2, r6
 8010238:	463b      	mov	r3, r7
 801023a:	4680      	mov	r8, r0
 801023c:	4689      	mov	r9, r1
 801023e:	f7ef ff9d 	bl	800017c <__aeabi_dsub>
 8010242:	4602      	mov	r2, r0
 8010244:	460b      	mov	r3, r1
 8010246:	4620      	mov	r0, r4
 8010248:	4629      	mov	r1, r5
 801024a:	f7ef ff97 	bl	800017c <__aeabi_dsub>
 801024e:	4642      	mov	r2, r8
 8010250:	4606      	mov	r6, r0
 8010252:	460f      	mov	r7, r1
 8010254:	464b      	mov	r3, r9
 8010256:	4640      	mov	r0, r8
 8010258:	4649      	mov	r1, r9
 801025a:	f7f0 f947 	bl	80004ec <__aeabi_dmul>
 801025e:	a35e      	add	r3, pc, #376	; (adr r3, 80103d8 <__ieee754_pow+0x9f0>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	4604      	mov	r4, r0
 8010266:	460d      	mov	r5, r1
 8010268:	f7f0 f940 	bl	80004ec <__aeabi_dmul>
 801026c:	a35c      	add	r3, pc, #368	; (adr r3, 80103e0 <__ieee754_pow+0x9f8>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	f7ef ff83 	bl	800017c <__aeabi_dsub>
 8010276:	4622      	mov	r2, r4
 8010278:	462b      	mov	r3, r5
 801027a:	f7f0 f937 	bl	80004ec <__aeabi_dmul>
 801027e:	a35a      	add	r3, pc, #360	; (adr r3, 80103e8 <__ieee754_pow+0xa00>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f7ef ff7c 	bl	8000180 <__adddf3>
 8010288:	4622      	mov	r2, r4
 801028a:	462b      	mov	r3, r5
 801028c:	f7f0 f92e 	bl	80004ec <__aeabi_dmul>
 8010290:	a357      	add	r3, pc, #348	; (adr r3, 80103f0 <__ieee754_pow+0xa08>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f7ef ff71 	bl	800017c <__aeabi_dsub>
 801029a:	4622      	mov	r2, r4
 801029c:	462b      	mov	r3, r5
 801029e:	f7f0 f925 	bl	80004ec <__aeabi_dmul>
 80102a2:	a355      	add	r3, pc, #340	; (adr r3, 80103f8 <__ieee754_pow+0xa10>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7ef ff6a 	bl	8000180 <__adddf3>
 80102ac:	4622      	mov	r2, r4
 80102ae:	462b      	mov	r3, r5
 80102b0:	f7f0 f91c 	bl	80004ec <__aeabi_dmul>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4640      	mov	r0, r8
 80102ba:	4649      	mov	r1, r9
 80102bc:	f7ef ff5e 	bl	800017c <__aeabi_dsub>
 80102c0:	4604      	mov	r4, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4640      	mov	r0, r8
 80102ca:	4649      	mov	r1, r9
 80102cc:	f7f0 f90e 	bl	80004ec <__aeabi_dmul>
 80102d0:	2200      	movs	r2, #0
 80102d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102da:	4620      	mov	r0, r4
 80102dc:	4629      	mov	r1, r5
 80102de:	f7ef ff4d 	bl	800017c <__aeabi_dsub>
 80102e2:	4602      	mov	r2, r0
 80102e4:	460b      	mov	r3, r1
 80102e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102ea:	f7f0 fa29 	bl	8000740 <__aeabi_ddiv>
 80102ee:	4632      	mov	r2, r6
 80102f0:	4604      	mov	r4, r0
 80102f2:	460d      	mov	r5, r1
 80102f4:	463b      	mov	r3, r7
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7f0 f8f7 	bl	80004ec <__aeabi_dmul>
 80102fe:	4632      	mov	r2, r6
 8010300:	463b      	mov	r3, r7
 8010302:	f7ef ff3d 	bl	8000180 <__adddf3>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	4620      	mov	r0, r4
 801030c:	4629      	mov	r1, r5
 801030e:	f7ef ff35 	bl	800017c <__aeabi_dsub>
 8010312:	4642      	mov	r2, r8
 8010314:	464b      	mov	r3, r9
 8010316:	f7ef ff31 	bl	800017c <__aeabi_dsub>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	2000      	movs	r0, #0
 8010320:	4939      	ldr	r1, [pc, #228]	; (8010408 <__ieee754_pow+0xa20>)
 8010322:	f7ef ff2b 	bl	800017c <__aeabi_dsub>
 8010326:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801032a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801032e:	da29      	bge.n	8010384 <__ieee754_pow+0x99c>
 8010330:	4652      	mov	r2, sl
 8010332:	f000 f955 	bl	80105e0 <scalbn>
 8010336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801033a:	f7ff bbfe 	b.w	800fb3a <__ieee754_pow+0x152>
 801033e:	4b33      	ldr	r3, [pc, #204]	; (801040c <__ieee754_pow+0xa24>)
 8010340:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8010344:	429f      	cmp	r7, r3
 8010346:	f77f af13 	ble.w	8010170 <__ieee754_pow+0x788>
 801034a:	4b31      	ldr	r3, [pc, #196]	; (8010410 <__ieee754_pow+0xa28>)
 801034c:	440b      	add	r3, r1
 801034e:	4303      	orrs	r3, r0
 8010350:	d009      	beq.n	8010366 <__ieee754_pow+0x97e>
 8010352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010356:	2200      	movs	r2, #0
 8010358:	2300      	movs	r3, #0
 801035a:	f7f0 fb39 	bl	80009d0 <__aeabi_dcmplt>
 801035e:	3800      	subs	r0, #0
 8010360:	bf18      	it	ne
 8010362:	2001      	movne	r0, #1
 8010364:	e453      	b.n	800fc0e <__ieee754_pow+0x226>
 8010366:	4622      	mov	r2, r4
 8010368:	462b      	mov	r3, r5
 801036a:	f7ef ff07 	bl	800017c <__aeabi_dsub>
 801036e:	4642      	mov	r2, r8
 8010370:	464b      	mov	r3, r9
 8010372:	f7f0 fb41 	bl	80009f8 <__aeabi_dcmpge>
 8010376:	2800      	cmp	r0, #0
 8010378:	f43f aefa 	beq.w	8010170 <__ieee754_pow+0x788>
 801037c:	e7e9      	b.n	8010352 <__ieee754_pow+0x96a>
 801037e:	f04f 0a00 	mov.w	sl, #0
 8010382:	e720      	b.n	80101c6 <__ieee754_pow+0x7de>
 8010384:	4621      	mov	r1, r4
 8010386:	e7d6      	b.n	8010336 <__ieee754_pow+0x94e>
 8010388:	f04f 0b00 	mov.w	fp, #0
 801038c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8010408 <__ieee754_pow+0xa20>
 8010390:	f7ff bbba 	b.w	800fb08 <__ieee754_pow+0x120>
 8010394:	f04f 0b00 	mov.w	fp, #0
 8010398:	f04f 0c00 	mov.w	ip, #0
 801039c:	f7ff bbb4 	b.w	800fb08 <__ieee754_pow+0x120>
 80103a0:	4640      	mov	r0, r8
 80103a2:	4649      	mov	r1, r9
 80103a4:	f7ff bb3d 	b.w	800fa22 <__ieee754_pow+0x3a>
 80103a8:	9200      	str	r2, [sp, #0]
 80103aa:	f7ff bb89 	b.w	800fac0 <__ieee754_pow+0xd8>
 80103ae:	2300      	movs	r3, #0
 80103b0:	f7ff bb73 	b.w	800fa9a <__ieee754_pow+0xb2>
 80103b4:	f3af 8000 	nop.w
 80103b8:	652b82fe 	.word	0x652b82fe
 80103bc:	3c971547 	.word	0x3c971547
 80103c0:	00000000 	.word	0x00000000
 80103c4:	3fe62e43 	.word	0x3fe62e43
 80103c8:	fefa39ef 	.word	0xfefa39ef
 80103cc:	3fe62e42 	.word	0x3fe62e42
 80103d0:	0ca86c39 	.word	0x0ca86c39
 80103d4:	be205c61 	.word	0xbe205c61
 80103d8:	72bea4d0 	.word	0x72bea4d0
 80103dc:	3e663769 	.word	0x3e663769
 80103e0:	c5d26bf1 	.word	0xc5d26bf1
 80103e4:	3ebbbd41 	.word	0x3ebbbd41
 80103e8:	af25de2c 	.word	0xaf25de2c
 80103ec:	3f11566a 	.word	0x3f11566a
 80103f0:	16bebd93 	.word	0x16bebd93
 80103f4:	3f66c16c 	.word	0x3f66c16c
 80103f8:	5555553e 	.word	0x5555553e
 80103fc:	3fc55555 	.word	0x3fc55555
 8010400:	3fe00000 	.word	0x3fe00000
 8010404:	000fffff 	.word	0x000fffff
 8010408:	3ff00000 	.word	0x3ff00000
 801040c:	4090cbff 	.word	0x4090cbff
 8010410:	3f6f3400 	.word	0x3f6f3400

08010414 <__ieee754_sqrt>:
 8010414:	f8df c158 	ldr.w	ip, [pc, #344]	; 8010570 <__ieee754_sqrt+0x15c>
 8010418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041c:	ea3c 0c01 	bics.w	ip, ip, r1
 8010420:	4606      	mov	r6, r0
 8010422:	460d      	mov	r5, r1
 8010424:	460c      	mov	r4, r1
 8010426:	460a      	mov	r2, r1
 8010428:	4607      	mov	r7, r0
 801042a:	4603      	mov	r3, r0
 801042c:	d10f      	bne.n	801044e <__ieee754_sqrt+0x3a>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	f7f0 f85b 	bl	80004ec <__aeabi_dmul>
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	4630      	mov	r0, r6
 801043c:	4629      	mov	r1, r5
 801043e:	f7ef fe9f 	bl	8000180 <__adddf3>
 8010442:	4606      	mov	r6, r0
 8010444:	460d      	mov	r5, r1
 8010446:	4630      	mov	r0, r6
 8010448:	4629      	mov	r1, r5
 801044a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044e:	2900      	cmp	r1, #0
 8010450:	dc0e      	bgt.n	8010470 <__ieee754_sqrt+0x5c>
 8010452:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010456:	ea5c 0707 	orrs.w	r7, ip, r7
 801045a:	d0f4      	beq.n	8010446 <__ieee754_sqrt+0x32>
 801045c:	b141      	cbz	r1, 8010470 <__ieee754_sqrt+0x5c>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	f7ef fe8b 	bl	800017c <__aeabi_dsub>
 8010466:	4602      	mov	r2, r0
 8010468:	460b      	mov	r3, r1
 801046a:	f7f0 f969 	bl	8000740 <__aeabi_ddiv>
 801046e:	e7e8      	b.n	8010442 <__ieee754_sqrt+0x2e>
 8010470:	1521      	asrs	r1, r4, #20
 8010472:	d075      	beq.n	8010560 <__ieee754_sqrt+0x14c>
 8010474:	07cc      	lsls	r4, r1, #31
 8010476:	f04f 0400 	mov.w	r4, #0
 801047a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801047e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8010482:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010486:	bf5e      	ittt	pl
 8010488:	0fd9      	lsrpl	r1, r3, #31
 801048a:	005b      	lslpl	r3, r3, #1
 801048c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8010490:	0fd9      	lsrs	r1, r3, #31
 8010492:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010496:	2516      	movs	r5, #22
 8010498:	4620      	mov	r0, r4
 801049a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801049e:	107f      	asrs	r7, r7, #1
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	1846      	adds	r6, r0, r1
 80104a4:	4296      	cmp	r6, r2
 80104a6:	bfde      	ittt	le
 80104a8:	1b92      	suble	r2, r2, r6
 80104aa:	1870      	addle	r0, r6, r1
 80104ac:	1864      	addle	r4, r4, r1
 80104ae:	0052      	lsls	r2, r2, #1
 80104b0:	3d01      	subs	r5, #1
 80104b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80104b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80104ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104be:	d1f0      	bne.n	80104a2 <__ieee754_sqrt+0x8e>
 80104c0:	4629      	mov	r1, r5
 80104c2:	f04f 0e20 	mov.w	lr, #32
 80104c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80104ca:	4282      	cmp	r2, r0
 80104cc:	eb06 0c05 	add.w	ip, r6, r5
 80104d0:	dc02      	bgt.n	80104d8 <__ieee754_sqrt+0xc4>
 80104d2:	d113      	bne.n	80104fc <__ieee754_sqrt+0xe8>
 80104d4:	459c      	cmp	ip, r3
 80104d6:	d811      	bhi.n	80104fc <__ieee754_sqrt+0xe8>
 80104d8:	f1bc 0f00 	cmp.w	ip, #0
 80104dc:	eb0c 0506 	add.w	r5, ip, r6
 80104e0:	da43      	bge.n	801056a <__ieee754_sqrt+0x156>
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	db41      	blt.n	801056a <__ieee754_sqrt+0x156>
 80104e6:	f100 0801 	add.w	r8, r0, #1
 80104ea:	1a12      	subs	r2, r2, r0
 80104ec:	4640      	mov	r0, r8
 80104ee:	459c      	cmp	ip, r3
 80104f0:	bf88      	it	hi
 80104f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80104f6:	eba3 030c 	sub.w	r3, r3, ip
 80104fa:	4431      	add	r1, r6
 80104fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010500:	f1be 0e01 	subs.w	lr, lr, #1
 8010504:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8010508:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801050c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010510:	d1db      	bne.n	80104ca <__ieee754_sqrt+0xb6>
 8010512:	4313      	orrs	r3, r2
 8010514:	d006      	beq.n	8010524 <__ieee754_sqrt+0x110>
 8010516:	1c48      	adds	r0, r1, #1
 8010518:	bf0b      	itete	eq
 801051a:	4671      	moveq	r1, lr
 801051c:	3101      	addne	r1, #1
 801051e:	3401      	addeq	r4, #1
 8010520:	f021 0101 	bicne.w	r1, r1, #1
 8010524:	1063      	asrs	r3, r4, #1
 8010526:	0849      	lsrs	r1, r1, #1
 8010528:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801052c:	07e2      	lsls	r2, r4, #31
 801052e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010532:	bf48      	it	mi
 8010534:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010538:	460e      	mov	r6, r1
 801053a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801053e:	e782      	b.n	8010446 <__ieee754_sqrt+0x32>
 8010540:	0ada      	lsrs	r2, r3, #11
 8010542:	3815      	subs	r0, #21
 8010544:	055b      	lsls	r3, r3, #21
 8010546:	2a00      	cmp	r2, #0
 8010548:	d0fa      	beq.n	8010540 <__ieee754_sqrt+0x12c>
 801054a:	02d5      	lsls	r5, r2, #11
 801054c:	d50a      	bpl.n	8010564 <__ieee754_sqrt+0x150>
 801054e:	f1c1 0420 	rsb	r4, r1, #32
 8010552:	fa23 f404 	lsr.w	r4, r3, r4
 8010556:	1e4d      	subs	r5, r1, #1
 8010558:	408b      	lsls	r3, r1
 801055a:	4322      	orrs	r2, r4
 801055c:	1b41      	subs	r1, r0, r5
 801055e:	e789      	b.n	8010474 <__ieee754_sqrt+0x60>
 8010560:	4608      	mov	r0, r1
 8010562:	e7f0      	b.n	8010546 <__ieee754_sqrt+0x132>
 8010564:	0052      	lsls	r2, r2, #1
 8010566:	3101      	adds	r1, #1
 8010568:	e7ef      	b.n	801054a <__ieee754_sqrt+0x136>
 801056a:	4680      	mov	r8, r0
 801056c:	e7bd      	b.n	80104ea <__ieee754_sqrt+0xd6>
 801056e:	bf00      	nop
 8010570:	7ff00000 	.word	0x7ff00000

08010574 <with_errno>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	4604      	mov	r4, r0
 8010578:	460d      	mov	r5, r1
 801057a:	4616      	mov	r6, r2
 801057c:	f7fc f93c 	bl	800c7f8 <__errno>
 8010580:	4629      	mov	r1, r5
 8010582:	6006      	str	r6, [r0, #0]
 8010584:	4620      	mov	r0, r4
 8010586:	bd70      	pop	{r4, r5, r6, pc}

08010588 <xflow>:
 8010588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801058a:	4615      	mov	r5, r2
 801058c:	461c      	mov	r4, r3
 801058e:	b180      	cbz	r0, 80105b2 <xflow+0x2a>
 8010590:	4610      	mov	r0, r2
 8010592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010596:	e9cd 0100 	strd	r0, r1, [sp]
 801059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059e:	4628      	mov	r0, r5
 80105a0:	4621      	mov	r1, r4
 80105a2:	f7ef ffa3 	bl	80004ec <__aeabi_dmul>
 80105a6:	2222      	movs	r2, #34	; 0x22
 80105a8:	b003      	add	sp, #12
 80105aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ae:	f7ff bfe1 	b.w	8010574 <with_errno>
 80105b2:	4610      	mov	r0, r2
 80105b4:	4619      	mov	r1, r3
 80105b6:	e7ee      	b.n	8010596 <xflow+0xe>

080105b8 <__math_uflow>:
 80105b8:	2200      	movs	r2, #0
 80105ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105be:	f7ff bfe3 	b.w	8010588 <xflow>

080105c2 <__math_oflow>:
 80105c2:	2200      	movs	r2, #0
 80105c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80105c8:	f7ff bfde 	b.w	8010588 <xflow>

080105cc <fabs>:
 80105cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105d0:	4770      	bx	lr

080105d2 <finite>:
 80105d2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80105d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80105da:	0fc0      	lsrs	r0, r0, #31
 80105dc:	4770      	bx	lr
	...

080105e0 <scalbn>:
 80105e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80105e6:	4604      	mov	r4, r0
 80105e8:	460d      	mov	r5, r1
 80105ea:	4617      	mov	r7, r2
 80105ec:	460b      	mov	r3, r1
 80105ee:	b996      	cbnz	r6, 8010616 <scalbn+0x36>
 80105f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80105f4:	4303      	orrs	r3, r0
 80105f6:	d039      	beq.n	801066c <scalbn+0x8c>
 80105f8:	4b33      	ldr	r3, [pc, #204]	; (80106c8 <scalbn+0xe8>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	f7ef ff76 	bl	80004ec <__aeabi_dmul>
 8010600:	4b32      	ldr	r3, [pc, #200]	; (80106cc <scalbn+0xec>)
 8010602:	4604      	mov	r4, r0
 8010604:	429f      	cmp	r7, r3
 8010606:	460d      	mov	r5, r1
 8010608:	da0f      	bge.n	801062a <scalbn+0x4a>
 801060a:	a32b      	add	r3, pc, #172	; (adr r3, 80106b8 <scalbn+0xd8>)
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	f7ef ff6c 	bl	80004ec <__aeabi_dmul>
 8010614:	e006      	b.n	8010624 <scalbn+0x44>
 8010616:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801061a:	4296      	cmp	r6, r2
 801061c:	d10a      	bne.n	8010634 <scalbn+0x54>
 801061e:	4602      	mov	r2, r0
 8010620:	f7ef fdae 	bl	8000180 <__adddf3>
 8010624:	4604      	mov	r4, r0
 8010626:	460d      	mov	r5, r1
 8010628:	e020      	b.n	801066c <scalbn+0x8c>
 801062a:	460b      	mov	r3, r1
 801062c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010630:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8010634:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8010638:	19b9      	adds	r1, r7, r6
 801063a:	4291      	cmp	r1, r2
 801063c:	dd0e      	ble.n	801065c <scalbn+0x7c>
 801063e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8010642:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8010646:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801064a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801064e:	4820      	ldr	r0, [pc, #128]	; (80106d0 <scalbn+0xf0>)
 8010650:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8010654:	a31a      	add	r3, pc, #104	; (adr r3, 80106c0 <scalbn+0xe0>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	e7d9      	b.n	8010610 <scalbn+0x30>
 801065c:	2900      	cmp	r1, #0
 801065e:	dd08      	ble.n	8010672 <scalbn+0x92>
 8010660:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010668:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801066c:	4620      	mov	r0, r4
 801066e:	4629      	mov	r1, r5
 8010670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010672:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8010676:	da12      	bge.n	801069e <scalbn+0xbe>
 8010678:	f24c 3350 	movw	r3, #50000	; 0xc350
 801067c:	429f      	cmp	r7, r3
 801067e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8010682:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8010686:	dcdc      	bgt.n	8010642 <scalbn+0x62>
 8010688:	a30b      	add	r3, pc, #44	; (adr r3, 80106b8 <scalbn+0xd8>)
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8010692:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8010696:	480f      	ldr	r0, [pc, #60]	; (80106d4 <scalbn+0xf4>)
 8010698:	f041 011f 	orr.w	r1, r1, #31
 801069c:	e7b8      	b.n	8010610 <scalbn+0x30>
 801069e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80106a2:	3136      	adds	r1, #54	; 0x36
 80106a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80106a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80106ac:	4620      	mov	r0, r4
 80106ae:	4629      	mov	r1, r5
 80106b0:	2200      	movs	r2, #0
 80106b2:	4b09      	ldr	r3, [pc, #36]	; (80106d8 <scalbn+0xf8>)
 80106b4:	e7ac      	b.n	8010610 <scalbn+0x30>
 80106b6:	bf00      	nop
 80106b8:	c2f8f359 	.word	0xc2f8f359
 80106bc:	01a56e1f 	.word	0x01a56e1f
 80106c0:	8800759c 	.word	0x8800759c
 80106c4:	7e37e43c 	.word	0x7e37e43c
 80106c8:	43500000 	.word	0x43500000
 80106cc:	ffff3cb0 	.word	0xffff3cb0
 80106d0:	8800759c 	.word	0x8800759c
 80106d4:	c2f8f359 	.word	0xc2f8f359
 80106d8:	3c900000 	.word	0x3c900000

080106dc <_init>:
 80106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106de:	bf00      	nop
 80106e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106e2:	bc08      	pop	{r3}
 80106e4:	469e      	mov	lr, r3
 80106e6:	4770      	bx	lr

080106e8 <_fini>:
 80106e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ea:	bf00      	nop
 80106ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ee:	bc08      	pop	{r3}
 80106f0:	469e      	mov	lr, r3
 80106f2:	4770      	bx	lr
