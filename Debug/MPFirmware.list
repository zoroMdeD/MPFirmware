
MPFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bc8  0800f9f8  0800f9f8  0001f9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115c0  080115c0  000301f8  2**0
                  CONTENTS
  4 .ARM          00000000  080115c0  080115c0  000301f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080115c0  080115c0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115c0  080115c0  000215c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115c4  080115c4  000215c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080115c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  200001f8  080117c0  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d10  080117c0  00031d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b48f  00000000  00000000  00030221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a1f  00000000  00000000  0004b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000500d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00051b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000acc8  00000000  00000000  00053398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028822  00000000  00000000  0005e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba5e  00000000  00000000  00086882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001222e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b0  00000000  00000000  00122330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f9dc 	.word	0x0800f9dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800f9dc 	.word	0x0800f9dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d107      	bne.n	8000abc <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	e055      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	if (!s2)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10d      	bne.n	8000ade <cJSON_strcasecmp+0x42>
		return 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e050      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <cJSON_strcasecmp+0x36>
			return 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e04a      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <cJSON_strcasecmp+0x62>
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	f103 0220 	add.w	r2, r3, #32
 8000afc:	e000      	b.n	8000b00 <cJSON_strcasecmp+0x64>
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	491a      	ldr	r1, [pc, #104]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b0c:	440b      	add	r3, r1
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <cJSON_strcasecmp+0x82>
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	e000      	b.n	8000b20 <cJSON_strcasecmp+0x84>
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d0d0      	beq.n	8000ac6 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	737b      	strb	r3, [r7, #13]
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d103      	bne.n	8000b44 <cJSON_strcasecmp+0xa8>
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	f103 0220 	add.w	r2, r3, #32
 8000b42:	e000      	b.n	8000b46 <cJSON_strcasecmp+0xaa>
 8000b44:	7b7a      	ldrb	r2, [r7, #13]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	733b      	strb	r3, [r7, #12]
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4908      	ldr	r1, [pc, #32]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b52:	440b      	add	r3, r1
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d102      	bne.n	8000b64 <cJSON_strcasecmp+0xc8>
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	3320      	adds	r3, #32
 8000b62:	e000      	b.n	8000b66 <cJSON_strcasecmp+0xca>
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	1ad3      	subs	r3, r2, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	080111ac 	.word	0x080111ac

08000b78 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <cJSON_New_Item+0x2c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2028      	movs	r0, #40	; 0x28
 8000b84:	4798      	blx	r3
 8000b86:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <cJSON_New_Item+0x20>
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f00b f890 	bl	800bcb8 <memset>
	return node;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8000bb0:	e037      	b.n	8000c22 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d108      	bne.n	8000bd6 <cJSON_Delete+0x2e>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <cJSON_Delete+0x2e>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffe9 	bl	8000ba8 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d109      	bne.n	8000bf6 <cJSON_Delete+0x4e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <cJSON_Delete+0x4e>
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <cJSON_Delete+0x8c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	6912      	ldr	r2, [r2, #16]
 8000bf2:	4610      	mov	r0, r2
 8000bf4:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <cJSON_Delete+0x6e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <cJSON_Delete+0x6e>
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <cJSON_Delete+0x8c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6a12      	ldr	r2, [r2, #32]
 8000c12:	4610      	mov	r0, r2
 8000c14:	4798      	blx	r3
		cJSON_free(c);
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <cJSON_Delete+0x8c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	4798      	blx	r3
		c=next;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	607b      	str	r3, [r7, #4]
	while (c)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1c4      	bne.n	8000bb2 <cJSON_Delete+0xa>
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004

08000c38 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <parse_number+0x210>)
 8000c54:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b2d      	cmp	r3, #45	; 0x2d
 8000c72:	d107      	bne.n	8000c84 <parse_number+0x4c>
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	4b74      	ldr	r3, [pc, #464]	; (8000e4c <parse_number+0x214>)
 8000c7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b30      	cmp	r3, #48	; 0x30
 8000c8a:	d102      	bne.n	8000c92 <parse_number+0x5a>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b30      	cmp	r3, #48	; 0x30
 8000c98:	d928      	bls.n	8000cec <parse_number+0xb4>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b39      	cmp	r3, #57	; 0x39
 8000ca0:	d824      	bhi.n	8000cec <parse_number+0xb4>
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	; (8000e50 <parse_number+0x218>)
 8000ca8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000cac:	f7ff fc1e 	bl	80004ec <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4614      	mov	r4, r2
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b30      	subs	r3, #48	; 0x30
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fba8 	bl	8000418 <__aeabi_i2d>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fa56 	bl	8000180 <__adddf3>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ce2:	d903      	bls.n	8000cec <parse_number+0xb4>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b39      	cmp	r3, #57	; 0x39
 8000cea:	d9da      	bls.n	8000ca2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cf2:	d13c      	bne.n	8000d6e <parse_number+0x136>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8000cfc:	d937      	bls.n	8000d6e <parse_number+0x136>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b39      	cmp	r3, #57	; 0x39
 8000d06:	d832      	bhi.n	8000d6e <parse_number+0x136>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <parse_number+0x218>)
 8000d14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d18:	f7ff fbe8 	bl	80004ec <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4614      	mov	r4, r2
 8000d22:	461d      	mov	r5, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	603a      	str	r2, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3b30      	subs	r3, #48	; 0x30
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb72 	bl	8000418 <__aeabi_i2d>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa20 	bl	8000180 <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <parse_number+0x210>)
 8000d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d52:	f7ff fa13 	bl	800017c <__aeabi_dsub>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b2f      	cmp	r3, #47	; 0x2f
 8000d64:	d903      	bls.n	8000d6e <parse_number+0x136>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b39      	cmp	r3, #57	; 0x39
 8000d6c:	d9cf      	bls.n	8000d0e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b65      	cmp	r3, #101	; 0x65
 8000d74:	d003      	beq.n	8000d7e <parse_number+0x146>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b45      	cmp	r3, #69	; 0x45
 8000d7c:	d12a      	bne.n	8000dd4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b2b      	cmp	r3, #43	; 0x2b
 8000d8a:	d103      	bne.n	8000d94 <parse_number+0x15c>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	e017      	b.n	8000dc4 <parse_number+0x18c>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b2d      	cmp	r3, #45	; 0x2d
 8000d9a:	d113      	bne.n	8000dc4 <parse_number+0x18c>
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8000da8:	e00c      	b.n	8000dc4 <parse_number+0x18c>
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	603a      	str	r2, [r7, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3b30      	subs	r3, #48	; 0x30
 8000dc0:	440b      	add	r3, r1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8000dca:	d903      	bls.n	8000dd4 <parse_number+0x19c>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b39      	cmp	r3, #57	; 0x39
 8000dd2:	d9ea      	bls.n	8000daa <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8000dd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ddc:	f7ff fb86 	bl	80004ec <__aeabi_dmul>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4614      	mov	r4, r2
 8000de6:	461d      	mov	r5, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb11 	bl	8000418 <__aeabi_i2d>
 8000df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dfa:	f7ff f9c1 	bl	8000180 <__adddf3>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4912      	ldr	r1, [pc, #72]	; (8000e50 <parse_number+0x218>)
 8000e08:	f00d ff04 	bl	800ec14 <pow>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4620      	mov	r0, r4
 8000e12:	4629      	mov	r1, r5
 8000e14:	f7ff fb6a 	bl	80004ec <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e26:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8000e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2e:	f7ff fe0d 	bl	8000a4c <__aeabi_d2iz>
 8000e32:	4602      	mov	r2, r0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	60da      	str	r2, [r3, #12]
	return num;
 8000e3e:	683b      	ldr	r3, [r7, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bdb0      	pop	{r4, r5, r7, pc}
 8000e48:	3ff00000 	.word	0x3ff00000
 8000e4c:	bff00000 	.word	0xbff00000
 8000e50:	40240000 	.word	0x40240000

08000e54 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b2f      	cmp	r3, #47	; 0x2f
 8000e66:	d90b      	bls.n	8000e80 <parse_hex4+0x2c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b39      	cmp	r3, #57	; 0x39
 8000e6e:	d807      	bhi.n	8000e80 <parse_hex4+0x2c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b30      	subs	r3, #48	; 0x30
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e021      	b.n	8000ec4 <parse_hex4+0x70>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b40      	cmp	r3, #64	; 0x40
 8000e86:	d90b      	bls.n	8000ea0 <parse_hex4+0x4c>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b46      	cmp	r3, #70	; 0x46
 8000e8e:	d807      	bhi.n	8000ea0 <parse_hex4+0x4c>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b37      	subs	r3, #55	; 0x37
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	e011      	b.n	8000ec4 <parse_hex4+0x70>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b60      	cmp	r3, #96	; 0x60
 8000ea6:	d90b      	bls.n	8000ec0 <parse_hex4+0x6c>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b66      	cmp	r3, #102	; 0x66
 8000eae:	d807      	bhi.n	8000ec0 <parse_hex4+0x6c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b57      	subs	r3, #87	; 0x57
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e001      	b.n	8000ec4 <parse_hex4+0x70>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e0a8      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed6:	d90b      	bls.n	8000ef0 <parse_hex4+0x9c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b39      	cmp	r3, #57	; 0x39
 8000ede:	d807      	bhi.n	8000ef0 <parse_hex4+0x9c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	3b30      	subs	r3, #48	; 0x30
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e021      	b.n	8000f34 <parse_hex4+0xe0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b40      	cmp	r3, #64	; 0x40
 8000ef6:	d90b      	bls.n	8000f10 <parse_hex4+0xbc>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b46      	cmp	r3, #70	; 0x46
 8000efe:	d807      	bhi.n	8000f10 <parse_hex4+0xbc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b37      	subs	r3, #55	; 0x37
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e011      	b.n	8000f34 <parse_hex4+0xe0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b60      	cmp	r3, #96	; 0x60
 8000f16:	d90b      	bls.n	8000f30 <parse_hex4+0xdc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b66      	cmp	r3, #102	; 0x66
 8000f1e:	d807      	bhi.n	8000f30 <parse_hex4+0xdc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b57      	subs	r3, #87	; 0x57
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e001      	b.n	8000f34 <parse_hex4+0xe0>
 8000f30:	2300      	movs	r3, #0
 8000f32:	e070      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b2f      	cmp	r3, #47	; 0x2f
 8000f46:	d90b      	bls.n	8000f60 <parse_hex4+0x10c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b39      	cmp	r3, #57	; 0x39
 8000f4e:	d807      	bhi.n	8000f60 <parse_hex4+0x10c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	3b30      	subs	r3, #48	; 0x30
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e021      	b.n	8000fa4 <parse_hex4+0x150>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d90b      	bls.n	8000f80 <parse_hex4+0x12c>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b46      	cmp	r3, #70	; 0x46
 8000f6e:	d807      	bhi.n	8000f80 <parse_hex4+0x12c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b37      	subs	r3, #55	; 0x37
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e011      	b.n	8000fa4 <parse_hex4+0x150>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b60      	cmp	r3, #96	; 0x60
 8000f86:	d90b      	bls.n	8000fa0 <parse_hex4+0x14c>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b66      	cmp	r3, #102	; 0x66
 8000f8e:	d807      	bhi.n	8000fa0 <parse_hex4+0x14c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b57      	subs	r3, #87	; 0x57
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e001      	b.n	8000fa4 <parse_hex4+0x150>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e038      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb6:	d90b      	bls.n	8000fd0 <parse_hex4+0x17c>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b39      	cmp	r3, #57	; 0x39
 8000fbe:	d807      	bhi.n	8000fd0 <parse_hex4+0x17c>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b30      	subs	r3, #48	; 0x30
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e021      	b.n	8001014 <parse_hex4+0x1c0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	d90b      	bls.n	8000ff0 <parse_hex4+0x19c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b46      	cmp	r3, #70	; 0x46
 8000fde:	d807      	bhi.n	8000ff0 <parse_hex4+0x19c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b37      	subs	r3, #55	; 0x37
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e011      	b.n	8001014 <parse_hex4+0x1c0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b60      	cmp	r3, #96	; 0x60
 8000ff6:	d90b      	bls.n	8001010 <parse_hex4+0x1bc>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b66      	cmp	r3, #102	; 0x66
 8000ffe:	d807      	bhi.n	8001010 <parse_hex4+0x1bc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	3b57      	subs	r3, #87	; 0x57
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e001      	b.n	8001014 <parse_hex4+0x1c0>
 8001010:	2300      	movs	r3, #0
 8001012:	e000      	b.n	8001016 <parse_hex4+0x1c2>
	return h;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b22      	cmp	r3, #34	; 0x22
 800103a:	d00d      	beq.n	8001058 <parse_string+0x38>
 800103c:	4aa3      	ldr	r2, [pc, #652]	; (80012cc <parse_string+0x2ac>)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	e168      	b.n	8001318 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	61fa      	str	r2, [r7, #28]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b5c      	cmp	r3, #92	; 0x5c
 8001050:	d102      	bne.n	8001058 <parse_string+0x38>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b22      	cmp	r3, #34	; 0x22
 800105e:	d009      	beq.n	8001074 <parse_string+0x54>
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <parse_string+0x54>
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e8      	bne.n	8001046 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <parse_string+0x2b0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	3201      	adds	r2, #1
 800107c:	4610      	mov	r0, r2
 800107e:	4798      	blx	r3
 8001080:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <parse_string+0x6c>
 8001088:	2300      	movs	r3, #0
 800108a:	e145      	b.n	8001318 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001096:	e125      	b.n	80012e4 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b5c      	cmp	r3, #92	; 0x5c
 800109e:	d008      	beq.n	80010b2 <parse_string+0x92>
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	1c53      	adds	r3, r2, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1c59      	adds	r1, r3, #1
 80010aa:	61b9      	str	r1, [r7, #24]
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e118      	b.n	80012e4 <parse_string+0x2c4>
		else
		{
			ptr++;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b62      	subs	r3, #98	; 0x62
 80010be:	2b13      	cmp	r3, #19
 80010c0:	f200 80fc 	bhi.w	80012bc <parse_string+0x29c>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <parse_string+0xac>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	080012bd 	.word	0x080012bd
 80010d4:	080012bd 	.word	0x080012bd
 80010d8:	080012bd 	.word	0x080012bd
 80010dc:	08001129 	.word	0x08001129
 80010e0:	080012bd 	.word	0x080012bd
 80010e4:	080012bd 	.word	0x080012bd
 80010e8:	080012bd 	.word	0x080012bd
 80010ec:	080012bd 	.word	0x080012bd
 80010f0:	080012bd 	.word	0x080012bd
 80010f4:	080012bd 	.word	0x080012bd
 80010f8:	080012bd 	.word	0x080012bd
 80010fc:	08001135 	.word	0x08001135
 8001100:	080012bd 	.word	0x080012bd
 8001104:	080012bd 	.word	0x080012bd
 8001108:	080012bd 	.word	0x080012bd
 800110c:	08001141 	.word	0x08001141
 8001110:	080012bd 	.word	0x080012bd
 8001114:	0800114d 	.word	0x0800114d
 8001118:	08001159 	.word	0x08001159
			{
				case 'b': *ptr2++='\b';	break;
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	61ba      	str	r2, [r7, #24]
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e0da      	b.n	80012de <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	61ba      	str	r2, [r7, #24]
 800112e:	220c      	movs	r2, #12
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e0d4      	b.n	80012de <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	61ba      	str	r2, [r7, #24]
 800113a:	220a      	movs	r2, #10
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e0ce      	b.n	80012de <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	61ba      	str	r2, [r7, #24]
 8001146:	220d      	movs	r2, #13
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e0c8      	b.n	80012de <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	61ba      	str	r2, [r7, #24]
 8001152:	2209      	movs	r2, #9
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e0c2      	b.n	80012de <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	3301      	adds	r3, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe79 	bl	8000e54 <parse_hex4>
 8001162:	6138      	str	r0, [r7, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3304      	adds	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001170:	d304      	bcc.n	800117c <parse_string+0x15c>
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001178:	f0c0 80b0 	bcc.w	80012dc <parse_string+0x2bc>
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80ac 	beq.w	80012dc <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800118a:	d32d      	bcc.n	80011e8 <parse_string+0x1c8>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001192:	d229      	bcs.n	80011e8 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	3301      	adds	r3, #1
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b5c      	cmp	r3, #92	; 0x5c
 800119c:	f040 809e 	bne.w	80012dc <parse_string+0x2bc>
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3302      	adds	r3, #2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b75      	cmp	r3, #117	; 0x75
 80011a8:	f040 8098 	bne.w	80012dc <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3303      	adds	r3, #3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe4f 	bl	8000e54 <parse_hex4>
 80011b6:	60b8      	str	r0, [r7, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3306      	adds	r3, #6
 80011bc:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80011c4:	f0c0 808a 	bcc.w	80012dc <parse_string+0x2bc>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80011ce:	f080 8085 	bcs.w	80012dc <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	029a      	lsls	r2, r3, #10
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <parse_string+0x2b4>)
 80011d8:	4013      	ands	r3, r2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011e6:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b7f      	cmp	r3, #127	; 0x7f
 80011f0:	d802      	bhi.n	80011f8 <parse_string+0x1d8>
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e00c      	b.n	8001212 <parse_string+0x1f2>
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011fe:	d202      	bcs.n	8001206 <parse_string+0x1e6>
 8001200:	2302      	movs	r3, #2
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e005      	b.n	8001212 <parse_string+0x1f2>
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d201      	bcs.n	8001212 <parse_string+0x1f2>
 800120e:	2303      	movs	r3, #3
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4413      	add	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3b01      	subs	r3, #1
 800121e:	2b03      	cmp	r3, #3
 8001220:	d847      	bhi.n	80012b2 <parse_string+0x292>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <parse_string+0x208>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001299 	.word	0x08001299
 800122c:	08001279 	.word	0x08001279
 8001230:	08001259 	.word	0x08001259
 8001234:	08001239 	.word	0x08001239
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	b2db      	uxtb	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	3a01      	subs	r2, #1
 8001246:	61ba      	str	r2, [r7, #24]
 8001248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124c:	b2da      	uxtb	r2, r3
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	099b      	lsrs	r3, r3, #6
 8001256:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	b2db      	uxtb	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	3a01      	subs	r2, #1
 8001266:	61ba      	str	r2, [r7, #24]
 8001268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800126c:	b2da      	uxtb	r2, r3
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	3a01      	subs	r2, #1
 8001286:	61ba      	str	r2, [r7, #24]
 8001288:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800128c:	b2da      	uxtb	r2, r3
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	099b      	lsrs	r3, r3, #6
 8001296:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <parse_string+0x2b8>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	69b9      	ldr	r1, [r7, #24]
 80012a6:	3901      	subs	r1, #1
 80012a8:	61b9      	str	r1, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4413      	add	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
					break;
 80012ba:	e010      	b.n	80012de <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61ba      	str	r2, [r7, #24]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e009      	b.n	80012de <parse_string+0x2be>
 80012ca:	bf00      	nop
 80012cc:	20000214 	.word	0x20000214
 80012d0:	20000000 	.word	0x20000000
 80012d4:	000ffc00 	.word	0x000ffc00
 80012d8:	0800fee0 	.word	0x0800fee0
			}
			ptr++;
 80012dc:	bf00      	nop
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b22      	cmp	r3, #34	; 0x22
 80012ea:	d004      	beq.n	80012f6 <parse_string+0x2d6>
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f47f aed1 	bne.w	8001098 <parse_string+0x78>
		}
	}
	*ptr2=0;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b22      	cmp	r3, #34	; 0x22
 8001302:	d102      	bne.n	800130a <parse_string+0x2ea>
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2204      	movs	r2, #4
 8001314:	60da      	str	r2, [r3, #12]
	return ptr;
 8001316:	69fb      	ldr	r3, [r7, #28]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	e002      	b.n	8001330 <skip+0x10>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <skip+0x26>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <skip+0x26>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b20      	cmp	r3, #32
 8001344:	d9f1      	bls.n	800132a <skip+0xa>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001364:	f7ff fc08 	bl	8000b78 <cJSON_New_Item>
 8001368:	6138      	str	r0, [r7, #16]
	ep=0;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <cJSON_ParseWithOpts+0x84>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <cJSON_ParseWithOpts+0x26>
 8001376:	2300      	movs	r3, #0
 8001378:	e02a      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ffd0 	bl	8001320 <skip>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	6938      	ldr	r0, [r7, #16]
 8001386:	f000 f837 	bl	80013f8 <parse_value>
 800138a:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d104      	bne.n	800139c <cJSON_ParseWithOpts+0x48>
 8001392:	6938      	ldr	r0, [r7, #16]
 8001394:	f7ff fc08 	bl	8000ba8 <cJSON_Delete>
 8001398:	2300      	movs	r3, #0
 800139a:	e019      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00f      	beq.n	80013c2 <cJSON_ParseWithOpts+0x6e>
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ffbc 	bl	8001320 <skip>
 80013a8:	6178      	str	r0, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <cJSON_ParseWithOpts+0x6e>
 80013b2:	6938      	ldr	r0, [r7, #16]
 80013b4:	f7ff fbf8 	bl	8000ba8 <cJSON_Delete>
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <cJSON_ParseWithOpts+0x84>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	e006      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <cJSON_ParseWithOpts+0x7a>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	601a      	str	r2, [r3, #0]
	return c;
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000214 	.word	0x20000214

080013dc <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffb3 	bl	8001354 <cJSON_ParseWithOpts>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <parse_value+0x14>
 8001408:	2300      	movs	r3, #0
 800140a:	e060      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 800140c:	2204      	movs	r2, #4
 800140e:	4932      	ldr	r1, [pc, #200]	; (80014d8 <parse_value+0xe0>)
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f00b f9f9 	bl	800c808 <strncmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <parse_value+0x30>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	e052      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001428:	2205      	movs	r2, #5
 800142a:	492c      	ldr	r1, [pc, #176]	; (80014dc <parse_value+0xe4>)
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f00b f9eb 	bl	800c808 <strncmp>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <parse_value+0x4c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3305      	adds	r3, #5
 8001442:	e044      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001444:	2204      	movs	r2, #4
 8001446:	4926      	ldr	r1, [pc, #152]	; (80014e0 <parse_value+0xe8>)
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f00b f9dd 	bl	800c808 <strncmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <parse_value+0x6e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	e033      	b.n	80014ce <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b22      	cmp	r3, #34	; 0x22
 800146c:	d105      	bne.n	800147a <parse_value+0x82>
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fdd5 	bl	8001020 <parse_string>
 8001476:	4603      	mov	r3, r0
 8001478:	e029      	b.n	80014ce <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b2d      	cmp	r3, #45	; 0x2d
 8001480:	d007      	beq.n	8001492 <parse_value+0x9a>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b2f      	cmp	r3, #47	; 0x2f
 8001488:	d909      	bls.n	800149e <parse_value+0xa6>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b39      	cmp	r3, #57	; 0x39
 8001490:	d805      	bhi.n	800149e <parse_value+0xa6>
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fbcf 	bl	8000c38 <parse_number>
 800149a:	4603      	mov	r3, r0
 800149c:	e017      	b.n	80014ce <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b5b      	cmp	r3, #91	; 0x5b
 80014a4:	d105      	bne.n	80014b2 <parse_value+0xba>
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f81d 	bl	80014e8 <parse_array>
 80014ae:	4603      	mov	r3, r0
 80014b0:	e00d      	b.n	80014ce <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b7b      	cmp	r3, #123	; 0x7b
 80014b8:	d105      	bne.n	80014c6 <parse_value+0xce>
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f889 	bl	80015d4 <parse_object>
 80014c2:	4603      	mov	r3, r0
 80014c4:	e003      	b.n	80014ce <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <parse_value+0xec>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800fa24 	.word	0x0800fa24
 80014dc:	0800fa2c 	.word	0x0800fa2c
 80014e0:	0800fa34 	.word	0x0800fa34
 80014e4:	20000214 	.word	0x20000214

080014e8 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b5b      	cmp	r3, #91	; 0x5b
 80014f8:	d004      	beq.n	8001504 <parse_array+0x1c>
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <parse_array+0xe8>)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	e060      	b.n	80015c6 <parse_array+0xde>

	item->type=cJSON_Array;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff06 	bl	8001320 <skip>
 8001514:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b5d      	cmp	r3, #93	; 0x5d
 800151c:	d102      	bne.n	8001524 <parse_array+0x3c>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	e050      	b.n	80015c6 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001524:	f7ff fb28 	bl	8000b78 <cJSON_New_Item>
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <parse_array+0x54>
 8001538:	2300      	movs	r3, #0
 800153a:	e044      	b.n	80015c6 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7ff feef 	bl	8001320 <skip>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ff56 	bl	80013f8 <parse_value>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fee6 	bl	8001320 <skip>
 8001554:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d125      	bne.n	80015a8 <parse_array+0xc0>
 800155c:	2300      	movs	r3, #0
 800155e:	e032      	b.n	80015c6 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001560:	f7ff fb0a 	bl	8000b78 <cJSON_New_Item>
 8001564:	60b8      	str	r0, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <parse_array+0x88>
 800156c:	2300      	movs	r3, #0
 800156e:	e02a      	b.n	80015c6 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fecb 	bl	8001320 <skip>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f7ff ff32 	bl	80013f8 <parse_value>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fec2 	bl	8001320 <skip>
 800159c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <parse_array+0xc0>
 80015a4:	2300      	movs	r3, #0
 80015a6:	e00e      	b.n	80015c6 <parse_array+0xde>
	while (*value==',')
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b2c      	cmp	r3, #44	; 0x2c
 80015ae:	d0d7      	beq.n	8001560 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b5d      	cmp	r3, #93	; 0x5d
 80015b6:	d102      	bne.n	80015be <parse_array+0xd6>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	e003      	b.n	80015c6 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <parse_array+0xe8>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000214 	.word	0x20000214

080015d4 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b7b      	cmp	r3, #123	; 0x7b
 80015e4:	d004      	beq.n	80015f0 <parse_object+0x1c>
 80015e6:	4a59      	ldr	r2, [pc, #356]	; (800174c <parse_object+0x178>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	e0a8      	b.n	8001742 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2206      	movs	r2, #6
 80015f4:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe90 	bl	8001320 <skip>
 8001600:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b7d      	cmp	r3, #125	; 0x7d
 8001608:	d102      	bne.n	8001610 <parse_object+0x3c>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	e098      	b.n	8001742 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001610:	f7ff fab2 	bl	8000b78 <cJSON_New_Item>
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <parse_object+0x54>
 8001624:	2300      	movs	r3, #0
 8001626:	e08c      	b.n	8001742 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff fe79 	bl	8001320 <skip>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff fcf4 	bl	8001020 <parse_string>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fe70 	bl	8001320 <skip>
 8001640:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <parse_object+0x78>
 8001648:	2300      	movs	r3, #0
 800164a:	e07a      	b.n	8001742 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b3a      	cmp	r3, #58	; 0x3a
 8001660:	d004      	beq.n	800166c <parse_object+0x98>
 8001662:	4a3a      	ldr	r2, [pc, #232]	; (800174c <parse_object+0x178>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	e06a      	b.n	8001742 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe55 	bl	8001320 <skip>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff febc 	bl	80013f8 <parse_value>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe4c 	bl	8001320 <skip>
 8001688:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d149      	bne.n	8001724 <parse_object+0x150>
 8001690:	2300      	movs	r3, #0
 8001692:	e056      	b.n	8001742 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001694:	f7ff fa70 	bl	8000b78 <cJSON_New_Item>
 8001698:	60b8      	str	r0, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <parse_object+0xd0>
 80016a0:	2300      	movs	r3, #0
 80016a2:	e04e      	b.n	8001742 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe31 	bl	8001320 <skip>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fcac 	bl	8001020 <parse_string>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe28 	bl	8001320 <skip>
 80016d0:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <parse_object+0x108>
 80016d8:	2300      	movs	r3, #0
 80016da:	e032      	b.n	8001742 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	621a      	str	r2, [r3, #32]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b3a      	cmp	r3, #58	; 0x3a
 80016f0:	d004      	beq.n	80016fc <parse_object+0x128>
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <parse_object+0x178>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	e022      	b.n	8001742 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe0d 	bl	8001320 <skip>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fe74 	bl	80013f8 <parse_value>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe04 	bl	8001320 <skip>
 8001718:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <parse_object+0x150>
 8001720:	2300      	movs	r3, #0
 8001722:	e00e      	b.n	8001742 <parse_object+0x16e>
	while (*value==',')
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b2c      	cmp	r3, #44	; 0x2c
 800172a:	d0b3      	beq.n	8001694 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b7d      	cmp	r3, #125	; 0x7d
 8001732:	d102      	bne.n	800173a <parse_object+0x166>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	e003      	b.n	8001742 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <parse_object+0x178>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000214 	.word	0x20000214

08001750 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e002      	b.n	8001768 <cJSON_GetObjectItem+0x18>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <cJSON_GetObjectItem+0x30>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f991 	bl	8000a9c <cJSON_strcasecmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <cJSON_GetObjectItem+0x12>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <json_input>:
int Time_Server = 0;	//Переменная системного времени сервера
int Time_Client = 0;	//Переменная системного времени клиента

//Функция разбора полученной строки JSON
void json_input(char *text)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	; 0x38
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe21 	bl	80013dc <cJSON_Parse>
 800179a:	6378      	str	r0, [r7, #52]	; 0x34

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 800179c:	499e      	ldr	r1, [pc, #632]	; (8001a18 <json_input+0x28c>)
 800179e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017a0:	f7ff ffd6 	bl	8001750 <cJSON_GetObjectItem>
 80017a4:	6338      	str	r0, [r7, #48]	; 0x30
	TIME = stime->valuestring;
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4a9c      	ldr	r2, [pc, #624]	; (8001a1c <json_input+0x290>)
 80017ac:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 80017ae:	4b9b      	ldr	r3, [pc, #620]	; (8001a1c <json_input+0x290>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00a fa34 	bl	800bc20 <atoi>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a99      	ldr	r2, [pc, #612]	; (8001a20 <json_input+0x294>)
 80017bc:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 80017be:	4b98      	ldr	r3, [pc, #608]	; (8001a20 <json_input+0x294>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <json_input+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	f340 811b 	ble.w	8001a02 <json_input+0x276>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 80017cc:	4996      	ldr	r1, [pc, #600]	; (8001a28 <json_input+0x29c>)
 80017ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017d0:	f7ff ffbe 	bl	8001750 <cJSON_GetObjectItem>
 80017d4:	62f8      	str	r0, [r7, #44]	; 0x2c
		INSTRUCTION = sInstruction->valuestring;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	4a94      	ldr	r2, [pc, #592]	; (8001a2c <json_input+0x2a0>)
 80017dc:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 80017de:	4b93      	ldr	r3, [pc, #588]	; (8001a2c <json_input+0x2a0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4993      	ldr	r1, [pc, #588]	; (8001a30 <json_input+0x2a4>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcb3 	bl	8000150 <strcmp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d168      	bne.n	80018c2 <json_input+0x136>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80017f0:	4990      	ldr	r1, [pc, #576]	; (8001a34 <json_input+0x2a8>)
 80017f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f4:	f7ff ffac 	bl	8001750 <cJSON_GetObjectItem>
 80017f8:	4603      	mov	r3, r0
 80017fa:	498f      	ldr	r1, [pc, #572]	; (8001a38 <json_input+0x2ac>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffa7 	bl	8001750 <cJSON_GetObjectItem>
 8001802:	61b8      	str	r0, [r7, #24]
			TYPE = sType->valuestring;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a8c      	ldr	r2, [pc, #560]	; (8001a3c <json_input+0x2b0>)
 800180a:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 800180c:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <json_input+0x2b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	498b      	ldr	r1, [pc, #556]	; (8001a40 <json_input+0x2b4>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fc9c 	bl	8000150 <strcmp>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 80f7 	bne.w	8001a0e <json_input+0x282>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001820:	4984      	ldr	r1, [pc, #528]	; (8001a34 <json_input+0x2a8>)
 8001822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001824:	f7ff ff94 	bl	8001750 <cJSON_GetObjectItem>
 8001828:	4603      	mov	r3, r0
 800182a:	4986      	ldr	r1, [pc, #536]	; (8001a44 <json_input+0x2b8>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff8f 	bl	8001750 <cJSON_GetObjectItem>
 8001832:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001834:	497f      	ldr	r1, [pc, #508]	; (8001a34 <json_input+0x2a8>)
 8001836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001838:	f7ff ff8a 	bl	8001750 <cJSON_GetObjectItem>
 800183c:	4603      	mov	r3, r0
 800183e:	4982      	ldr	r1, [pc, #520]	; (8001a48 <json_input+0x2bc>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff85 	bl	8001750 <cJSON_GetObjectItem>
 8001846:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001848:	497a      	ldr	r1, [pc, #488]	; (8001a34 <json_input+0x2a8>)
 800184a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800184c:	f7ff ff80 	bl	8001750 <cJSON_GetObjectItem>
 8001850:	4603      	mov	r3, r0
 8001852:	497e      	ldr	r1, [pc, #504]	; (8001a4c <json_input+0x2c0>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff7b 	bl	8001750 <cJSON_GetObjectItem>
 800185a:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800185c:	4975      	ldr	r1, [pc, #468]	; (8001a34 <json_input+0x2a8>)
 800185e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001860:	f7ff ff76 	bl	8001750 <cJSON_GetObjectItem>
 8001864:	4603      	mov	r3, r0
 8001866:	497a      	ldr	r1, [pc, #488]	; (8001a50 <json_input+0x2c4>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff71 	bl	8001750 <cJSON_GetObjectItem>
 800186e:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a77      	ldr	r2, [pc, #476]	; (8001a54 <json_input+0x2c8>)
 8001876:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	4a76      	ldr	r2, [pc, #472]	; (8001a58 <json_input+0x2cc>)
 800187e:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a75      	ldr	r2, [pc, #468]	; (8001a5c <json_input+0x2d0>)
 8001886:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	4a74      	ldr	r2, [pc, #464]	; (8001a60 <json_input+0x2d4>)
 800188e:	6013      	str	r3, [r2, #0]

				cJSON_Delete(json);
 8001890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001892:	f7ff f989 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 8001896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001898:	f00a f9f8 	bl	800bc8c <free>
				free(sInstruction);
 800189c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189e:	f00a f9f5 	bl	800bc8c <free>
				free(sType);
 80018a2:	69b8      	ldr	r0, [r7, #24]
 80018a4:	f00a f9f2 	bl	800bc8c <free>
				free(s1);
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f00a f9ef 	bl	800bc8c <free>
				free(s2);
 80018ae:	6938      	ldr	r0, [r7, #16]
 80018b0:	f00a f9ec 	bl	800bc8c <free>
				free(s3);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f00a f9e9 	bl	800bc8c <free>
				free(s4);
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f00a f9e6 	bl	800bc8c <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 80018c0:	e0a5      	b.n	8001a0e <json_input+0x282>
		else if(strcmp(INSTRUCTION, "UPDATE_FIRMWARE") == 0)
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <json_input+0x2a0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4967      	ldr	r1, [pc, #412]	; (8001a64 <json_input+0x2d8>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fc41 	bl	8000150 <strcmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 808f 	bne.w	80019f4 <json_input+0x268>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80018d6:	4957      	ldr	r1, [pc, #348]	; (8001a34 <json_input+0x2a8>)
 80018d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018da:	f7ff ff39 	bl	8001750 <cJSON_GetObjectItem>
 80018de:	4603      	mov	r3, r0
 80018e0:	4955      	ldr	r1, [pc, #340]	; (8001a38 <json_input+0x2ac>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff34 	bl	8001750 <cJSON_GetObjectItem>
 80018e8:	62b8      	str	r0, [r7, #40]	; 0x28
			TYPE = sType->valuestring;
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4a53      	ldr	r2, [pc, #332]	; (8001a3c <json_input+0x2b0>)
 80018f0:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "FILE_DOWNLOAD") == 0)
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <json_input+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	495c      	ldr	r1, [pc, #368]	; (8001a68 <json_input+0x2dc>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fc29 	bl	8000150 <strcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d152      	bne.n	80019aa <json_input+0x21e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "NAME");
 8001904:	494b      	ldr	r1, [pc, #300]	; (8001a34 <json_input+0x2a8>)
 8001906:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001908:	f7ff ff22 	bl	8001750 <cJSON_GetObjectItem>
 800190c:	4603      	mov	r3, r0
 800190e:	4957      	ldr	r1, [pc, #348]	; (8001a6c <json_input+0x2e0>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff1d 	bl	8001750 <cJSON_GetObjectItem>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VERSION");
 8001918:	4946      	ldr	r1, [pc, #280]	; (8001a34 <json_input+0x2a8>)
 800191a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800191c:	f7ff ff18 	bl	8001750 <cJSON_GetObjectItem>
 8001920:	4603      	mov	r3, r0
 8001922:	4953      	ldr	r1, [pc, #332]	; (8001a70 <json_input+0x2e4>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff13 	bl	8001750 <cJSON_GetObjectItem>
 800192a:	6238      	str	r0, [r7, #32]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SIZE");
 800192c:	4941      	ldr	r1, [pc, #260]	; (8001a34 <json_input+0x2a8>)
 800192e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001930:	f7ff ff0e 	bl	8001750 <cJSON_GetObjectItem>
 8001934:	4603      	mov	r3, r0
 8001936:	494f      	ldr	r1, [pc, #316]	; (8001a74 <json_input+0x2e8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff09 	bl	8001750 <cJSON_GetObjectItem>
 800193e:	61f8      	str	r0, [r7, #28]
				NAME_FW = s1->valuestring;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <json_input+0x2ec>)
 8001946:	6013      	str	r3, [r2, #0]
				VERSION_FW = s2->valuestring;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <json_input+0x2f0>)
 800194e:	6013      	str	r3, [r2, #0]
				SIZE_FW = s3->valuestring;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <json_input+0x2f4>)
 8001956:	6013      	str	r3, [r2, #0]
				firmware.NAME = NAME_FW;
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <json_input+0x2ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <json_input+0x2f8>)
 800195e:	6013      	str	r3, [r2, #0]
				firmware.VERSION = VERSION_FW;
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <json_input+0x2f0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <json_input+0x2f8>)
 8001966:	6053      	str	r3, [r2, #4]
				firmware.SIZE = atoi(SIZE_FW);
 8001968:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <json_input+0x2f4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f00a f957 	bl	800bc20 <atoi>
 8001972:	4603      	mov	r3, r0
 8001974:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <json_input+0x2f8>)
 8001976:	6093      	str	r3, [r2, #8]
				firmware.check_UPD = true;
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <json_input+0x2f8>)
 800197a:	2201      	movs	r2, #1
 800197c:	731a      	strb	r2, [r3, #12]
				cJSON_Delete(json);
 800197e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001980:	f7ff f912 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 8001984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001986:	f00a f981 	bl	800bc8c <free>
				free(sInstruction);
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f00a f97e 	bl	800bc8c <free>
				free(sType);
 8001990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001992:	f00a f97b 	bl	800bc8c <free>
				free(s1);
 8001996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001998:	f00a f978 	bl	800bc8c <free>
				free(s2);
 800199c:	6a38      	ldr	r0, [r7, #32]
 800199e:	f00a f975 	bl	800bc8c <free>
				free(s3);
 80019a2:	69f8      	ldr	r0, [r7, #28]
 80019a4:	f00a f972 	bl	800bc8c <free>
}
 80019a8:	e031      	b.n	8001a0e <json_input+0x282>
			else if(strcmp(TYPE, "RESET_MCU") == 0)
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <json_input+0x2b0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <json_input+0x2fc>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fbcd 	bl	8000150 <strcmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10e      	bne.n	80019da <json_input+0x24e>
				cJSON_Delete(json);
 80019bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019be:	f7ff f8f3 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 80019c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019c4:	f00a f962 	bl	800bc8c <free>
				free(sInstruction);
 80019c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ca:	f00a f95f 	bl	800bc8c <free>
				free(sType);
 80019ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019d0:	f00a f95c 	bl	800bc8c <free>
				HAL_NVIC_SystemReset();		//Перезапускаем контроллер
 80019d4:	f006 fead 	bl	8008732 <HAL_NVIC_SystemReset>
}
 80019d8:	e019      	b.n	8001a0e <json_input+0x282>
				cJSON_Delete(json);
 80019da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019dc:	f7ff f8e4 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 80019e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019e2:	f00a f953 	bl	800bc8c <free>
				free(sInstruction);
 80019e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019e8:	f00a f950 	bl	800bc8c <free>
				free(sType);
 80019ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ee:	f00a f94d 	bl	800bc8c <free>
}
 80019f2:	e00c      	b.n	8001a0e <json_input+0x282>
			free(stime);
 80019f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019f6:	f00a f949 	bl	800bc8c <free>
			free(sInstruction);
 80019fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019fc:	f00a f946 	bl	800bc8c <free>
}
 8001a00:	e005      	b.n	8001a0e <json_input+0x282>
		cJSON_Delete(json);
 8001a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a04:	f7ff f8d0 	bl	8000ba8 <cJSON_Delete>
		free(stime);
 8001a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a0a:	f00a f93f 	bl	800bc8c <free>
}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	; 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800fa40 	.word	0x0800fa40
 8001a1c:	2000024c 	.word	0x2000024c
 8001a20:	20000250 	.word	0x20000250
 8001a24:	20000254 	.word	0x20000254
 8001a28:	0800fa48 	.word	0x0800fa48
 8001a2c:	20000228 	.word	0x20000228
 8001a30:	0800fa54 	.word	0x0800fa54
 8001a34:	0800fa64 	.word	0x0800fa64
 8001a38:	0800fa6c 	.word	0x0800fa6c
 8001a3c:	2000022c 	.word	0x2000022c
 8001a40:	0800fa74 	.word	0x0800fa74
 8001a44:	0800fa80 	.word	0x0800fa80
 8001a48:	0800fa88 	.word	0x0800fa88
 8001a4c:	0800fa90 	.word	0x0800fa90
 8001a50:	0800fa98 	.word	0x0800fa98
 8001a54:	20000230 	.word	0x20000230
 8001a58:	20000238 	.word	0x20000238
 8001a5c:	20000234 	.word	0x20000234
 8001a60:	2000023c 	.word	0x2000023c
 8001a64:	0800faa0 	.word	0x0800faa0
 8001a68:	0800fab0 	.word	0x0800fab0
 8001a6c:	0800fac0 	.word	0x0800fac0
 8001a70:	0800fac8 	.word	0x0800fac8
 8001a74:	0800fad0 	.word	0x0800fad0
 8001a78:	20000240 	.word	0x20000240
 8001a7c:	20000244 	.word	0x20000244
 8001a80:	20000248 	.word	0x20000248
 8001a84:	20000218 	.word	0x20000218
 8001a88:	0800fad8 	.word	0x0800fad8

08001a8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001a9e:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <MX_ADC1_Init+0xb0>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac8:	481b      	ldr	r0, [pc, #108]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aca:	f006 f959 	bl	8007d80 <HAL_ADC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ad4:	f000 fe2c 	bl	8002730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aea:	f006 fb11 	bl	8008110 <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001af4:	f000 fe1c 	bl	8002730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001b06:	f006 fb03 	bl	8008110 <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001b10:	f000 fe0e 	bl	8002730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001b22:	f006 faf5 	bl	8008110 <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001b2c:	f000 fe00 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000258 	.word	0x20000258
 8001b3c:	40012400 	.word	0x40012400

08001b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_ADC_MspInit+0xbc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d149      	bne.n	8001bf4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = A_Current_Pin|B_Current_Pin|C_Current_Pin;
 8001b90:	2307      	movs	r3, #7
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b94:	2303      	movs	r3, #3
 8001b96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4819      	ldr	r0, [pc, #100]	; (8001c04 <HAL_ADC_MspInit+0xc4>)
 8001ba0:	f006 ffc6 	bl	8008b30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_ADC_MspInit+0xcc>)
 8001ba8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bce:	2220      	movs	r2, #32
 8001bd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bda:	f006 fdbb 	bl	8008754 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001be4:	f000 fda4 	bl	8002730 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bec:	621a      	str	r2, [r3, #32]
 8001bee:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012400 	.word	0x40012400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	20000288 	.word	0x20000288
 8001c0c:	40020008 	.word	0x40020008

08001c10 <clearString>:
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};


//Функция удаления символов \r и \n из строки
void clearString(char *src)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02f      	beq.n	8001c82 <clearString+0x72>
	uint8_t i = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e022      	b.n	8001c72 <clearString+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d80b      	bhi.n	8001c4a <clearString+0x3a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d003      	beq.n	8001c42 <clearString+0x32>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b0d      	cmp	r3, #13
 8001c40:	d103      	bne.n	8001c4a <clearString+0x3a>
		{
			i++;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	3301      	adds	r3, #1
 8001c46:	72fb      	strb	r3, [r7, #11]
			continue;
 8001c48:	e010      	b.n	8001c6c <clearString+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d003      	beq.n	8001c5a <clearString+0x4a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b0d      	cmp	r3, #13
 8001c58:	d102      	bne.n	8001c60 <clearString+0x50>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60fa      	str	r2, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1d8      	bne.n	8001c2c <clearString+0x1c>
	}

	*dst = 0;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e000      	b.n	8001c84 <clearString+0x74>
	if(!src) return;
 8001c82:	bf00      	nop
}
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <UsartTx>:
//Функция передачи байта по USART3
//Принимает байт
void UsartTx(unsigned char Data)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TC));
 8001c96:	bf00      	nop
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <UsartTx+0x28>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f9      	beq.n	8001c98 <UsartTx+0xc>
	USART1->DR = Data;
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <UsartTx+0x28>)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	6053      	str	r3, [r2, #4]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40013800 	.word	0x40013800

08001cb8 <SendStr>:
//Функция отправки сткроки
//Принимает строку для отправки
void SendStr(char * string)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001cc4:	e009      	b.n	8001cda <SendStr+0x22>
	{
		UsartTx(string[i]);
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffdc 	bl	8001c8c <UsartTx>
		i++;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <SendStr+0xe>
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <DebugMain>:
//Функция для отладки через COM порт
void DebugMain(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
	if(dbg_available())
 8001cf6:	f001 fc29 	bl	800354c <dbg_available>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d078      	beq.n	8001df2 <DebugMain+0x102>
	{
		uint16_t i = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001d08:	f240 4206 	movw	r2, #1030	; 0x406
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	483b      	ldr	r0, [pc, #236]	; (8001dfc <DebugMain+0x10c>)
 8001d10:	f009 ffd2 	bl	800bcb8 <memset>
		HAL_Delay(50);
 8001d14:	2032      	movs	r0, #50	; 0x32
 8001d16:	f006 f80f 	bl	8007d38 <HAL_Delay>

		while(dbg_available())
 8001d1a:	e012      	b.n	8001d42 <DebugMain+0x52>
		{
			DBG_buf[i++] = dbg_read();
 8001d1c:	f001 fc38 	bl	8003590 <dbg_read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	80fa      	strh	r2, [r7, #6]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	b2c9      	uxtb	r1, r1
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <DebugMain+0x10c>)
 8001d30:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f240 4205 	movw	r2, #1029	; 0x405
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d808      	bhi.n	8001d4e <DebugMain+0x5e>
				break;
			HAL_Delay(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f005 fffb 	bl	8007d38 <HAL_Delay>
		while(dbg_available())
 8001d42:	f001 fc03 	bl	800354c <dbg_available>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e7      	bne.n	8001d1c <DebugMain+0x2c>
 8001d4c:	e000      	b.n	8001d50 <DebugMain+0x60>
				break;
 8001d4e:	bf00      	nop
		}
		clearString(DBG_buf);
 8001d50:	482a      	ldr	r0, [pc, #168]	; (8001dfc <DebugMain+0x10c>)
 8001d52:	f7ff ff5d 	bl	8001c10 <clearString>
		//---------------------------------------------Old function---------------------------------------------
		if(strstr(DBG_buf, "TEST") != NULL)
 8001d56:	492a      	ldr	r1, [pc, #168]	; (8001e00 <DebugMain+0x110>)
 8001d58:	4828      	ldr	r0, [pc, #160]	; (8001dfc <DebugMain+0x10c>)
 8001d5a:	f00a fd69 	bl	800c830 <strstr>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <DebugMain+0x7c>
		{
			SendStr("THE DEVICE IS WORKING\n");
 8001d64:	4827      	ldr	r0, [pc, #156]	; (8001e04 <DebugMain+0x114>)
 8001d66:	f7ff ffa7 	bl	8001cb8 <SendStr>
 8001d6a:	e038      	b.n	8001dde <DebugMain+0xee>
		}
		//-------------------------------------------End Old function-------------------------------------------
		//------------------------------------------------SD_CARD-----------------------------------------------
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 8001d6c:	4926      	ldr	r1, [pc, #152]	; (8001e08 <DebugMain+0x118>)
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <DebugMain+0x10c>)
 8001d70:	f00a fd5e 	bl	800c830 <strstr>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <DebugMain+0x90>
		{
			MyReadFile();
 8001d7a:	f003 feed 	bl	8005b58 <MyReadFile>
 8001d7e:	e02e      	b.n	8001dde <DebugMain+0xee>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <DebugMain+0x11c>)
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <DebugMain+0x10c>)
 8001d84:	f00a fd54 	bl	800c830 <strstr>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <DebugMain+0xa8>
		{
//			test_create_json();
			MyWriteFileJson("TestFile.txt", "text_testing");
 8001d8e:	4920      	ldr	r1, [pc, #128]	; (8001e10 <DebugMain+0x120>)
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <DebugMain+0x124>)
 8001d92:	f003 ff7f 	bl	8005c94 <MyWriteFileJson>
 8001d96:	e022      	b.n	8001dde <DebugMain+0xee>
		}
		//------------------------------------------------------------------------------------------------------
		//--------------------------------------------UPDATE_FIRMWARE-------------------------------------------
		else if(strstr(DBG_buf, "UPDATE_FIRMWARE") != NULL)
 8001d98:	491f      	ldr	r1, [pc, #124]	; (8001e18 <DebugMain+0x128>)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <DebugMain+0x10c>)
 8001d9c:	f00a fd48 	bl	800c830 <strstr>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <DebugMain+0xbe>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"FILE_DOWNLOAD\",\"NAME\":\"blink_gpio\",\"VERSION\":\"v.0.0.1\",\"SIZE\":\"248\"},\"TIME\":\"1122334455\"}");
 8001da6:	481d      	ldr	r0, [pc, #116]	; (8001e1c <DebugMain+0x12c>)
 8001da8:	f7ff fcf0 	bl	800178c <json_input>
 8001dac:	e017      	b.n	8001dde <DebugMain+0xee>
		}
		else if(strstr(DBG_buf, "RESET_MCU") != NULL)
 8001dae:	491c      	ldr	r1, [pc, #112]	; (8001e20 <DebugMain+0x130>)
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <DebugMain+0x10c>)
 8001db2:	f00a fd3d 	bl	800c830 <strstr>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <DebugMain+0xd4>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"RESET_MCU\"},\"TIME\":\"1122334455\"}");
 8001dbc:	4819      	ldr	r0, [pc, #100]	; (8001e24 <DebugMain+0x134>)
 8001dbe:	f7ff fce5 	bl	800178c <json_input>
 8001dc2:	e00c      	b.n	8001dde <DebugMain+0xee>
		}
		//------------------------------------------------------------------------------------------------------
		else	//тест для посылки строки через терминал
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <DebugMain+0x10c>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <DebugMain+0x138>)
 8001dc8:	f240 4106 	movw	r1, #1030	; 0x406
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <DebugMain+0x13c>)
 8001dce:	f00a fcc7 	bl	800c760 <sniprintf>
			SendStr(DBG_str);
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <DebugMain+0x13c>)
 8001dd4:	f7ff ff70 	bl	8001cb8 <SendStr>
			json_input(DBG_str);
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <DebugMain+0x13c>)
 8001dda:	f7ff fcd7 	bl	800178c <json_input>
		}
		if(fdbg)
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <DebugMain+0x102>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <DebugMain+0x10c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <DebugMain+0x140>)
 8001de8:	f240 4106 	movw	r1, #1030	; 0x406
 8001dec:	480f      	ldr	r0, [pc, #60]	; (8001e2c <DebugMain+0x13c>)
 8001dee:	f00a fcb7 	bl	800c760 <sniprintf>
		}
	}
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002cc 	.word	0x200002cc
 8001e00:	0800fae4 	.word	0x0800fae4
 8001e04:	0800faec 	.word	0x0800faec
 8001e08:	0800fb04 	.word	0x0800fb04
 8001e0c:	0800fb0c 	.word	0x0800fb0c
 8001e10:	0800fb18 	.word	0x0800fb18
 8001e14:	0800fb28 	.word	0x0800fb28
 8001e18:	0800fb38 	.word	0x0800fb38
 8001e1c:	0800fb48 	.word	0x0800fb48
 8001e20:	0800fbd8 	.word	0x0800fbd8
 8001e24:	0800fbe4 	.word	0x0800fbe4
 8001e28:	0800fc3c 	.word	0x0800fc3c
 8001e2c:	200006d4 	.word	0x200006d4
 8001e30:	0800fc40 	.word	0x0800fc40

08001e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200b      	movs	r0, #11
 8001e58:	f006 fc41 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e5c:	200b      	movs	r0, #11
 8001e5e:	f006 fc5a 	bl	8008716 <HAL_NVIC_EnableIRQ>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a61      	ldr	r2, [pc, #388]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a5b      	ldr	r2, [pc, #364]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b56      	ldr	r3, [pc, #344]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|mcuFAIL_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001eea:	484a      	ldr	r0, [pc, #296]	; (8002014 <MX_GPIO_Init+0x1a4>)
 8001eec:	f006 ffbb 	bl	8008e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001ef6:	4848      	ldr	r0, [pc, #288]	; (8002018 <MX_GPIO_Init+0x1a8>)
 8001ef8:	f006 ffb5 	bl	8008e66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = distCLOSE_Pin|distSTOP_Pin|distINT_Pin|distHIGHP_Pin
 8001efc:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001f00:	613b      	str	r3, [r7, #16]
                          |handOPEN_Pin|handCLOSE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <MX_GPIO_Init+0x1ac>)
 8001f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4841      	ldr	r0, [pc, #260]	; (8002018 <MX_GPIO_Init+0x1a8>)
 8001f12:	f006 fe0d 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = handCTRL_Pin|CD_Pin;
 8001f16:	2318      	movs	r3, #24
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	4619      	mov	r1, r3
 8001f28:	483b      	ldr	r0, [pc, #236]	; (8002018 <MX_GPIO_Init+0x1a8>)
 8001f2a:	f006 fe01 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|mcuFAIL_Pin;
 8001f2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	4833      	ldr	r0, [pc, #204]	; (8002014 <MX_GPIO_Init+0x1a4>)
 8001f48:	f006 fdf2 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|SELF_CAPTURE_Pin
 8001f4c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001f50:	613b      	str	r3, [r7, #16]
                          |COUPLING_WORK_Pin|HIGHP_CLOSEmcu_Pin|HIGHP_OPENmcu_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4619      	mov	r1, r3
 8001f60:	482f      	ldr	r0, [pc, #188]	; (8002020 <MX_GPIO_Init+0x1b0>)
 8001f62:	f006 fde5 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin;
 8001f66:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4826      	ldr	r0, [pc, #152]	; (8002018 <MX_GPIO_Init+0x1a8>)
 8001f80:	f006 fdd6 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLOSEmcu_Pin|OPENmcu_Pin;
 8001f84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <MX_GPIO_Init+0x1ac>)
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	481e      	ldr	r0, [pc, #120]	; (8002014 <MX_GPIO_Init+0x1a4>)
 8001f9a:	f006 fdc9 	bl	8008b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = distOPEN_Pin;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_GPIO_Init+0x1ac>)
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(distOPEN_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481b      	ldr	r0, [pc, #108]	; (8002020 <MX_GPIO_Init+0x1b0>)
 8001fb4:	f006 fdbc 	bl	8008b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2006      	movs	r0, #6
 8001fbe:	f006 fb8e 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fc2:	2006      	movs	r0, #6
 8001fc4:	f006 fba7 	bl	8008716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f006 fb86 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f006 fb9f 	bl	8008716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2008      	movs	r0, #8
 8001fde:	f006 fb7e 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f006 fb97 	bl	8008716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2017      	movs	r0, #23
 8001fee:	f006 fb76 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ff2:	2017      	movs	r0, #23
 8001ff4:	f006 fb8f 	bl	8008716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2028      	movs	r0, #40	; 0x28
 8001ffe:	f006 fb6e 	bl	80086de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002002:	2028      	movs	r0, #40	; 0x28
 8002004:	f006 fb87 	bl	8008716 <HAL_NVIC_EnableIRQ>

}
 8002008:	bf00      	nop
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40010800 	.word	0x40010800
 8002018:	40011000 	.word	0x40011000
 800201c:	10210000 	.word	0x10210000
 8002020:	40010c00 	.word	0x40010c00

08002024 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_I2C2_Init+0x50>)
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <MX_I2C2_Init+0x54>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_I2C2_Init+0x50>)
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <MX_I2C2_Init+0x58>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_I2C2_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_I2C2_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_I2C2_Init+0x50>)
 8002042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002046:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <MX_I2C2_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_I2C2_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MX_I2C2_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_I2C2_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <MX_I2C2_Init+0x50>)
 8002062:	f006 ff31 	bl	8008ec8 <HAL_I2C_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800206c:	f000 fb60 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000adc 	.word	0x20000adc
 8002078:	40005800 	.word	0x40005800
 800207c:	000186a0 	.word	0x000186a0

08002080 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d124      	bne.n	80020ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80020b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	2312      	movs	r3, #18
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	480b      	ldr	r0, [pc, #44]	; (80020fc <HAL_I2C_MspInit+0x7c>)
 80020ce:	f006 fd2f 	bl	8008b30 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020dc:	61d3      	str	r3, [r2, #28]
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40005800 	.word	0x40005800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010c00 	.word	0x40010c00

08002100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002104:	f005 fdb6 	bl	8007c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002108:	f000 f8aa 	bl	8002260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210c:	f7ff feb0 	bl	8001e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002110:	f7ff fe90 	bl	8001e34 <MX_DMA_Init>
  MX_ADC1_Init();
 8002114:	f7ff fcba 	bl	8001a8c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002118:	f000 fd32 	bl	8002b80 <MX_TIM1_Init>
  MX_TIM2_Init();
 800211c:	f000 fdce 	bl	8002cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002120:	f000 fe72 	bl	8002e08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002124:	f000 ff0c 	bl	8002f40 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002128:	f7ff ff7c 	bl	8002024 <MX_I2C2_Init>
  MX_SPI1_Init();
 800212c:	f000 fb06 	bl	800273c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002130:	f001 f914 	bl	800335c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002134:	f001 f93c 	bl	80033b0 <MX_USART3_UART_Init>
//  MX_RTC_Init();
//  MX_WWDG_Init();
  /* USER CODE BEGIN 2 */
	time = 200;
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <main+0x120>)
 800213a:	22c8      	movs	r2, #200	; 0xc8
 800213c:	701a      	strb	r2, [r3, #0]

	EN_Interrupt();	//Для дебага/Конфигурации по USART1
 800213e:	f001 fa5d 	bl	80035fc <EN_Interrupt>

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c2) != 0)
 8002142:	4838      	ldr	r0, [pc, #224]	; (8002224 <main+0x124>)
 8002144:	f005 f870 	bl	8007228 <ssd1306_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <main+0x52>
	{
		Error_Handler();
 800214e:	f000 faef 	bl	8002730 <Error_Handler>
	}
	//----------------ADC-----------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);	//Стартуем АЦП
 8002152:	2203      	movs	r2, #3
 8002154:	4934      	ldr	r1, [pc, #208]	; (8002228 <main+0x128>)
 8002156:	4835      	ldr	r0, [pc, #212]	; (800222c <main+0x12c>)
 8002158:	f005 feea 	bl	8007f30 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800215c:	2100      	movs	r1, #0
 800215e:	4834      	ldr	r0, [pc, #208]	; (8002230 <main+0x130>)
 8002160:	f008 fb50 	bl	800a804 <HAL_TIM_OC_Start>
	//------------------------------------------
	//---------------FATfs----------------------
	MyInitCard();
 8002164:	f003 fcf2 	bl	8005b4c <MyInitCard>
	SendStr("Init sd card -> success\n");
 8002168:	4832      	ldr	r0, [pc, #200]	; (8002234 <main+0x134>)
 800216a:	f7ff fda5 	bl	8001cb8 <SendStr>
	//------------------------------------------

	HAL_GPIO_WritePin(GPIOC, mcuREADY_Pin, SET);	//Статус, МК работает нормально
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002174:	4830      	ldr	r0, [pc, #192]	; (8002238 <main+0x138>)
 8002176:	f006 fe76 	bl	8008e66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, mcuFAIL_Pin, RESET);	//Сбрасываем ошибку МК
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002180:	482e      	ldr	r0, [pc, #184]	; (800223c <main+0x13c>)
 8002182:	f006 fe70 	bl	8008e66 <HAL_GPIO_WritePin>

	//Считываем значение с пина управления
	handCTRL_flag = GPIOC->IDR & handCTRL_Pin;
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <main+0x138>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <main+0x140>)
 800219a:	701a      	strb	r2, [r3, #0]
	if(handCTRL_flag)
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <main+0x140>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00f      	beq.n	80021c4 <main+0xc4>
	{
		distOPEN_flag = false;
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <main+0x144>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
		distCLOSE_flag = false;
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <main+0x148>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		distSTOP_flag = false;
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <main+0x14c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	//	  	distINT_flag = false;

		handOPEN_flag = true;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <main+0x150>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
		handCLOSE_flag = true;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <main+0x154>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e015      	b.n	80021f0 <main+0xf0>
		#if DEBUG_USART
			SendStr("[1] - Control is local\n");
		#endif
	}
	else if(!handCTRL_flag)
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <main+0x140>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00e      	beq.n	80021f0 <main+0xf0>
	{
		distOPEN_flag = true;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <main+0x144>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
		distCLOSE_flag = true;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <main+0x148>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		distSTOP_flag = true;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <main+0x14c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
	//	  	distINT_flag = false;

		handOPEN_flag = false;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <main+0x150>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
		handCLOSE_flag = false;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <main+0x154>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
		#if DEBUG_USART
			SendStr("[2] - Control is remote\n");
		#endif
	}
	//Считываем значение с пина самоподхвата
	SELF_CAPTURE_flag = GPIOB->IDR & SELF_CAPTURE_Pin;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <main+0x158>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <main+0x15c>)
 8002204:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DisplayInfo();		  //Придумать как заблокировать режим работы с дисплеем
 8002206:	f004 fd1b 	bl	8006c40 <DisplayInfo>

//	  if(PhCorrect)	//Проверяем правильность включение фаз
//	  {
		  ManagementProcess();
 800220a:	f005 fb8f 	bl	800792c <ManagementProcess>
		  SelfCaptureProcess();
 800220e:	f005 fbf5 	bl	80079fc <SelfCaptureProcess>
		  DutyCycleProcess();
 8002212:	f005 fc3f 	bl	8007a94 <DutyCycleProcess>

		  DirectionMove();
 8002216:	f005 fa99 	bl	800774c <DirectionMove>
//	  		СurrentСomparison();
//	  }
	  DebugMain();
 800221a:	f7ff fd69 	bl	8001cf0 <DebugMain>
	  DisplayInfo();		  //Придумать как заблокировать режим работы с дисплеем
 800221e:	e7f2      	b.n	8002206 <main+0x106>
 8002220:	20000b86 	.word	0x20000b86
 8002224:	20000adc 	.word	0x20000adc
 8002228:	20000b98 	.word	0x20000b98
 800222c:	20000258 	.word	0x20000258
 8002230:	20001088 	.word	0x20001088
 8002234:	0800fc44 	.word	0x0800fc44
 8002238:	40011000 	.word	0x40011000
 800223c:	40010800 	.word	0x40010800
 8002240:	20000b37 	.word	0x20000b37
 8002244:	20000b34 	.word	0x20000b34
 8002248:	20000b35 	.word	0x20000b35
 800224c:	20000b36 	.word	0x20000b36
 8002250:	20000b32 	.word	0x20000b32
 8002254:	20000b33 	.word	0x20000b33
 8002258:	40010c00 	.word	0x40010c00
 800225c:	2000000b 	.word	0x2000000b

08002260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b094      	sub	sp, #80	; 0x50
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	2228      	movs	r2, #40	; 0x28
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f009 fd22 	bl	800bcb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002290:	2309      	movs	r3, #9
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229e:	2301      	movs	r3, #1
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022a2:	2301      	movs	r3, #1
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a6:	2302      	movs	r3, #2
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f007 fa5e 	bl	800977c <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80022c6:	f000 fa33 	bl	8002730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2102      	movs	r1, #2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 fcca 	bl	8009c80 <HAL_RCC_ClockConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022f2:	f000 fa1d 	bl	8002730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80022f6:	2303      	movs	r3, #3
 80022f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002304:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4618      	mov	r0, r3
 800230a:	f007 fe51 	bl	8009fb0 <HAL_RCCEx_PeriphCLKConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002314:	f000 fa0c 	bl	8002730 <Error_Handler>
  }
}
 8002318:	bf00      	nop
 800231a:	3750      	adds	r7, #80	; 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
	//Пришла команда "Высшего приоритета" с дистанционного пульта управления (distHIGHP)

	//Уточнить работает ли высший приоритет когда работаем с местного пульта управления!!!

	if ((GPIO_Pin == GPIO_PIN_0) && distHIGHP_flag)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d12f      	bne.n	8002390 <HAL_GPIO_EXTI_Callback+0x70>
 8002330:	4b96      	ldr	r3, [pc, #600]	; (800258c <HAL_GPIO_EXTI_Callback+0x26c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02b      	beq.n	8002390 <HAL_GPIO_EXTI_Callback+0x70>
	{
		#if DEBUG_USART
			SendStr("[101] - distHIGHP is action\n");
		#endif
		distHIGHP_flag = false;
 8002338:	4b94      	ldr	r3, [pc, #592]	; (800258c <HAL_GPIO_EXTI_Callback+0x26c>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
		 * handCTRL(GPIOC3): 	Management:
		 *     	 High			  Local
		 *     	 Low			  Remote
		 */
		//Проверяем статус, с какого пульта идет управление (handCTRL)
		if((GPIOC->IDR & GPIO_PIN_3) == 0)
 800233e:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11e      	bne.n	8002388 <HAL_GPIO_EXTI_Callback+0x68>
		{
			if(((GPIOB->IDR & GPIO_PIN_15) != 0) && ((GPIOB->IDR & GPIO_PIN_14) == 0))	//HIGHP_OPENmcu = 1; HIGHP_CLOSEmcu = 0;
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <HAL_GPIO_EXTI_Callback+0x274>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_GPIO_EXTI_Callback+0x4a>
 8002356:	4b8f      	ldr	r3, [pc, #572]	; (8002594 <HAL_GPIO_EXTI_Callback+0x274>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_GPIO_EXTI_Callback+0x4a>
			{
				Forward = true;
 8002362:	4b8d      	ldr	r3, [pc, #564]	; (8002598 <HAL_GPIO_EXTI_Callback+0x278>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e00e      	b.n	8002388 <HAL_GPIO_EXTI_Callback+0x68>
			}
			else if(((GPIOB->IDR & GPIO_PIN_15) == 0) && ((GPIOB->IDR & GPIO_PIN_14) != 0))	//HIGHP_OPENmcu = 0; HIGHP_CLOSEmcu = 1;
 800236a:	4b8a      	ldr	r3, [pc, #552]	; (8002594 <HAL_GPIO_EXTI_Callback+0x274>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_GPIO_EXTI_Callback+0x68>
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <HAL_GPIO_EXTI_Callback+0x274>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_GPIO_EXTI_Callback+0x68>
			{
				Reverse = true;
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_GPIO_EXTI_Callback+0x27c>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
			}
		}
		HighPriority = true;
 8002388:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x280>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e14e      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	}
	//Пришла команда "Открыть" с местного пульта управления (handOPEN)
	else if ((GPIO_Pin == GPIO_PIN_1) && handOPEN_flag)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d115      	bne.n	80023c2 <HAL_GPIO_EXTI_Callback+0xa2>
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x284>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d011      	beq.n	80023c2 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		#if DEBUG_USART
			SendStr("[102] - handOPEN is action\n");
		#endif
		handOPEN_flag = false;
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x284>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]

//		CloseBlink = false;
//		OpenBlink = true;

		Forward = true;
 80023a4:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_GPIO_EXTI_Callback+0x278>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOC, mcuCLOSE_Pin, RESET);	//Убираем флаг "mcuCLOSE"
 80023aa:	2200      	movs	r2, #0
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	4878      	ldr	r0, [pc, #480]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 80023b0:	f006 fd59 	bl	8008e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, mcuOPEN_Pin, SET);		//Выставляем флаг "mcuOPEN"
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ba:	4875      	ldr	r0, [pc, #468]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 80023bc:	f006 fd53 	bl	8008e66 <HAL_GPIO_WritePin>
 80023c0:	e135      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	}
	//Пришла команда "Закрыть" с местного пульта управления (handCLOSE)
	else if ((GPIO_Pin == GPIO_PIN_2) && handCLOSE_flag)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d115      	bne.n	80023f4 <HAL_GPIO_EXTI_Callback+0xd4>
 80023c8:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x288>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d011      	beq.n	80023f4 <HAL_GPIO_EXTI_Callback+0xd4>
	{
		#if DEBUG_USART
			SendStr("[103] - handCLOSE is action\n");
		#endif
		handCLOSE_flag = false;
 80023d0:	4b75      	ldr	r3, [pc, #468]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x288>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]

//		OpenBlink = false;
//		CloseBlink = true;

		Reverse = true;
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <HAL_GPIO_EXTI_Callback+0x27c>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOC, mcuOPEN_Pin, RESET);	//Убираем флаг "mcuOPEN"
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e2:	486b      	ldr	r0, [pc, #428]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 80023e4:	f006 fd3f 	bl	8008e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, mcuCLOSE_Pin, SET);	//Выставляем флаг "mcuCLOSE"
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	4868      	ldr	r0, [pc, #416]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 80023ee:	f006 fd3a 	bl	8008e66 <HAL_GPIO_WritePin>
 80023f2:	e11c      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>

	//--------------------------------------РАБОТА ФАЗ--------------------------------------


	//Переход через ноль на фазе "А"
	else if (GPIO_Pin == GPIO_PIN_3)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d132      	bne.n	8002460 <HAL_GPIO_EXTI_Callback+0x140>
	{
		if(!B && !C)
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_GPIO_EXTI_Callback+0x28c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_GPIO_EXTI_Callback+0xf0>
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_GPIO_EXTI_Callback+0xf0>
			A = 1;
 800240a:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x294>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]

		if(DirMove_OPENmcu && ((GPIOA->IDR & OPENmcu_Pin) != 0))
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <HAL_GPIO_EXTI_Callback+0x116>
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_GPIO_EXTI_Callback+0x116>
		{
			#if DEBUG_USART
				SendStr("[104] - AFWD\n");
			#endif
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Stop timer two channel one	(AFWD)
 8002424:	2100      	movs	r1, #0
 8002426:	4866      	ldr	r0, [pc, #408]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002428:	f008 fb88 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Run timer two channel one		(AFWD)
 800242c:	2100      	movs	r1, #0
 800242e:	4864      	ldr	r0, [pc, #400]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002430:	f008 fae2 	bl	800a9f8 <HAL_TIM_PWM_Start>
 8002434:	e0fb      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
		}
		else if(DirMove_CLOSEmcu && ((GPIOA->IDR & CLOSEmcu_Pin) != 0))
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80f7 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80f0 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
		{
			#if DEBUG_USART
				SendStr("[105] - AREV\n");
			#endif
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);	//Stop timer two channel four	(AREV)
 800244e:	210c      	movs	r1, #12
 8002450:	485b      	ldr	r0, [pc, #364]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002452:	f008 fb73 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	//Run timer two channel four	(AREV)
 8002456:	210c      	movs	r1, #12
 8002458:	4859      	ldr	r0, [pc, #356]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800245a:	f008 facd 	bl	800a9f8 <HAL_TIM_PWM_Start>
//	}
	else
	{
		__NOP();
	}
}
 800245e:	e0e6      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if (GPIO_Pin == GPIO_PIN_5)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b20      	cmp	r3, #32
 8002464:	d132      	bne.n	80024cc <HAL_GPIO_EXTI_Callback+0x1ac>
		if(A && C)
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <HAL_GPIO_EXTI_Callback+0x15c>
 800246e:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_GPIO_EXTI_Callback+0x15c>
			B = 3;
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_GPIO_EXTI_Callback+0x28c>)
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
		if(DirMove_OPENmcu && ((GPIOA->IDR & OPENmcu_Pin) != 0))
 800247c:	4b4e      	ldr	r3, [pc, #312]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x298>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <HAL_GPIO_EXTI_Callback+0x182>
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_GPIO_EXTI_Callback+0x182>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 8002490:	2100      	movs	r1, #0
 8002492:	484d      	ldr	r0, [pc, #308]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002494:	f008 fb52 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 8002498:	2100      	movs	r1, #0
 800249a:	484b      	ldr	r0, [pc, #300]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800249c:	f008 faac 	bl	800a9f8 <HAL_TIM_PWM_Start>
 80024a0:	e0c5      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
		else if(DirMove_CLOSEmcu && ((GPIOA->IDR & CLOSEmcu_Pin) != 0))
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80c1 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80ba 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4842      	ldr	r0, [pc, #264]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80024be:	f008 fb3d 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4840      	ldr	r0, [pc, #256]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80024c6:	f008 fa97 	bl	800a9f8 <HAL_TIM_PWM_Start>
}
 80024ca:	e0b0      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if (GPIO_Pin == GPIO_PIN_7)
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d132      	bne.n	8002538 <HAL_GPIO_EXTI_Callback+0x218>
		if(A && !B)
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x294>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_EXTI_Callback+0x1c8>
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_GPIO_EXTI_Callback+0x28c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_GPIO_EXTI_Callback+0x1c8>
			C = 2;
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x290>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
		if(DirMove_OPENmcu && ((GPIOA->IDR & OPENmcu_Pin) != 0))
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x298>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_GPIO_EXTI_Callback+0x1ee>
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_GPIO_EXTI_Callback+0x1ee>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	//Stop timer Four channel one	(CFWD)
 80024fc:	2100      	movs	r1, #0
 80024fe:	4833      	ldr	r0, [pc, #204]	; (80025cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002500:	f008 fb1c 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//Run timer four channel one	(CFWD)
 8002504:	2100      	movs	r1, #0
 8002506:	4831      	ldr	r0, [pc, #196]	; (80025cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002508:	f008 fa76 	bl	800a9f8 <HAL_TIM_PWM_Start>
 800250c:	e08f      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
		else if(DirMove_CLOSEmcu && ((GPIOA->IDR & CLOSEmcu_Pin) != 0))
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 808b 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_GPIO_EXTI_Callback+0x29c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8084 	beq.w	800262e <HAL_GPIO_EXTI_Callback+0x30e>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);	//Stop timer four channel four	(CREV)
 8002526:	210c      	movs	r1, #12
 8002528:	4828      	ldr	r0, [pc, #160]	; (80025cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 800252a:	f008 fb07 	bl	800ab3c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//Run timer four channel four	(CREV)
 800252e:	210c      	movs	r1, #12
 8002530:	4826      	ldr	r0, [pc, #152]	; (80025cc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002532:	f008 fa61 	bl	800a9f8 <HAL_TIM_PWM_Start>
}
 8002536:	e07a      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if ((GPIO_Pin == GPIO_PIN_8) && distOPEN_flag)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d115      	bne.n	800256c <HAL_GPIO_EXTI_Callback+0x24c>
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d011      	beq.n	800256c <HAL_GPIO_EXTI_Callback+0x24c>
		distOPEN_flag = false;
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		Forward = true;
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_GPIO_EXTI_Callback+0x278>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);	//Убираем флаг "mcuCLOSE"
 8002554:	2200      	movs	r2, #0
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	480d      	ldr	r0, [pc, #52]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 800255a:	f006 fc84 	bl	8008e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);		//Выставляем флаг "mcuOPEN"
 800255e:	2201      	movs	r2, #1
 8002560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002564:	480a      	ldr	r0, [pc, #40]	; (8002590 <HAL_GPIO_EXTI_Callback+0x270>)
 8002566:	f006 fc7e 	bl	8008e66 <HAL_GPIO_WritePin>
 800256a:	e060      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if (GPIO_Pin == GPIO_PIN_11)
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002572:	d103      	bne.n	800257c <HAL_GPIO_EXTI_Callback+0x25c>
		Stop = true;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
}
 800257a:	e058      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if (GPIO_Pin == GPIO_PIN_12)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d129      	bne.n	80025d8 <HAL_GPIO_EXTI_Callback+0x2b8>
		Stop = true;
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
}
 800258a:	e050      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
 800258c:	2000000a 	.word	0x2000000a
 8002590:	40011000 	.word	0x40011000
 8002594:	40010c00 	.word	0x40010c00
 8002598:	20000b81 	.word	0x20000b81
 800259c:	20000b82 	.word	0x20000b82
 80025a0:	20000b83 	.word	0x20000b83
 80025a4:	20000b32 	.word	0x20000b32
 80025a8:	20000b33 	.word	0x20000b33
 80025ac:	20000b39 	.word	0x20000b39
 80025b0:	20000b3a 	.word	0x20000b3a
 80025b4:	20000b38 	.word	0x20000b38
 80025b8:	20000b84 	.word	0x20000b84
 80025bc:	40010800 	.word	0x40010800
 80025c0:	200010d0 	.word	0x200010d0
 80025c4:	20000b85 	.word	0x20000b85
 80025c8:	20001118 	.word	0x20001118
 80025cc:	20001160 	.word	0x20001160
 80025d0:	20000b34 	.word	0x20000b34
 80025d4:	20000b80 	.word	0x20000b80
	else if ((GPIO_Pin == GPIO_PIN_13) && distCLOSE_flag)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025de:	d115      	bne.n	800260c <HAL_GPIO_EXTI_Callback+0x2ec>
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_GPIO_EXTI_Callback+0x318>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d011      	beq.n	800260c <HAL_GPIO_EXTI_Callback+0x2ec>
		distCLOSE_flag = false;
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_GPIO_EXTI_Callback+0x318>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
		Reverse = true;
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_GPIO_EXTI_Callback+0x31c>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);	//Убираем флаг "mcuOPEN"
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fa:	4811      	ldr	r0, [pc, #68]	; (8002640 <HAL_GPIO_EXTI_Callback+0x320>)
 80025fc:	f006 fc33 	bl	8008e66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);		//Выставляем флаг "mcuCLOSE"
 8002600:	2201      	movs	r2, #1
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <HAL_GPIO_EXTI_Callback+0x320>)
 8002606:	f006 fc2e 	bl	8008e66 <HAL_GPIO_WritePin>
 800260a:	e010      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
	else if ((GPIO_Pin == GPIO_PIN_14) && distSTOP_flag)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002612:	d10a      	bne.n	800262a <HAL_GPIO_EXTI_Callback+0x30a>
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_GPIO_EXTI_Callback+0x324>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_EXTI_Callback+0x30a>
		distSTOP_flag = false;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_GPIO_EXTI_Callback+0x324>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
		Stop = true;
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_GPIO_EXTI_Callback+0x328>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e001      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
		__NOP();
 800262a:	bf00      	nop
}
 800262c:	e7ff      	b.n	800262e <HAL_GPIO_EXTI_Callback+0x30e>
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000b35 	.word	0x20000b35
 800263c:	20000b82 	.word	0x20000b82
 8002640:	40011000 	.word	0x40011000
 8002644:	20000b36 	.word	0x20000b36
 8002648:	20000b80 	.word	0x20000b80

0800264c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)	//Убрать все из колбека
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <HAL_ADC_ConvCpltCallback+0xc4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d153      	bne.n	8002706 <HAL_ADC_ConvCpltCallback+0xba>
    {
    	What_Time++;
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002668:	801a      	strh	r2, [r3, #0]
    	BlinkFail++;
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_ADC_ConvCpltCallback+0xcc>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002674:	701a      	strb	r2, [r3, #0]
    	BlinkQueue++;
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_ADC_ConvCpltCallback+0xd0>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_ADC_ConvCpltCallback+0xd0>)
 8002680:	801a      	strh	r2, [r3, #0]
    	cnt++;
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_ADC_ConvCpltCallback+0xd4>)
 800268c:	701a      	strb	r2, [r3, #0]
    	adcValue[0] += ConversionADC((uint16_t)adc[0]);
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f005 fa63 	bl	8007b60 <ConversionADC>
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd fd6e 	bl	8000180 <__adddf3>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	491f      	ldr	r1, [pc, #124]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 80026aa:	e9c1 2300 	strd	r2, r3, [r1]
        adcValue[1] += ConversionADC((uint16_t)adc[1]);
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_ADC_ConvCpltCallback+0xd8>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f005 fa53 	bl	8007b60 <ConversionADC>
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 80026bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026c0:	f7fd fd5e 	bl	8000180 <__adddf3>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4917      	ldr	r1, [pc, #92]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 80026ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
        adcValue[2] += ConversionADC((uint16_t)adc[2]);
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_ADC_ConvCpltCallback+0xd8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f005 fa43 	bl	8007b60 <ConversionADC>
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 80026dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026e0:	f7fd fd4e 	bl	8000180 <__adddf3>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	490f      	ldr	r1, [pc, #60]	; (8002728 <HAL_ADC_ConvCpltCallback+0xdc>)
 80026ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
//        		PhCorrect = false;
//        		PhUncorrect = true;
//        	}
//        	BlinkQueue = 0;
//        }
        if(What_Time == 12000)	//Через 2 минуты отключаем дисплей
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_ADC_ConvCpltCallback+0xc8>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d105      	bne.n	8002706 <HAL_ADC_ConvCpltCallback+0xba>
        {
			#if DEBUG_USART
				SendStr("[21] - Display is off\n");
			#endif
        	display_Off = true;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_ADC_ConvCpltCallback+0xe0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
        	What_Time = 0;
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002702:	2200      	movs	r2, #0
 8002704:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40012400 	.word	0x40012400
 8002714:	20000b88 	.word	0x20000b88
 8002718:	20000b3b 	.word	0x20000b3b
 800271c:	20000b3c 	.word	0x20000b3c
 8002720:	20000bc8 	.word	0x20000bc8
 8002724:	20000b98 	.word	0x20000b98
 8002728:	20000ba8 	.word	0x20000ba8
 800272c:	20000b8a 	.word	0x20000b8a

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002738:	e7fe      	b.n	8002738 <Error_Handler+0x8>
	...

0800273c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <MX_SPI1_Init+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800274c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002770:	2208      	movs	r2, #8
 8002772:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002788:	220a      	movs	r2, #10
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_SPI1_Init+0x64>)
 800278e:	f007 fcc5 	bl	800a11c <HAL_SPI_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002798:	f7ff ffca 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000102c 	.word	0x2000102c
 80027a4:	40013000 	.word	0x40013000

080027a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	; (8002830 <HAL_SPI_MspInit+0x88>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d12f      	bne.n	8002828 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_SPI_MspInit+0x8c>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 80027f8:	23a0      	movs	r3, #160	; 0xa0
 80027fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	4619      	mov	r1, r3
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <HAL_SPI_MspInit+0x90>)
 800280c:	f006 f990 	bl	8008b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002810:	2340      	movs	r3, #64	; 0x40
 8002812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4619      	mov	r1, r3
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <HAL_SPI_MspInit+0x90>)
 8002824:	f006 f984 	bl	8008b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002828:	bf00      	nop
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40013000 	.word	0x40013000
 8002834:	40021000 	.word	0x40021000
 8002838:	40010800 	.word	0x40010800

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_MspInit+0x5c>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_MspInit+0x5c>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6193      	str	r3, [r2, #24]
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_MspInit+0x5c>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_MspInit+0x5c>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_MspInit+0x5c>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_MspInit+0x5c>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_MspInit+0x60>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_MspInit+0x60>)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000

080028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <NMI_Handler+0x4>

080028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler+0x4>

080028b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <UsageFault_Handler+0x4>

080028be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e6:	f005 fa0b 	bl	8007d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}

080028ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(distHIGHP_Pin);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f006 fad0 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(handOPEN_Pin);
 8002900:	2002      	movs	r0, #2
 8002902:	f006 fac9 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}

0800290a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(handCLOSE_Pin);
 800290e:	2004      	movs	r0, #4
 8002910:	f006 fac2 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA1_Channel1_IRQHandler+0x10>)
 800291e:	f005 ffd3 	bl	80088c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000288 	.word	0x20000288

0800292c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(distOPEN_Pin);
 8002930:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002934:	f006 fab0 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <USART1_IRQHandler+0x74>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d029      	beq.n	80029a4 <USART1_IRQHandler+0x68>
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <USART1_IRQHandler+0x74>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d022      	beq.n	80029a4 <USART1_IRQHandler+0x68>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <USART1_IRQHandler+0x74>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <USART1_IRQHandler+0x78>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	3301      	adds	r3, #1
 800296e:	b29b      	uxth	r3, r3
 8002970:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <USART1_IRQHandler+0x7c>)
 8002972:	fba2 1203 	umull	r1, r2, r2, r3
 8002976:	0a52      	lsrs	r2, r2, #9
 8002978:	f240 4106 	movw	r1, #1030	; 0x406
 800297c:	fb01 f202 	mul.w	r2, r1, r2
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <USART1_IRQHandler+0x80>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	88ba      	ldrh	r2, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d009      	beq.n	80029a4 <USART1_IRQHandler+0x68>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <USART1_IRQHandler+0x78>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <USART1_IRQHandler+0x84>)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <USART1_IRQHandler+0x78>)
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 80029a4:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200011a8 	.word	0x200011a8
 80029b4:	20001230 	.word	0x20001230
 80029b8:	7f411e53 	.word	0x7f411e53
 80029bc:	20001232 	.word	0x20001232
 80029c0:	20001234 	.word	0x20001234

080029c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLOSEmcu_Pin);
 80029c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029cc:	f006 fa64 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPENmcu_Pin);
 80029d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029d4:	f006 fa60 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distCLOSE_Pin);
 80029d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029dc:	f006 fa5c 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distSTOP_Pin);
 80029e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029e4:	f006 fa58 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distINT_Pin);
 80029e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029ec:	f006 fa54 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
	return 1;
 80029f8:	2301      	movs	r3, #1
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <_kill>:

int _kill(int pid, int sig)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a0c:	f009 f90c 	bl	800bc28 <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2216      	movs	r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
	return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_exit>:

void _exit (int status)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ffe7 	bl	8002a02 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a34:	e7fe      	b.n	8002a34 <_exit+0x12>

08002a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e00a      	b.n	8002a5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a48:	f3af 8000 	nop.w
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	60ba      	str	r2, [r7, #8]
 8002a54:	b2ca      	uxtb	r2, r1
 8002a56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dbf0      	blt.n	8002a48 <_read+0x12>
	}

return len;
 8002a66:	687b      	ldr	r3, [r7, #4]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	e009      	b.n	8002a96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	60ba      	str	r2, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	dbf1      	blt.n	8002a82 <_write+0x12>
	}
	return len;
 8002a9e:	687b      	ldr	r3, [r7, #4]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_close>:

int _close(int file)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <_isatty>:

int _isatty(int file)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <_sbrk+0x5c>)
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <_sbrk+0x60>)
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <_sbrk+0x64>)
 8002b26:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <_sbrk+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <_sbrk+0x64>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b38:	f009 f876 	bl	800bc28 <__errno>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	220c      	movs	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	e009      	b.n	8002b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_sbrk+0x64>)
 8002b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20005000 	.word	0x20005000
 8002b68:	00000400 	.word	0x00000400
 8002b6c:	20001084 	.word	0x20001084
 8002b70:	20001d10 	.word	0x20001d10

08002b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b096      	sub	sp, #88	; 0x58
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f009 f87d 	bl	800bcb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bc0:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <MX_TIM1_Init+0x138>)
 8002bc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bc6:	2223      	movs	r2, #35	; 0x23
 8002bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bde:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bea:	4832      	ldr	r0, [pc, #200]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002bec:	f007 fd62 	bl	800a6b4 <HAL_TIM_Base_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002bf6:	f7ff fd9b 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c04:	4619      	mov	r1, r3
 8002c06:	482b      	ldr	r0, [pc, #172]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002c08:	f008 f96c 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002c12:	f7ff fd8d 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002c16:	4827      	ldr	r0, [pc, #156]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002c18:	f007 fd9b 	bl	800a752 <HAL_TIM_OC_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002c22:	f7ff fd85 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c32:	4619      	mov	r1, r3
 8002c34:	481f      	ldr	r0, [pc, #124]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002c36:	f008 fd8d 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002c40:	f7ff fd76 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002c44:	2330      	movs	r3, #48	; 0x30
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	2200      	movs	r2, #0
 8002c66:	4619      	mov	r1, r3
 8002c68:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002c6a:	f008 f825 	bl	800acb8 <HAL_TIM_OC_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002c74:	f7ff fd5c 	bl	8002730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <MX_TIM1_Init+0x134>)
 8002c9c:	f008 fdb8 	bl	800b810 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002ca6:	f7ff fd43 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	3758      	adds	r7, #88	; 0x58
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20001088 	.word	0x20001088
 8002cb8:	40012c00 	.word	0x40012c00

08002cbc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cea:	463b      	mov	r3, r7
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	615a      	str	r2, [r3, #20]
 8002cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cfc:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d06:	2247      	movs	r2, #71	; 0x47
 8002d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000;
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d12:	f242 3228 	movw	r2, #9000	; 0x2328
 8002d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d18:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d24:	4837      	ldr	r0, [pc, #220]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d26:	f007 fcc5 	bl	800a6b4 <HAL_TIM_Base_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002d30:	f7ff fcfe 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4830      	ldr	r0, [pc, #192]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d42:	f008 f8cf 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d4c:	f7ff fcf0 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d50:	482c      	ldr	r0, [pc, #176]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d52:	f007 fdf9 	bl	800a948 <HAL_TIM_PWM_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8002d5c:	f7ff fce8 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002d60:	2108      	movs	r1, #8
 8002d62:	4828      	ldr	r0, [pc, #160]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d64:	f007 ff4e 	bl	800ac04 <HAL_TIM_OnePulse_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002d6e:	f7ff fcdf 	bl	8002730 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002d72:	2306      	movs	r3, #6
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002d76:	2360      	movs	r3, #96	; 0x60
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	4619      	mov	r1, r3
 8002d88:	481e      	ldr	r0, [pc, #120]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002d8a:	f008 f96f 	bl	800b06c <HAL_TIM_SlaveConfigSynchro>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002d94:	f7ff fccc 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	4619      	mov	r1, r3
 8002da6:	4817      	ldr	r0, [pc, #92]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002da8:	f008 fcd4 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8002db2:	f7ff fcbd 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002db6:	2370      	movs	r3, #112	; 0x70
 8002db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000;
 8002dba:	f242 3328 	movw	r3, #9000	; 0x2328
 8002dbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc8:	463b      	mov	r3, r7
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	480d      	ldr	r0, [pc, #52]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002dd0:	f007 ffca 	bl	800ad68 <HAL_TIM_PWM_ConfigChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8002dda:	f7ff fca9 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dde:	463b      	mov	r3, r7
 8002de0:	220c      	movs	r2, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	4807      	ldr	r0, [pc, #28]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002de6:	f007 ffbf 	bl	800ad68 <HAL_TIM_PWM_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM2_Init+0x138>
  {
    Error_Handler();
 8002df0:	f7ff fc9e 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002df4:	4803      	ldr	r0, [pc, #12]	; (8002e04 <MX_TIM2_Init+0x148>)
 8002df6:	f000 fa17 	bl	8003228 <HAL_TIM_MspPostInit>

}
 8002dfa:	bf00      	nop
 8002dfc:	3748      	adds	r7, #72	; 0x48
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200010d0 	.word	0x200010d0

08002e08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b092      	sub	sp, #72	; 0x48
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e36:	463b      	mov	r3, r7
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e4a:	4a3c      	ldr	r2, [pc, #240]	; (8002f3c <MX_TIM3_Init+0x134>)
 8002e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e50:	2247      	movs	r2, #71	; 0x47
 8002e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e54:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e5c:	f242 3228 	movw	r2, #9000	; 0x2328
 8002e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e68:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e6e:	4832      	ldr	r0, [pc, #200]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e70:	f007 fc20 	bl	800a6b4 <HAL_TIM_Base_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e7a:	f7ff fc59 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e88:	4619      	mov	r1, r3
 8002e8a:	482b      	ldr	r0, [pc, #172]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e8c:	f008 f82a 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e96:	f7ff fc4b 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e9a:	4827      	ldr	r0, [pc, #156]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002e9c:	f007 fd54 	bl	800a948 <HAL_TIM_PWM_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8002ea6:	f7ff fc43 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4822      	ldr	r0, [pc, #136]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002eae:	f007 fea9 	bl	800ac04 <HAL_TIM_OnePulse_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002eb8:	f7ff fc3a 	bl	8002730 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002ec0:	2360      	movs	r3, #96	; 0x60
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4819      	ldr	r0, [pc, #100]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002ed4:	f008 f8ca 	bl	800b06c <HAL_TIM_SlaveConfigSynchro>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002ede:	f7ff fc27 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4811      	ldr	r0, [pc, #68]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002ef2:	f008 fc2f 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002efc:	f7ff fc18 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002f00:	2370      	movs	r3, #112	; 0x70
 8002f02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000;
 8002f04:	f242 3328 	movw	r3, #9000	; 0x2328
 8002f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	4807      	ldr	r0, [pc, #28]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002f1a:	f007 ff25 	bl	800ad68 <HAL_TIM_PWM_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8002f24:	f7ff fc04 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <MX_TIM3_Init+0x130>)
 8002f2a:	f000 f97d 	bl	8003228 <HAL_TIM_MspPostInit>

}
 8002f2e:	bf00      	nop
 8002f30:	3748      	adds	r7, #72	; 0x48
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20001118 	.word	0x20001118
 8002f3c:	40000400 	.word	0x40000400

08002f40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b092      	sub	sp, #72	; 0x48
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <MX_TIM4_Init+0x144>)
 8002f82:	4a41      	ldr	r2, [pc, #260]	; (8003088 <MX_TIM4_Init+0x148>)
 8002f84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <MX_TIM4_Init+0x144>)
 8002f88:	2247      	movs	r2, #71	; 0x47
 8002f8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <MX_TIM4_Init+0x144>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <MX_TIM4_Init+0x144>)
 8002f94:	f242 3228 	movw	r2, #9000	; 0x2328
 8002f98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <MX_TIM4_Init+0x144>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <MX_TIM4_Init+0x144>)
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fa6:	4837      	ldr	r0, [pc, #220]	; (8003084 <MX_TIM4_Init+0x144>)
 8002fa8:	f007 fb84 	bl	800a6b4 <HAL_TIM_Base_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002fb2:	f7ff fbbd 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4830      	ldr	r0, [pc, #192]	; (8003084 <MX_TIM4_Init+0x144>)
 8002fc4:	f007 ff8e 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002fce:	f7ff fbaf 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002fd2:	482c      	ldr	r0, [pc, #176]	; (8003084 <MX_TIM4_Init+0x144>)
 8002fd4:	f007 fcb8 	bl	800a948 <HAL_TIM_PWM_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002fde:	f7ff fba7 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	4827      	ldr	r0, [pc, #156]	; (8003084 <MX_TIM4_Init+0x144>)
 8002fe6:	f007 fe0d 	bl	800ac04 <HAL_TIM_OnePulse_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002ff0:	f7ff fb9e 	bl	8002730 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002ff4:	2306      	movs	r3, #6
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002ff8:	2360      	movs	r3, #96	; 0x60
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	481e      	ldr	r0, [pc, #120]	; (8003084 <MX_TIM4_Init+0x144>)
 800300c:	f008 f82e 	bl	800b06c <HAL_TIM_SlaveConfigSynchro>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003016:	f7ff fb8b 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003022:	f107 031c 	add.w	r3, r7, #28
 8003026:	4619      	mov	r1, r3
 8003028:	4816      	ldr	r0, [pc, #88]	; (8003084 <MX_TIM4_Init+0x144>)
 800302a:	f008 fb93 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8003034:	f7ff fb7c 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003038:	2370      	movs	r3, #112	; 0x70
 800303a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000;
 800303c:	f242 3328 	movw	r3, #9000	; 0x2328
 8003040:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800304a:	463b      	mov	r3, r7
 800304c:	2200      	movs	r2, #0
 800304e:	4619      	mov	r1, r3
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <MX_TIM4_Init+0x144>)
 8003052:	f007 fe89 	bl	800ad68 <HAL_TIM_PWM_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 800305c:	f7ff fb68 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	220c      	movs	r2, #12
 8003064:	4619      	mov	r1, r3
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <MX_TIM4_Init+0x144>)
 8003068:	f007 fe7e 	bl	800ad68 <HAL_TIM_PWM_ConfigChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM4_Init+0x136>
  {
    Error_Handler();
 8003072:	f7ff fb5d 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <MX_TIM4_Init+0x144>)
 8003078:	f000 f8d6 	bl	8003228 <HAL_TIM_MspPostInit>

}
 800307c:	bf00      	nop
 800307e:	3748      	adds	r7, #72	; 0x48
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20001160 	.word	0x20001160
 8003088:	40000800 	.word	0x40000800

0800308c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5a      	ldr	r2, [pc, #360]	; (8003210 <HAL_TIM_Base_MspInit+0x184>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d10c      	bne.n	80030c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80030c4:	e0a0      	b.n	8003208 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d136      	bne.n	800313e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	61d3      	str	r3, [r2, #28]
 80030dc:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003100:	2308      	movs	r3, #8
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003110:	4619      	mov	r1, r3
 8003112:	4841      	ldr	r0, [pc, #260]	; (8003218 <HAL_TIM_Base_MspInit+0x18c>)
 8003114:	f005 fd0c 	bl	8008b30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003118:	4b40      	ldr	r3, [pc, #256]	; (800321c <HAL_TIM_Base_MspInit+0x190>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
 8003136:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_TIM_Base_MspInit+0x190>)
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	6053      	str	r3, [r2, #4]
}
 800313c:	e064      	b.n	8003208 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a37      	ldr	r2, [pc, #220]	; (8003220 <HAL_TIM_Base_MspInit+0x194>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d136      	bne.n	80031b6 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003178:	2320      	movs	r3, #32
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003188:	4619      	mov	r1, r3
 800318a:	4823      	ldr	r0, [pc, #140]	; (8003218 <HAL_TIM_Base_MspInit+0x18c>)
 800318c:	f005 fcd0 	bl	8008b30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003190:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_TIM_Base_MspInit+0x190>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ae:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_TIM_Base_MspInit+0x190>)
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	6053      	str	r3, [r2, #4]
}
 80031b4:	e028      	b.n	8003208 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM4)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_TIM_Base_MspInit+0x198>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d123      	bne.n	8003208 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	61d3      	str	r3, [r2, #28]
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031de:	f043 0308 	orr.w	r3, r3, #8
 80031e2:	6193      	str	r3, [r2, #24]
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_TIM_Base_MspInit+0x188>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003200:	4619      	mov	r1, r3
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <HAL_TIM_Base_MspInit+0x18c>)
 8003204:	f005 fc94 	bl	8008b30 <HAL_GPIO_Init>
}
 8003208:	bf00      	nop
 800320a:	3740      	adds	r7, #64	; 0x40
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40010c00 	.word	0x40010c00
 800321c:	40010000 	.word	0x40010000
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800

08003228 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d12b      	bne.n	80032a0 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003248:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = AREV_Pin|AFWD_Pin;
 8003260:	f248 0308 	movw	r3, #32776	; 0x8008
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2302      	movs	r3, #2
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	4619      	mov	r1, r3
 8003274:	4834      	ldr	r0, [pc, #208]	; (8003348 <HAL_TIM_MspPostInit+0x120>)
 8003276:	f005 fc5b 	bl	8008b30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_TIM_MspPostInit+0x124>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <HAL_TIM_MspPostInit+0x124>)
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800329e:	e04d      	b.n	800333c <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <HAL_TIM_MspPostInit+0x128>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12a      	bne.n	8003300 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b26      	ldr	r3, [pc, #152]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	6193      	str	r3, [r2, #24]
 80032b6:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BFWD_Pin;
 80032c2:	2310      	movs	r3, #16
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2302      	movs	r3, #2
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BFWD_GPIO_Port, &GPIO_InitStruct);
 80032ce:	f107 0318 	add.w	r3, r7, #24
 80032d2:	4619      	mov	r1, r3
 80032d4:	481f      	ldr	r0, [pc, #124]	; (8003354 <HAL_TIM_MspPostInit+0x12c>)
 80032d6:	f005 fc2b 	bl	8008b30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <HAL_TIM_MspPostInit+0x124>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_MspPostInit+0x124>)
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	6053      	str	r3, [r2, #4]
}
 80032fe:	e01d      	b.n	800333c <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM4)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_TIM_MspPostInit+0x130>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d118      	bne.n	800333c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	6193      	str	r3, [r2, #24]
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_TIM_MspPostInit+0x11c>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CFWD_Pin|CREV_Pin;
 8003322:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2302      	movs	r3, #2
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 0318 	add.w	r3, r7, #24
 8003334:	4619      	mov	r1, r3
 8003336:	4807      	ldr	r0, [pc, #28]	; (8003354 <HAL_TIM_MspPostInit+0x12c>)
 8003338:	f005 fbfa 	bl	8008b30 <HAL_GPIO_Init>
}
 800333c:	bf00      	nop
 800333e:	3730      	adds	r7, #48	; 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	40010800 	.word	0x40010800
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40010c00 	.word	0x40010c00
 8003358:	40000800 	.word	0x40000800

0800335c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <MX_USART1_UART_Init+0x50>)
 8003364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003368:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800336c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003382:	220c      	movs	r2, #12
 8003384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003392:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_USART1_UART_Init+0x4c>)
 8003394:	f008 fa8d 	bl	800b8b2 <HAL_UART_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800339e:	f7ff f9c7 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200011a8 	.word	0x200011a8
 80033ac:	40013800 	.word	0x40013800

080033b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_USART3_UART_Init+0x50>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80033c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART3_UART_Init+0x4c>)
 80033e8:	f008 fa63 	bl	800b8b2 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033f2:	f7ff f99d 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200011ec 	.word	0x200011ec
 8003400:	40004800 	.word	0x40004800

08003404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a45      	ldr	r2, [pc, #276]	; (8003534 <HAL_UART_MspInit+0x130>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d13a      	bne.n	800349a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003424:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_UART_MspInit+0x134>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a43      	ldr	r2, [pc, #268]	; (8003538 <HAL_UART_MspInit+0x134>)
 800342a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_UART_MspInit+0x134>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_UART_MspInit+0x134>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a3d      	ldr	r2, [pc, #244]	; (8003538 <HAL_UART_MspInit+0x134>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_UART_MspInit+0x134>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TxD_Pin;
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TxD_GPIO_Port, &GPIO_InitStruct);
 8003462:	f107 031c 	add.w	r3, r7, #28
 8003466:	4619      	mov	r1, r3
 8003468:	4834      	ldr	r0, [pc, #208]	; (800353c <HAL_UART_MspInit+0x138>)
 800346a:	f005 fb61 	bl	8008b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxD_Pin;
 800346e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RxD_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	482e      	ldr	r0, [pc, #184]	; (800353c <HAL_UART_MspInit+0x138>)
 8003484:	f005 fb54 	bl	8008b30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	2025      	movs	r0, #37	; 0x25
 800348e:	f005 f926 	bl	80086de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003492:	2025      	movs	r0, #37	; 0x25
 8003494:	f005 f93f 	bl	8008716 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003498:	e048      	b.n	800352c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_UART_MspInit+0x13c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d143      	bne.n	800352c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ae:	61d3      	str	r3, [r2, #28]
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034c2:	f043 0310 	orr.w	r3, r3, #16
 80034c6:	6193      	str	r3, [r2, #24]
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_UART_MspInit+0x134>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIRE_TxD_Pin;
 80034d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034de:	2303      	movs	r3, #3
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(WIRE_TxD_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	4816      	ldr	r0, [pc, #88]	; (8003544 <HAL_UART_MspInit+0x140>)
 80034ea:	f005 fb21 	bl	8008b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIRE_RxD_Pin;
 80034ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f4:	2300      	movs	r3, #0
 80034f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIRE_RxD_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 031c 	add.w	r3, r7, #28
 8003500:	4619      	mov	r1, r3
 8003502:	4810      	ldr	r0, [pc, #64]	; (8003544 <HAL_UART_MspInit+0x140>)
 8003504:	f005 fb14 	bl	8008b30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_UART_MspInit+0x144>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <HAL_UART_MspInit+0x144>)
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	6053      	str	r3, [r2, #4]
}
 800352c:	bf00      	nop
 800352e:	3730      	adds	r7, #48	; 0x30
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40013800 	.word	0x40013800
 8003538:	40021000 	.word	0x40021000
 800353c:	40010800 	.word	0x40010800
 8003540:	40004800 	.word	0x40004800
 8003544:	40011000 	.word	0x40011000
 8003548:	40010000 	.word	0x40010000

0800354c <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <dbg_available+0x38>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29a      	uxth	r2, r3
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <dbg_available+0x3c>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003564:	b29b      	uxth	r3, r3
 8003566:	4a09      	ldr	r2, [pc, #36]	; (800358c <dbg_available+0x40>)
 8003568:	fba2 1203 	umull	r1, r2, r2, r3
 800356c:	0a52      	lsrs	r2, r2, #9
 800356e:	f240 4106 	movw	r1, #1030	; 0x406
 8003572:	fb01 f202 	mul.w	r2, r1, r2
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	b21b      	sxth	r3, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	20001230 	.word	0x20001230
 8003588:	20001232 	.word	0x20001232
 800358c:	7f411e53 	.word	0x7f411e53

08003590 <dbg_read>:

int16_t dbg_read(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <dbg_read+0x5c>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <dbg_read+0x60>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d102      	bne.n	80035ac <dbg_read+0x1c>
	{
		return -1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e019      	b.n	80035e0 <dbg_read+0x50>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <dbg_read+0x60>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <dbg_read+0x64>)
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <dbg_read+0x60>)
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <dbg_read+0x68>)
 80035c6:	fba2 1203 	umull	r1, r2, r2, r3
 80035ca:	0a52      	lsrs	r2, r2, #9
 80035cc:	f240 4106 	movw	r1, #1030	; 0x406
 80035d0:	fb01 f202 	mul.w	r2, r1, r2
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <dbg_read+0x60>)
 80035da:	801a      	strh	r2, [r3, #0]
		return c;
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	b21b      	sxth	r3, r3
	}
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20001230 	.word	0x20001230
 80035f0:	20001232 	.word	0x20001232
 80035f4:	20001234 	.word	0x20001234
 80035f8:	7f411e53 	.word	0x7f411e53

080035fc <EN_Interrupt>:
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <EN_Interrupt+0x1c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <EN_Interrupt+0x1c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	60da      	str	r2, [r3, #12]
	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	200011a8 	.word	0x200011a8

0800361c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800361c:	480c      	ldr	r0, [pc, #48]	; (8003650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800361e:	490d      	ldr	r1, [pc, #52]	; (8003654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003624:	e002      	b.n	800362c <LoopCopyDataInit>

08003626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362a:	3304      	adds	r3, #4

0800362c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800362c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003630:	d3f9      	bcc.n	8003626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003634:	4c0a      	ldr	r4, [pc, #40]	; (8003660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003638:	e001      	b.n	800363e <LoopFillZerobss>

0800363a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800363c:	3204      	adds	r2, #4

0800363e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003640:	d3fb      	bcc.n	800363a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003642:	f7ff fa97 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f008 faf5 	bl	800bc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800364a:	f7fe fd59 	bl	8002100 <main>
  bx lr
 800364e:	4770      	bx	lr
  ldr r0, =_sdata
 8003650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003654:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003658:	080115c8 	.word	0x080115c8
  ldr r2, =_sbss
 800365c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003660:	20001d10 	.word	0x20001d10

08003664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC1_2_IRQHandler>
	...

08003668 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b7f      	cmp	r3, #127	; 0x7f
 8003678:	d802      	bhi.n	8003680 <ff_convert+0x18>
		c = src;
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	81fb      	strh	r3, [r7, #14]
 800367e:	e025      	b.n	80036cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2bff      	cmp	r3, #255	; 0xff
 800368a:	d805      	bhi.n	8003698 <ff_convert+0x30>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	3b80      	subs	r3, #128	; 0x80
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <ff_convert+0x70>)
 8003692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003696:	e000      	b.n	800369a <ff_convert+0x32>
 8003698:	2300      	movs	r3, #0
 800369a:	81fb      	strh	r3, [r7, #14]
 800369c:	e016      	b.n	80036cc <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800369e:	2300      	movs	r3, #0
 80036a0:	81fb      	strh	r3, [r7, #14]
 80036a2:	e009      	b.n	80036b8 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <ff_convert+0x70>)
 80036a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d006      	beq.n	80036c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	3301      	adds	r3, #1
 80036b6:	81fb      	strh	r3, [r7, #14]
 80036b8:	89fb      	ldrh	r3, [r7, #14]
 80036ba:	2b7f      	cmp	r3, #127	; 0x7f
 80036bc:	d9f2      	bls.n	80036a4 <ff_convert+0x3c>
 80036be:	e000      	b.n	80036c2 <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 80036c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	3380      	adds	r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80036cc:	89fb      	ldrh	r3, [r7, #14]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	0800ff00 	.word	0x0800ff00

080036dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e002      	b.n	80036f2 <ff_wtoupper+0x16>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4a0f      	ldr	r2, [pc, #60]	; (8003730 <ff_wtoupper+0x54>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <ff_wtoupper+0x30>
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <ff_wtoupper+0x54>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	429a      	cmp	r2, r3
 800370a:	d1ef      	bne.n	80036ec <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <ff_wtoupper+0x54>)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <ff_wtoupper+0x46>
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <ff_wtoupper+0x58>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003720:	e000      	b.n	8003724 <ff_wtoupper+0x48>
 8003722:	88fb      	ldrh	r3, [r7, #6]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	08010000 	.word	0x08010000
 8003734:	080101e0 	.word	0x080101e0

08003738 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 800374c:	e00c      	b.n	8003768 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3304      	adds	r3, #4
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3304      	adds	r3, #4
 8003760:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3b04      	subs	r3, #4
 8003766:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d8ef      	bhi.n	800374e <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 800376e:	e007      	b.n	8003780 <mem_cpy+0x48>
		*d++ = *s++;
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	1c53      	adds	r3, r2, #1
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	6179      	str	r1, [r7, #20]
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f2      	bne.n	8003770 <mem_cpy+0x38>
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80037a6:	e005      	b.n	80037b4 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	617a      	str	r2, [r7, #20]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f4      	bne.n	80037a8 <mem_set+0x12>
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80037ca:	b480      	push	{r7}
 80037cc:	b089      	sub	sp, #36	; 0x24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80037e2:	bf00      	nop
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00d      	beq.n	800380a <mem_cmp+0x40>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	61fa      	str	r2, [r7, #28]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	61ba      	str	r2, [r7, #24]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	1acb      	subs	r3, r1, r3
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ec      	beq.n	80037e4 <mem_cmp+0x1a>
	return r;
 800380a:	697b      	ldr	r3, [r7, #20]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3724      	adds	r7, #36	; 0x24
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003820:	e002      	b.n	8003828 <chk_chr+0x12>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3301      	adds	r3, #1
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <chk_chr+0x26>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4293      	cmp	r3, r2
 800383a:	d1f2      	bne.n	8003822 <chk_chr+0xc>
	return *str;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	781b      	ldrb	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d038      	beq.n	80038cc <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7858      	ldrb	r0, [r3, #1]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800386a:	2301      	movs	r3, #1
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	f002 ff4f 	bl	8006710 <disk_write>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <sync_window+0x32>
			return FR_DISK_ERR;
 8003878:	2301      	movs	r3, #1
 800387a:	e028      	b.n	80038ce <sync_window+0x84>
		fs->wflag = 0;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d31f      	bcc.n	80038cc <sync_window+0x82>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4413      	add	r3, r2
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	429a      	cmp	r2, r3
 800389a:	d217      	bcs.n	80038cc <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	78db      	ldrb	r3, [r3, #3]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	e010      	b.n	80038c6 <sync_window+0x7c>
				wsect += fs->fsize;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7858      	ldrb	r0, [r3, #1]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80038b8:	2301      	movs	r3, #1
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f002 ff28 	bl	8006710 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d8eb      	bhi.n	80038a4 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d018      	beq.n	800391c <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ffad 	bl	800384a <sync_window>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <move_window+0x24>
			return FR_DISK_ERR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e011      	b.n	800391e <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7858      	ldrb	r0, [r3, #1]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003904:	2301      	movs	r3, #1
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	f002 fe9a 	bl	8006640 <disk_read>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <move_window+0x40>
			return FR_DISK_ERR;
 8003912:	2301      	movs	r3, #1
 8003914:	e003      	b.n	800391e <move_window+0x48>
		fs->winsect = sector;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff8a 	bl	800384a <sync_window>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d14a      	bne.n	80039d6 <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d13a      	bne.n	80039be <sync_fs+0x96>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	795b      	ldrb	r3, [r3, #5]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d036      	beq.n	80039be <sync_fs+0x96>
			fs->winsect = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3338      	adds	r3, #56	; 0x38
 800395a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff18 	bl	8003796 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3338      	adds	r3, #56	; 0x38
 800396a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800396e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003972:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3338      	adds	r3, #56	; 0x38
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <sync_fs+0xb8>)
 800397a:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3338      	adds	r3, #56	; 0x38
 8003980:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <sync_fs+0xbc>)
 8003986:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3338      	adds	r3, #56	; 0x38
 800398c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6912      	ldr	r2, [r2, #16]
 8003994:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3338      	adds	r3, #56	; 0x38
 800399a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7858      	ldrb	r0, [r3, #1]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	2301      	movs	r3, #1
 80039b4:	f002 feac 	bl	8006710 <disk_write>
			fs->fsi_flag = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 ff22 	bl	8006810 <disk_ioctl>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <sync_fs+0xae>
			res = FR_DISK_ERR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	41615252 	.word	0x41615252
 80039e4:	61417272 	.word	0x61417272

080039e8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	3b02      	subs	r3, #2
 80039f6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	3b02      	subs	r3, #2
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d301      	bcc.n	8003a08 <clust2sect+0x20>
 8003a04:	2300      	movs	r3, #0
 8003a06:	e008      	b.n	8003a1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	fb03 f202 	mul.w	r2, r3, r2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	4413      	add	r3, r2
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d904      	bls.n	8003a3e <get_fat+0x1a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d301      	bcc.n	8003a42 <get_fat+0x1e>
		return 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e085      	b.n	8003b4e <get_fat+0x12a>

	switch (fs->fs_type) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d05f      	beq.n	8003b0a <get_fat+0xe6>
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	dc7d      	bgt.n	8003b4a <get_fat+0x126>
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <get_fat+0x34>
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d042      	beq.n	8003adc <get_fat+0xb8>
 8003a56:	e078      	b.n	8003b4a <get_fat+0x126>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	0a5b      	lsrs	r3, r3, #9
 8003a6e:	4413      	add	r3, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff2f 	bl	80038d6 <move_window>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d15e      	bne.n	8003b3c <get_fat+0x118>
		wc = fs->win[bc % SS(fs)]; bc++;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3301      	adds	r3, #1
 8003a92:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	0a5b      	lsrs	r3, r3, #9
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff18 	bl	80038d6 <move_window>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d149      	bne.n	8003b40 <get_fat+0x11c>
		wc |= fs->win[bc % SS(fs)] << 8;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <get_fat+0xb0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	e03c      	b.n	8003b4e <get_fat+0x12a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ada:	e038      	b.n	8003b4e <get_fat+0x12a>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fef4 	bl	80038d6 <move_window>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d127      	bne.n	8003b44 <get_fat+0x120>
		p = &fs->win[clst * 2 % SS(fs)];
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003afc:	3338      	adds	r3, #56	; 0x38
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	e021      	b.n	8003b4e <get_fat+0x12a>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	4413      	add	r3, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fedd 	bl	80038d6 <move_window>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d112      	bne.n	8003b48 <get_fat+0x124>
		p = &fs->win[clst * 4 % SS(fs)];
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003b2a:	3338      	adds	r3, #56	; 0x38
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b3a:	e008      	b.n	8003b4e <get_fat+0x12a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003b3c:	bf00      	nop
 8003b3e:	e004      	b.n	8003b4a <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8003b48:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b088      	sub	sp, #32
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d904      	bls.n	8003b72 <put_fat+0x1c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <put_fat+0x22>
		res = FR_INT_ERR;
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e0bf      	b.n	8003cf8 <put_fat+0x1a2>

	} else {
		switch (fs->fs_type) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	f000 808d 	beq.w	8003c9c <put_fat+0x146>
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	f300 80ab 	bgt.w	8003cde <put_fat+0x188>
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <put_fat+0x3c>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d06a      	beq.n	8003c66 <put_fat+0x110>
 8003b90:	e0a5      	b.n	8003cde <put_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	0a5b      	lsrs	r3, r3, #9
 8003ba8:	4413      	add	r3, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff fe92 	bl	80038d6 <move_window>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f040 8093 	bne.w	8003ce4 <put_fat+0x18e>
			p = &fs->win[bc % SS(fs)];
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	3338      	adds	r3, #56	; 0x38
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <put_fat+0x9c>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b25a      	sxtb	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	b25b      	sxtb	r3, r3
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b25b      	sxtb	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	e001      	b.n	8003bf6 <put_fat+0xa0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	7013      	strb	r3, [r2, #0]
			bc++;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	0a5b      	lsrs	r3, r3, #9
 8003c0e:	4413      	add	r3, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fe5f 	bl	80038d6 <move_window>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c1c:	7ffb      	ldrb	r3, [r7, #31]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d162      	bne.n	8003ce8 <put_fat+0x192>
			p = &fs->win[bc % SS(fs)];
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	3338      	adds	r3, #56	; 0x38
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <put_fat+0xec>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e00e      	b.n	8003c60 <put_fat+0x10a>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b25b      	sxtb	r3, r3
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	b25a      	sxtb	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	7013      	strb	r3, [r2, #0]
			break;
 8003c64:	e045      	b.n	8003cf2 <put_fat+0x19c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	4413      	add	r3, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fe2f 	bl	80038d6 <move_window>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c7c:	7ffb      	ldrb	r3, [r7, #31]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d134      	bne.n	8003cec <put_fat+0x196>
			p = &fs->win[clst * 2 % SS(fs)];
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c8a:	3338      	adds	r3, #56	; 0x38
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	801a      	strh	r2, [r3, #0]
			break;
 8003c9a:	e02a      	b.n	8003cf2 <put_fat+0x19c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fe14 	bl	80038d6 <move_window>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11b      	bne.n	8003cf0 <put_fat+0x19a>
			p = &fs->win[clst * 4 % SS(fs)];
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003cc0:	3338      	adds	r3, #56	; 0x38
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
			break;
 8003cdc:	e009      	b.n	8003cf2 <put_fat+0x19c>

		default :
			res = FR_INT_ERR;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e006      	b.n	8003cf2 <put_fat+0x19c>
			if (res != FR_OK) break;
 8003ce4:	bf00      	nop
 8003ce6:	e004      	b.n	8003cf2 <put_fat+0x19c>
			if (res != FR_OK) break;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <put_fat+0x19c>
			if (res != FR_OK) break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <put_fat+0x19c>
			if (res != FR_OK) break;
 8003cf0:	bf00      	nop
		}
		fs->wflag = 1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8003cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d904      	bls.n	8003d1c <remove_chain+0x1a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <remove_chain+0x20>
		res = FR_INT_ERR;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e039      	b.n	8003d96 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003d26:	e02d      	b.n	8003d84 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fe7a 	bl	8003a24 <get_fat>
 8003d30:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02b      	beq.n	8003d90 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <remove_chain+0x42>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	e028      	b.n	8003d96 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d102      	bne.n	8003d52 <remove_chain+0x50>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e021      	b.n	8003d96 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003d52:	2200      	movs	r2, #0
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fefd 	bl	8003b56 <put_fat>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d007      	beq.n	8003d80 <remove_chain+0x7e>
				fs->free_clust++;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3cc      	bcc.n	8003d28 <remove_chain+0x26>
 8003d8e:	e002      	b.n	8003d96 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <remove_chain+0x94>
			if (res != FR_OK) break;
 8003d94:	bf00      	nop
		}
	}

	return res;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <create_chain+0x26>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d315      	bcc.n	8003df2 <create_chain+0x52>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	e012      	b.n	8003df2 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fe28 	bl	8003a24 <get_fat>
 8003dd4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d801      	bhi.n	8003de0 <create_chain+0x40>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e064      	b.n	8003eaa <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d201      	bcs.n	8003dee <create_chain+0x4e>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	e05d      	b.n	8003eaa <create_chain+0x10a>
		scl = clst;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d307      	bcc.n	8003e16 <create_chain+0x76>
			ncl = 2;
 8003e06:	2302      	movs	r3, #2
 8003e08:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d901      	bls.n	8003e16 <create_chain+0x76>
 8003e12:	2300      	movs	r3, #0
 8003e14:	e049      	b.n	8003eaa <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fe03 	bl	8003a24 <get_fat>
 8003e1e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d002      	beq.n	8003e34 <create_chain+0x94>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <create_chain+0x98>
			return cs;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	e038      	b.n	8003eaa <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1da      	bne.n	8003df6 <create_chain+0x56>
 8003e40:	2300      	movs	r3, #0
 8003e42:	e032      	b.n	8003eaa <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8003e44:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003e46:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003e4a:	6979      	ldr	r1, [r7, #20]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fe82 	bl	8003b56 <put_fat>
 8003e52:	4603      	mov	r3, r0
 8003e54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <create_chain+0xd0>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fe75 	bl	8003b56 <put_fat>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d110      	bne.n	8003e98 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d010      	beq.n	8003ea8 <create_chain+0x108>
			fs->free_clust--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	715a      	strb	r2, [r3, #5]
 8003e96:	e007      	b.n	8003ea8 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <create_chain+0x104>
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e000      	b.n	8003ea6 <create_chain+0x106>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003ea8:	697b      	ldr	r3, [r7, #20]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	887a      	ldrh	r2, [r7, #2]
 8003ec2:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d005      	beq.n	8003edc <dir_sdi+0x2a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d301      	bcc.n	8003ee0 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8003edc:	2302      	movs	r3, #2
 8003ede:	e066      	b.n	8003fae <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <dir_sdi+0x46>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d103      	bne.n	8003ef8 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d114      	bne.n	8003f28 <dir_sdi+0x76>
		dj->clust = clst;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	891b      	ldrh	r3, [r3, #8]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d301      	bcc.n	8003f14 <dir_sdi+0x62>
			return FR_INT_ERR;
 8003f10:	2302      	movs	r3, #2
 8003f12:	e04c      	b.n	8003fae <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	0912      	lsrs	r2, r2, #4
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]
 8003f26:	e036      	b.n	8003f96 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	789b      	ldrb	r3, [r3, #2]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f34:	e01b      	b.n	8003f6e <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fd71 	bl	8003a24 <get_fat>
 8003f42:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d101      	bne.n	8003f50 <dir_sdi+0x9e>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02e      	b.n	8003fae <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d905      	bls.n	8003f62 <dir_sdi+0xb0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d301      	bcc.n	8003f66 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e023      	b.n	8003fae <dir_sdi+0xfc>
			idx -= ic;
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	897b      	ldrh	r3, [r7, #10]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d2df      	bcs.n	8003f36 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fd30 	bl	80039e8 <clust2sect>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	887b      	ldrh	r3, [r7, #2]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	015b      	lsls	r3, r3, #5
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003fb6:	b590      	push	{r4, r7, lr}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	88db      	ldrh	r3, [r3, #6]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <dir_next+0x20>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <dir_next+0x24>
		return FR_NO_FILE;
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e0bb      	b.n	8004152 <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80a6 	bne.w	8004134 <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d108      	bne.n	800400c <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	891b      	ldrh	r3, [r3, #8]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	f0c0 8096 	bcc.w	8004134 <dir_next+0x17e>
				return FR_NO_FILE;
 8004008:	2304      	movs	r3, #4
 800400a:	e0a2      	b.n	8004152 <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	789b      	ldrb	r3, [r3, #2]
 800401a:	3b01      	subs	r3, #1
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 8088 	bne.w	8004134 <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7ff fcf8 	bl	8003a24 <get_fat>
 8004034:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d801      	bhi.n	8004040 <dir_next+0x8a>
 800403c:	2302      	movs	r3, #2
 800403e:	e088      	b.n	8004152 <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d101      	bne.n	800404c <dir_next+0x96>
 8004048:	2301      	movs	r3, #1
 800404a:	e082      	b.n	8004152 <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d361      	bcc.n	800411c <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <dir_next+0xac>
 800405e:	2304      	movs	r3, #4
 8004060:	e077      	b.n	8004152 <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7ff fe97 	bl	8003da0 <create_chain>
 8004072:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <dir_next+0xc8>
 800407a:	2307      	movs	r3, #7
 800407c:	e069      	b.n	8004152 <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <dir_next+0xd2>
 8004084:	2302      	movs	r3, #2
 8004086:	e064      	b.n	8004152 <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d101      	bne.n	8004094 <dir_next+0xde>
 8004090:	2301      	movs	r3, #1
 8004092:	e05e      	b.n	8004152 <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fbd6 	bl	800384a <sync_window>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <dir_next+0xf2>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e054      	b.n	8004152 <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3338      	adds	r3, #56	; 0x38
 80040ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fb6e 	bl	8003796 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681c      	ldr	r4, [r3, #0]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7ff fc8f 	bl	80039e8 <clust2sect>
 80040ca:	4603      	mov	r3, r0
 80040cc:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80040ce:	2300      	movs	r3, #0
 80040d0:	72fb      	strb	r3, [r7, #11]
 80040d2:	e015      	b.n	8004100 <dir_next+0x14a>
						dj->fs->wflag = 1;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fbb2 	bl	800384a <sync_window>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <dir_next+0x13a>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e030      	b.n	8004152 <dir_next+0x19c>
						dj->fs->winsect++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f6:	3201      	adds	r2, #1
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	3301      	adds	r3, #1
 80040fe:	72fb      	strb	r3, [r7, #11]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	789b      	ldrb	r3, [r3, #2]
 8004106:	7afa      	ldrb	r2, [r7, #11]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3e3      	bcc.n	80040d4 <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004112:	7afa      	ldrb	r2, [r7, #11]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	1a8a      	subs	r2, r1, r2
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fc5d 	bl	80039e8 <clust2sect>
 800412e:	4602      	mov	r2, r0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	893a      	ldrh	r2, [r7, #8]
 8004138:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	015b      	lsls	r3, r3, #5
 800414a:	441a      	add	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}

0800415a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8004164:	2100      	movs	r1, #0
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fea3 	bl	8003eb2 <dir_sdi>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d12d      	bne.n	80041d2 <dir_alloc+0x78>
		n = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7ff fba6 	bl	80038d6 <move_window>
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11d      	bne.n	80041d0 <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2be5      	cmp	r3, #229	; 0xe5
 800419c:	d004      	beq.n	80041a8 <dir_alloc+0x4e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d102      	bne.n	80041bc <dir_alloc+0x62>
 80041b6:	e00c      	b.n	80041d2 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 80041bc:	2101      	movs	r1, #1
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fef9 	bl	8003fb6 <dir_next>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0d5      	beq.n	800417a <dir_alloc+0x20>
 80041ce:	e000      	b.n	80041d2 <dir_alloc+0x78>
			if (res != FR_OK) break;
 80041d0:	bf00      	nop
	}
	return res;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	331a      	adds	r3, #26
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d106      	bne.n	8004204 <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

	return cl;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	331a      	adds	r3, #26
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	b292      	uxth	r2, r2
 8004222:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	0c1a      	lsrs	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3314      	adds	r3, #20
 800422c:	b292      	uxth	r2, r2
 800422e:	801a      	strh	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424e:	1e5a      	subs	r2, r3, #1
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	2301      	movs	r3, #1
 8004262:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <cmp_lfn+0xbc>)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d019      	beq.n	80042b0 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800427c:	89bb      	ldrh	r3, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fa2c 	bl	80036dc <ff_wtoupper>
 8004284:	4603      	mov	r3, r0
 8004286:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b13      	cmp	r3, #19
 800428c:	d80e      	bhi.n	80042ac <cmp_lfn+0x70>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	617a      	str	r2, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fa1d 	bl	80036dc <ff_wtoupper>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	89fb      	ldrh	r3, [r7, #14]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d008      	beq.n	80042be <cmp_lfn+0x82>
				return 0;				/* Not matched */
 80042ac:	2300      	movs	r3, #0
 80042ae:	e01f      	b.n	80042f0 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80042b0:	89bb      	ldrh	r3, [r7, #12]
 80042b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d001      	beq.n	80042be <cmp_lfn+0x82>
 80042ba:	2300      	movs	r3, #0
 80042bc:	e018      	b.n	80042f0 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3301      	adds	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d9cc      	bls.n	8004264 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <cmp_lfn+0xb2>
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <cmp_lfn+0xb2>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <cmp_lfn+0xb2>
		return 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 80042ee:	2301      	movs	r3, #1
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	08010440 	.word	0x08010440

080042fc <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	460b      	mov	r3, r1
 800430c:	71fb      	strb	r3, [r7, #7]
 800430e:	4613      	mov	r3, r2
 8004310:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	330d      	adds	r3, #13
 8004316:	79ba      	ldrb	r2, [r7, #6]
 8004318:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	330b      	adds	r3, #11
 800431e:	220f      	movs	r2, #15
 8004320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	330c      	adds	r3, #12
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	331a      	adds	r3, #26
 800432e:	2200      	movs	r2, #0
 8004330:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	82fb      	strh	r3, [r7, #22]
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 800434a:	8afb      	ldrh	r3, [r7, #22]
 800434c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <fit_lfn+0x68>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	61fa      	str	r2, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <fit_lfn+0xc4>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4413      	add	r3, r2
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4413      	add	r3, r2
 8004372:	8afa      	ldrh	r2, [r7, #22]
 8004374:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <fit_lfn+0x86>
 800437c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004380:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3301      	adds	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d9dd      	bls.n	800434a <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004394:	4293      	cmp	r3, r2
 8004396:	d006      	beq.n	80043a6 <fit_lfn+0xaa>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <fit_lfn+0xb2>
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	79fa      	ldrb	r2, [r7, #7]
 80043b2:	701a      	strb	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3724      	adds	r7, #36	; 0x24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	08010440 	.word	0x08010440

080043c4 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 80043d2:	220b      	movs	r2, #11
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff f9ae 	bl	8003738 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d90f      	bls.n	8004402 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	03db      	lsls	r3, r3, #15
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1c99      	adds	r1, r3, #2
 80043f2:	6079      	str	r1, [r7, #4]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	807b      	strh	r3, [r7, #2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ef      	bne.n	80043e2 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004402:	2307      	movs	r3, #7
 8004404:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	b2db      	uxtb	r3, r3
 8004410:	3330      	adds	r3, #48	; 0x30
 8004412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 8004416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800441a:	2b39      	cmp	r3, #57	; 0x39
 800441c:	d904      	bls.n	8004428 <gen_numname+0x64>
 800441e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004422:	3307      	adds	r3, #7
 8004424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	623a      	str	r2, [r7, #32]
 800442e:	3328      	adds	r3, #40	; 0x28
 8004430:	443b      	add	r3, r7
 8004432:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004436:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	807b      	strh	r3, [r7, #2]
	} while (seq);
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1df      	bne.n	8004406 <gen_numname+0x42>
	ns[i] = '~';
 8004446:	f107 0214 	add.w	r2, r7, #20
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	4413      	add	r3, r2
 800444e:	227e      	movs	r2, #126	; 0x7e
 8004450:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	e002      	b.n	800445e <gen_numname+0x9a>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	429a      	cmp	r2, r3
 8004464:	d205      	bcs.n	8004472 <gen_numname+0xae>
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d1f2      	bne.n	8004458 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2b07      	cmp	r3, #7
 8004476:	d807      	bhi.n	8004488 <gen_numname+0xc4>
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	623a      	str	r2, [r7, #32]
 800447e:	3328      	adds	r3, #40	; 0x28
 8004480:	443b      	add	r3, r7
 8004482:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8004486:	e000      	b.n	800448a <gen_numname+0xc6>
 8004488:	2120      	movs	r1, #32
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	61fa      	str	r2, [r7, #28]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	460a      	mov	r2, r1
 8004496:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b07      	cmp	r3, #7
 800449c:	d9e9      	bls.n	8004472 <gen_numname+0xae>
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80044b4:	230b      	movs	r3, #11
 80044b6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	0852      	lsrs	r2, r2, #1
 80044be:	01db      	lsls	r3, r3, #7
 80044c0:	4313      	orrs	r3, r2
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	6079      	str	r1, [r7, #4]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ed      	bne.n	80044b8 <sum_sfn+0x10>
	return sum;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 80044f0:	2100      	movs	r1, #0
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fcdd 	bl	8003eb2 <dir_sdi>
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <dir_find+0x1e>
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	e098      	b.n	8004638 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 8004506:	23ff      	movs	r3, #255	; 0xff
 8004508:	753b      	strb	r3, [r7, #20]
 800450a:	7d3b      	ldrb	r3, [r7, #20]
 800450c:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7ff f9dc 	bl	80038d6 <move_window>
 800451e:	4603      	mov	r3, r0
 8004520:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8081 	bne.w	800462c <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004536:	7dbb      	ldrb	r3, [r7, #22]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <dir_find+0x5a>
 800453c:	2304      	movs	r3, #4
 800453e:	75fb      	strb	r3, [r7, #23]
 8004540:	e079      	b.n	8004636 <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	330b      	adds	r3, #11
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454c:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	2be5      	cmp	r3, #229	; 0xe5
 8004552:	d007      	beq.n	8004564 <dir_find+0x7c>
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <dir_find+0x82>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d002      	beq.n	800456a <dir_find+0x82>
			ord = 0xFF;
 8004564:	23ff      	movs	r3, #255	; 0xff
 8004566:	757b      	strb	r3, [r7, #21]
 8004568:	e055      	b.n	8004616 <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b0f      	cmp	r3, #15
 800456e:	d12f      	bne.n	80045d0 <dir_find+0xe8>
				if (dj->lfn) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d04e      	beq.n	8004616 <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 8004578:	7dbb      	ldrb	r3, [r7, #22]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	7b5b      	ldrb	r3, [r3, #13]
 8004586:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 8004588:	7dbb      	ldrb	r3, [r7, #22]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	75bb      	strb	r3, [r7, #22]
 8004590:	7dbb      	ldrb	r3, [r7, #22]
 8004592:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	88da      	ldrh	r2, [r3, #6]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 800459c:	7dba      	ldrb	r2, [r7, #22]
 800459e:	7d7b      	ldrb	r3, [r7, #21]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d112      	bne.n	80045ca <dir_find+0xe2>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	330d      	adds	r3, #13
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	7d3a      	ldrb	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d10c      	bne.n	80045ca <dir_find+0xe2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fe40 	bl	800423c <cmp_lfn>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <dir_find+0xe2>
 80045c2:	7d7b      	ldrb	r3, [r7, #21]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e000      	b.n	80045cc <dir_find+0xe4>
 80045ca:	23ff      	movs	r3, #255	; 0xff
 80045cc:	757b      	strb	r3, [r7, #21]
 80045ce:	e022      	b.n	8004616 <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80045d0:	7d7b      	ldrb	r3, [r7, #21]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <dir_find+0xfe>
 80045d6:	6938      	ldr	r0, [r7, #16]
 80045d8:	f7ff ff66 	bl	80044a8 <sum_sfn>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	7d3b      	ldrb	r3, [r7, #20]
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d024      	beq.n	8004630 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80045e6:	23ff      	movs	r3, #255	; 0xff
 80045e8:	757b      	strb	r3, [r7, #21]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f0:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	330b      	adds	r3, #11
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <dir_find+0x12e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	220b      	movs	r2, #11
 8004608:	4619      	mov	r1, r3
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f7ff f8dd 	bl	80037ca <mem_cmp>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8004616:	2100      	movs	r1, #0
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fccc 	bl	8003fb6 <dir_next>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f43f af72 	beq.w	800450e <dir_find+0x26>
 800462a:	e004      	b.n	8004636 <dir_find+0x14e>
		if (res != FR_OK) break;
 800462c:	bf00      	nop
 800462e:	e002      	b.n	8004636 <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004630:	bf00      	nop
 8004632:	e000      	b.n	8004636 <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 8004634:	bf00      	nop

	return res;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	220c      	movs	r2, #12
 800465a:	69f9      	ldr	r1, [r7, #28]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff f86b 	bl	8003738 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 8004662:	7cfb      	ldrb	r3, [r7, #19]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <dir_register+0x30>
		return FR_INVALID_NAME;
 800466c:	2306      	movs	r3, #6
 800466e:	e0e3      	b.n	8004838 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d035      	beq.n	80046e6 <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	330b      	adds	r3, #11
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8004688:	2301      	movs	r3, #1
 800468a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800468c:	e013      	b.n	80046b6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800468e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004690:	f107 0108 	add.w	r1, r7, #8
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	69f8      	ldr	r0, [r7, #28]
 8004698:	f7ff fe94 	bl	80043c4 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff23 	bl	80044e8 <dir_find>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80046b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b2:	3301      	adds	r3, #1
 80046b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b8:	2b63      	cmp	r3, #99	; 0x63
 80046ba:	d9e8      	bls.n	800468e <dir_register+0x4e>
 80046bc:	e000      	b.n	80046c0 <dir_register+0x80>
			if (res != FR_OK) break;
 80046be:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80046c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d101      	bne.n	80046ca <dir_register+0x8a>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e0b6      	b.n	8004838 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d002      	beq.n	80046d8 <dir_register+0x98>
 80046d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d6:	e0af      	b.n	8004838 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	330b      	adds	r3, #11
 80046dc:	7cfa      	ldrb	r2, [r7, #19]
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80046f0:	2300      	movs	r3, #0
 80046f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046f4:	e002      	b.n	80046fc <dir_register+0xbc>
 80046f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046f8:	3301      	adds	r3, #1
 80046fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f5      	bne.n	80046f6 <dir_register+0xb6>
		ne = (n + 25) / 13;
 800470a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800470c:	3319      	adds	r3, #25
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <dir_register+0x200>)
 8004710:	fb82 1203 	smull	r1, r2, r2, r3
 8004714:	1092      	asrs	r2, r2, #2
 8004716:	17db      	asrs	r3, r3, #31
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	847b      	strh	r3, [r7, #34]	; 0x22
 800471c:	e001      	b.n	8004722 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 800471e:	2301      	movs	r3, #1
 8004720:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 8004722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fd17 	bl	800415a <dir_alloc>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 8004732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004736:	2b00      	cmp	r3, #0
 8004738:	d14b      	bne.n	80047d2 <dir_register+0x192>
 800473a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800473c:	3b01      	subs	r3, #1
 800473e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004742:	2b00      	cmp	r3, #0
 8004744:	d045      	beq.n	80047d2 <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	88da      	ldrh	r2, [r3, #6]
 800474a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	b29b      	uxth	r3, r3
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fbad 	bl	8003eb2 <dir_sdi>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 800475e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004762:	2b00      	cmp	r3, #0
 8004764:	d135      	bne.n	80047d2 <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fe9c 	bl	80044a8 <sum_sfn>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7ff f8a9 	bl	80038d6 <move_window>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 800478a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11e      	bne.n	80047d0 <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69d8      	ldr	r0, [r3, #28]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6959      	ldr	r1, [r3, #20]
 800479a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479c:	b2da      	uxtb	r2, r3
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	f7ff fdac 	bl	80042fc <fit_lfn>
				dj->fs->wflag = 1;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 80047ac:	2100      	movs	r1, #0
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fc01 	bl	8003fb6 <dir_next>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 80047ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <dir_register+0x192>
 80047c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047c4:	3b01      	subs	r3, #1
 80047c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80047c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1d2      	bne.n	8004774 <dir_register+0x134>
 80047ce:	e000      	b.n	80047d2 <dir_register+0x192>
				if (res != FR_OK) break;
 80047d0:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80047d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12c      	bne.n	8004834 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7ff f876 	bl	80038d6 <move_window>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 80047f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11d      	bne.n	8004834 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2220      	movs	r2, #32
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe ffc8 	bl	8003796 <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6958      	ldr	r0, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	220b      	movs	r2, #11
 8004810:	4619      	mov	r1, r3
 8004812:	f7fe ff91 	bl	8003738 <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	330b      	adds	r3, #11
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	330c      	adds	r3, #12
 8004824:	f002 0218 	and.w	r2, r2, #24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004838:	4618      	mov	r0, r3
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	4ec4ec4f 	.word	0x4ec4ec4f

08004844 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e002      	b.n	800485c <create_name+0x18>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3301      	adds	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b2f      	cmp	r3, #47	; 0x2f
 8004862:	d0f8      	beq.n	8004856 <create_name+0x12>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b5c      	cmp	r3, #92	; 0x5c
 800486a:	d0f4      	beq.n	8004856 <create_name+0x12>
	lfn = dj->lfn;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	61ba      	str	r2, [r7, #24]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800488a:	2b1f      	cmp	r3, #31
 800488c:	d92f      	bls.n	80048ee <create_name+0xaa>
 800488e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004890:	2b2f      	cmp	r3, #47	; 0x2f
 8004892:	d02c      	beq.n	80048ee <create_name+0xaa>
 8004894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004896:	2b5c      	cmp	r3, #92	; 0x5c
 8004898:	d029      	beq.n	80048ee <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b13      	cmp	r3, #19
 800489e:	d901      	bls.n	80048a4 <create_name+0x60>
			return FR_INVALID_NAME;
 80048a0:	2306      	movs	r3, #6
 80048a2:	e1c8      	b.n	8004c36 <create_name+0x3f2>
#if !_LFN_UNICODE
		w &= 0xFF;
 80048a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80048aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe feda 	bl	8003668 <ff_convert>
 80048b4:	4603      	mov	r3, r0
 80048b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80048b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <create_name+0x7e>
 80048be:	2306      	movs	r3, #6
 80048c0:	e1b9      	b.n	8004c36 <create_name+0x3f2>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 80048c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048c4:	2b7f      	cmp	r3, #127	; 0x7f
 80048c6:	d809      	bhi.n	80048dc <create_name+0x98>
 80048c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ca:	4619      	mov	r1, r3
 80048cc:	489e      	ldr	r0, [pc, #632]	; (8004b48 <create_name+0x304>)
 80048ce:	f7fe ffa2 	bl	8003816 <chk_chr>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <create_name+0x98>
			return FR_INVALID_NAME;
 80048d8:	2306      	movs	r3, #6
 80048da:	e1ac      	b.n	8004c36 <create_name+0x3f2>
		lfn[di++] = w;					/* Store the Unicode char */
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	617a      	str	r2, [r7, #20]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80048ec:	e7c5      	b.n	800487a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	441a      	add	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80048f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048fa:	2b1f      	cmp	r3, #31
 80048fc:	d801      	bhi.n	8004902 <create_name+0xbe>
 80048fe:	2304      	movs	r3, #4
 8004900:	e000      	b.n	8004904 <create_name+0xc0>
 8004902:	2300      	movs	r3, #0
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d109      	bne.n	8004922 <create_name+0xde>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004914:	3b01      	subs	r3, #1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	2b2e      	cmp	r3, #46	; 0x2e
 8004920:	d016      	beq.n	8004950 <create_name+0x10c>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d14d      	bne.n	80049c4 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800492e:	3b01      	subs	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	2b2e      	cmp	r3, #46	; 0x2e
 800493a:	d143      	bne.n	80049c4 <create_name+0x180>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004942:	3b02      	subs	r3, #2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	2b2e      	cmp	r3, #46	; 0x2e
 800494e:	d139      	bne.n	80049c4 <create_name+0x180>
		lfn[di] = 0;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	2200      	movs	r2, #0
 800495a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	e00f      	b.n	8004982 <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	d201      	bcs.n	800496e <create_name+0x12a>
 800496a:	212e      	movs	r1, #46	; 0x2e
 800496c:	e000      	b.n	8004970 <create_name+0x12c>
 800496e:	2120      	movs	r1, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	4413      	add	r3, r2
 8004978:	460a      	mov	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	3301      	adds	r3, #1
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2b0a      	cmp	r3, #10
 8004986:	d9ec      	bls.n	8004962 <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	4413      	add	r3, r2
 8004990:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e14a      	b.n	8004c36 <create_name+0x3f2>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	3b01      	subs	r3, #1
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80049b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d002      	beq.n	80049be <create_name+0x17a>
 80049b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049ba:	2b2e      	cmp	r3, #46	; 0x2e
 80049bc:	d106      	bne.n	80049cc <create_name+0x188>
		di--;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ea      	bne.n	80049a0 <create_name+0x15c>
 80049ca:	e000      	b.n	80049ce <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 80049cc:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <create_name+0x194>
 80049d4:	2306      	movs	r3, #6
 80049d6:	e12e      	b.n	8004c36 <create_name+0x3f2>

	lfn[di] = 0;						/* LFN is created */
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	2200      	movs	r2, #0
 80049e2:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	220b      	movs	r2, #11
 80049ea:	2120      	movs	r1, #32
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fed2 	bl	8003796 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e002      	b.n	80049fe <create_name+0x1ba>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d0f5      	beq.n	80049f8 <create_name+0x1b4>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	2b2e      	cmp	r3, #46	; 0x2e
 8004a18:	d0ee      	beq.n	80049f8 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <create_name+0x1f0>
 8004a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a24:	f043 0303 	orr.w	r3, r3, #3
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004a2c:	e002      	b.n	8004a34 <create_name+0x1f0>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <create_name+0x20a>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a40:	3b01      	subs	r3, #1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a4c:	d1ef      	bne.n	8004a2e <create_name+0x1ea>

	b = i = 0; ni = 8;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004a58:	2308      	movs	r3, #8
 8004a5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	61ba      	str	r2, [r7, #24]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8096 	beq.w	8004ba0 <create_name+0x35c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d006      	beq.n	8004a88 <create_name+0x244>
 8004a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004a7e:	d10a      	bne.n	8004a96 <create_name+0x252>
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d006      	beq.n	8004a96 <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8004a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8c:	f043 0303 	orr.w	r3, r3, #3
 8004a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a94:	e083      	b.n	8004b9e <create_name+0x35a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004a96:	6a3a      	ldr	r2, [r7, #32]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d203      	bcs.n	8004aa6 <create_name+0x262>
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d123      	bne.n	8004aee <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b0b      	cmp	r3, #11
 8004aaa:	d106      	bne.n	8004aba <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8004aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab0:	f043 0303 	orr.w	r3, r3, #3
 8004ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ab8:	e075      	b.n	8004ba6 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d005      	beq.n	8004ace <create_name+0x28a>
 8004ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac6:	f043 0303 	orr.w	r3, r3, #3
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d866      	bhi.n	8004ba4 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	2308      	movs	r3, #8
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	230b      	movs	r3, #11
 8004ae0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004ae2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004aec:	e057      	b.n	8004b9e <create_name+0x35a>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8004aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af0:	2b7f      	cmp	r3, #127	; 0x7f
 8004af2:	d914      	bls.n	8004b1e <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fdb5 	bl	8003668 <ff_convert>
 8004afe:	4603      	mov	r3, r0
 8004b00:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8004b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <create_name+0x2ce>
 8004b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b0a:	3b80      	subs	r3, #128	; 0x80
 8004b0c:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <create_name+0x308>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b16:	f043 0302 	orr.w	r3, r3, #2
 8004b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8004b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <create_name+0x2f0>
 8004b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b26:	4619      	mov	r1, r3
 8004b28:	4809      	ldr	r0, [pc, #36]	; (8004b50 <create_name+0x30c>)
 8004b2a:	f7fe fe74 	bl	8003816 <chk_chr>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00f      	beq.n	8004b54 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004b34:	235f      	movs	r3, #95	; 0x5f
 8004b36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b3c:	f043 0303 	orr.w	r3, r3, #3
 8004b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b44:	e022      	b.n	8004b8c <create_name+0x348>
 8004b46:	bf00      	nop
 8004b48:	0800fc60 	.word	0x0800fc60
 8004b4c:	080103c0 	.word	0x080103c0
 8004b50:	0800fc6c 	.word	0x0800fc6c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d909      	bls.n	8004b6e <create_name+0x32a>
 8004b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b5c:	2b5a      	cmp	r3, #90	; 0x5a
 8004b5e:	d806      	bhi.n	8004b6e <create_name+0x32a>
					b |= 2;
 8004b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b6c:	e00e      	b.n	8004b8c <create_name+0x348>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b70:	2b60      	cmp	r3, #96	; 0x60
 8004b72:	d90b      	bls.n	8004b8c <create_name+0x348>
 8004b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b76:	2b7a      	cmp	r3, #122	; 0x7a
 8004b78:	d808      	bhi.n	8004b8c <create_name+0x348>
						b |= 1; w -= 0x20;
 8004b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b88:	3b20      	subs	r3, #32
 8004b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	6239      	str	r1, [r7, #32]
 8004b96:	4413      	add	r3, r2
 8004b98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8004b9e:	e75d      	b.n	8004a5c <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <create_name+0x362>
			if (si > di) break;			/* No extension */
 8004ba4:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2be5      	cmp	r3, #229	; 0xe5
 8004bae:	d103      	bne.n	8004bb8 <create_name+0x374>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d104      	bne.n	8004bc8 <create_name+0x384>
 8004bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d005      	beq.n	8004be0 <create_name+0x39c>
 8004bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d105      	bne.n	8004bec <create_name+0x3a8>
		cf |= NS_LFN;
 8004be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004be4:	f043 0302 	orr.w	r3, r3, #2
 8004be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8004bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d117      	bne.n	8004c28 <create_name+0x3e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <create_name+0x3cc>
 8004c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c08:	f043 0310 	orr.w	r3, r3, #16
 8004c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d105      	bne.n	8004c28 <create_name+0x3e4>
 8004c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c20:	f043 0308 	orr.w	r3, r3, #8
 8004c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	330b      	adds	r3, #11
 8004c2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c32:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c34:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3728      	adds	r7, #40	; 0x28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop

08004c40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b2f      	cmp	r3, #47	; 0x2f
 8004c50:	d003      	beq.n	8004c5a <follow_path+0x1a>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b5c      	cmp	r3, #92	; 0x5c
 8004c58:	d106      	bne.n	8004c68 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	e004      	b.n	8004c72 <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b1f      	cmp	r3, #31
 8004c78:	d809      	bhi.n	8004c8e <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff f918 	bl	8003eb2 <dir_sdi>
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
 8004c8c:	e056      	b.n	8004d3c <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fdd6 	bl	8004844 <create_name>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d145      	bne.n	8004d2e <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fc20 	bl	80044e8 <dir_find>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	7adb      	ldrb	r3, [r3, #11]
 8004cb2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01d      	beq.n	8004cf6 <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d138      	bne.n	8004d32 <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d128      	bne.n	8004d36 <follow_path+0xf6>
 8004ce4:	e022      	b.n	8004d2c <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d122      	bne.n	8004d36 <follow_path+0xf6>
 8004cf0:	2305      	movs	r3, #5
 8004cf2:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8004cf4:	e01f      	b.n	8004d36 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8004cf6:	7bbb      	ldrb	r3, [r7, #14]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11c      	bne.n	8004d3a <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	330b      	adds	r3, #11
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <follow_path+0xda>
				res = FR_NO_PATH; break;
 8004d14:	2305      	movs	r3, #5
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e010      	b.n	8004d3c <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fa5b 	bl	80041dc <ld_clust>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8004d2c:	e7af      	b.n	8004c8e <follow_path+0x4e>
			if (res != FR_OK) break;
 8004d2e:	bf00      	nop
 8004d30:	e004      	b.n	8004d3c <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <follow_path+0xfc>
				break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8004d3a:	bf00      	nop
		}
	}

	return res;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7858      	ldrb	r0, [r3, #1]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	f001 fc6e 	bl	8006640 <disk_read>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <check_fs+0x26>
		return 3;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e01e      	b.n	8004dac <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f203 2336 	addw	r3, r3, #566	; 0x236
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d001      	beq.n	8004d82 <check_fs+0x3a>
		return 2;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e014      	b.n	8004dac <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	336e      	adds	r3, #110	; 0x6e
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d8c:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <check_fs+0x6c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <check_fs+0x4e>
		return 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e00a      	b.n	8004dac <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	338a      	adds	r3, #138	; 0x8a
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <check_fs+0x6c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <check_fs+0x62>
		return 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <check_fs+0x64>

	return 1;
 8004daa:	2301      	movs	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	00544146 	.word	0x00544146

08004db8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b092      	sub	sp, #72	; 0x48
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	3b30      	subs	r3, #48	; 0x30
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d80b      	bhi.n	8004df2 <chk_mounted+0x3a>
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	3301      	adds	r3, #1
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b3a      	cmp	r3, #58	; 0x3a
 8004de2:	d106      	bne.n	8004df2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	3302      	adds	r3, #2
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e002      	b.n	8004df8 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 8004df2:	4b8c      	ldr	r3, [pc, #560]	; (8005024 <chk_mounted+0x26c>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 8004e04:	230b      	movs	r3, #11
 8004e06:	e1d5      	b.n	80051b4 <chk_mounted+0x3fc>
	fs = FatFs[vol];					/* Get corresponding file system object */
 8004e08:	4a87      	ldr	r2, [pc, #540]	; (8005028 <chk_mounted+0x270>)
 8004e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <chk_mounted+0x64>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	e1cb      	b.n	80051b4 <chk_mounted+0x3fc>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e20:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01a      	beq.n	8004e60 <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fbf2 	bl	8006618 <disk_status>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8004e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10c      	bne.n	8004e60 <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <chk_mounted+0xa4>
 8004e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8004e58:	230a      	movs	r3, #10
 8004e5a:	e1ab      	b.n	80051b4 <chk_mounted+0x3fc>
			return FR_OK;				/* The file system object is valid */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e1a9      	b.n	80051b4 <chk_mounted+0x3fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	785b      	ldrb	r3, [r3, #1]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 faf0 	bl	8006458 <disk_initialize>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e192      	b.n	80051b4 <chk_mounted+0x3fc>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <chk_mounted+0xec>
 8004e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 8004ea0:	230a      	movs	r3, #10
 8004ea2:	e187      	b.n	80051b4 <chk_mounted+0x3fc>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eac:	f7ff ff4c 	bl	8004d48 <check_fs>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8004eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d124      	bne.n	8004f08 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8004ec4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <chk_mounted+0x11e>
 8004ecc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8004ed6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004ee0:	3338      	adds	r3, #56	; 0x38
 8004ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee4:	4413      	add	r3, r2
 8004ee6:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	3304      	adds	r3, #4
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 8004efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f7ff ff23 	bl	8004d48 <check_fs>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8004f08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d101      	bne.n	8004f14 <chk_mounted+0x15c>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e14f      	b.n	80051b4 <chk_mounted+0x3fc>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004f14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <chk_mounted+0x168>
 8004f1c:	230d      	movs	r3, #13
 8004f1e:	e149      	b.n	80051b4 <chk_mounted+0x3fc>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	3338      	adds	r3, #56	; 0x38
 8004f24:	330b      	adds	r3, #11
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2c:	d001      	beq.n	8004f32 <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 8004f2e:	230d      	movs	r3, #13
 8004f30:	e140      	b.n	80051b4 <chk_mounted+0x3fc>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	3338      	adds	r3, #56	; 0x38
 8004f36:	3316      	adds	r3, #22
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <chk_mounted+0x194>
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	3338      	adds	r3, #56	; 0x38
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f50:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	7ffa      	ldrb	r2, [r7, #31]
 8004f5e:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d004      	beq.n	8004f70 <chk_mounted+0x1b8>
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d001      	beq.n	8004f70 <chk_mounted+0x1b8>
 8004f6c:	230d      	movs	r3, #13
 8004f6e:	e121      	b.n	80051b4 <chk_mounted+0x3fc>
	fasize *= b;										/* Number of sectors for FAT area */
 8004f70:	7ffa      	ldrb	r2, [r7, #31]
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	7ffa      	ldrb	r2, [r7, #31]
 8004f86:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <chk_mounted+0x1e2>
 8004f8e:	7ffa      	ldrb	r2, [r7, #31]
 8004f90:	7ffb      	ldrb	r3, [r7, #31]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <chk_mounted+0x1e6>
 8004f9a:	230d      	movs	r3, #13
 8004f9c:	e10a      	b.n	80051b4 <chk_mounted+0x3fc>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	3338      	adds	r3, #56	; 0x38
 8004fa2:	3311      	adds	r3, #17
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	891b      	ldrh	r3, [r3, #8]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <chk_mounted+0x204>
 8004fb8:	230d      	movs	r3, #13
 8004fba:	e0fb      	b.n	80051b4 <chk_mounted+0x3fc>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	3338      	adds	r3, #56	; 0x38
 8004fc0:	3313      	adds	r3, #19
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <chk_mounted+0x21e>
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	3338      	adds	r3, #56	; 0x38
 8004fd0:	3320      	adds	r3, #32
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	3338      	adds	r3, #56	; 0x38
 8004fda:	330e      	adds	r3, #14
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8004fe0:	8bbb      	ldrh	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <chk_mounted+0x232>
 8004fe6:	230d      	movs	r3, #13
 8004fe8:	e0e4      	b.n	80051b4 <chk_mounted+0x3fc>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8004fea:	8bba      	ldrh	r2, [r7, #28]
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	4413      	add	r3, r2
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	8912      	ldrh	r2, [r2, #8]
 8004ff4:	0912      	lsrs	r2, r2, #4
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d201      	bcs.n	8005008 <chk_mounted+0x250>
 8005004:	230d      	movs	r3, #13
 8005006:	e0d5      	b.n	80051b4 <chk_mounted+0x3fc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005010:	7892      	ldrb	r2, [r2, #2]
 8005012:	fbb3 f3f2 	udiv	r3, r3, r2
 8005016:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <chk_mounted+0x274>
 800501e:	230d      	movs	r3, #13
 8005020:	e0c8      	b.n	80051b4 <chk_mounted+0x3fc>
 8005022:	bf00      	nop
 8005024:	20001642 	.word	0x20001642
 8005028:	2000163c 	.word	0x2000163c
	fmt = FS_FAT12;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005038:	4293      	cmp	r3, r2
 800503a:	d902      	bls.n	8005042 <chk_mounted+0x28a>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005048:	4293      	cmp	r3, r2
 800504a:	d902      	bls.n	8005052 <chk_mounted+0x29a>
 800504c:	2303      	movs	r3, #3
 800504e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800505e:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005060:	8bba      	ldrh	r2, [r7, #28]
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	441a      	add	r2, r3
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 800506a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	441a      	add	r2, r3
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 8005074:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005078:	2b03      	cmp	r3, #3
 800507a:	d110      	bne.n	800509e <chk_mounted+0x2e6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	891b      	ldrh	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <chk_mounted+0x2d0>
 8005084:	230d      	movs	r3, #13
 8005086:	e095      	b.n	80051b4 <chk_mounted+0x3fc>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	3338      	adds	r3, #56	; 0x38
 800508c:	332c      	adds	r3, #44	; 0x2c
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
 800509c:	e01f      	b.n	80050de <chk_mounted+0x326>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	891b      	ldrh	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <chk_mounted+0x2f2>
 80050a6:	230d      	movs	r3, #13
 80050a8:	e084      	b.n	80051b4 <chk_mounted+0x3fc>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	441a      	add	r2, r3
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80050b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d103      	bne.n	80050c6 <chk_mounted+0x30e>
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	e00a      	b.n	80050dc <chk_mounted+0x324>
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	085a      	lsrs	r2, r3, #1
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050e8:	0a5b      	lsrs	r3, r3, #9
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d201      	bcs.n	80050f2 <chk_mounted+0x33a>
		return FR_NO_FILESYSTEM;
 80050ee:	230d      	movs	r3, #13
 80050f0:	e060      	b.n	80051b4 <chk_mounted+0x3fc>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2200      	movs	r2, #0
 80050fe:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8005100:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005104:	2b03      	cmp	r3, #3
 8005106:	d13d      	bne.n	8005184 <chk_mounted+0x3cc>
	 	fs->fsi_flag = 0;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2200      	movs	r2, #0
 800510c:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	3338      	adds	r3, #56	; 0x38
 8005112:	3330      	adds	r3, #48	; 0x30
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511a:	441a      	add	r2, r3
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	7858      	ldrb	r0, [r3, #1]
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	2301      	movs	r3, #1
 8005130:	f001 fa86 	bl	8006640 <disk_read>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d124      	bne.n	8005184 <chk_mounted+0x3cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	3338      	adds	r3, #56	; 0x38
 800513e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005142:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8005144:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005148:	4293      	cmp	r3, r2
 800514a:	d11b      	bne.n	8005184 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	3338      	adds	r3, #56	; 0x38
 8005150:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8005152:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <chk_mounted+0x404>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d115      	bne.n	8005184 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	3338      	adds	r3, #56	; 0x38
 800515c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005160:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <chk_mounted+0x408>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <chk_mounted+0x3cc>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	3338      	adds	r3, #56	; 0x38
 800516c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	3338      	adds	r3, #56	; 0x38
 800517a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800518a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <chk_mounted+0x40c>)
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <chk_mounted+0x40c>)
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <chk_mounted+0x40c>)
 800519a:	881a      	ldrh	r2, [r3, #0]
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2200      	movs	r2, #0
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	2200      	movs	r2, #0
 80051aa:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2200      	movs	r2, #0
 80051b0:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3748      	adds	r7, #72	; 0x48
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	41615252 	.word	0x41615252
 80051c0:	61417272 	.word	0x61417272
 80051c4:	20001640 	.word	0x20001640

080051c8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <validate+0x32>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <validate+0x32>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <validate+0x32>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	88da      	ldrh	r2, [r3, #6]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	889b      	ldrh	r3, [r3, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <validate+0x36>
		return FR_INVALID_OBJECT;
 80051fa:	2309      	movs	r3, #9
 80051fc:	e00d      	b.n	800521a <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	4618      	mov	r0, r3
 8005206:	f001 fa07 	bl	8006618 <disk_status>
 800520a:	4603      	mov	r3, r0
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <validate+0x50>
		return FR_NOT_READY;
 8005214:	2303      	movs	r3, #3
 8005216:	e000      	b.n	800521a <validate+0x52>

	return FR_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <f_mount+0x16>
		return FR_INVALID_DRIVE;
 8005236:	230b      	movs	r3, #11
 8005238:	e016      	b.n	8005268 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <f_mount+0x50>)
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	4905      	ldr	r1, [pc, #20]	; (8005274 <f_mount+0x50>)
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000163c 	.word	0x2000163c

08005278 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b094      	sub	sp, #80	; 0x50
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <f_open+0x18>
 800528c:	2309      	movs	r3, #9
 800528e:	e0fc      	b.n	800548a <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	f107 011c 	add.w	r1, r7, #28
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fd82 	bl	8004db8 <chk_mounted>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 80052ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 80e1 	bne.w	8005486 <f_open+0x20e>
		INIT_BUF(dj);
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	4b72      	ldr	r3, [pc, #456]	; (8005494 <f_open+0x21c>)
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	f107 031c 	add.w	r3, r7, #28
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fcb2 	bl	8004c40 <follow_path>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80052e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <f_open+0x82>
			if (!dir)	/* Current dir itself */
 80052ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <f_open+0x82>
				res = FR_INVALID_NAME;
 80052f4:	2306      	movs	r3, #6
 80052f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	f003 031c 	and.w	r3, r3, #28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d06d      	beq.n	80053e0 <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 8005304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005308:	2b00      	cmp	r3, #0
 800530a:	d012      	beq.n	8005332 <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800530c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005310:	2b04      	cmp	r3, #4
 8005312:	d107      	bne.n	8005324 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff f991 	bl	8004640 <dir_register>
 800531e:	4603      	mov	r3, r0
 8005320:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	f043 0308 	orr.w	r3, r3, #8
 800532a:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	e012      	b.n	8005358 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005334:	330b      	adds	r3, #11
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 0311 	and.w	r3, r3, #17
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <f_open+0xd0>
					res = FR_DENIED;
 8005340:	2307      	movs	r3, #7
 8005342:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005346:	e007      	b.n	8005358 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <f_open+0xe0>
						res = FR_EXIST;
 8005352:	2308      	movs	r3, #8
 8005354:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005358:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800535c:	2b00      	cmp	r3, #0
 800535e:	d15d      	bne.n	800541c <f_open+0x1a4>
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d058      	beq.n	800541c <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 800536a:	f001 fc5f 	bl	8006c2c <get_fattime>
 800536e:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	330e      	adds	r3, #14
 8005374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005376:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 8005378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537a:	330b      	adds	r3, #11
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8005380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005382:	331c      	adds	r3, #28
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe ff25 	bl	80041dc <ld_clust>
 8005392:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 8005394:	2100      	movs	r1, #0
 8005396:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005398:	f7fe ff3a 	bl	8004210 <st_clust>
				dj.fs->wflag = 1;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2201      	movs	r2, #1
 80053a0:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 80053a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d039      	beq.n	800541c <f_open+0x1a4>
					dw = dj.fs->winsect;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fca5 	bl	8003d02 <remove_chain>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 80053be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d12a      	bne.n	800541c <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ca:	3a01      	subs	r2, #1
 80053cc:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fa7f 	bl	80038d6 <move_window>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053de:	e01d      	b.n	800541c <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 80053e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d119      	bne.n	800541c <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 80053e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ea:	330b      	adds	r3, #11
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <f_open+0x186>
					res = FR_NO_FILE;
 80053f6:	2304      	movs	r3, #4
 80053f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053fc:	e00e      	b.n	800541c <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <f_open+0x1a4>
 8005408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540a:	330b      	adds	r3, #11
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <f_open+0x1a4>
						res = FR_DENIED;
 8005416:	2307      	movs	r3, #7
 8005418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 800541c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10f      	bne.n	8005444 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <f_open+0x1be>
				mode |= FA__WRITTEN;
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005442:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005444:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11c      	bne.n	8005486 <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	79fa      	ldrb	r2, [r7, #7]
 8005450:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fec0 	bl	80041dc <ld_clust>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8005462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005464:	331c      	adds	r3, #28
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	88da      	ldrh	r2, [r3, #6]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005486:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800548a:	4618      	mov	r0, r3
 800548c:	3750      	adds	r7, #80	; 0x50
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20001644 	.word	0x20001644

08005498 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	; 0x30
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff fe89 	bl	80051c8 <validate>
 80054b6:	4603      	mov	r3, r0
 80054b8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <f_read+0x2c>
 80054c0:	7ffb      	ldrb	r3, [r7, #31]
 80054c2:	e135      	b.n	8005730 <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	799b      	ldrb	r3, [r3, #6]
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da01      	bge.n	80054d2 <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 80054ce:	2302      	movs	r3, #2
 80054d0:	e12e      	b.n	8005730 <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	799b      	ldrb	r3, [r3, #6]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80054de:	2307      	movs	r3, #7
 80054e0:	e126      	b.n	8005730 <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f240 8117 	bls.w	8005726 <f_read+0x28e>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80054fc:	e113      	b.n	8005726 <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 80df 	bne.w	80056ca <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	0a5b      	lsrs	r3, r3, #9
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	3b01      	subs	r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	4013      	ands	r3, r2
 8005520:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d12c      	bne.n	8005582 <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d103      	bne.n	8005538 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005536:	e008      	b.n	800554a <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7fe fa6e 	bl	8003a24 <get_fat>
 8005548:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d808      	bhi.n	8005562 <f_read+0xca>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	799b      	ldrb	r3, [r3, #6]
 8005554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	719a      	strb	r2, [r3, #6]
 800555e:	2302      	movs	r3, #2
 8005560:	e0e6      	b.n	8005730 <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d108      	bne.n	800557c <f_read+0xe4>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	799b      	ldrb	r3, [r3, #6]
 800556e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	719a      	strb	r2, [r3, #6]
 8005578:	2301      	movs	r3, #1
 800557a:	e0d9      	b.n	8005730 <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fe fa2b 	bl	80039e8 <clust2sect>
 8005592:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d108      	bne.n	80055ac <f_read+0x114>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	799b      	ldrb	r3, [r3, #6]
 800559e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	719a      	strb	r2, [r3, #6]
 80055a8:	2302      	movs	r3, #2
 80055aa:	e0c1      	b.n	8005730 <f_read+0x298>
			sect += csect;
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0a5b      	lsrs	r3, r3, #9
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d042      	beq.n	8005646 <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80055c0:	7dfa      	ldrb	r2, [r7, #23]
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	4413      	add	r3, r2
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	7892      	ldrb	r2, [r2, #2]
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d906      	bls.n	80055de <f_read+0x146>
					cc = fp->fs->csize - csect;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	789b      	ldrb	r3, [r3, #2]
 80055d6:	461a      	mov	r2, r3
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	7858      	ldrb	r0, [r3, #1]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	6a39      	ldr	r1, [r7, #32]
 80055ec:	f001 f828 	bl	8006640 <disk_read>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	799b      	ldrb	r3, [r3, #6]
 80055fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	719a      	strb	r2, [r3, #6]
 8005604:	2301      	movs	r3, #1
 8005606:	e093      	b.n	8005730 <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	799b      	ldrb	r3, [r3, #6]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <f_read+0x1a6>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	429a      	cmp	r2, r3
 8005620:	d90d      	bls.n	800563e <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	18d0      	adds	r0, r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005638:	4619      	mov	r1, r3
 800563a:	f7fe f87d 	bl	8003738 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	025b      	lsls	r3, r3, #9
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005644:	e05b      	b.n	80056fe <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	429a      	cmp	r2, r3
 800564e:	d039      	beq.n	80056c4 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	799b      	ldrb	r3, [r3, #6]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01d      	beq.n	8005698 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	7858      	ldrb	r0, [r3, #1]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	2301      	movs	r3, #1
 800566e:	f001 f84f 	bl	8006710 <disk_write>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	799b      	ldrb	r3, [r3, #6]
 800567c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	719a      	strb	r2, [r3, #6]
 8005686:	2301      	movs	r3, #1
 8005688:	e052      	b.n	8005730 <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	799b      	ldrb	r3, [r3, #6]
 800568e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005692:	b2da      	uxtb	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	7858      	ldrb	r0, [r3, #1]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80056a4:	2301      	movs	r3, #1
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	f000 ffca 	bl	8006640 <disk_read>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	799b      	ldrb	r3, [r3, #6]
 80056b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	719a      	strb	r2, [r3, #6]
 80056c0:	2301      	movs	r3, #1
 80056c2:	e035      	b.n	8005730 <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80056d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d901      	bls.n	80056e4 <f_read+0x24c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	3320      	adds	r3, #32
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f6:	4619      	mov	r1, r3
 80056f8:	6a38      	ldr	r0, [r7, #32]
 80056fa:	f7fe f81d 	bl	8003738 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	4413      	add	r3, r2
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	609a      	str	r2, [r3, #8]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	441a      	add	r2, r3
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f aee8 	bne.w	80054fe <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fd39 	bl	80051c8 <validate>
 8005756:	4603      	mov	r3, r0
 8005758:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <f_write+0x2c>
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	e166      	b.n	8005a32 <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	799b      	ldrb	r3, [r3, #6]
 8005768:	b25b      	sxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	da01      	bge.n	8005772 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800576e:	2302      	movs	r3, #2
 8005770:	e15f      	b.n	8005a32 <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	799b      	ldrb	r3, [r3, #6]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800577e:	2307      	movs	r3, #7
 8005780:	e157      	b.n	8005a32 <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	429a      	cmp	r2, r3
 8005790:	f080 8137 	bcs.w	8005a02 <f_write+0x2ca>
 8005794:	2300      	movs	r3, #0
 8005796:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005798:	e133      	b.n	8005a02 <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f040 80f8 	bne.w	8005998 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0a5b      	lsrs	r3, r3, #9
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	789b      	ldrb	r3, [r3, #2]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4013      	ands	r3, r2
 80057bc:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80057be:	7dbb      	ldrb	r3, [r7, #22]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d13d      	bne.n	8005840 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d110      	bne.n	80057ee <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fade 	bl	8003da0 <create_chain>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	e008      	b.n	8005800 <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe fad1 	bl	8003da0 <create_chain>
 80057fe:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8102 	beq.w	8005a0c <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	2b01      	cmp	r3, #1
 800580c:	d108      	bne.n	8005820 <f_write+0xe8>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	799b      	ldrb	r3, [r3, #6]
 8005812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	719a      	strb	r2, [r3, #6]
 800581c:	2302      	movs	r3, #2
 800581e:	e108      	b.n	8005a32 <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d108      	bne.n	800583a <f_write+0x102>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	799b      	ldrb	r3, [r3, #6]
 800582c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	719a      	strb	r2, [r3, #6]
 8005836:	2301      	movs	r3, #1
 8005838:	e0fb      	b.n	8005a32 <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	799b      	ldrb	r3, [r3, #6]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01d      	beq.n	8005888 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	7858      	ldrb	r0, [r3, #1]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	2301      	movs	r3, #1
 800585e:	f000 ff57 	bl	8006710 <disk_write>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	799b      	ldrb	r3, [r3, #6]
 800586c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	719a      	strb	r2, [r3, #6]
 8005876:	2301      	movs	r3, #1
 8005878:	e0db      	b.n	8005a32 <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	799b      	ldrb	r3, [r3, #6]
 800587e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe f8a8 	bl	80039e8 <clust2sect>
 8005898:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <f_write+0x17a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	799b      	ldrb	r3, [r3, #6]
 80058a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	719a      	strb	r2, [r3, #6]
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0bf      	b.n	8005a32 <f_write+0x2fa>
			sect += csect;
 80058b2:	7dbb      	ldrb	r3, [r7, #22]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0a5b      	lsrs	r3, r3, #9
 80058be:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d044      	beq.n	8005950 <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80058c6:	7dba      	ldrb	r2, [r7, #22]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	7892      	ldrb	r2, [r2, #2]
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d906      	bls.n	80058e4 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	461a      	mov	r2, r3
 80058de:	7dbb      	ldrb	r3, [r7, #22]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	7858      	ldrb	r0, [r3, #1]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	f000 ff0d 	bl	8006710 <disk_write>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	799b      	ldrb	r3, [r3, #6]
 8005900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	719a      	strb	r2, [r3, #6]
 800590a:	2301      	movs	r3, #1
 800590c:	e091      	b.n	8005a32 <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	429a      	cmp	r2, r3
 800591a:	d915      	bls.n	8005948 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	025b      	lsls	r3, r3, #9
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005934:	4619      	mov	r1, r3
 8005936:	f7fd feff 	bl	8003738 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	799b      	ldrb	r3, [r3, #6]
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	025b      	lsls	r3, r3, #9
 800594c:	623b      	str	r3, [r7, #32]
				continue;
 800594e:	e044      	b.n	80059da <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d01b      	beq.n	8005992 <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	429a      	cmp	r2, r3
 8005964:	d215      	bcs.n	8005992 <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	7858      	ldrb	r0, [r3, #1]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005972:	2301      	movs	r3, #1
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	f000 fe63 	bl	8006640 <disk_read>
 800597a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	799b      	ldrb	r3, [r3, #6]
 8005984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	719a      	strb	r2, [r3, #6]
 800598e:	2301      	movs	r3, #1
 8005990:	e04f      	b.n	8005a32 <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80059a4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d901      	bls.n	80059b2 <f_write+0x27a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	3320      	adds	r3, #32
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd feb6 	bl	8003738 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	799b      	ldrb	r3, [r3, #6]
 80059d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	4413      	add	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	441a      	add	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	441a      	add	r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f aec8 	bne.w	800579a <f_write+0x62>
 8005a0a:	e000      	b.n	8005a0e <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a0c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <f_write+0x2ea>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	799b      	ldrb	r3, [r3, #6]
 8005a26:	f043 0320 	orr.w	r3, r3, #32
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3728      	adds	r7, #40	; 0x28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff fbc0 	bl	80051c8 <validate>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d163      	bne.n	8005b1a <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	799b      	ldrb	r3, [r3, #6]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d05d      	beq.n	8005b1a <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	799b      	ldrb	r3, [r3, #6]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	7858      	ldrb	r0, [r3, #1]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f000 fe48 	bl	8006710 <disk_write>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005a86:	2301      	movs	r3, #1
 8005a88:	e048      	b.n	8005b1c <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	799b      	ldrb	r3, [r3, #6]
 8005a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fd ff17 	bl	80038d6 <move_window>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d133      	bne.n	8005b1a <f_sync+0xe0>
				dir = fp->dir_ptr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	330b      	adds	r3, #11
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	330b      	adds	r3, #11
 8005ac2:	f042 0220 	orr.w	r2, r2, #32
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	331c      	adds	r3, #28
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68d2      	ldr	r2, [r2, #12]
 8005ad2:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6938      	ldr	r0, [r7, #16]
 8005adc:	f7fe fb98 	bl	8004210 <st_clust>
				tm = get_fattime();							/* Update updated time */
 8005ae0:	f001 f8a4 	bl	8006c2c <get_fattime>
 8005ae4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	3316      	adds	r3, #22
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3312      	adds	r3, #18
 8005af2:	2200      	movs	r2, #0
 8005af4:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	799b      	ldrb	r3, [r3, #6]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fd ff09 	bl	8003928 <sync_fs>
 8005b16:	4603      	mov	r3, r0
 8005b18:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff84 	bl	8005a3a <f_sync>
 8005b32:	4603      	mov	r3, r0
 8005b34:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <f_close+0x1e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
	return res;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <MyInitCard>:

extern bool LogFileCreate;

//Функция инициализации карты памяти
void MyInitCard(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 8005b50:	f000 f9ae 	bl	8005eb0 <sd_ini>
}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <MyReadFile>:
//Функция чтения файла с карты памяти
void MyReadFile(void)
{
 8005b58:	b5b0      	push	{r4, r5, r7, lr}
 8005b5a:	b094      	sub	sp, #80	; 0x50
 8005b5c:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 8005b5e:	4941      	ldr	r1, [pc, #260]	; (8005c64 <MyReadFile+0x10c>)
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7ff fb5f 	bl	8005224 <f_mount>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d177      	bne.n	8005c5c <MyReadFile+0x104>
	{
		SendStr("f_mount -> success\n");
 8005b6c:	483e      	ldr	r0, [pc, #248]	; (8005c68 <MyReadFile+0x110>)
 8005b6e:	f7fc f8a3 	bl	8001cb8 <SendStr>

		uint8_t path[18]="JSON_voltage.json";
 8005b72:	4b3e      	ldr	r3, [pc, #248]	; (8005c6c <MyReadFile+0x114>)
 8005b74:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005b78:	461d      	mov	r5, r3
 8005b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	8023      	strh	r3, [r4, #0]
		path[17] = '\0';
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		result = f_open(&MyFile, (char*)path, FA_READ);
 8005b88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4837      	ldr	r0, [pc, #220]	; (8005c70 <MyReadFile+0x118>)
 8005b92:	f7ff fb71 	bl	8005278 <f_open>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <MyReadFile+0x11c>)
 8005b9c:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8005b9e:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <MyReadFile+0x11c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d15a      	bne.n	8005c5c <MyReadFile+0x104>
		{
			SendStr("f_open -> success\n");
 8005ba6:	4834      	ldr	r0, [pc, #208]	; (8005c78 <MyReadFile+0x120>)
 8005ba8:	f7fc f886 	bl	8001cb8 <SendStr>

			BytesToRead = MyFile.fsize;
 8005bac:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <MyReadFile+0x118>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <MyReadFile+0x124>)
 8005bb2:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8005bb4:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <MyReadFile+0x124>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	463b      	mov	r3, r7
 8005bba:	4931      	ldr	r1, [pc, #196]	; (8005c80 <MyReadFile+0x128>)
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f006 fe03 	bl	800c7c8 <siprintf>
			SendStr(str1);
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fc f877 	bl	8001cb8 <SendStr>

			BytesCounter = 0;
 8005bca:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <MyReadFile+0x12c>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8005bd0:	e017      	b.n	8005c02 <MyReadFile+0xaa>
		    {
		       	f_read(&MyFile, readBuffer, 512, &readBytes);
 8005bd2:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <MyReadFile+0x130>)
 8005bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd8:	492c      	ldr	r1, [pc, #176]	; (8005c8c <MyReadFile+0x134>)
 8005bda:	4825      	ldr	r0, [pc, #148]	; (8005c70 <MyReadFile+0x118>)
 8005bdc:	f7ff fc5c 	bl	8005498 <f_read>
		       	BytesCounter += 512;
 8005be0:	4b28      	ldr	r3, [pc, #160]	; (8005c84 <MyReadFile+0x12c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005be8:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <MyReadFile+0x12c>)
 8005bea:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8005bec:	4827      	ldr	r0, [pc, #156]	; (8005c8c <MyReadFile+0x134>)
 8005bee:	f7fa fab9 	bl	8000164 <strlen>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bfa:	4924      	ldr	r1, [pc, #144]	; (8005c8c <MyReadFile+0x134>)
 8005bfc:	4824      	ldr	r0, [pc, #144]	; (8005c90 <MyReadFile+0x138>)
 8005bfe:	f005 fea5 	bl	800b94c <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8005c02:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <MyReadFile+0x124>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <MyReadFile+0x12c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c10:	d2df      	bcs.n	8005bd2 <MyReadFile+0x7a>
		    }
		    if (BytesToRead != BytesCounter)
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <MyReadFile+0x124>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <MyReadFile+0x12c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d01b      	beq.n	8005c56 <MyReadFile+0xfe>
		    {
	        	f_read(&MyFile, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <MyReadFile+0x124>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <MyReadFile+0x12c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <MyReadFile+0x130>)
 8005c2a:	4918      	ldr	r1, [pc, #96]	; (8005c8c <MyReadFile+0x134>)
 8005c2c:	4810      	ldr	r0, [pc, #64]	; (8005c70 <MyReadFile+0x118>)
 8005c2e:	f7ff fc33 	bl	8005498 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <MyReadFile+0x124>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <MyReadFile+0x12c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c46:	4911      	ldr	r1, [pc, #68]	; (8005c8c <MyReadFile+0x134>)
 8005c48:	4811      	ldr	r0, [pc, #68]	; (8005c90 <MyReadFile+0x138>)
 8005c4a:	f005 fe7f 	bl	800b94c <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <MyReadFile+0x124>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a0c      	ldr	r2, [pc, #48]	; (8005c84 <MyReadFile+0x12c>)
 8005c54:	6013      	str	r3, [r2, #0]
//				SendStr(readBuffer);
//				SendStr("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SendStr(str1);
//			}
		    f_close(&MyFile);
 8005c56:	4806      	ldr	r0, [pc, #24]	; (8005c70 <MyReadFile+0x118>)
 8005c58:	f7ff ff64 	bl	8005b24 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 8005c5c:	bf00      	nop
 8005c5e:	3750      	adds	r7, #80	; 0x50
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bdb0      	pop	{r4, r5, r7, pc}
 8005c64:	20000bcc 	.word	0x20000bcc
 8005c68:	0800fca8 	.word	0x0800fca8
 8005c6c:	0800fce4 	.word	0x0800fce4
 8005c70:	20000e08 	.word	0x20000e08
 8005c74:	20000e04 	.word	0x20000e04
 8005c78:	0800fcbc 	.word	0x0800fcbc
 8005c7c:	20001870 	.word	0x20001870
 8005c80:	0800fcd0 	.word	0x0800fcd0
 8005c84:	20001874 	.word	0x20001874
 8005c88:	20001878 	.word	0x20001878
 8005c8c:	20001670 	.word	0x20001670
 8005c90:	200011ec 	.word	0x200011ec

08005c94 <MyWriteFileJson>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void MyWriteFileJson(char *path, char *text)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b092      	sub	sp, #72	; 0x48
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 8005c9e:	4921      	ldr	r1, [pc, #132]	; (8005d24 <MyWriteFileJson+0x90>)
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7ff fabf 	bl	8005224 <f_mount>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d136      	bne.n	8005d1a <MyWriteFileJson+0x86>
	{
		SendStr("f_mount -> success\n");
 8005cac:	481e      	ldr	r0, [pc, #120]	; (8005d28 <MyWriteFileJson+0x94>)
 8005cae:	f7fc f803 	bl	8001cb8 <SendStr>

		result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8005cb2:	220a      	movs	r2, #10
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	481d      	ldr	r0, [pc, #116]	; (8005d2c <MyWriteFileJson+0x98>)
 8005cb8:	f7ff fade 	bl	8005278 <f_open>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <MyWriteFileJson+0x9c>)
 8005cc2:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8005cc4:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <MyWriteFileJson+0x9c>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d126      	bne.n	8005d1a <MyWriteFileJson+0x86>
		{
			SendStr("f_open -> success\n");
 8005ccc:	4819      	ldr	r0, [pc, #100]	; (8005d34 <MyWriteFileJson+0xa0>)
 8005cce:	f7fb fff3 	bl	8001cb8 <SendStr>

			result = f_write(&MyFile, text, strlen(text), &WriteBytes);
 8005cd2:	6838      	ldr	r0, [r7, #0]
 8005cd4:	f7fa fa46 	bl	8000164 <strlen>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <MyWriteFileJson+0xa4>)
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	4813      	ldr	r0, [pc, #76]	; (8005d2c <MyWriteFileJson+0x98>)
 8005ce0:	f7ff fd2a 	bl	8005738 <f_write>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <MyWriteFileJson+0x9c>)
 8005cea:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <MyWriteFileJson+0x9c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10f      	bne.n	8005d14 <MyWriteFileJson+0x80>
			{
				SendStr("f_write -> success\n");
 8005cf4:	4811      	ldr	r0, [pc, #68]	; (8005d3c <MyWriteFileJson+0xa8>)
 8005cf6:	f7fb ffdf 	bl	8001cb8 <SendStr>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <MyWriteFileJson+0xa4>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f107 030c 	add.w	r3, r7, #12
 8005d02:	490f      	ldr	r1, [pc, #60]	; (8005d40 <MyWriteFileJson+0xac>)
 8005d04:	4618      	mov	r0, r3
 8005d06:	f006 fd5f 	bl	800c7c8 <siprintf>
				SendStr(str1);
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb ffd2 	bl	8001cb8 <SendStr>
			}
		    f_close(&MyFile);
 8005d14:	4805      	ldr	r0, [pc, #20]	; (8005d2c <MyWriteFileJson+0x98>)
 8005d16:	f7ff ff05 	bl	8005b24 <f_close>
		}
	}
}
 8005d1a:	bf00      	nop
 8005d1c:	3748      	adds	r7, #72	; 0x48
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000bcc 	.word	0x20000bcc
 8005d28:	0800fca8 	.word	0x0800fca8
 8005d2c:	20000e08 	.word	0x20000e08
 8005d30:	20000e04 	.word	0x20000e04
 8005d34:	0800fcbc 	.word	0x0800fcbc
 8005d38:	2000187c 	.word	0x2000187c
 8005d3c:	0800fcf8 	.word	0x0800fcf8
 8005d40:	0800fd0c 	.word	0x0800fd0c

08005d44 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
	LD_ON;
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4802      	ldr	r0, [pc, #8]	; (8005d58 <Error+0x14>)
 8005d4e:	f003 f88a 	bl	8008e66 <HAL_GPIO_WritePin>
}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40010800 	.word	0x40010800

08005d5c <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	4603      	mov	r3, r0
 8005d64:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8005d6a:	f107 020f 	add.w	r2, r7, #15
 8005d6e:	1df9      	adds	r1, r7, #7
 8005d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	2301      	movs	r3, #1
 8005d78:	4806      	ldr	r0, [pc, #24]	; (8005d94 <SPIx_WriteRead+0x38>)
 8005d7a:	f004 fa53 	bl	800a224 <HAL_SPI_TransmitReceive>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <SPIx_WriteRead+0x2c>
	{
		Error();
 8005d84:	f7ff ffde 	bl	8005d44 <Error>
  	}
  	return receivedbyte;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000102c 	.word	0x2000102c

08005d98 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff ffd9 	bl	8005d5c <SPIx_WriteRead>
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8005db8:	20ff      	movs	r0, #255	; 0xff
 8005dba:	f7ff ffcf 	bl	8005d5c <SPIx_WriteRead>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
	return bt;
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8005dd0:	20ff      	movs	r0, #255	; 0xff
 8005dd2:	f7ff ffc3 	bl	8005d5c <SPIx_WriteRead>
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8005de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	da0e      	bge.n	8005e0e <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df6:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2077      	movs	r0, #119	; 0x77
 8005dfc:	f7ff ffee 	bl	8005ddc <SD_cmd>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d901      	bls.n	8005e0e <SD_cmd+0x32>
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	e049      	b.n	8005ea2 <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 8005e0e:	2201      	movs	r2, #1
 8005e10:	2140      	movs	r1, #64	; 0x40
 8005e12:	4826      	ldr	r0, [pc, #152]	; (8005eac <SD_cmd+0xd0>)
 8005e14:	f003 f827 	bl	8008e66 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8005e18:	f7ff ffcb 	bl	8005db2 <SPI_ReceiveByte>
	SS_SD_SELECT();
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2140      	movs	r1, #64	; 0x40
 8005e20:	4822      	ldr	r0, [pc, #136]	; (8005eac <SD_cmd+0xd0>)
 8005e22:	f003 f820 	bl	8008e66 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8005e26:	f7ff ffc4 	bl	8005db2 <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ffb3 	bl	8005d98 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	0e1b      	lsrs	r3, r3, #24
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ffad 	bl	8005d98 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff ffa7 	bl	8005d98 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff ffa1 	bl	8005d98 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff ff9c 	bl	8005d98 <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d101      	bne.n	8005e6e <SD_cmd+0x92>
 8005e6a:	2395      	movs	r3, #149	; 0x95
 8005e6c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b48      	cmp	r3, #72	; 0x48
 8005e72:	d101      	bne.n	8005e78 <SD_cmd+0x9c>
 8005e74:	2387      	movs	r3, #135	; 0x87
 8005e76:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff8c 	bl	8005d98 <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 8005e80:	230a      	movs	r3, #10
 8005e82:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8005e84:	f7ff ff95 	bl	8005db2 <SPI_ReceiveByte>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8005e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da05      	bge.n	8005ea0 <SD_cmd+0xc4>
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f1      	bne.n	8005e84 <SD_cmd+0xa8>

	return res;
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40010c00 	.word	0x40010c00

08005eb0 <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8005eb0:	b590      	push	{r4, r7, lr}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4881      	ldr	r0, [pc, #516]	; (80060c0 <sd_ini+0x210>)
 8005ebc:	f002 ffd3 	bl	8008e66 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8005ec0:	4b80      	ldr	r3, [pc, #512]	; (80060c4 <sd_ini+0x214>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8005ec6:	4b80      	ldr	r3, [pc, #512]	; (80060c8 <sd_ini+0x218>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8005ecc:	4b7e      	ldr	r3, [pc, #504]	; (80060c8 <sd_ini+0x218>)
 8005ece:	2238      	movs	r2, #56	; 0x38
 8005ed0:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8005ed2:	487d      	ldr	r0, [pc, #500]	; (80060c8 <sd_ini+0x218>)
 8005ed4:	f004 f922 	bl	800a11c <HAL_SPI_Init>
	SS_SD_DESELECT();
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	487b      	ldr	r0, [pc, #492]	; (80060cc <sd_ini+0x21c>)
 8005ede:	f002 ffc2 	bl	8008e66 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e004      	b.n	8005ef2 <sd_ini+0x42>
		SPI_Release();
 8005ee8:	f7ff ff70 	bl	8005dcc <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b09      	cmp	r3, #9
 8005ef6:	d9f7      	bls.n	8005ee8 <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 8005ef8:	4a73      	ldr	r2, [pc, #460]	; (80060c8 <sd_ini+0x218>)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8005efe:	4872      	ldr	r0, [pc, #456]	; (80060c8 <sd_ini+0x218>)
 8005f00:	f004 f90c 	bl	800a11c <HAL_SPI_Init>
	SS_SD_SELECT();
 8005f04:	2200      	movs	r2, #0
 8005f06:	2140      	movs	r1, #64	; 0x40
 8005f08:	4870      	ldr	r0, [pc, #448]	; (80060cc <sd_ini+0x21c>)
 8005f0a:	f002 ffac 	bl	8008e66 <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8005f0e:	2100      	movs	r1, #0
 8005f10:	2040      	movs	r0, #64	; 0x40
 8005f12:	f7ff ff63 	bl	8005ddc <SD_cmd>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 80be 	bne.w	800609a <sd_ini+0x1ea>
	{
		SPI_Release();
 8005f1e:	f7ff ff55 	bl	8005dcc <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8005f22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f26:	2048      	movs	r0, #72	; 0x48
 8005f28:	f7ff ff58 	bl	8005ddc <SD_cmd>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d17b      	bne.n	800602a <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e00c      	b.n	8005f52 <sd_ini+0xa2>
 8005f38:	7bfc      	ldrb	r4, [r7, #15]
 8005f3a:	f7ff ff3a 	bl	8005db2 <SPI_ReceiveByte>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	f104 0310 	add.w	r3, r4, #16
 8005f46:	443b      	add	r3, r7
 8005f48:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d9ef      	bls.n	8005f38 <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8005f58:	793b      	ldrb	r3, [r7, #4]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	797b      	ldrb	r3, [r7, #5]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	79bb      	ldrb	r3, [r7, #6]
 8005f62:	79fa      	ldrb	r2, [r7, #7]
 8005f64:	9201      	str	r2, [sp, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	4958      	ldr	r1, [pc, #352]	; (80060d0 <sd_ini+0x220>)
 8005f6e:	4859      	ldr	r0, [pc, #356]	; (80060d4 <sd_ini+0x224>)
 8005f70:	f006 fc2a 	bl	800c7c8 <siprintf>
			SendStr(str1);
 8005f74:	4857      	ldr	r0, [pc, #348]	; (80060d4 <sd_ini+0x224>)
 8005f76:	f7fb fe9f 	bl	8001cb8 <SendStr>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8005f7a:	79bb      	ldrb	r3, [r7, #6]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f040 808e 	bne.w	800609e <sd_ini+0x1ee>
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2baa      	cmp	r3, #170	; 0xaa
 8005f86:	f040 808a 	bne.w	800609e <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8005f8a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005f8e:	81bb      	strh	r3, [r7, #12]
 8005f90:	e005      	b.n	8005f9e <sd_ini+0xee>
 8005f92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	81bb      	strh	r3, [r7, #12]
 8005f9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <sd_ini+0x106>
 8005fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005faa:	20e9      	movs	r0, #233	; 0xe9
 8005fac:	f7ff ff16 	bl	8005ddc <SD_cmd>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1ed      	bne.n	8005f92 <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8005fb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d06f      	beq.n	800609e <sd_ini+0x1ee>
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	207a      	movs	r0, #122	; 0x7a
 8005fc2:	f7ff ff0b 	bl	8005ddc <SD_cmd>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d168      	bne.n	800609e <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e00c      	b.n	8005fec <sd_ini+0x13c>
 8005fd2:	7bfc      	ldrb	r4, [r7, #15]
 8005fd4:	f7ff feed 	bl	8005db2 <SPI_ReceiveByte>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f104 0310 	add.w	r3, r4, #16
 8005fe0:	443b      	add	r3, r7
 8005fe2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d9ef      	bls.n	8005fd2 <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8005ff2:	793b      	ldrb	r3, [r7, #4]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	797b      	ldrb	r3, [r7, #5]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	79bb      	ldrb	r3, [r7, #6]
 8005ffc:	79fa      	ldrb	r2, [r7, #7]
 8005ffe:	9201      	str	r2, [sp, #4]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	4603      	mov	r3, r0
 8006004:	460a      	mov	r2, r1
 8006006:	4932      	ldr	r1, [pc, #200]	; (80060d0 <sd_ini+0x220>)
 8006008:	4832      	ldr	r0, [pc, #200]	; (80060d4 <sd_ini+0x224>)
 800600a:	f006 fbdd 	bl	800c7c8 <siprintf>
				SendStr(str1);
 800600e:	4831      	ldr	r0, [pc, #196]	; (80060d4 <sd_ini+0x224>)
 8006010:	f7fb fe52 	bl	8001cb8 <SendStr>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8006014:	793b      	ldrb	r3, [r7, #4]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <sd_ini+0x172>
 800601e:	220c      	movs	r2, #12
 8006020:	e000      	b.n	8006024 <sd_ini+0x174>
 8006022:	2204      	movs	r2, #4
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <sd_ini+0x214>)
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e039      	b.n	800609e <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 800602a:	2100      	movs	r1, #0
 800602c:	20e9      	movs	r0, #233	; 0xe9
 800602e:	f7ff fed5 	bl	8005ddc <SD_cmd>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d805      	bhi.n	8006044 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 8006038:	4b22      	ldr	r3, [pc, #136]	; (80060c4 <sd_ini+0x214>)
 800603a:	2202      	movs	r2, #2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	23e9      	movs	r3, #233	; 0xe9
 8006040:	73bb      	strb	r3, [r7, #14]
 8006042:	e004      	b.n	800604e <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 8006044:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <sd_ini+0x214>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	2341      	movs	r3, #65	; 0x41
 800604c:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 800604e:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8006052:	81bb      	strh	r3, [r7, #12]
 8006054:	e005      	b.n	8006062 <sd_ini+0x1b2>
 8006056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29b      	uxth	r3, r3
 8006060:	81bb      	strh	r3, [r7, #12]
 8006062:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <sd_ini+0x1ca>
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff feb4 	bl	8005ddc <SD_cmd>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1ed      	bne.n	8006056 <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 800607a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <sd_ini+0x1e2>
 8006082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006086:	2050      	movs	r0, #80	; 0x50
 8006088:	f7ff fea8 	bl	8005ddc <SD_cmd>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <sd_ini+0x1ee>
				sdinfo.type = 0;
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <sd_ini+0x214>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e001      	b.n	800609e <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 800609a:	2301      	movs	r3, #1
 800609c:	e00b      	b.n	80060b6 <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <sd_ini+0x214>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	490c      	ldr	r1, [pc, #48]	; (80060d8 <sd_ini+0x228>)
 80060a8:	480a      	ldr	r0, [pc, #40]	; (80060d4 <sd_ini+0x224>)
 80060aa:	f006 fb8d 	bl	800c7c8 <siprintf>
	SendStr(str1);
 80060ae:	4809      	ldr	r0, [pc, #36]	; (80060d4 <sd_ini+0x224>)
 80060b0:	f7fb fe02 	bl	8001cb8 <SendStr>
	return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd90      	pop	{r4, r7, pc}
 80060be:	bf00      	nop
 80060c0:	40010800 	.word	0x40010800
 80060c4:	20001880 	.word	0x20001880
 80060c8:	2000102c 	.word	0x2000102c
 80060cc:	40010c00 	.word	0x40010c00
 80060d0:	0800fe64 	.word	0x0800fe64
 80060d4:	20001884 	.word	0x20001884
 80060d8:	0800fe88 	.word	0x0800fe88

080060dc <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <FCLK_SLOW+0x24>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80060ee:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80060f0:	4a03      	ldr	r2, [pc, #12]	; (8006100 <FCLK_SLOW+0x24>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	40013000 	.word	0x40013000

08006104 <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <FCLK_FAST+0x28>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006116:	f043 0310 	orr.w	r3, r3, #16
 800611a:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 800611c:	4a03      	ldr	r2, [pc, #12]	; (800612c <FCLK_FAST+0x28>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6013      	str	r3, [r2, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40013000 	.word	0x40013000

08006130 <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 800613a:	bf00      	nop
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <xmit_spi+0x3c>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f9      	beq.n	800613c <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <xmit_spi+0x3c>)
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 800614e:	bf00      	nop
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <xmit_spi+0x3c>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f9      	beq.n	8006150 <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <xmit_spi+0x3c>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	b2db      	uxtb	r3, r3
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	40013000 	.word	0x40013000

08006170 <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 8006174:	20ff      	movs	r0, #255	; 0xff
 8006176:	f7ff ffdb 	bl	8006130 <xmit_spi>
 800617a:	4603      	mov	r3, r0
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}

08006180 <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8006188:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <wait_ready+0x34>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 800618e:	f7ff ffef 	bl	8006170 <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 8006192:	f7ff ffed 	bl	8006170 <rcvr_spi>
 8006196:	4603      	mov	r3, r0
 8006198:	2bff      	cmp	r3, #255	; 0xff
 800619a:	d101      	bne.n	80061a0 <wait_ready+0x20>
 800619c:	2301      	movs	r3, #1
 800619e:	e004      	b.n	80061aa <wait_ready+0x2a>
	while (Timer2);
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <wait_ready+0x34>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f4      	bne.n	8006192 <wait_ready+0x12>

	return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200018c8 	.word	0x200018c8

080061b8 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	CS_HIGH();
 80061bc:	2201      	movs	r2, #1
 80061be:	2110      	movs	r1, #16
 80061c0:	4803      	ldr	r0, [pc, #12]	; (80061d0 <deselect+0x18>)
 80061c2:	f002 fe50 	bl	8008e66 <HAL_GPIO_WritePin>
	rcvr_spi();
 80061c6:	f7ff ffd3 	bl	8006170 <rcvr_spi>
}
 80061ca:	bf00      	nop
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40010800 	.word	0x40010800

080061d4 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	CS_LOW();
 80061d8:	2200      	movs	r2, #0
 80061da:	2110      	movs	r1, #16
 80061dc:	4807      	ldr	r0, [pc, #28]	; (80061fc <selecting+0x28>)
 80061de:	f002 fe42 	bl	8008e66 <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 80061e2:	2032      	movs	r0, #50	; 0x32
 80061e4:	f7ff ffcc 	bl	8006180 <wait_ready>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <selecting+0x22>
		deselect();
 80061ee:	f7ff ffe3 	bl	80061b8 <deselect>
		return 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <selecting+0x24>
	}
	return 1;
 80061f6:	2301      	movs	r3, #1
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40010800 	.word	0x40010800

08006200 <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	return PowerFlag;
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <power_status+0x10>)
 8006206:	781b      	ldrb	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	200018c0 	.word	0x200018c0

08006214 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 800621a:	2201      	movs	r2, #1
 800621c:	2110      	movs	r1, #16
 800621e:	480b      	ldr	r0, [pc, #44]	; (800624c <power_on+0x38>)
 8006220:	f002 fe21 	bl	8008e66 <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	e005      	b.n	8006236 <power_on+0x22>
		xmit_spi(0xFF);
 800622a:	20ff      	movs	r0, #255	; 0xff
 800622c:	f7ff ff80 	bl	8006130 <xmit_spi>
	for (i = 0; i < 10; i++)
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	3301      	adds	r3, #1
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b09      	cmp	r3, #9
 800623a:	d9f6      	bls.n	800622a <power_on+0x16>

	PowerFlag = 1;
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <power_on+0x3c>)
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]

}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40010800 	.word	0x40010800
 8006250:	200018c0 	.word	0x200018c0

08006254 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <power_off+0x14>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	200018c0 	.word	0x200018c0

0800626c <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <rcvr_datablock+0x90>)
 8006278:	2214      	movs	r2, #20
 800627a:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 800627c:	f7ff ff78 	bl	8006170 <rcvr_spi>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2bff      	cmp	r3, #255	; 0xff
 8006288:	d103      	bne.n	8006292 <rcvr_datablock+0x26>
 800628a:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <rcvr_datablock+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f4      	bne.n	800627c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2bfe      	cmp	r3, #254	; 0xfe
 8006296:	d001      	beq.n	800629c <rcvr_datablock+0x30>
 8006298:	2300      	movs	r3, #0
 800629a:	e02a      	b.n	80062f2 <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800629c:	687c      	ldr	r4, [r7, #4]
 800629e:	1c63      	adds	r3, r4, #1
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	20ff      	movs	r0, #255	; 0xff
 80062a4:	f7ff ff44 	bl	8006130 <xmit_spi>
 80062a8:	4603      	mov	r3, r0
 80062aa:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 80062ac:	687c      	ldr	r4, [r7, #4]
 80062ae:	1c63      	adds	r3, r4, #1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	20ff      	movs	r0, #255	; 0xff
 80062b4:	f7ff ff3c 	bl	8006130 <xmit_spi>
 80062b8:	4603      	mov	r3, r0
 80062ba:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 80062bc:	687c      	ldr	r4, [r7, #4]
 80062be:	1c63      	adds	r3, r4, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	20ff      	movs	r0, #255	; 0xff
 80062c4:	f7ff ff34 	bl	8006130 <xmit_spi>
 80062c8:	4603      	mov	r3, r0
 80062ca:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 80062cc:	687c      	ldr	r4, [r7, #4]
 80062ce:	1c63      	adds	r3, r4, #1
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	20ff      	movs	r0, #255	; 0xff
 80062d4:	f7ff ff2c 	bl	8006130 <xmit_spi>
 80062d8:	4603      	mov	r3, r0
 80062da:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	3b04      	subs	r3, #4
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1d9      	bne.n	800629c <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 80062e8:	f7ff ff42 	bl	8006170 <rcvr_spi>
	rcvr_spi();
 80062ec:	f7ff ff40 	bl	8006170 <rcvr_spi>

	return 1;						/* Return with success */
 80062f0:	2301      	movs	r3, #1
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd90      	pop	{r4, r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200018c4 	.word	0x200018c4

08006300 <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 800630c:	2032      	movs	r0, #50	; 0x32
 800630e:	f7ff ff37 	bl	8006180 <wait_ready>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <xmit_datablock+0x1c>
 8006318:	2300      	movs	r3, #0
 800631a:	e02e      	b.n	800637a <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff ff06 	bl	8006130 <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2bfd      	cmp	r3, #253	; 0xfd
 8006328:	d026      	beq.n	8006378 <xmit_datablock+0x78>
		wc = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fefa 	bl	8006130 <xmit_spi>
			xmit_spi(*buff++);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fef3 	bl	8006130 <xmit_spi>
		} while (--wc);
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	3b01      	subs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1eb      	bne.n	800632e <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 8006356:	20ff      	movs	r0, #255	; 0xff
 8006358:	f7ff feea 	bl	8006130 <xmit_spi>
		xmit_spi(0xFF);
 800635c:	20ff      	movs	r0, #255	; 0xff
 800635e:	f7ff fee7 	bl	8006130 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 8006362:	f7ff ff05 	bl	8006170 <rcvr_spi>
 8006366:	4603      	mov	r3, r0
 8006368:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2b05      	cmp	r3, #5
 8006372:	d001      	beq.n	8006378 <xmit_datablock+0x78>
			return 0;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <xmit_datablock+0x7a>
	}

	return 1;
 8006378:	2301      	movs	r3, #1
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	4603      	mov	r3, r0
 800638a:	6039      	str	r1, [r7, #0]
 800638c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 800638e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	da0e      	bge.n	80063b4 <send_cmd+0x32>
		cmd &= 0x7F;
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800639e:	2100      	movs	r1, #0
 80063a0:	2037      	movs	r0, #55	; 0x37
 80063a2:	f7ff ffee 	bl	8006382 <send_cmd>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d901      	bls.n	80063b4 <send_cmd+0x32>
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	e04c      	b.n	800644e <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 80063b4:	f7ff ff00 	bl	80061b8 <deselect>
	if (!selecting()) return 0xFF;
 80063b8:	f7ff ff0c 	bl	80061d4 <selecting>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <send_cmd+0x44>
 80063c2:	23ff      	movs	r3, #255	; 0xff
 80063c4:	e043      	b.n	800644e <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff feae 	bl	8006130 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	0e1b      	lsrs	r3, r3, #24
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fea8 	bl	8006130 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fea2 	bl	8006130 <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fe9c 	bl	8006130 <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fe97 	bl	8006130 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <send_cmd+0x8e>
 800640c:	2395      	movs	r3, #149	; 0x95
 800640e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	2b08      	cmp	r3, #8
 8006414:	d101      	bne.n	800641a <send_cmd+0x98>
 8006416:	2387      	movs	r3, #135	; 0x87
 8006418:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fe87 	bl	8006130 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d101      	bne.n	800642c <send_cmd+0xaa>
 8006428:	f7ff fea2 	bl	8006170 <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 800642c:	230a      	movs	r3, #10
 800642e:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8006430:	f7ff fe9e 	bl	8006170 <rcvr_spi>
 8006434:	4603      	mov	r3, r0
 8006436:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8006438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800643c:	2b00      	cmp	r3, #0
 800643e:	da05      	bge.n	800644c <send_cmd+0xca>
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	3b01      	subs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f1      	bne.n	8006430 <send_cmd+0xae>

	return res;			/* Return with the response value */
 800644c:	7bbb      	ldrb	r3, [r7, #14]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <disk_initialize+0x14>
 8006468:	2301      	movs	r3, #1
 800646a:	e0c9      	b.n	8006600 <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 800646c:	4b66      	ldr	r3, [pc, #408]	; (8006608 <disk_initialize+0x1b0>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <disk_initialize+0x2a>
 800647a:	4b63      	ldr	r3, [pc, #396]	; (8006608 <disk_initialize+0x1b0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	e0be      	b.n	8006600 <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 8006482:	2201      	movs	r2, #1
 8006484:	2110      	movs	r1, #16
 8006486:	4861      	ldr	r0, [pc, #388]	; (800660c <disk_initialize+0x1b4>)
 8006488:	f002 fced 	bl	8008e66 <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 800648c:	f7ff fec2 	bl	8006214 <power_on>
	FCLK_SLOW();
 8006490:	f7ff fe24 	bl	80060dc <FCLK_SLOW>
	CS_LOW();
 8006494:	2200      	movs	r2, #0
 8006496:	2110      	movs	r1, #16
 8006498:	485c      	ldr	r0, [pc, #368]	; (800660c <disk_initialize+0x1b4>)
 800649a:	f002 fce4 	bl	8008e66 <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 800649e:	230a      	movs	r3, #10
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	e004      	b.n	80064ae <disk_initialize+0x56>
 80064a4:	f7ff fe64 	bl	8006170 <rcvr_spi>
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f7      	bne.n	80064a4 <disk_initialize+0x4c>

	ty = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 80064b8:	2100      	movs	r1, #0
 80064ba:	2000      	movs	r0, #0
 80064bc:	f7ff ff61 	bl	8006382 <send_cmd>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	f040 8084 	bne.w	80065d0 <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 80064c8:	4b51      	ldr	r3, [pc, #324]	; (8006610 <disk_initialize+0x1b8>)
 80064ca:	2264      	movs	r2, #100	; 0x64
 80064cc:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80064ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064d2:	2008      	movs	r0, #8
 80064d4:	f7ff ff55 	bl	8006382 <send_cmd>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d14d      	bne.n	800657a <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
 80064e2:	e00c      	b.n	80064fe <disk_initialize+0xa6>
 80064e4:	7bfc      	ldrb	r4, [r7, #15]
 80064e6:	f7ff fe43 	bl	8006170 <rcvr_spi>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	f104 0310 	add.w	r3, r4, #16
 80064f2:	443b      	add	r3, r7
 80064f4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	3301      	adds	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d9ef      	bls.n	80064e4 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 8006504:	7abb      	ldrb	r3, [r7, #10]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d162      	bne.n	80065d0 <disk_initialize+0x178>
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	2baa      	cmp	r3, #170	; 0xaa
 800650e:	d15f      	bne.n	80065d0 <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8006510:	bf00      	nop
 8006512:	4b3f      	ldr	r3, [pc, #252]	; (8006610 <disk_initialize+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <disk_initialize+0xd2>
 800651a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800651e:	20a9      	movs	r0, #169	; 0xa9
 8006520:	f7ff ff2f 	bl	8006382 <send_cmd>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f3      	bne.n	8006512 <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800652a:	4b39      	ldr	r3, [pc, #228]	; (8006610 <disk_initialize+0x1b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04e      	beq.n	80065d0 <disk_initialize+0x178>
 8006532:	2100      	movs	r1, #0
 8006534:	203a      	movs	r0, #58	; 0x3a
 8006536:	f7ff ff24 	bl	8006382 <send_cmd>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d147      	bne.n	80065d0 <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e00c      	b.n	8006560 <disk_initialize+0x108>
 8006546:	7bfc      	ldrb	r4, [r7, #15]
 8006548:	f7ff fe12 	bl	8006170 <rcvr_spi>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	f104 0310 	add.w	r3, r4, #16
 8006554:	443b      	add	r3, r7
 8006556:	f803 2c08 	strb.w	r2, [r3, #-8]
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	3301      	adds	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d9ef      	bls.n	8006546 <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8006566:	7a3b      	ldrb	r3, [r7, #8]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <disk_initialize+0x11c>
 8006570:	230c      	movs	r3, #12
 8006572:	e000      	b.n	8006576 <disk_initialize+0x11e>
 8006574:	2304      	movs	r3, #4
 8006576:	737b      	strb	r3, [r7, #13]
 8006578:	e02a      	b.n	80065d0 <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 800657a:	2100      	movs	r1, #0
 800657c:	20a9      	movs	r0, #169	; 0xa9
 800657e:	f7ff ff00 	bl	8006382 <send_cmd>
 8006582:	4603      	mov	r3, r0
 8006584:	2b01      	cmp	r3, #1
 8006586:	d804      	bhi.n	8006592 <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8006588:	2302      	movs	r3, #2
 800658a:	737b      	strb	r3, [r7, #13]
 800658c:	23a9      	movs	r3, #169	; 0xa9
 800658e:	73bb      	strb	r3, [r7, #14]
 8006590:	e003      	b.n	800659a <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8006592:	2301      	movs	r3, #1
 8006594:	737b      	strb	r3, [r7, #13]
 8006596:	2301      	movs	r3, #1
 8006598:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 800659a:	bf00      	nop
 800659c:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <disk_initialize+0x1b8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <disk_initialize+0x15c>
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff feea 	bl	8006382 <send_cmd>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f3      	bne.n	800659c <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <disk_initialize+0x1b8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <disk_initialize+0x174>
 80065bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065c0:	2010      	movs	r0, #16
 80065c2:	f7ff fede 	bl	8006382 <send_cmd>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <disk_initialize+0x178>
				ty = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 80065d0:	4a10      	ldr	r2, [pc, #64]	; (8006614 <disk_initialize+0x1bc>)
 80065d2:	7b7b      	ldrb	r3, [r7, #13]
 80065d4:	7013      	strb	r3, [r2, #0]
	deselect();
 80065d6:	f7ff fdef 	bl	80061b8 <deselect>

	if (ty) {						/* Initialization succeded */
 80065da:	7b7b      	ldrb	r3, [r7, #13]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <disk_initialize+0x1b0>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <disk_initialize+0x1b0>)
 80065ee:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 80065f0:	f7ff fd88 	bl	8006104 <FCLK_FAST>
 80065f4:	e001      	b.n	80065fa <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 80065f6:	f7ff fe2d 	bl	8006254 <power_off>
	}

	return Stat;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <disk_initialize+0x1b0>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b2db      	uxtb	r3, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	20000014 	.word	0x20000014
 800660c:	40010800 	.word	0x40010800
 8006610:	200018c4 	.word	0x200018c4
 8006614:	200018cc 	.word	0x200018cc

08006618 <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <disk_status+0x14>
 8006628:	2301      	movs	r3, #1
 800662a:	e002      	b.n	8006632 <disk_status+0x1a>
	return Stat;
 800662c:	4b03      	ldr	r3, [pc, #12]	; (800663c <disk_status+0x24>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b2db      	uxtb	r3, r3
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	20000014 	.word	0x20000014

08006640 <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	461a      	mov	r2, r3
 800664c:	4603      	mov	r3, r0
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	4613      	mov	r3, r2
 8006652:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <disk_read+0x20>
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <disk_read+0x24>
 8006660:	2304      	movs	r3, #4
 8006662:	e04d      	b.n	8006700 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006664:	4b28      	ldr	r3, [pc, #160]	; (8006708 <disk_read+0xc8>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <disk_read+0x36>
 8006672:	2303      	movs	r3, #3
 8006674:	e044      	b.n	8006700 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006676:	4b25      	ldr	r3, [pc, #148]	; (800670c <disk_read+0xcc>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <disk_read+0x48>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	025b      	lsls	r3, r3, #9
 8006686:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d111      	bne.n	80066b2 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	2011      	movs	r0, #17
 8006692:	f7ff fe76 	bl	8006382 <send_cmd>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d129      	bne.n	80066f0 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 800669c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f7ff fde3 	bl	800626c <rcvr_datablock>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d021      	beq.n	80066f0 <disk_read+0xb0>
			count = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73bb      	strb	r3, [r7, #14]
 80066b0:	e01e      	b.n	80066f0 <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	2012      	movs	r0, #18
 80066b6:	f7ff fe64 	bl	8006382 <send_cmd>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d117      	bne.n	80066f0 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80066c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066c4:	68b8      	ldr	r0, [r7, #8]
 80066c6:	f7ff fdd1 	bl	800626c <rcvr_datablock>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <disk_read+0xa6>
				buff += 512;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80066d6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	3b01      	subs	r3, #1
 80066dc:	73bb      	strb	r3, [r7, #14]
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ed      	bne.n	80066c0 <disk_read+0x80>
 80066e4:	e000      	b.n	80066e8 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 80066e6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80066e8:	2100      	movs	r1, #0
 80066ea:	200c      	movs	r0, #12
 80066ec:	f7ff fe49 	bl	8006382 <send_cmd>
		}
	}
	deselect();
 80066f0:	f7ff fd62 	bl	80061b8 <deselect>

	return count ? RES_ERROR : RES_OK;
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000014 	.word	0x20000014
 800670c:	200018cc 	.word	0x200018cc

08006710 <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	461a      	mov	r2, r3
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	4613      	mov	r3, r2
 8006722:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <disk_write+0x20>
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <disk_write+0x24>
 8006730:	2304      	movs	r3, #4
 8006732:	e064      	b.n	80067fe <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006734:	4b34      	ldr	r3, [pc, #208]	; (8006808 <disk_write+0xf8>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <disk_write+0x36>
 8006742:	2303      	movs	r3, #3
 8006744:	e05b      	b.n	80067fe <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8006746:	4b30      	ldr	r3, [pc, #192]	; (8006808 <disk_write+0xf8>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <disk_write+0x48>
 8006754:	2302      	movs	r3, #2
 8006756:	e052      	b.n	80067fe <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006758:	4b2c      	ldr	r3, [pc, #176]	; (800680c <disk_write+0xfc>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <disk_write+0x5a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	025b      	lsls	r3, r3, #9
 8006768:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d110      	bne.n	8006792 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	2018      	movs	r0, #24
 8006774:	f7ff fe05 	bl	8006382 <send_cmd>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d137      	bne.n	80067ee <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 800677e:	21fe      	movs	r1, #254	; 0xfe
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f7ff fdbd 	bl	8006300 <xmit_datablock>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d030      	beq.n	80067ee <disk_write+0xde>
			count = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	73bb      	strb	r3, [r7, #14]
 8006790:	e02d      	b.n	80067ee <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <disk_write+0xfc>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0306 	and.w	r3, r3, #6
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <disk_write+0x98>
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	4619      	mov	r1, r3
 80067a2:	2097      	movs	r0, #151	; 0x97
 80067a4:	f7ff fded 	bl	8006382 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	2019      	movs	r0, #25
 80067ac:	f7ff fde9 	bl	8006382 <send_cmd>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d11b      	bne.n	80067ee <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80067b6:	21fc      	movs	r1, #252	; 0xfc
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	f7ff fda1 	bl	8006300 <xmit_datablock>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <disk_write+0xca>
				buff += 512;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	73bb      	strb	r3, [r7, #14]
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ee      	bne.n	80067b6 <disk_write+0xa6>
 80067d8:	e000      	b.n	80067dc <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 80067da:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 80067dc:	21fd      	movs	r1, #253	; 0xfd
 80067de:	2000      	movs	r0, #0
 80067e0:	f7ff fd8e 	bl	8006300 <xmit_datablock>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <disk_write+0xde>
				count = 1;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 80067ee:	f7ff fce3 	bl	80061b8 <deselect>

	return count ? RES_ERROR : RES_OK;
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000014 	.word	0x20000014
 800680c:	200018cc 	.word	0x200018cc

08006810 <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b089      	sub	sp, #36	; 0x24
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	603a      	str	r2, [r7, #0]
 800681a:	71fb      	strb	r3, [r7, #7]
 800681c:	460b      	mov	r3, r1
 800681e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <disk_ioctl+0x1e>
 800682a:	2304      	movs	r3, #4
 800682c:	e1f6      	b.n	8006c1c <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800682e:	4b97      	ldr	r3, [pc, #604]	; (8006a8c <disk_ioctl+0x27c>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <disk_ioctl+0x30>
 800683c:	2303      	movs	r3, #3
 800683e:	e1ed      	b.n	8006c1c <disk_ioctl+0x40c>

	res = RES_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 8006844:	79bb      	ldrb	r3, [r7, #6]
 8006846:	2b0e      	cmp	r3, #14
 8006848:	f200 81cd 	bhi.w	8006be6 <disk_ioctl+0x3d6>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <disk_ioctl+0x44>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	080068c5 	.word	0x080068c5
 8006858:	080068db 	.word	0x080068db
 800685c:	08006991 	.word	0x08006991
 8006860:	0800699f 	.word	0x0800699f
 8006864:	08006a99 	.word	0x08006a99
 8006868:	08006891 	.word	0x08006891
 800686c:	08006be7 	.word	0x08006be7
 8006870:	08006be7 	.word	0x08006be7
 8006874:	08006be7 	.word	0x08006be7
 8006878:	08006be7 	.word	0x08006be7
 800687c:	08006b3b 	.word	0x08006b3b
 8006880:	08006b49 	.word	0x08006b49
 8006884:	08006b6b 	.word	0x08006b6b
 8006888:	08006b8d 	.word	0x08006b8d
 800688c:	08006bc1 	.word	0x08006bc1

	case CTRL_POWER :
		switch (ptr[0]) {
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <disk_ioctl+0x8e>
 8006898:	2b01      	cmp	r3, #1
 800689a:	d005      	beq.n	80068a8 <disk_ioctl+0x98>
 800689c:	e00e      	b.n	80068bc <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 800689e:	f7ff fcd9 	bl	8006254 <power_off>
			res = RES_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	77fb      	strb	r3, [r7, #31]
			break;
 80068a6:	e00c      	b.n	80068c2 <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 80068a8:	f7ff fcaa 	bl	8006200 <power_status>
 80068ac:	4602      	mov	r2, r0
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	3301      	adds	r3, #1
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	77fb      	strb	r3, [r7, #31]
			break;
 80068ba:	e002      	b.n	80068c2 <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 80068bc:	2304      	movs	r3, #4
 80068be:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80068c0:	e1a9      	b.n	8006c16 <disk_ioctl+0x406>
 80068c2:	e1a8      	b.n	8006c16 <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 80068c4:	f7ff fc86 	bl	80061d4 <selecting>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 818e 	beq.w	8006bec <disk_ioctl+0x3dc>
			deselect();
 80068d0:	f7ff fc72 	bl	80061b8 <deselect>
			res = RES_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	77fb      	strb	r3, [r7, #31]
		}
		break;
 80068d8:	e188      	b.n	8006bec <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80068da:	2100      	movs	r1, #0
 80068dc:	2009      	movs	r0, #9
 80068de:	f7ff fd50 	bl	8006382 <send_cmd>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 8183 	bne.w	8006bf0 <disk_ioctl+0x3e0>
 80068ea:	2110      	movs	r1, #16
 80068ec:	4868      	ldr	r0, [pc, #416]	; (8006a90 <disk_ioctl+0x280>)
 80068ee:	f7ff fcbd 	bl	800626c <rcvr_datablock>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 817b 	beq.w	8006bf0 <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80068fa:	4b65      	ldr	r3, [pc, #404]	; (8006a90 <disk_ioctl+0x280>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	099b      	lsrs	r3, r3, #6
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d114      	bne.n	8006930 <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 8006906:	4b62      	ldr	r3, [pc, #392]	; (8006a90 <disk_ioctl+0x280>)
 8006908:	7a5b      	ldrb	r3, [r3, #9]
 800690a:	461a      	mov	r2, r3
 800690c:	4b60      	ldr	r3, [pc, #384]	; (8006a90 <disk_ioctl+0x280>)
 800690e:	7a1b      	ldrb	r3, [r3, #8]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	4413      	add	r3, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4b5e      	ldr	r3, [pc, #376]	; (8006a90 <disk_ioctl+0x280>)
 8006918:	79db      	ldrb	r3, [r3, #7]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006920:	4413      	add	r3, r2
 8006922:	3301      	adds	r3, #1
 8006924:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	029a      	lsls	r2, r3, #10
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e02c      	b.n	800698a <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006930:	4b57      	ldr	r3, [pc, #348]	; (8006a90 <disk_ioctl+0x280>)
 8006932:	795b      	ldrb	r3, [r3, #5]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	b2da      	uxtb	r2, r3
 800693a:	4b55      	ldr	r3, [pc, #340]	; (8006a90 <disk_ioctl+0x280>)
 800693c:	7a9b      	ldrb	r3, [r3, #10]
 800693e:	09db      	lsrs	r3, r3, #7
 8006940:	b2db      	uxtb	r3, r3
 8006942:	4413      	add	r3, r2
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4b52      	ldr	r3, [pc, #328]	; (8006a90 <disk_ioctl+0x280>)
 8006948:	7a5b      	ldrb	r3, [r3, #9]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0306 	and.w	r3, r3, #6
 8006952:	b2db      	uxtb	r3, r3
 8006954:	4413      	add	r3, r2
 8006956:	b2db      	uxtb	r3, r3
 8006958:	3302      	adds	r3, #2
 800695a:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 800695c:	4b4c      	ldr	r3, [pc, #304]	; (8006a90 <disk_ioctl+0x280>)
 800695e:	7a1b      	ldrb	r3, [r3, #8]
 8006960:	099b      	lsrs	r3, r3, #6
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	4b4a      	ldr	r3, [pc, #296]	; (8006a90 <disk_ioctl+0x280>)
 8006968:	79db      	ldrb	r3, [r3, #7]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	4b48      	ldr	r3, [pc, #288]	; (8006a90 <disk_ioctl+0x280>)
 8006970:	799b      	ldrb	r3, [r3, #6]
 8006972:	029b      	lsls	r3, r3, #10
 8006974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006978:	4413      	add	r3, r2
 800697a:	3301      	adds	r3, #1
 800697c:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 800697e:	7fbb      	ldrb	r3, [r7, #30]
 8006980:	3b09      	subs	r3, #9
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	409a      	lsls	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	77fb      	strb	r3, [r7, #31]
		}
		break;
 800698e:	e12f      	b.n	8006bf0 <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006996:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	77fb      	strb	r3, [r7, #31]
		break;
 800699c:	e13b      	b.n	8006c16 <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800699e:	4b3d      	ldr	r3, [pc, #244]	; (8006a94 <disk_ioctl+0x284>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d029      	beq.n	80069fe <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80069aa:	2100      	movs	r1, #0
 80069ac:	208d      	movs	r0, #141	; 0x8d
 80069ae:	f7ff fce8 	bl	8006382 <send_cmd>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 811d 	bne.w	8006bf4 <disk_ioctl+0x3e4>
				rcvr_spi();
 80069ba:	f7ff fbd9 	bl	8006170 <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80069be:	2110      	movs	r1, #16
 80069c0:	4833      	ldr	r0, [pc, #204]	; (8006a90 <disk_ioctl+0x280>)
 80069c2:	f7ff fc53 	bl	800626c <rcvr_datablock>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8113 	beq.w	8006bf4 <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 80069ce:	2330      	movs	r3, #48	; 0x30
 80069d0:	77bb      	strb	r3, [r7, #30]
 80069d2:	e004      	b.n	80069de <disk_ioctl+0x1ce>
 80069d4:	f7ff fbcc 	bl	8006170 <rcvr_spi>
 80069d8:	7fbb      	ldrb	r3, [r7, #30]
 80069da:	3b01      	subs	r3, #1
 80069dc:	77bb      	strb	r3, [r7, #30]
 80069de:	7fbb      	ldrb	r3, [r7, #30]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f7      	bne.n	80069d4 <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 80069e4:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <disk_ioctl+0x280>)
 80069e6:	7a9b      	ldrb	r3, [r3, #10]
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	2310      	movs	r3, #16
 80069f0:	fa03 f202 	lsl.w	r2, r3, r2
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80069fc:	e0fa      	b.n	8006bf4 <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80069fe:	2100      	movs	r1, #0
 8006a00:	2009      	movs	r0, #9
 8006a02:	f7ff fcbe 	bl	8006382 <send_cmd>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 80f3 	bne.w	8006bf4 <disk_ioctl+0x3e4>
 8006a0e:	2110      	movs	r1, #16
 8006a10:	481f      	ldr	r0, [pc, #124]	; (8006a90 <disk_ioctl+0x280>)
 8006a12:	f7ff fc2b 	bl	800626c <rcvr_datablock>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80eb 	beq.w	8006bf4 <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <disk_ioctl+0x284>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d015      	beq.n	8006a56 <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <disk_ioctl+0x280>)
 8006a2c:	7a9b      	ldrb	r3, [r3, #10]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a34:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <disk_ioctl+0x280>)
 8006a36:	7ad2      	ldrb	r2, [r2, #11]
 8006a38:	09d2      	lsrs	r2, r2, #7
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <disk_ioctl+0x280>)
 8006a42:	7b5b      	ldrb	r3, [r3, #13]
 8006a44:	099b      	lsrs	r3, r3, #6
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e016      	b.n	8006a84 <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <disk_ioctl+0x280>)
 8006a58:	7a9b      	ldrb	r3, [r3, #10]
 8006a5a:	109b      	asrs	r3, r3, #2
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <disk_ioctl+0x280>)
 8006a66:	7ad2      	ldrb	r2, [r2, #11]
 8006a68:	00d2      	lsls	r2, r2, #3
 8006a6a:	f002 0218 	and.w	r2, r2, #24
 8006a6e:	4908      	ldr	r1, [pc, #32]	; (8006a90 <disk_ioctl+0x280>)
 8006a70:	7ac9      	ldrb	r1, [r1, #11]
 8006a72:	0949      	lsrs	r1, r1, #5
 8006a74:	b2c9      	uxtb	r1, r1
 8006a76:	440a      	add	r2, r1
 8006a78:	3201      	adds	r2, #1
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
		break;
 8006a88:	e0b4      	b.n	8006bf4 <disk_ioctl+0x3e4>
 8006a8a:	bf00      	nop
 8006a8c:	20000014 	.word	0x20000014
 8006a90:	200018d0 	.word	0x200018d0
 8006a94:	200018cc 	.word	0x200018cc

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006a98:	4b62      	ldr	r3, [pc, #392]	; (8006c24 <disk_ioctl+0x414>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 0306 	and.w	r3, r3, #6
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a9 	beq.w	8006bf8 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	4a5f      	ldr	r2, [pc, #380]	; (8006c28 <disk_ioctl+0x418>)
 8006aaa:	210b      	movs	r1, #11
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff feaf 	bl	8006810 <disk_ioctl>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 80a1 	bne.w	8006bfc <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006aba:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <disk_ioctl+0x418>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d106      	bne.n	8006ad4 <disk_ioctl+0x2c4>
 8006ac6:	4b58      	ldr	r3, [pc, #352]	; (8006c28 <disk_ioctl+0x418>)
 8006ac8:	7a9b      	ldrb	r3, [r3, #10]
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8096 	beq.w	8006c00 <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 8006ae4:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <disk_ioctl+0x414>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	025b      	lsls	r3, r3, #9
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	025b      	lsls	r3, r3, #9
 8006afa:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 8006afc:	6979      	ldr	r1, [r7, #20]
 8006afe:	2020      	movs	r0, #32
 8006b00:	f7ff fc3f 	bl	8006382 <send_cmd>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d17c      	bne.n	8006c04 <disk_ioctl+0x3f4>
 8006b0a:	6939      	ldr	r1, [r7, #16]
 8006b0c:	2021      	movs	r0, #33	; 0x21
 8006b0e:	f7ff fc38 	bl	8006382 <send_cmd>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d175      	bne.n	8006c04 <disk_ioctl+0x3f4>
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2026      	movs	r0, #38	; 0x26
 8006b1c:	f7ff fc31 	bl	8006382 <send_cmd>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d16e      	bne.n	8006c04 <disk_ioctl+0x3f4>
 8006b26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006b2a:	f7ff fb29 	bl	8006180 <wait_ready>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d067      	beq.n	8006c04 <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006b34:	2300      	movs	r3, #0
 8006b36:	77fb      	strb	r3, [r7, #31]
		break;
 8006b38:	e064      	b.n	8006c04 <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 8006b3a:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <disk_ioctl+0x414>)
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	77fb      	strb	r3, [r7, #31]
		break;
 8006b46:	e066      	b.n	8006c16 <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8006b48:	2100      	movs	r1, #0
 8006b4a:	2009      	movs	r0, #9
 8006b4c:	f7ff fc19 	bl	8006382 <send_cmd>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d158      	bne.n	8006c08 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8006b56:	2110      	movs	r1, #16
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f7ff fb87 	bl	800626c <rcvr_datablock>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d051      	beq.n	8006c08 <disk_ioctl+0x3f8>
			res = RES_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
		break;
 8006b68:	e04e      	b.n	8006c08 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	200a      	movs	r0, #10
 8006b6e:	f7ff fc08 	bl	8006382 <send_cmd>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d149      	bne.n	8006c0c <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8006b78:	2110      	movs	r1, #16
 8006b7a:	69b8      	ldr	r0, [r7, #24]
 8006b7c:	f7ff fb76 	bl	800626c <rcvr_datablock>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d042      	beq.n	8006c0c <disk_ioctl+0x3fc>
			res = RES_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	77fb      	strb	r3, [r7, #31]
		break;
 8006b8a:	e03f      	b.n	8006c0c <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	203a      	movs	r0, #58	; 0x3a
 8006b90:	f7ff fbf7 	bl	8006382 <send_cmd>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d13a      	bne.n	8006c10 <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	77bb      	strb	r3, [r7, #30]
 8006b9e:	e009      	b.n	8006bb4 <disk_ioctl+0x3a4>
 8006ba0:	69bc      	ldr	r4, [r7, #24]
 8006ba2:	1c63      	adds	r3, r4, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	f7ff fae3 	bl	8006170 <rcvr_spi>
 8006baa:	4603      	mov	r3, r0
 8006bac:	7023      	strb	r3, [r4, #0]
 8006bae:	7fbb      	ldrb	r3, [r7, #30]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	77bb      	strb	r3, [r7, #30]
 8006bb4:	7fbb      	ldrb	r3, [r7, #30]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f2      	bne.n	8006ba0 <disk_ioctl+0x390>
			res = RES_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006bbe:	e027      	b.n	8006c10 <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	208d      	movs	r0, #141	; 0x8d
 8006bc4:	f7ff fbdd 	bl	8006382 <send_cmd>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d122      	bne.n	8006c14 <disk_ioctl+0x404>
			rcvr_spi();
 8006bce:	f7ff facf 	bl	8006170 <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 8006bd2:	2140      	movs	r1, #64	; 0x40
 8006bd4:	69b8      	ldr	r0, [r7, #24]
 8006bd6:	f7ff fb49 	bl	800626c <rcvr_datablock>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d019      	beq.n	8006c14 <disk_ioctl+0x404>
				res = RES_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006be4:	e016      	b.n	8006c14 <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 8006be6:	2304      	movs	r3, #4
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e014      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006bec:	bf00      	nop
 8006bee:	e012      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006bf0:	bf00      	nop
 8006bf2:	e010      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006bf4:	bf00      	nop
 8006bf6:	e00e      	b.n	8006c16 <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006bf8:	bf00      	nop
 8006bfa:	e00c      	b.n	8006c16 <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006bfc:	bf00      	nop
 8006bfe:	e00a      	b.n	8006c16 <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c00:	bf00      	nop
 8006c02:	e008      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006c04:	bf00      	nop
 8006c06:	e006      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <disk_ioctl+0x406>
		break;
 8006c14:	bf00      	nop
	}

	deselect();
 8006c16:	f7ff facf 	bl	80061b8 <deselect>

	return res;
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3724      	adds	r7, #36	; 0x24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd90      	pop	{r4, r7, pc}
 8006c24:	200018cc 	.word	0x200018cc
 8006c28:	200018d0 	.word	0x200018d0

08006c2c <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	3e216000 	.word	0x3e216000

08006c40 <DisplayInfo>:
uint32_t time_key1 = 0;
uint32_t time_key2 = 0;
uint32_t time_key3 = 0;

void DisplayInfo(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af02      	add	r7, sp, #8
	uint32_t ms = HAL_GetTick();
 8006c46:	f001 f86d 	bl	8007d24 <HAL_GetTick>
 8006c4a:	6078      	str	r0, [r7, #4]
	bool key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	48a1      	ldr	r0, [pc, #644]	; (8006ed4 <DisplayInfo+0x294>)
 8006c50:	f002 f8f2 	bl	8008e38 <HAL_GPIO_ReadPin>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	70fb      	strb	r3, [r7, #3]
	bool key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8006c60:	2102      	movs	r1, #2
 8006c62:	489c      	ldr	r0, [pc, #624]	; (8006ed4 <DisplayInfo+0x294>)
 8006c64:	f002 f8e8 	bl	8008e38 <HAL_GPIO_ReadPin>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bf14      	ite	ne
 8006c6e:	2301      	movne	r3, #1
 8006c70:	2300      	moveq	r3, #0
 8006c72:	70bb      	strb	r3, [r7, #2]
	bool key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8006c74:	2104      	movs	r1, #4
 8006c76:	4897      	ldr	r0, [pc, #604]	; (8006ed4 <DisplayInfo+0x294>)
 8006c78:	f002 f8de 	bl	8008e38 <HAL_GPIO_ReadPin>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	707b      	strb	r3, [r7, #1]

	if(info || display_Off)
 8006c88:	4b93      	ldr	r3, [pc, #588]	; (8006ed8 <DisplayInfo+0x298>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <DisplayInfo+0x58>
 8006c90:	4b92      	ldr	r3, [pc, #584]	; (8006edc <DisplayInfo+0x29c>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d03d      	beq.n	8006d14 <DisplayInfo+0xd4>
	{
		if(display_Off)	//Выключаем дисплей
 8006c98:	4b90      	ldr	r3, [pc, #576]	; (8006edc <DisplayInfo+0x29c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <DisplayInfo+0x78>
		{
			ssd1306_Fill(Black);
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f000 fbe1 	bl	8007468 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8006ca6:	488e      	ldr	r0, [pc, #568]	; (8006ee0 <DisplayInfo+0x2a0>)
 8006ca8:	f000 fc00 	bl	80074ac <ssd1306_UpdateScreen>
			display_Sleep = true;
 8006cac:	4b8d      	ldr	r3, [pc, #564]	; (8006ee4 <DisplayInfo+0x2a4>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
			display_Off = false;
 8006cb2:	4b8a      	ldr	r3, [pc, #552]	; (8006edc <DisplayInfo+0x29c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
		}
		if(info)
 8006cb8:	4b87      	ldr	r3, [pc, #540]	; (8006ed8 <DisplayInfo+0x298>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d029      	beq.n	8006d14 <DisplayInfo+0xd4>
		{
			ssd1306_Fill(Black);
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f000 fbd1 	bl	8007468 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8006cc6:	4886      	ldr	r0, [pc, #536]	; (8006ee0 <DisplayInfo+0x2a0>)
 8006cc8:	f000 fbf0 	bl	80074ac <ssd1306_UpdateScreen>

			ssd1306_SetCursor(1, 23);
 8006ccc:	2117      	movs	r1, #23
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f000 fd24 	bl	800771c <ssd1306_SetCursor>
			ssd1306_WriteString("ISet:", Font_11x18, White);
 8006cd4:	4a84      	ldr	r2, [pc, #528]	; (8006ee8 <DisplayInfo+0x2a8>)
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	ca06      	ldmia	r2, {r1, r2}
 8006cda:	4884      	ldr	r0, [pc, #528]	; (8006eec <DisplayInfo+0x2ac>)
 8006cdc:	f000 fcf8 	bl	80076d0 <ssd1306_WriteString>

			ssd1306_SetCursor(60, 23);
 8006ce0:	2117      	movs	r1, #23
 8006ce2:	203c      	movs	r0, #60	; 0x3c
 8006ce4:	f000 fd1a 	bl	800771c <ssd1306_SetCursor>
			snprintf(trans_str, 63, "%.2fA", Current);
 8006ce8:	4b81      	ldr	r3, [pc, #516]	; (8006ef0 <DisplayInfo+0x2b0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	e9cd 2300 	strd	r2, r3, [sp]
 8006cf2:	4a80      	ldr	r2, [pc, #512]	; (8006ef4 <DisplayInfo+0x2b4>)
 8006cf4:	213f      	movs	r1, #63	; 0x3f
 8006cf6:	4880      	ldr	r0, [pc, #512]	; (8006ef8 <DisplayInfo+0x2b8>)
 8006cf8:	f005 fd32 	bl	800c760 <sniprintf>
			ssd1306_WriteString(trans_str, Font_11x18, White);
 8006cfc:	4a7a      	ldr	r2, [pc, #488]	; (8006ee8 <DisplayInfo+0x2a8>)
 8006cfe:	2301      	movs	r3, #1
 8006d00:	ca06      	ldmia	r2, {r1, r2}
 8006d02:	487d      	ldr	r0, [pc, #500]	; (8006ef8 <DisplayInfo+0x2b8>)
 8006d04:	f000 fce4 	bl	80076d0 <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c2);
 8006d08:	4875      	ldr	r0, [pc, #468]	; (8006ee0 <DisplayInfo+0x2a0>)
 8006d0a:	f000 fbcf 	bl	80074ac <ssd1306_UpdateScreen>
			info = false;
 8006d0e:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <DisplayInfo+0x298>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
		}
	}
	if(key1_state == false && !short_state1 && (ms - time_key1) > 100)
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f083 0301 	eor.w	r3, r3, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d015      	beq.n	8006d4c <DisplayInfo+0x10c>
 8006d20:	4b76      	ldr	r3, [pc, #472]	; (8006efc <DisplayInfo+0x2bc>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <DisplayInfo+0x10c>
 8006d2e:	4b74      	ldr	r3, [pc, #464]	; (8006f00 <DisplayInfo+0x2c0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d908      	bls.n	8006d4c <DisplayInfo+0x10c>
	{
	    short_state1 = true;
 8006d3a:	4b70      	ldr	r3, [pc, #448]	; (8006efc <DisplayInfo+0x2bc>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
	    long_state1 = false;
 8006d40:	4b70      	ldr	r3, [pc, #448]	; (8006f04 <DisplayInfo+0x2c4>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
	    time_key1 = ms;
 8006d46:	4a6e      	ldr	r2, [pc, #440]	; (8006f00 <DisplayInfo+0x2c0>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]
	}
	if(key2_state == false && !short_state2 && (ms - time_key2) > 100)
 8006d4c:	78bb      	ldrb	r3, [r7, #2]
 8006d4e:	f083 0301 	eor.w	r3, r3, #1
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <DisplayInfo+0x144>
 8006d58:	4b6b      	ldr	r3, [pc, #428]	; (8006f08 <DisplayInfo+0x2c8>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	f083 0301 	eor.w	r3, r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <DisplayInfo+0x144>
 8006d66:	4b69      	ldr	r3, [pc, #420]	; (8006f0c <DisplayInfo+0x2cc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	; 0x64
 8006d70:	d908      	bls.n	8006d84 <DisplayInfo+0x144>
	{
	    short_state2 = true;
 8006d72:	4b65      	ldr	r3, [pc, #404]	; (8006f08 <DisplayInfo+0x2c8>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
	    long_state2 = false;
 8006d78:	4b65      	ldr	r3, [pc, #404]	; (8006f10 <DisplayInfo+0x2d0>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
	    time_key2 = ms;
 8006d7e:	4a63      	ldr	r2, [pc, #396]	; (8006f0c <DisplayInfo+0x2cc>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6013      	str	r3, [r2, #0]
	}
	if(key3_state == false && !short_state3 && (ms - time_key3) > 100)
 8006d84:	787b      	ldrb	r3, [r7, #1]
 8006d86:	f083 0301 	eor.w	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d016      	beq.n	8006dbe <DisplayInfo+0x17e>
 8006d90:	4b60      	ldr	r3, [pc, #384]	; (8006f14 <DisplayInfo+0x2d4>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f083 0301 	eor.w	r3, r3, #1
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00f      	beq.n	8006dbe <DisplayInfo+0x17e>
 8006d9e:	4b5e      	ldr	r3, [pc, #376]	; (8006f18 <DisplayInfo+0x2d8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	; 0x64
 8006da8:	d909      	bls.n	8006dbe <DisplayInfo+0x17e>
	{
	    short_state3 = true;
 8006daa:	4b5a      	ldr	r3, [pc, #360]	; (8006f14 <DisplayInfo+0x2d4>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
	    long_state3 = false;
 8006db0:	4b5a      	ldr	r3, [pc, #360]	; (8006f1c <DisplayInfo+0x2dc>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
	    time_key3 = ms;
 8006db6:	4a58      	ldr	r2, [pc, #352]	; (8006f18 <DisplayInfo+0x2d8>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	e1eb      	b.n	8007196 <DisplayInfo+0x556>
	}
	else if(key1_state == false && !long_state1 && (ms - time_key1) > 2000)
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	f083 0301 	eor.w	r3, r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d011      	beq.n	8006dee <DisplayInfo+0x1ae>
 8006dca:	4b4e      	ldr	r3, [pc, #312]	; (8006f04 <DisplayInfo+0x2c4>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f083 0301 	eor.w	r3, r3, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <DisplayInfo+0x1ae>
 8006dd8:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <DisplayInfo+0x2c0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006de4:	d903      	bls.n	8006dee <DisplayInfo+0x1ae>
	{
	    long_state1 = true;
 8006de6:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <DisplayInfo+0x2c4>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e1d3      	b.n	8007196 <DisplayInfo+0x556>
	    // действие на длинное нажатие
//	    SendStr("LONG_PRESS_BT1\n");
	}
	else if(key2_state == false && !long_state2 && (ms - time_key2) > 2000)
 8006dee:	78bb      	ldrb	r3, [r7, #2]
 8006df0:	f083 0301 	eor.w	r3, r3, #1
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01a      	beq.n	8006e30 <DisplayInfo+0x1f0>
 8006dfa:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <DisplayInfo+0x2d0>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f083 0301 	eor.w	r3, r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d013      	beq.n	8006e30 <DisplayInfo+0x1f0>
 8006e08:	4b40      	ldr	r3, [pc, #256]	; (8006f0c <DisplayInfo+0x2cc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e14:	d90c      	bls.n	8006e30 <DisplayInfo+0x1f0>
	{
	    long_state2 = true;
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <DisplayInfo+0x2d0>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]

		info = true;
 8006e1c:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <DisplayInfo+0x298>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
		display_Sleep = false;
 8006e22:	4b30      	ldr	r3, [pc, #192]	; (8006ee4 <DisplayInfo+0x2a4>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
	  	What_Time = 0;
 8006e28:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <DisplayInfo+0x2e0>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e1b2      	b.n	8007196 <DisplayInfo+0x556>

//	    SendStr("LONG_PRESS_BT2\n");
	}
	else if(key3_state == false && !long_state3 && (ms - time_key3) > 2000)
 8006e30:	787b      	ldrb	r3, [r7, #1]
 8006e32:	f083 0301 	eor.w	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d07d      	beq.n	8006f38 <DisplayInfo+0x2f8>
 8006e3c:	4b37      	ldr	r3, [pc, #220]	; (8006f1c <DisplayInfo+0x2dc>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d076      	beq.n	8006f38 <DisplayInfo+0x2f8>
 8006e4a:	4b33      	ldr	r3, [pc, #204]	; (8006f18 <DisplayInfo+0x2d8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e56:	d96f      	bls.n	8006f38 <DisplayInfo+0x2f8>
	{
	    long_state3 = true;
 8006e58:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <DisplayInfo+0x2dc>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	701a      	strb	r2, [r3, #0]

	  	ssd1306_Fill(Black);
 8006e5e:	2000      	movs	r0, #0
 8006e60:	f000 fb02 	bl	8007468 <ssd1306_Fill>
	  	ssd1306_UpdateScreen(&hi2c2);
 8006e64:	481e      	ldr	r0, [pc, #120]	; (8006ee0 <DisplayInfo+0x2a0>)
 8006e66:	f000 fb21 	bl	80074ac <ssd1306_UpdateScreen>

	  	reserve_Current = Current * 1.25;	//Уставка по току плюс 25%
 8006e6a:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <DisplayInfo+0x2b0>)
 8006e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	4b2b      	ldr	r3, [pc, #172]	; (8006f24 <DisplayInfo+0x2e4>)
 8006e76:	f7f9 fb39 	bl	80004ec <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	492a      	ldr	r1, [pc, #168]	; (8006f28 <DisplayInfo+0x2e8>)
 8006e80:	e9c1 2300 	strd	r2, r3, [r1]
	  	//Вызвать функцию сохранения уставки по току!!!

//	  	SendStr("-------------------------\n");
//	  	SendStr("| ");
	  	SendStr("SETPOINT: ");
 8006e84:	4829      	ldr	r0, [pc, #164]	; (8006f2c <DisplayInfo+0x2ec>)
 8006e86:	f7fa ff17 	bl	8001cb8 <SendStr>
	  	snprintf(trans_str, 63, "%.2fA\n", reserve_Current);
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <DisplayInfo+0x2e8>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	e9cd 2300 	strd	r2, r3, [sp]
 8006e94:	4a26      	ldr	r2, [pc, #152]	; (8006f30 <DisplayInfo+0x2f0>)
 8006e96:	213f      	movs	r1, #63	; 0x3f
 8006e98:	4817      	ldr	r0, [pc, #92]	; (8006ef8 <DisplayInfo+0x2b8>)
 8006e9a:	f005 fc61 	bl	800c760 <sniprintf>
	  	SendStr(trans_str);
 8006e9e:	4816      	ldr	r0, [pc, #88]	; (8006ef8 <DisplayInfo+0x2b8>)
 8006ea0:	f7fa ff0a 	bl	8001cb8 <SendStr>
//	  	SendStr(" |\n");
//	  	SendStr("-------------------------\n");

	  	ssd1306_SetCursor(42, 23);
 8006ea4:	2117      	movs	r1, #23
 8006ea6:	202a      	movs	r0, #42	; 0x2a
 8006ea8:	f000 fc38 	bl	800771c <ssd1306_SetCursor>
	  	ssd1306_WriteString("SAVE", Font_11x18, White);
 8006eac:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <DisplayInfo+0x2a8>)
 8006eae:	2301      	movs	r3, #1
 8006eb0:	ca06      	ldmia	r2, {r1, r2}
 8006eb2:	4820      	ldr	r0, [pc, #128]	; (8006f34 <DisplayInfo+0x2f4>)
 8006eb4:	f000 fc0c 	bl	80076d0 <ssd1306_WriteString>
	  	ssd1306_UpdateScreen(&hi2c2);
 8006eb8:	4809      	ldr	r0, [pc, #36]	; (8006ee0 <DisplayInfo+0x2a0>)
 8006eba:	f000 faf7 	bl	80074ac <ssd1306_UpdateScreen>
	  	HAL_Delay(1500);
 8006ebe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006ec2:	f000 ff39 	bl	8007d38 <HAL_Delay>

		info = true;
 8006ec6:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <DisplayInfo+0x298>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]

	  	What_Time = 0;
 8006ecc:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <DisplayInfo+0x2e0>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e160      	b.n	8007196 <DisplayInfo+0x556>
 8006ed4:	40010c00 	.word	0x40010c00
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	20000b8a 	.word	0x20000b8a
 8006ee0:	20000adc 	.word	0x20000adc
 8006ee4:	20000b8b 	.word	0x20000b8b
 8006ee8:	20000018 	.word	0x20000018
 8006eec:	0800fe9c 	.word	0x0800fe9c
 8006ef0:	20000b90 	.word	0x20000b90
 8006ef4:	0800fea4 	.word	0x0800fea4
 8006ef8:	20000b40 	.word	0x20000b40
 8006efc:	200018e0 	.word	0x200018e0
 8006f00:	200018e8 	.word	0x200018e8
 8006f04:	200018e3 	.word	0x200018e3
 8006f08:	200018e1 	.word	0x200018e1
 8006f0c:	200018ec 	.word	0x200018ec
 8006f10:	200018e4 	.word	0x200018e4
 8006f14:	200018e2 	.word	0x200018e2
 8006f18:	200018f0 	.word	0x200018f0
 8006f1c:	200018e5 	.word	0x200018e5
 8006f20:	20000b88 	.word	0x20000b88
 8006f24:	3ff40000 	.word	0x3ff40000
 8006f28:	20000bc0 	.word	0x20000bc0
 8006f2c:	0800feac 	.word	0x0800feac
 8006f30:	0800feb8 	.word	0x0800feb8
 8006f34:	0800fec0 	.word	0x0800fec0

//	    SendStr("LONG_PRESS_BT3\n");
	}
	else if(key1_state == true && short_state1 && (ms - time_key1) > 100)
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8099 	beq.w	8007072 <DisplayInfo+0x432>
 8006f40:	4b99      	ldr	r3, [pc, #612]	; (80071a8 <DisplayInfo+0x568>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8094 	beq.w	8007072 <DisplayInfo+0x432>
 8006f4a:	4b98      	ldr	r3, [pc, #608]	; (80071ac <DisplayInfo+0x56c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	f240 808d 	bls.w	8007072 <DisplayInfo+0x432>
	{
	    short_state1 = false;
 8006f58:	4b93      	ldr	r3, [pc, #588]	; (80071a8 <DisplayInfo+0x568>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
	    time_key1 = ms;
 8006f5e:	4a93      	ldr	r2, [pc, #588]	; (80071ac <DisplayInfo+0x56c>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]

	    if(!long_state1)
 8006f64:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <DisplayInfo+0x570>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f083 0301 	eor.w	r3, r3, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8111 	beq.w	8007196 <DisplayInfo+0x556>
	    {
		  	if(Current >= 1 && !display_Sleep)
 8006f74:	4b8f      	ldr	r3, [pc, #572]	; (80071b4 <DisplayInfo+0x574>)
 8006f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	4b8e      	ldr	r3, [pc, #568]	; (80071b8 <DisplayInfo+0x578>)
 8006f80:	f7f9 fd3a 	bl	80009f8 <__aeabi_dcmpge>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d06f      	beq.n	800706a <DisplayInfo+0x42a>
 8006f8a:	4b8c      	ldr	r3, [pc, #560]	; (80071bc <DisplayInfo+0x57c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f083 0301 	eor.w	r3, r3, #1
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d068      	beq.n	800706a <DisplayInfo+0x42a>
		  	{
			  	if(Current >= 10 && Current < 11)
 8006f98:	4b86      	ldr	r3, [pc, #536]	; (80071b4 <DisplayInfo+0x574>)
 8006f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	4b87      	ldr	r3, [pc, #540]	; (80071c0 <DisplayInfo+0x580>)
 8006fa4:	f7f9 fd28 	bl	80009f8 <__aeabi_dcmpge>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d039      	beq.n	8007022 <DisplayInfo+0x3e2>
 8006fae:	4b81      	ldr	r3, [pc, #516]	; (80071b4 <DisplayInfo+0x574>)
 8006fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	4b82      	ldr	r3, [pc, #520]	; (80071c4 <DisplayInfo+0x584>)
 8006fba:	f7f9 fd09 	bl	80009d0 <__aeabi_dcmplt>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02e      	beq.n	8007022 <DisplayInfo+0x3e2>
			  	{
			  		ssd1306_SetCursor(60, 23);
 8006fc4:	2117      	movs	r1, #23
 8006fc6:	203c      	movs	r0, #60	; 0x3c
 8006fc8:	f000 fba8 	bl	800771c <ssd1306_SetCursor>
				    ssd1306_WriteString("      ", Font_11x18, White);
 8006fcc:	4a7e      	ldr	r2, [pc, #504]	; (80071c8 <DisplayInfo+0x588>)
 8006fce:	2301      	movs	r3, #1
 8006fd0:	ca06      	ldmia	r2, {r1, r2}
 8006fd2:	487e      	ldr	r0, [pc, #504]	; (80071cc <DisplayInfo+0x58c>)
 8006fd4:	f000 fb7c 	bl	80076d0 <ssd1306_WriteString>
				  	ssd1306_SetCursor(60, 23);
 8006fd8:	2117      	movs	r1, #23
 8006fda:	203c      	movs	r0, #60	; 0x3c
 8006fdc:	f000 fb9e 	bl	800771c <ssd1306_SetCursor>
				  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 8006fe0:	4b74      	ldr	r3, [pc, #464]	; (80071b4 <DisplayInfo+0x574>)
 8006fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	4b73      	ldr	r3, [pc, #460]	; (80071b8 <DisplayInfo+0x578>)
 8006fec:	f7f9 f8c6 	bl	800017c <__aeabi_dsub>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	496f      	ldr	r1, [pc, #444]	; (80071b4 <DisplayInfo+0x574>)
 8006ff6:	e9c1 2300 	strd	r2, r3, [r1]
 8006ffa:	4b6e      	ldr	r3, [pc, #440]	; (80071b4 <DisplayInfo+0x574>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	e9cd 2300 	strd	r2, r3, [sp]
 8007004:	4a72      	ldr	r2, [pc, #456]	; (80071d0 <DisplayInfo+0x590>)
 8007006:	213f      	movs	r1, #63	; 0x3f
 8007008:	4872      	ldr	r0, [pc, #456]	; (80071d4 <DisplayInfo+0x594>)
 800700a:	f005 fba9 	bl	800c760 <sniprintf>
				  	ssd1306_WriteString(trans_str, Font_11x18, White);
 800700e:	4a6e      	ldr	r2, [pc, #440]	; (80071c8 <DisplayInfo+0x588>)
 8007010:	2301      	movs	r3, #1
 8007012:	ca06      	ldmia	r2, {r1, r2}
 8007014:	486f      	ldr	r0, [pc, #444]	; (80071d4 <DisplayInfo+0x594>)
 8007016:	f000 fb5b 	bl	80076d0 <ssd1306_WriteString>
				  	ssd1306_UpdateScreen(&hi2c2);
 800701a:	486f      	ldr	r0, [pc, #444]	; (80071d8 <DisplayInfo+0x598>)
 800701c:	f000 fa46 	bl	80074ac <ssd1306_UpdateScreen>
 8007020:	e023      	b.n	800706a <DisplayInfo+0x42a>
			  	}
			  	else
			  	{
				  	ssd1306_SetCursor(60, 23);
 8007022:	2117      	movs	r1, #23
 8007024:	203c      	movs	r0, #60	; 0x3c
 8007026:	f000 fb79 	bl	800771c <ssd1306_SetCursor>
				  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 800702a:	4b62      	ldr	r3, [pc, #392]	; (80071b4 <DisplayInfo+0x574>)
 800702c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	4b60      	ldr	r3, [pc, #384]	; (80071b8 <DisplayInfo+0x578>)
 8007036:	f7f9 f8a1 	bl	800017c <__aeabi_dsub>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	495d      	ldr	r1, [pc, #372]	; (80071b4 <DisplayInfo+0x574>)
 8007040:	e9c1 2300 	strd	r2, r3, [r1]
 8007044:	4b5b      	ldr	r3, [pc, #364]	; (80071b4 <DisplayInfo+0x574>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	e9cd 2300 	strd	r2, r3, [sp]
 800704e:	4a60      	ldr	r2, [pc, #384]	; (80071d0 <DisplayInfo+0x590>)
 8007050:	213f      	movs	r1, #63	; 0x3f
 8007052:	4860      	ldr	r0, [pc, #384]	; (80071d4 <DisplayInfo+0x594>)
 8007054:	f005 fb84 	bl	800c760 <sniprintf>
				  	ssd1306_WriteString(trans_str, Font_11x18, White);
 8007058:	4a5b      	ldr	r2, [pc, #364]	; (80071c8 <DisplayInfo+0x588>)
 800705a:	2301      	movs	r3, #1
 800705c:	ca06      	ldmia	r2, {r1, r2}
 800705e:	485d      	ldr	r0, [pc, #372]	; (80071d4 <DisplayInfo+0x594>)
 8007060:	f000 fb36 	bl	80076d0 <ssd1306_WriteString>
				  	ssd1306_UpdateScreen(&hi2c2);
 8007064:	485c      	ldr	r0, [pc, #368]	; (80071d8 <DisplayInfo+0x598>)
 8007066:	f000 fa21 	bl	80074ac <ssd1306_UpdateScreen>
			  	}
		  	}
		  	What_Time = 0;
 800706a:	4b5c      	ldr	r3, [pc, #368]	; (80071dc <DisplayInfo+0x59c>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
	    if(!long_state1)
 8007070:	e091      	b.n	8007196 <DisplayInfo+0x556>
//	    	SendStr("SHORT_PRESS_BT1\n");
	    }
	}
	else if(key2_state == true && short_state2 && (ms - time_key2) > 100)
 8007072:	78bb      	ldrb	r3, [r7, #2]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d045      	beq.n	8007104 <DisplayInfo+0x4c4>
 8007078:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <DisplayInfo+0x5a0>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d041      	beq.n	8007104 <DisplayInfo+0x4c4>
 8007080:	4b58      	ldr	r3, [pc, #352]	; (80071e4 <DisplayInfo+0x5a4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b64      	cmp	r3, #100	; 0x64
 800708a:	d93b      	bls.n	8007104 <DisplayInfo+0x4c4>
	{
	    short_state2 = false;
 800708c:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <DisplayInfo+0x5a0>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
	    time_key2 = ms;
 8007092:	4a54      	ldr	r2, [pc, #336]	; (80071e4 <DisplayInfo+0x5a4>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6013      	str	r3, [r2, #0]

	    if(!long_state2)
 8007098:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <DisplayInfo+0x5a8>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f083 0301 	eor.w	r3, r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d077      	beq.n	8007196 <DisplayInfo+0x556>
	    {
		  	if(!display_Sleep)
 80070a6:	4b45      	ldr	r3, [pc, #276]	; (80071bc <DisplayInfo+0x57c>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f083 0301 	eor.w	r3, r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d023      	beq.n	80070fc <DisplayInfo+0x4bc>
		  	{
		  		ssd1306_SetCursor(60, 23);
 80070b4:	2117      	movs	r1, #23
 80070b6:	203c      	movs	r0, #60	; 0x3c
 80070b8:	f000 fb30 	bl	800771c <ssd1306_SetCursor>
		  		snprintf(trans_str, 63, "%.2fA", Current += 1);
 80070bc:	4b3d      	ldr	r3, [pc, #244]	; (80071b4 <DisplayInfo+0x574>)
 80070be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <DisplayInfo+0x578>)
 80070c8:	f7f9 f85a 	bl	8000180 <__adddf3>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4938      	ldr	r1, [pc, #224]	; (80071b4 <DisplayInfo+0x574>)
 80070d2:	e9c1 2300 	strd	r2, r3, [r1]
 80070d6:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <DisplayInfo+0x574>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	e9cd 2300 	strd	r2, r3, [sp]
 80070e0:	4a3b      	ldr	r2, [pc, #236]	; (80071d0 <DisplayInfo+0x590>)
 80070e2:	213f      	movs	r1, #63	; 0x3f
 80070e4:	483b      	ldr	r0, [pc, #236]	; (80071d4 <DisplayInfo+0x594>)
 80070e6:	f005 fb3b 	bl	800c760 <sniprintf>
		  		ssd1306_WriteString(trans_str, Font_11x18, White);
 80070ea:	4a37      	ldr	r2, [pc, #220]	; (80071c8 <DisplayInfo+0x588>)
 80070ec:	2301      	movs	r3, #1
 80070ee:	ca06      	ldmia	r2, {r1, r2}
 80070f0:	4838      	ldr	r0, [pc, #224]	; (80071d4 <DisplayInfo+0x594>)
 80070f2:	f000 faed 	bl	80076d0 <ssd1306_WriteString>
		  		ssd1306_UpdateScreen(&hi2c2);
 80070f6:	4838      	ldr	r0, [pc, #224]	; (80071d8 <DisplayInfo+0x598>)
 80070f8:	f000 f9d8 	bl	80074ac <ssd1306_UpdateScreen>
		  	}
		  	What_Time = 0;
 80070fc:	4b37      	ldr	r3, [pc, #220]	; (80071dc <DisplayInfo+0x59c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
	    if(!long_state2)
 8007102:	e048      	b.n	8007196 <DisplayInfo+0x556>
//	    	SendStr("SHORT_PRESS_BT2\n");
	    }
	}
	else if(key3_state == true && short_state3 && (ms - time_key3) > 100)
 8007104:	787b      	ldrb	r3, [r7, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d045      	beq.n	8007196 <DisplayInfo+0x556>
 800710a:	4b38      	ldr	r3, [pc, #224]	; (80071ec <DisplayInfo+0x5ac>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d041      	beq.n	8007196 <DisplayInfo+0x556>
 8007112:	4b37      	ldr	r3, [pc, #220]	; (80071f0 <DisplayInfo+0x5b0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b64      	cmp	r3, #100	; 0x64
 800711c:	d93b      	bls.n	8007196 <DisplayInfo+0x556>
	{
	    short_state3 = false;
 800711e:	4b33      	ldr	r3, [pc, #204]	; (80071ec <DisplayInfo+0x5ac>)
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
	    time_key3 = ms;
 8007124:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <DisplayInfo+0x5b0>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6013      	str	r3, [r2, #0]

	    if(!long_state3)
 800712a:	4b32      	ldr	r3, [pc, #200]	; (80071f4 <DisplayInfo+0x5b4>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f083 0301 	eor.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02e      	beq.n	8007196 <DisplayInfo+0x556>
	    {
		  	if(!display_Sleep)
 8007138:	4b20      	ldr	r3, [pc, #128]	; (80071bc <DisplayInfo+0x57c>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f083 0301 	eor.w	r3, r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d023      	beq.n	800718e <DisplayInfo+0x54e>
		  	{
			  	ssd1306_SetCursor(60, 23);
 8007146:	2117      	movs	r1, #23
 8007148:	203c      	movs	r0, #60	; 0x3c
 800714a:	f000 fae7 	bl	800771c <ssd1306_SetCursor>
			  	snprintf(trans_str, 63, "%.2fA", Current += 0.1);
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <DisplayInfo+0x574>)
 8007150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007154:	a312      	add	r3, pc, #72	; (adr r3, 80071a0 <DisplayInfo+0x560>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f811 	bl	8000180 <__adddf3>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4914      	ldr	r1, [pc, #80]	; (80071b4 <DisplayInfo+0x574>)
 8007164:	e9c1 2300 	strd	r2, r3, [r1]
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <DisplayInfo+0x574>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	e9cd 2300 	strd	r2, r3, [sp]
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <DisplayInfo+0x590>)
 8007174:	213f      	movs	r1, #63	; 0x3f
 8007176:	4817      	ldr	r0, [pc, #92]	; (80071d4 <DisplayInfo+0x594>)
 8007178:	f005 faf2 	bl	800c760 <sniprintf>
			  	ssd1306_WriteString(trans_str, Font_11x18, White);
 800717c:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <DisplayInfo+0x588>)
 800717e:	2301      	movs	r3, #1
 8007180:	ca06      	ldmia	r2, {r1, r2}
 8007182:	4814      	ldr	r0, [pc, #80]	; (80071d4 <DisplayInfo+0x594>)
 8007184:	f000 faa4 	bl	80076d0 <ssd1306_WriteString>
			  	ssd1306_UpdateScreen(&hi2c2);
 8007188:	4813      	ldr	r0, [pc, #76]	; (80071d8 <DisplayInfo+0x598>)
 800718a:	f000 f98f 	bl	80074ac <ssd1306_UpdateScreen>
		  	}
		  	What_Time = 0;
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <DisplayInfo+0x59c>)
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
//		  	ssd1306_UpdateScreen(&hi2c2);
//	  	}
//	  	What_Time = 0;
//	  	RIGHT_NUM = false;
//	}
}
 8007194:	e7ff      	b.n	8007196 <DisplayInfo+0x556>
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	9999999a 	.word	0x9999999a
 80071a4:	3fb99999 	.word	0x3fb99999
 80071a8:	200018e0 	.word	0x200018e0
 80071ac:	200018e8 	.word	0x200018e8
 80071b0:	200018e3 	.word	0x200018e3
 80071b4:	20000b90 	.word	0x20000b90
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	20000b8b 	.word	0x20000b8b
 80071c0:	40240000 	.word	0x40240000
 80071c4:	40260000 	.word	0x40260000
 80071c8:	20000018 	.word	0x20000018
 80071cc:	0800fec8 	.word	0x0800fec8
 80071d0:	0800fea4 	.word	0x0800fea4
 80071d4:	20000b40 	.word	0x20000b40
 80071d8:	20000adc 	.word	0x20000adc
 80071dc:	20000b88 	.word	0x20000b88
 80071e0:	200018e1 	.word	0x200018e1
 80071e4:	200018ec 	.word	0x200018ec
 80071e8:	200018e4 	.word	0x200018e4
 80071ec:	200018e2 	.word	0x200018e2
 80071f0:	200018f0 	.word	0x200018f0
 80071f4:	200018e5 	.word	0x200018e5

080071f8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8007204:	230a      	movs	r3, #10
 8007206:	9302      	str	r3, [sp, #8]
 8007208:	2301      	movs	r3, #1
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	1cfb      	adds	r3, r7, #3
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2301      	movs	r3, #1
 8007212:	2200      	movs	r2, #0
 8007214:	2178      	movs	r1, #120	; 0x78
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 ff9a 	bl	8009150 <HAL_I2C_Mem_Write>
 800721c:	4603      	mov	r3, r0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8007230:	2064      	movs	r0, #100	; 0x64
 8007232:	f000 fd81 	bl	8007d38 <HAL_Delay>
    int status = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800723a:	21ae      	movs	r1, #174	; 0xae
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ffdb 	bl	80071f8 <ssd1306_WriteCommand>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800724c:	2120      	movs	r1, #32
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ffd2 	bl	80071f8 <ssd1306_WriteCommand>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800725e:	2110      	movs	r1, #16
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ffc9 	bl	80071f8 <ssd1306_WriteCommand>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8007270:	21b0      	movs	r1, #176	; 0xb0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ffc0 	bl	80071f8 <ssd1306_WriteCommand>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8007282:	21c8      	movs	r1, #200	; 0xc8
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff ffb7 	bl	80071f8 <ssd1306_WriteCommand>
 800728a:	4603      	mov	r3, r0
 800728c:	461a      	mov	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8007294:	2100      	movs	r1, #0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ffae 	bl	80071f8 <ssd1306_WriteCommand>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80072a6:	2110      	movs	r1, #16
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ffa5 	bl	80071f8 <ssd1306_WriteCommand>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ff9c 	bl	80071f8 <ssd1306_WriteCommand>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80072ca:	2181      	movs	r1, #129	; 0x81
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff93 	bl	80071f8 <ssd1306_WriteCommand>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80072dc:	21ff      	movs	r1, #255	; 0xff
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff ff8a 	bl	80071f8 <ssd1306_WriteCommand>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80072ee:	21a1      	movs	r1, #161	; 0xa1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff81 	bl	80071f8 <ssd1306_WriteCommand>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8007300:	21a6      	movs	r1, #166	; 0xa6
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff78 	bl	80071f8 <ssd1306_WriteCommand>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8007312:	21a8      	movs	r1, #168	; 0xa8
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff ff6f 	bl	80071f8 <ssd1306_WriteCommand>
 800731a:	4603      	mov	r3, r0
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8007324:	213f      	movs	r1, #63	; 0x3f
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff66 	bl	80071f8 <ssd1306_WriteCommand>
 800732c:	4603      	mov	r3, r0
 800732e:	461a      	mov	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007336:	21a4      	movs	r1, #164	; 0xa4
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff5d 	bl	80071f8 <ssd1306_WriteCommand>
 800733e:	4603      	mov	r3, r0
 8007340:	461a      	mov	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8007348:	21d3      	movs	r1, #211	; 0xd3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ff54 	bl	80071f8 <ssd1306_WriteCommand>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ff4b 	bl	80071f8 <ssd1306_WriteCommand>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800736c:	21d5      	movs	r1, #213	; 0xd5
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ff42 	bl	80071f8 <ssd1306_WriteCommand>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800737e:	21f0      	movs	r1, #240	; 0xf0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff39 	bl	80071f8 <ssd1306_WriteCommand>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4413      	add	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8007390:	21d9      	movs	r1, #217	; 0xd9
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff ff30 	bl	80071f8 <ssd1306_WriteCommand>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80073a2:	2122      	movs	r1, #34	; 0x22
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff ff27 	bl	80071f8 <ssd1306_WriteCommand>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80073b4:	21da      	movs	r1, #218	; 0xda
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff ff1e 	bl	80071f8 <ssd1306_WriteCommand>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 80073c6:	2112      	movs	r1, #18
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff15 	bl	80071f8 <ssd1306_WriteCommand>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80073d8:	21db      	movs	r1, #219	; 0xdb
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff ff0c 	bl	80071f8 <ssd1306_WriteCommand>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80073ea:	2120      	movs	r1, #32
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff ff03 	bl	80071f8 <ssd1306_WriteCommand>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80073fc:	218d      	movs	r1, #141	; 0x8d
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fefa 	bl	80071f8 <ssd1306_WriteCommand>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800740e:	2114      	movs	r1, #20
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff fef1 	bl	80071f8 <ssd1306_WriteCommand>
 8007416:	4603      	mov	r3, r0
 8007418:	461a      	mov	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8007420:	21af      	movs	r1, #175	; 0xaf
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fee8 	bl	80071f8 <ssd1306_WriteCommand>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <ssd1306_Init+0x214>
        return 1;
 8007438:	2301      	movs	r3, #1
 800743a:	e00f      	b.n	800745c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800743c:	2000      	movs	r0, #0
 800743e:	f000 f813 	bl	8007468 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f832 	bl	80074ac <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <ssd1306_Init+0x23c>)
 800744a:	2200      	movs	r2, #0
 800744c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <ssd1306_Init+0x23c>)
 8007450:	2200      	movs	r2, #0
 8007452:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8007454:	4b03      	ldr	r3, [pc, #12]	; (8007464 <ssd1306_Init+0x23c>)
 8007456:	2201      	movs	r2, #1
 8007458:	715a      	strb	r2, [r3, #5]

    return 0;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20001cf4 	.word	0x20001cf4

08007468 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	e00d      	b.n	8007494 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <ssd1306_Fill+0x1a>
 800747e:	2100      	movs	r1, #0
 8007480:	e000      	b.n	8007484 <ssd1306_Fill+0x1c>
 8007482:	21ff      	movs	r1, #255	; 0xff
 8007484:	4a08      	ldr	r2, [pc, #32]	; (80074a8 <ssd1306_Fill+0x40>)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	460a      	mov	r2, r1
 800748c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749a:	d3ed      	bcc.n	8007478 <ssd1306_Fill+0x10>
    }
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bc80      	pop	{r7}
 80074a6:	4770      	bx	lr
 80074a8:	200018f4 	.word	0x200018f4

080074ac <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e020      	b.n	80074fc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	3b50      	subs	r3, #80	; 0x50
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fe98 	bl	80071f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fe94 	bl	80071f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80074d0:	2110      	movs	r1, #16
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fe90 	bl	80071f8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	01db      	lsls	r3, r3, #7
 80074dc:	4a0b      	ldr	r2, [pc, #44]	; (800750c <ssd1306_UpdateScreen+0x60>)
 80074de:	4413      	add	r3, r2
 80074e0:	2264      	movs	r2, #100	; 0x64
 80074e2:	9202      	str	r2, [sp, #8]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	2301      	movs	r3, #1
 80074ec:	2240      	movs	r2, #64	; 0x40
 80074ee:	2178      	movs	r1, #120	; 0x78
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fe2d 	bl	8009150 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	3301      	adds	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b07      	cmp	r3, #7
 8007500:	d9db      	bls.n	80074ba <ssd1306_UpdateScreen+0xe>
    }
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	200018f4 	.word	0x200018f4

08007510 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	71fb      	strb	r3, [r7, #7]
 800751a:	460b      	mov	r3, r1
 800751c:	71bb      	strb	r3, [r7, #6]
 800751e:	4613      	mov	r3, r2
 8007520:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8007522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007526:	2b00      	cmp	r3, #0
 8007528:	db48      	blt.n	80075bc <ssd1306_DrawPixel+0xac>
 800752a:	79bb      	ldrb	r3, [r7, #6]
 800752c:	2b3f      	cmp	r3, #63	; 0x3f
 800752e:	d845      	bhi.n	80075bc <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <ssd1306_DrawPixel+0xb8>)
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8007538:	797b      	ldrb	r3, [r7, #5]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8007546:	797b      	ldrb	r3, [r7, #5]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d11a      	bne.n	8007582 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800754c:	79fa      	ldrb	r2, [r7, #7]
 800754e:	79bb      	ldrb	r3, [r7, #6]
 8007550:	08db      	lsrs	r3, r3, #3
 8007552:	b2d8      	uxtb	r0, r3
 8007554:	4603      	mov	r3, r0
 8007556:	01db      	lsls	r3, r3, #7
 8007558:	4413      	add	r3, r2
 800755a:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <ssd1306_DrawPixel+0xbc>)
 800755c:	5cd3      	ldrb	r3, [r2, r3]
 800755e:	b25a      	sxtb	r2, r3
 8007560:	79bb      	ldrb	r3, [r7, #6]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	b25b      	sxtb	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b259      	sxtb	r1, r3
 8007572:	79fa      	ldrb	r2, [r7, #7]
 8007574:	4603      	mov	r3, r0
 8007576:	01db      	lsls	r3, r3, #7
 8007578:	4413      	add	r3, r2
 800757a:	b2c9      	uxtb	r1, r1
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <ssd1306_DrawPixel+0xbc>)
 800757e:	54d1      	strb	r1, [r2, r3]
 8007580:	e01d      	b.n	80075be <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007582:	79fa      	ldrb	r2, [r7, #7]
 8007584:	79bb      	ldrb	r3, [r7, #6]
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	b2d8      	uxtb	r0, r3
 800758a:	4603      	mov	r3, r0
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	4413      	add	r3, r2
 8007590:	4a0e      	ldr	r2, [pc, #56]	; (80075cc <ssd1306_DrawPixel+0xbc>)
 8007592:	5cd3      	ldrb	r3, [r2, r3]
 8007594:	b25a      	sxtb	r2, r3
 8007596:	79bb      	ldrb	r3, [r7, #6]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	43db      	mvns	r3, r3
 80075a6:	b25b      	sxtb	r3, r3
 80075a8:	4013      	ands	r3, r2
 80075aa:	b259      	sxtb	r1, r3
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	4603      	mov	r3, r0
 80075b0:	01db      	lsls	r3, r3, #7
 80075b2:	4413      	add	r3, r2
 80075b4:	b2c9      	uxtb	r1, r1
 80075b6:	4a05      	ldr	r2, [pc, #20]	; (80075cc <ssd1306_DrawPixel+0xbc>)
 80075b8:	54d1      	strb	r1, [r2, r3]
 80075ba:	e000      	b.n	80075be <ssd1306_DrawPixel+0xae>
        return;
 80075bc:	bf00      	nop
    }
}
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20001cf4 	.word	0x20001cf4
 80075cc:	200018f4 	.word	0x200018f4

080075d0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80075d0:	b590      	push	{r4, r7, lr}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	1d38      	adds	r0, r7, #4
 80075da:	e880 0006 	stmia.w	r0, {r1, r2}
 80075de:	461a      	mov	r2, r3
 80075e0:	4623      	mov	r3, r4
 80075e2:	73fb      	strb	r3, [r7, #15]
 80075e4:	4613      	mov	r3, r2
 80075e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80075e8:	4b38      	ldr	r3, [pc, #224]	; (80076cc <ssd1306_WriteChar+0xfc>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	793b      	ldrb	r3, [r7, #4]
 80075f0:	4413      	add	r3, r2
 80075f2:	2b7f      	cmp	r3, #127	; 0x7f
 80075f4:	dc06      	bgt.n	8007604 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80075f6:	4b35      	ldr	r3, [pc, #212]	; (80076cc <ssd1306_WriteChar+0xfc>)
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	461a      	mov	r2, r3
 80075fc:	797b      	ldrb	r3, [r7, #5]
 80075fe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8007600:	2b3f      	cmp	r3, #63	; 0x3f
 8007602:	dd01      	ble.n	8007608 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8007604:	2300      	movs	r3, #0
 8007606:	e05d      	b.n	80076c4 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e04c      	b.n	80076a8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	3b20      	subs	r3, #32
 8007614:	7979      	ldrb	r1, [r7, #5]
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4619      	mov	r1, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	440b      	add	r3, r1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8007628:	2300      	movs	r3, #0
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	e034      	b.n	8007698 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d012      	beq.n	8007664 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800763e:	4b23      	ldr	r3, [pc, #140]	; (80076cc <ssd1306_WriteChar+0xfc>)
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	4413      	add	r3, r2
 800764a:	b2d8      	uxtb	r0, r3
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <ssd1306_WriteChar+0xfc>)
 800764e:	885b      	ldrh	r3, [r3, #2]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	4413      	add	r3, r2
 8007658:	b2db      	uxtb	r3, r3
 800765a:	7bba      	ldrb	r2, [r7, #14]
 800765c:	4619      	mov	r1, r3
 800765e:	f7ff ff57 	bl	8007510 <ssd1306_DrawPixel>
 8007662:	e016      	b.n	8007692 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007664:	4b19      	ldr	r3, [pc, #100]	; (80076cc <ssd1306_WriteChar+0xfc>)
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	4413      	add	r3, r2
 8007670:	b2d8      	uxtb	r0, r3
 8007672:	4b16      	ldr	r3, [pc, #88]	; (80076cc <ssd1306_WriteChar+0xfc>)
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4413      	add	r3, r2
 800767e:	b2d9      	uxtb	r1, r3
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf0c      	ite	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	2300      	movne	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	f7ff ff3f 	bl	8007510 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	3301      	adds	r3, #1
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	793b      	ldrb	r3, [r7, #4]
 800769a:	461a      	mov	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	4293      	cmp	r3, r2
 80076a0:	d3c5      	bcc.n	800762e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3301      	adds	r3, #1
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	797b      	ldrb	r3, [r7, #5]
 80076aa:	461a      	mov	r2, r3
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d3ad      	bcc.n	800760e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <ssd1306_WriteChar+0xfc>)
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	793b      	ldrb	r3, [r7, #4]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	b29a      	uxth	r2, r3
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <ssd1306_WriteChar+0xfc>)
 80076c0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3724      	adds	r7, #36	; 0x24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd90      	pop	{r4, r7, pc}
 80076cc:	20001cf4 	.word	0x20001cf4

080076d0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	1d38      	adds	r0, r7, #4
 80076da:	e880 0006 	stmia.w	r0, {r1, r2}
 80076de:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80076e0:	e012      	b.n	8007708 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	7818      	ldrb	r0, [r3, #0]
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	1d3a      	adds	r2, r7, #4
 80076ea:	ca06      	ldmia	r2, {r1, r2}
 80076ec:	f7ff ff70 	bl	80075d0 <ssd1306_WriteChar>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d002      	beq.n	8007702 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	e008      	b.n	8007714 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
    while (*str)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e8      	bne.n	80076e2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	781b      	ldrb	r3, [r3, #0]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	460a      	mov	r2, r1
 8007726:	71fb      	strb	r3, [r7, #7]
 8007728:	4613      	mov	r3, r2
 800772a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	b29a      	uxth	r2, r3
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <ssd1306_SetCursor+0x2c>)
 8007732:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007734:	79bb      	ldrb	r3, [r7, #6]
 8007736:	b29a      	uxth	r2, r3
 8007738:	4b03      	ldr	r3, [pc, #12]	; (8007748 <ssd1306_SetCursor+0x2c>)
 800773a:	805a      	strh	r2, [r3, #2]
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20001cf4 	.word	0x20001cf4

0800774c <DirectionMove>:
bool checkOne = false;
bool checkTwo = false;

//Функция запуска направления движения задвижки ОТКР/ЗАКР
void DirectionMove(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
	//Открытие задвижки
	if(Forward)
 8007750:	4b66      	ldr	r3, [pc, #408]	; (80078ec <DirectionMove+0x1a0>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d041      	beq.n	80077dc <DirectionMove+0x90>
		 * и только потом запускать таймеры отвечающие за движение в выбранную сторону, иначе произойдет наложение полуволн,
		 * что приведет к возникновению сквозных токов, вследствии чего сгорят симмисторы.
		 */

		//Останавливаем таймеры на закрытие
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);	//Stop timer two channel four	(AREV)
 8007758:	210c      	movs	r1, #12
 800775a:	4865      	ldr	r0, [pc, #404]	; (80078f0 <DirectionMove+0x1a4>)
 800775c:	f003 f9ee 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 8007760:	2100      	movs	r1, #0
 8007762:	4864      	ldr	r0, [pc, #400]	; (80078f4 <DirectionMove+0x1a8>)
 8007764:	f003 f9ea 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);	//Stop timer four channel four	(CREV)
 8007768:	210c      	movs	r1, #12
 800776a:	4863      	ldr	r0, [pc, #396]	; (80078f8 <DirectionMove+0x1ac>)
 800776c:	f003 f9e6 	bl	800ab3c <HAL_TIM_PWM_Stop>

		DirMove_CLOSEmcu = false;
 8007770:	4b62      	ldr	r3, [pc, #392]	; (80078fc <DirectionMove+0x1b0>)
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
		Forward = false;
 8007776:	4b5d      	ldr	r3, [pc, #372]	; (80078ec <DirectionMove+0x1a0>)
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]

		if(handCTRL_flag)
 800777c:	4b60      	ldr	r3, [pc, #384]	; (8007900 <DirectionMove+0x1b4>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <DirectionMove+0x40>
		{
			#if DEBUG_USART
				SendStr("[12] - handCLOSE_flag: Control is local\n");
			#endif
			handCLOSE_flag = true;
 8007784:	4b5f      	ldr	r3, [pc, #380]	; (8007904 <DirectionMove+0x1b8>)
 8007786:	2201      	movs	r2, #1
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e009      	b.n	80077a0 <DirectionMove+0x54>
		}
		else if(!handCTRL_flag)
 800778c:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <DirectionMove+0x1b4>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f083 0301 	eor.w	r3, r3, #1
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <DirectionMove+0x54>
		{
			#if DEBUG_USART
				SendStr("[13] - distCLOSE_flag: Control is remote\n");
			#endif
			distCLOSE_flag = true;
 800779a:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <DirectionMove+0x1bc>)
 800779c:	2201      	movs	r2, #1
 800779e:	701a      	strb	r2, [r3, #0]
		}

		DirMove_OPENmcu = true;
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <DirectionMove+0x1c0>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]

		Compare = 9000;
 80077a6:	4b5a      	ldr	r3, [pc, #360]	; (8007910 <DirectionMove+0x1c4>)
 80077a8:	f242 3228 	movw	r2, #9000	; 0x2328
 80077ac:	801a      	strh	r2, [r3, #0]
		/*
		 * !!!
		 * Возможно нужно поставить задержку для исключения одновременной работы таймеров
		 * на открытие и закрытие
		 */
		HAL_Delay(20);
 80077ae:	2014      	movs	r0, #20
 80077b0:	f000 fac2 	bl	8007d38 <HAL_Delay>

		//Запускаем таймеры на открытие
		if((GPIOA->IDR & OPENmcu_Pin) != 0)
 80077b4:	4b57      	ldr	r3, [pc, #348]	; (8007914 <DirectionMove+0x1c8>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8092 	beq.w	80078e6 <DirectionMove+0x19a>
		{
			#if DEBUG_USART
				SendStr("[14] - Run timers is opening\n");
			#endif
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Run timer two channel one		(AFWD)
 80077c2:	2100      	movs	r1, #0
 80077c4:	484a      	ldr	r0, [pc, #296]	; (80078f0 <DirectionMove+0x1a4>)
 80077c6:	f003 f917 	bl	800a9f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 80077ca:	2100      	movs	r1, #0
 80077cc:	4849      	ldr	r0, [pc, #292]	; (80078f4 <DirectionMove+0x1a8>)
 80077ce:	f003 f913 	bl	800a9f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//Run timer four channel one	(CFWD)
 80077d2:	2100      	movs	r1, #0
 80077d4:	4848      	ldr	r0, [pc, #288]	; (80078f8 <DirectionMove+0x1ac>)
 80077d6:	f003 f90f 	bl	800a9f8 <HAL_TIM_PWM_Start>
//		OpenBlink = false;
//		CloseBlink = false;

		Stop = false;
	}
}
 80077da:	e084      	b.n	80078e6 <DirectionMove+0x19a>
	else if(Reverse)
 80077dc:	4b4e      	ldr	r3, [pc, #312]	; (8007918 <DirectionMove+0x1cc>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d040      	beq.n	8007866 <DirectionMove+0x11a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Stop timer two channel one	(AFWD)
 80077e4:	2100      	movs	r1, #0
 80077e6:	4842      	ldr	r0, [pc, #264]	; (80078f0 <DirectionMove+0x1a4>)
 80077e8:	f003 f9a8 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 80077ec:	2100      	movs	r1, #0
 80077ee:	4841      	ldr	r0, [pc, #260]	; (80078f4 <DirectionMove+0x1a8>)
 80077f0:	f003 f9a4 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	//Stop timer Four channel one	(CFWD)
 80077f4:	2100      	movs	r1, #0
 80077f6:	4840      	ldr	r0, [pc, #256]	; (80078f8 <DirectionMove+0x1ac>)
 80077f8:	f003 f9a0 	bl	800ab3c <HAL_TIM_PWM_Stop>
		DirMove_OPENmcu = false;
 80077fc:	4b43      	ldr	r3, [pc, #268]	; (800790c <DirectionMove+0x1c0>)
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
		Reverse = false;
 8007802:	4b45      	ldr	r3, [pc, #276]	; (8007918 <DirectionMove+0x1cc>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
		if(handCTRL_flag)
 8007808:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <DirectionMove+0x1b4>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <DirectionMove+0xcc>
			handOPEN_flag = true;
 8007810:	4b42      	ldr	r3, [pc, #264]	; (800791c <DirectionMove+0x1d0>)
 8007812:	2201      	movs	r2, #1
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	e009      	b.n	800782c <DirectionMove+0xe0>
		else if(!handCTRL_flag)
 8007818:	4b39      	ldr	r3, [pc, #228]	; (8007900 <DirectionMove+0x1b4>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f083 0301 	eor.w	r3, r3, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <DirectionMove+0xe0>
			distOPEN_flag = true;
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <DirectionMove+0x1d4>)
 8007828:	2201      	movs	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]
		DirMove_CLOSEmcu = true;
 800782c:	4b33      	ldr	r3, [pc, #204]	; (80078fc <DirectionMove+0x1b0>)
 800782e:	2201      	movs	r2, #1
 8007830:	701a      	strb	r2, [r3, #0]
		Compare = 9000;
 8007832:	4b37      	ldr	r3, [pc, #220]	; (8007910 <DirectionMove+0x1c4>)
 8007834:	f242 3228 	movw	r2, #9000	; 0x2328
 8007838:	801a      	strh	r2, [r3, #0]
		HAL_Delay(20);
 800783a:	2014      	movs	r0, #20
 800783c:	f000 fa7c 	bl	8007d38 <HAL_Delay>
		if((GPIOA->IDR & CLOSEmcu_Pin) != 0)
 8007840:	4b34      	ldr	r3, [pc, #208]	; (8007914 <DirectionMove+0x1c8>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007848:	2b00      	cmp	r3, #0
 800784a:	d04c      	beq.n	80078e6 <DirectionMove+0x19a>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	//Run timer two channel four	(AREV)
 800784c:	210c      	movs	r1, #12
 800784e:	4828      	ldr	r0, [pc, #160]	; (80078f0 <DirectionMove+0x1a4>)
 8007850:	f003 f8d2 	bl	800a9f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 8007854:	2100      	movs	r1, #0
 8007856:	4827      	ldr	r0, [pc, #156]	; (80078f4 <DirectionMove+0x1a8>)
 8007858:	f003 f8ce 	bl	800a9f8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//Run timer four channel four	(CREV)
 800785c:	210c      	movs	r1, #12
 800785e:	4826      	ldr	r0, [pc, #152]	; (80078f8 <DirectionMove+0x1ac>)
 8007860:	f003 f8ca 	bl	800a9f8 <HAL_TIM_PWM_Start>
}
 8007864:	e03f      	b.n	80078e6 <DirectionMove+0x19a>
	else if(Stop)
 8007866:	4b2f      	ldr	r3, [pc, #188]	; (8007924 <DirectionMove+0x1d8>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d03b      	beq.n	80078e6 <DirectionMove+0x19a>
		DirMove_OPENmcu = false;
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <DirectionMove+0x1c0>)
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
		DirMove_CLOSEmcu = false;
 8007874:	4b21      	ldr	r3, [pc, #132]	; (80078fc <DirectionMove+0x1b0>)
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Stop timer two channel one	(AFWD)
 800787a:	2100      	movs	r1, #0
 800787c:	481c      	ldr	r0, [pc, #112]	; (80078f0 <DirectionMove+0x1a4>)
 800787e:	f003 f95d 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);	//Stop timer two channel four	(AREV)
 8007882:	210c      	movs	r1, #12
 8007884:	481a      	ldr	r0, [pc, #104]	; (80078f0 <DirectionMove+0x1a4>)
 8007886:	f003 f959 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 800788a:	2100      	movs	r1, #0
 800788c:	4819      	ldr	r0, [pc, #100]	; (80078f4 <DirectionMove+0x1a8>)
 800788e:	f003 f955 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	//Stop timer Four channel one	(CFWD)
 8007892:	2100      	movs	r1, #0
 8007894:	4818      	ldr	r0, [pc, #96]	; (80078f8 <DirectionMove+0x1ac>)
 8007896:	f003 f951 	bl	800ab3c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);	//Stop timer four channel four	(CREV)
 800789a:	210c      	movs	r1, #12
 800789c:	4816      	ldr	r0, [pc, #88]	; (80078f8 <DirectionMove+0x1ac>)
 800789e:	f003 f94d 	bl	800ab3c <HAL_TIM_PWM_Stop>
		if(!SELF_CAPTURE_flag && handCTRL_flag)
 80078a2:	4b21      	ldr	r3, [pc, #132]	; (8007928 <DirectionMove+0x1dc>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f083 0301 	eor.w	r3, r3, #1
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <DirectionMove+0x17a>
 80078b0:	4b13      	ldr	r3, [pc, #76]	; (8007900 <DirectionMove+0x1b4>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <DirectionMove+0x17a>
			handOPEN_flag = true;
 80078b8:	4b18      	ldr	r3, [pc, #96]	; (800791c <DirectionMove+0x1d0>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
			handCLOSE_flag = true;
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <DirectionMove+0x1b8>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e00c      	b.n	80078e0 <DirectionMove+0x194>
		else if(!handCTRL_flag)
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <DirectionMove+0x1b4>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f083 0301 	eor.w	r3, r3, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <DirectionMove+0x194>
			distOPEN_flag = true;
 80078d4:	4b12      	ldr	r3, [pc, #72]	; (8007920 <DirectionMove+0x1d4>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	701a      	strb	r2, [r3, #0]
			distCLOSE_flag = true;
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <DirectionMove+0x1bc>)
 80078dc:	2201      	movs	r2, #1
 80078de:	701a      	strb	r2, [r3, #0]
		Stop = false;
 80078e0:	4b10      	ldr	r3, [pc, #64]	; (8007924 <DirectionMove+0x1d8>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000b81 	.word	0x20000b81
 80078f0:	200010d0 	.word	0x200010d0
 80078f4:	20001118 	.word	0x20001118
 80078f8:	20001160 	.word	0x20001160
 80078fc:	20000b85 	.word	0x20000b85
 8007900:	20000b37 	.word	0x20000b37
 8007904:	20000b33 	.word	0x20000b33
 8007908:	20000b35 	.word	0x20000b35
 800790c:	20000b84 	.word	0x20000b84
 8007910:	20000b30 	.word	0x20000b30
 8007914:	40010800 	.word	0x40010800
 8007918:	20000b82 	.word	0x20000b82
 800791c:	20000b32 	.word	0x20000b32
 8007920:	20000b34 	.word	0x20000b34
 8007924:	20000b80 	.word	0x20000b80
 8007928:	2000000b 	.word	0x2000000b

0800792c <ManagementProcess>:
void ManagementProcess(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
	 *
	 * handCTRL(GPIOC3): 	Management:
	 *      High			  Local
	 *      Low			  	 Remote
	 */
	handCTRL_flag = GPIOC->IDR & handCTRL_Pin;
 8007930:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <ManagementProcess+0xac>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf14      	ite	ne
 800793c:	2301      	movne	r3, #1
 800793e:	2300      	moveq	r3, #0
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b26      	ldr	r3, [pc, #152]	; (80079dc <ManagementProcess+0xb0>)
 8007944:	701a      	strb	r2, [r3, #0]
	if(handCTRL_flag && !checkOne)
 8007946:	4b25      	ldr	r3, [pc, #148]	; (80079dc <ManagementProcess+0xb0>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01c      	beq.n	8007988 <ManagementProcess+0x5c>
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <ManagementProcess+0xb4>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f083 0301 	eor.w	r3, r3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d015      	beq.n	8007988 <ManagementProcess+0x5c>
	{
		checkOne = true;
 800795c:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <ManagementProcess+0xb4>)
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
		checkTwo = false;
 8007962:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <ManagementProcess+0xb8>)
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]

		distOPEN_flag = false;
 8007968:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <ManagementProcess+0xbc>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
		distCLOSE_flag = false;
 800796e:	4b1f      	ldr	r3, [pc, #124]	; (80079ec <ManagementProcess+0xc0>)
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
		distSTOP_flag = false;
 8007974:	4b1e      	ldr	r3, [pc, #120]	; (80079f0 <ManagementProcess+0xc4>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
//	  	distINT_flag = false;

		handOPEN_flag = true;
 800797a:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <ManagementProcess+0xc8>)
 800797c:	2201      	movs	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]
		handCLOSE_flag = true;
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <ManagementProcess+0xcc>)
 8007982:	2201      	movs	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]

		#if DEBUG_USART
			SendStr("[6] - Control is remote\n");
		#endif
	}
}
 8007986:	e022      	b.n	80079ce <ManagementProcess+0xa2>
	else if(!handCTRL_flag && !checkTwo)
 8007988:	4b14      	ldr	r3, [pc, #80]	; (80079dc <ManagementProcess+0xb0>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f083 0301 	eor.w	r3, r3, #1
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01b      	beq.n	80079ce <ManagementProcess+0xa2>
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <ManagementProcess+0xb8>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f083 0301 	eor.w	r3, r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d014      	beq.n	80079ce <ManagementProcess+0xa2>
		checkTwo = true;
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <ManagementProcess+0xb8>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	701a      	strb	r2, [r3, #0]
		checkOne = false;
 80079aa:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <ManagementProcess+0xb4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
		handOPEN_flag = false;
 80079b0:	4b10      	ldr	r3, [pc, #64]	; (80079f4 <ManagementProcess+0xc8>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
		handCLOSE_flag = false;
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <ManagementProcess+0xcc>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
		distOPEN_flag = true;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <ManagementProcess+0xbc>)
 80079be:	2201      	movs	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]
		distCLOSE_flag = true;
 80079c2:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <ManagementProcess+0xc0>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]
		distSTOP_flag = true;
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <ManagementProcess+0xc4>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	701a      	strb	r2, [r3, #0]
}
 80079ce:	bf00      	nop
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40011000 	.word	0x40011000
 80079dc:	20000b37 	.word	0x20000b37
 80079e0:	20001cfa 	.word	0x20001cfa
 80079e4:	20001cfb 	.word	0x20001cfb
 80079e8:	20000b34 	.word	0x20000b34
 80079ec:	20000b35 	.word	0x20000b35
 80079f0:	20000b36 	.word	0x20000b36
 80079f4:	20000b32 	.word	0x20000b32
 80079f8:	20000b33 	.word	0x20000b33

080079fc <SelfCaptureProcess>:
void SelfCaptureProcess(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
	/*
	 * Проверяем выбран ли режим работы эл.привода с самоподхватом,
	 * если режим работы с самоподхватом не выбран, то выставляем флаг, что самоподхват отсудствует,
	 * если выбран режим с самоподхватом то работаем в обычном режиме
	 */
	SELF_CAPTURE_flag = GPIOB->IDR & SELF_CAPTURE_Pin;
 8007a00:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <SelfCaptureProcess+0x7c>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <SelfCaptureProcess+0x80>)
 8007a14:	701a      	strb	r2, [r3, #0]
	/*
	 * Проверяем была ли нажата кнопка, и проверяем выключен ли режим самоподхвата,
	 * если выключен режим самоподхвата, то при отпускании кнопки "ОТКРЫТЬ"
	 * привод остановиться. Чтобы продолжить движение необходимо снова нажать кнопку "ОТКРЫТЬ"
	 */
	if(!SELF_CAPTURE_flag && handCTRL_flag)
 8007a16:	4b19      	ldr	r3, [pc, #100]	; (8007a7c <SelfCaptureProcess+0x80>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	f083 0301 	eor.w	r3, r3, #1
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d024      	beq.n	8007a6e <SelfCaptureProcess+0x72>
 8007a24:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <SelfCaptureProcess+0x84>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d020      	beq.n	8007a6e <SelfCaptureProcess+0x72>
	{
		if(!handOPEN_flag)
 8007a2c:	4b15      	ldr	r3, [pc, #84]	; (8007a84 <SelfCaptureProcess+0x88>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f083 0301 	eor.w	r3, r3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <SelfCaptureProcess+0x52>
		{
			if((GPIOC->IDR & handOPEN_Pin) != 0)
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <SelfCaptureProcess+0x8c>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <SelfCaptureProcess+0x72>
			{
				Stop = true;
 8007a46:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <SelfCaptureProcess+0x90>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
		/*
		 * Предположительно с дистанционного пульта управления работать без самоподхвата запрещено
		 * нужно уточнить этот момент
		 */
	}
}
 8007a4c:	e00f      	b.n	8007a6e <SelfCaptureProcess+0x72>
		else if(!handCLOSE_flag)
 8007a4e:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <SelfCaptureProcess+0x94>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f083 0301 	eor.w	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <SelfCaptureProcess+0x72>
			if((GPIOC->IDR & handCLOSE_Pin) != 0)
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <SelfCaptureProcess+0x8c>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <SelfCaptureProcess+0x72>
				Stop = true;
 8007a68:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <SelfCaptureProcess+0x90>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010c00 	.word	0x40010c00
 8007a7c:	2000000b 	.word	0x2000000b
 8007a80:	20000b37 	.word	0x20000b37
 8007a84:	20000b32 	.word	0x20000b32
 8007a88:	40011000 	.word	0x40011000
 8007a8c:	20000b80 	.word	0x20000b80
 8007a90:	20000b33 	.word	0x20000b33

08007a94 <DutyCycleProcess>:
void DutyCycleProcess(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	/*
	 * Увеличиваем скважность до уставки,
	 * если флаг направления движения выставлен,
	 * и кулачковый концевик не замкнут
	 */
	if((Compare > DutyCicle) && DirMove_OPENmcu && ((GPIOA->IDR & OPENmcu_Pin) != 0))
 8007a98:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <DutyCycleProcess+0xac>)
 8007a9a:	881a      	ldrh	r2, [r3, #0]
 8007a9c:	4b29      	ldr	r3, [pc, #164]	; (8007b44 <DutyCycleProcess+0xb0>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d922      	bls.n	8007aea <DutyCycleProcess+0x56>
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <DutyCycleProcess+0xb4>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01e      	beq.n	8007aea <DutyCycleProcess+0x56>
 8007aac:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <DutyCycleProcess+0xb8>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d018      	beq.n	8007aea <DutyCycleProcess+0x56>
		#if DEBUG_USART
			if(Compare == 9000)
				SendStr("[9] - Opening mode\n");
		#endif

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Compare);
 8007ab8:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <DutyCycleProcess+0xac>)
 8007aba:	881a      	ldrh	r2, [r3, #0]
 8007abc:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <DutyCycleProcess+0xbc>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Compare);
 8007ac2:	4b1f      	ldr	r3, [pc, #124]	; (8007b40 <DutyCycleProcess+0xac>)
 8007ac4:	881a      	ldrh	r2, [r3, #0]
 8007ac6:	4b23      	ldr	r3, [pc, #140]	; (8007b54 <DutyCycleProcess+0xc0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Compare);
 8007acc:	4b1c      	ldr	r3, [pc, #112]	; (8007b40 <DutyCycleProcess+0xac>)
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <DutyCycleProcess+0xc4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	635a      	str	r2, [r3, #52]	; 0x34
		Compare = Compare - 10;
 8007ad6:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <DutyCycleProcess+0xac>)
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	3b0a      	subs	r3, #10
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	4b18      	ldr	r3, [pc, #96]	; (8007b40 <DutyCycleProcess+0xac>)
 8007ae0:	801a      	strh	r2, [r3, #0]
		HAL_Delay(5);	//Вопрос нужна ли задержка, и какая узнать подробней !!!
 8007ae2:	2005      	movs	r0, #5
 8007ae4:	f000 f928 	bl	8007d38 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Compare);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Compare);
		Compare = Compare - 10;
		HAL_Delay(5);	//Вопрос нужна ли задержка, и какая узнать подробней !!!
	}
}
 8007ae8:	e027      	b.n	8007b3a <DutyCycleProcess+0xa6>
	else if((Compare > DutyCicle) && DirMove_CLOSEmcu && ((GPIOA->IDR & CLOSEmcu_Pin) != 0))
 8007aea:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <DutyCycleProcess+0xac>)
 8007aec:	881a      	ldrh	r2, [r3, #0]
 8007aee:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <DutyCycleProcess+0xb0>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d921      	bls.n	8007b3a <DutyCycleProcess+0xa6>
 8007af6:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <DutyCycleProcess+0xc8>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01d      	beq.n	8007b3a <DutyCycleProcess+0xa6>
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <DutyCycleProcess+0xb8>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d017      	beq.n	8007b3a <DutyCycleProcess+0xa6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, Compare);
 8007b0a:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <DutyCycleProcess+0xac>)
 8007b0c:	881a      	ldrh	r2, [r3, #0]
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <DutyCycleProcess+0xbc>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Compare);
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <DutyCycleProcess+0xac>)
 8007b16:	881a      	ldrh	r2, [r3, #0]
 8007b18:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <DutyCycleProcess+0xc0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Compare);
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <DutyCycleProcess+0xac>)
 8007b20:	881a      	ldrh	r2, [r3, #0]
 8007b22:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <DutyCycleProcess+0xc4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40
		Compare = Compare - 10;
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <DutyCycleProcess+0xac>)
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	3b0a      	subs	r3, #10
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <DutyCycleProcess+0xac>)
 8007b32:	801a      	strh	r2, [r3, #0]
		HAL_Delay(5);	//Вопрос нужна ли задержка, и какая узнать подробней !!!
 8007b34:	2005      	movs	r0, #5
 8007b36:	f000 f8ff 	bl	8007d38 <HAL_Delay>
}
 8007b3a:	bf00      	nop
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000b30 	.word	0x20000b30
 8007b44:	20000008 	.word	0x20000008
 8007b48:	20000b84 	.word	0x20000b84
 8007b4c:	40010800 	.word	0x40010800
 8007b50:	200010d0 	.word	0x200010d0
 8007b54:	20001118 	.word	0x20001118
 8007b58:	20001160 	.word	0x20001160
 8007b5c:	20000b85 	.word	0x20000b85

08007b60 <ConversionADC>:

//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Возвращает преобразованное значение в амперах
double ConversionADC(uint16_t ADC_value)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	80fb      	strh	r3, [r7, #6]
	 * The average point is 1605mV
	 * Sensitivity 66mV
	 * Gain 1.56
	 */

	double Amps = 0;
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Voltage = 0;
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.8056640625;
 8007b82:	a335      	add	r3, pc, #212	; (adr r3, 8007c58 <ConversionADC+0xf8>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Voltage = ADC_value * Resolution;
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f8 fc42 	bl	8000418 <__aeabi_i2d>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b9c:	f7f8 fca6 	bl	80004ec <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	(Voltage >= 1605) ? (Amps += ((Voltage - 1605)/66)*1.56) : (Amps += ((1605 - Voltage)/66)*1.56);
 8007ba8:	a32d      	add	r3, pc, #180	; (adr r3, 8007c60 <ConversionADC+0x100>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bb2:	f7f8 ff21 	bl	80009f8 <__aeabi_dcmpge>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d023      	beq.n	8007c04 <ConversionADC+0xa4>
 8007bbc:	a328      	add	r3, pc, #160	; (adr r3, 8007c60 <ConversionADC+0x100>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bc6:	f7f8 fad9 	bl	800017c <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <ConversionADC+0x110>)
 8007bd8:	f7f8 fdb2 	bl	8000740 <__aeabi_ddiv>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	a320      	add	r3, pc, #128	; (adr r3, 8007c68 <ConversionADC+0x108>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fc7f 	bl	80004ec <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bf6:	f7f8 fac3 	bl	8000180 <__adddf3>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007c02:	e022      	b.n	8007c4a <ConversionADC+0xea>
 8007c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c08:	a115      	add	r1, pc, #84	; (adr r1, 8007c60 <ConversionADC+0x100>)
 8007c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c0e:	f7f8 fab5 	bl	800017c <__aeabi_dsub>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <ConversionADC+0x110>)
 8007c20:	f7f8 fd8e 	bl	8000740 <__aeabi_ddiv>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	a30e      	add	r3, pc, #56	; (adr r3, 8007c68 <ConversionADC+0x108>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fc5b 	bl	80004ec <__aeabi_dmul>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c3e:	f7f8 fa9f 	bl	8000180 <__adddf3>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return Amps;
 8007c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	3fe9c800 	.word	0x3fe9c800
 8007c60:	00000000 	.word	0x00000000
 8007c64:	40991400 	.word	0x40991400
 8007c68:	8f5c28f6 	.word	0x8f5c28f6
 8007c6c:	3ff8f5c2 	.word	0x3ff8f5c2
 8007c70:	40508000 	.word	0x40508000

08007c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <HAL_Init+0x28>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <HAL_Init+0x28>)
 8007c7e:	f043 0310 	orr.w	r3, r3, #16
 8007c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c84:	2003      	movs	r0, #3
 8007c86:	f000 fd1f 	bl	80086c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c8a:	200f      	movs	r0, #15
 8007c8c:	f000 f808 	bl	8007ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c90:	f7fa fdd4 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40022000 	.word	0x40022000

08007ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ca8:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <HAL_InitTick+0x54>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <HAL_InitTick+0x58>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fd3b 	bl	800873a <HAL_SYSTICK_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e00e      	b.n	8007cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b0f      	cmp	r3, #15
 8007cd2:	d80a      	bhi.n	8007cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	f000 fcff 	bl	80086de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ce0:	4a06      	ldr	r2, [pc, #24]	; (8007cfc <HAL_InitTick+0x5c>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e000      	b.n	8007cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000010 	.word	0x20000010
 8007cf8:	20000024 	.word	0x20000024
 8007cfc:	20000020 	.word	0x20000020

08007d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <HAL_IncTick+0x1c>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <HAL_IncTick+0x20>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4413      	add	r3, r2
 8007d10:	4a03      	ldr	r2, [pc, #12]	; (8007d20 <HAL_IncTick+0x20>)
 8007d12:	6013      	str	r3, [r2, #0]
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr
 8007d1c:	20000024 	.word	0x20000024
 8007d20:	20001cfc 	.word	0x20001cfc

08007d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  return uwTick;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <HAL_GetTick+0x10>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr
 8007d34:	20001cfc 	.word	0x20001cfc

08007d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d40:	f7ff fff0 	bl	8007d24 <HAL_GetTick>
 8007d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d005      	beq.n	8007d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <HAL_Delay+0x44>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d5e:	bf00      	nop
 8007d60:	f7ff ffe0 	bl	8007d24 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d8f7      	bhi.n	8007d60 <HAL_Delay+0x28>
  {
  }
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000024 	.word	0x20000024

08007d80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e0be      	b.n	8007f20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 febe 	bl	8001b40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 faf5 	bl	80083b4 <ADC_ConversionStop_Disable>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 8099 	bne.w	8007f0e <HAL_ADC_Init+0x18e>
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f040 8095 	bne.w	8007f0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007dec:	f023 0302 	bic.w	r3, r3, #2
 8007df0:	f043 0202 	orr.w	r2, r3, #2
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007e00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7b1b      	ldrb	r3, [r3, #12]
 8007e06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007e08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	d003      	beq.n	8007e22 <HAL_ADC_Init+0xa2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d102      	bne.n	8007e28 <HAL_ADC_Init+0xa8>
 8007e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e26:	e000      	b.n	8007e2a <HAL_ADC_Init+0xaa>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d119      	bne.n	8007e6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7b1b      	ldrb	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	035a      	lsls	r2, r3, #13
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	e00b      	b.n	8007e6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f043 0220 	orr.w	r2, r3, #32
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f043 0201 	orr.w	r2, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	4b28      	ldr	r3, [pc, #160]	; (8007f28 <HAL_ADC_Init+0x1a8>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9c:	d003      	beq.n	8007ea6 <HAL_ADC_Init+0x126>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d104      	bne.n	8007eb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	051b      	lsls	r3, r3, #20
 8007eae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <HAL_ADC_Init+0x1ac>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d10b      	bne.n	8007eec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f023 0303 	bic.w	r3, r3, #3
 8007ee2:	f043 0201 	orr.w	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007eea:	e018      	b.n	8007f1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	f023 0312 	bic.w	r3, r3, #18
 8007ef4:	f043 0210 	orr.w	r2, r3, #16
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	f043 0201 	orr.w	r2, r3, #1
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007f0c:	e007      	b.n	8007f1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	f043 0210 	orr.w	r2, r3, #16
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	ffe1f7fd 	.word	0xffe1f7fd
 8007f2c:	ff1f0efe 	.word	0xff1f0efe

08007f30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a64      	ldr	r2, [pc, #400]	; (80080d8 <HAL_ADC_Start_DMA+0x1a8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_ADC_Start_DMA+0x24>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a63      	ldr	r2, [pc, #396]	; (80080dc <HAL_ADC_Start_DMA+0x1ac>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d106      	bne.n	8007f62 <HAL_ADC_Start_DMA+0x32>
 8007f54:	4b60      	ldr	r3, [pc, #384]	; (80080d8 <HAL_ADC_Start_DMA+0x1a8>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f040 80b3 	bne.w	80080c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_ADC_Start_DMA+0x40>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e0ae      	b.n	80080ce <HAL_ADC_Start_DMA+0x19e>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f9c1 	bl	8008300 <ADC_Enable>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 809a 	bne.w	80080be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a4e      	ldr	r2, [pc, #312]	; (80080dc <HAL_ADC_Start_DMA+0x1ac>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d105      	bne.n	8007fb4 <HAL_ADC_Start_DMA+0x84>
 8007fa8:	4b4b      	ldr	r3, [pc, #300]	; (80080d8 <HAL_ADC_Start_DMA+0x1a8>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d115      	bne.n	8007fe0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d026      	beq.n	800801c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007fd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fde:	e01d      	b.n	800801c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a39      	ldr	r2, [pc, #228]	; (80080d8 <HAL_ADC_Start_DMA+0x1a8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_ADC_Start_DMA+0xd0>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a38      	ldr	r2, [pc, #224]	; (80080dc <HAL_ADC_Start_DMA+0x1ac>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10d      	bne.n	800801c <HAL_ADC_Start_DMA+0xec>
 8008000:	4b35      	ldr	r3, [pc, #212]	; (80080d8 <HAL_ADC_Start_DMA+0x1a8>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008014:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	f023 0206 	bic.w	r2, r3, #6
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	62da      	str	r2, [r3, #44]	; 0x2c
 8008034:	e002      	b.n	800803c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	4a25      	ldr	r2, [pc, #148]	; (80080e0 <HAL_ADC_Start_DMA+0x1b0>)
 800804a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	4a24      	ldr	r2, [pc, #144]	; (80080e4 <HAL_ADC_Start_DMA+0x1b4>)
 8008052:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <HAL_ADC_Start_DMA+0x1b8>)
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0202 	mvn.w	r2, #2
 8008064:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008074:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a18      	ldr	r0, [r3, #32]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	334c      	adds	r3, #76	; 0x4c
 8008080:	4619      	mov	r1, r3
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f000 fbbf 	bl	8008808 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008094:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008098:	d108      	bne.n	80080ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80080a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80080aa:	e00f      	b.n	80080cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80080bc:	e006      	b.n	80080cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80080c6:	e001      	b.n	80080cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	40012400 	.word	0x40012400
 80080dc:	40012800 	.word	0x40012800
 80080e0:	08008437 	.word	0x08008437
 80080e4:	080084b3 	.word	0x080084b3
 80080e8:	080084cf 	.word	0x080084cf

080080ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_ADC_ConfigChannel+0x20>
 800812c:	2302      	movs	r3, #2
 800812e:	e0dc      	b.n	80082ea <HAL_ADC_ConfigChannel+0x1da>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d81c      	bhi.n	800817a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	3b05      	subs	r3, #5
 8008152:	221f      	movs	r2, #31
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	43db      	mvns	r3, r3
 800815a:	4019      	ands	r1, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	3b05      	subs	r3, #5
 800816c:	fa00 f203 	lsl.w	r2, r0, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	635a      	str	r2, [r3, #52]	; 0x34
 8008178:	e03c      	b.n	80081f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b0c      	cmp	r3, #12
 8008180:	d81c      	bhi.n	80081bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	3b23      	subs	r3, #35	; 0x23
 8008194:	221f      	movs	r2, #31
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	43db      	mvns	r3, r3
 800819c:	4019      	ands	r1, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	3b23      	subs	r3, #35	; 0x23
 80081ae:	fa00 f203 	lsl.w	r2, r0, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
 80081ba:	e01b      	b.n	80081f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	3b41      	subs	r3, #65	; 0x41
 80081ce:	221f      	movs	r2, #31
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	43db      	mvns	r3, r3
 80081d6:	4019      	ands	r1, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	3b41      	subs	r3, #65	; 0x41
 80081e8:	fa00 f203 	lsl.w	r2, r0, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d91c      	bls.n	8008236 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68d9      	ldr	r1, [r3, #12]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	4413      	add	r3, r2
 800820c:	3b1e      	subs	r3, #30
 800820e:	2207      	movs	r2, #7
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	4019      	ands	r1, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6898      	ldr	r0, [r3, #8]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	4413      	add	r3, r2
 8008226:	3b1e      	subs	r3, #30
 8008228:	fa00 f203 	lsl.w	r2, r0, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	60da      	str	r2, [r3, #12]
 8008234:	e019      	b.n	800826a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6919      	ldr	r1, [r3, #16]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	4413      	add	r3, r2
 8008246:	2207      	movs	r2, #7
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	43db      	mvns	r3, r3
 800824e:	4019      	ands	r1, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	6898      	ldr	r0, [r3, #8]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	4413      	add	r3, r2
 800825e:	fa00 f203 	lsl.w	r2, r0, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d003      	beq.n	800827a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008276:	2b11      	cmp	r3, #17
 8008278:	d132      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d125      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d126      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80082a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d11a      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a13      	ldr	r2, [pc, #76]	; (80082fc <HAL_ADC_ConfigChannel+0x1ec>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	0c9a      	lsrs	r2, r3, #18
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80082c0:	e002      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f9      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x1b2>
 80082ce:	e007      	b.n	80082e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f043 0220 	orr.w	r2, r3, #32
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr
 80082f4:	40012400 	.word	0x40012400
 80082f8:	20000010 	.word	0x20000010
 80082fc:	431bde83 	.word	0x431bde83

08008300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b01      	cmp	r3, #1
 800831c:	d040      	beq.n	80083a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0201 	orr.w	r2, r2, #1
 800832c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800832e:	4b1f      	ldr	r3, [pc, #124]	; (80083ac <ADC_Enable+0xac>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <ADC_Enable+0xb0>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	0c9b      	lsrs	r3, r3, #18
 800833a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800833c:	e002      	b.n	8008344 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3b01      	subs	r3, #1
 8008342:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f9      	bne.n	800833e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800834a:	f7ff fceb 	bl	8007d24 <HAL_GetTick>
 800834e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008350:	e01f      	b.n	8008392 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008352:	f7ff fce7 	bl	8007d24 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d918      	bls.n	8008392 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b01      	cmp	r3, #1
 800836c:	d011      	beq.n	8008392 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	f043 0210 	orr.w	r2, r3, #16
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	f043 0201 	orr.w	r2, r3, #1
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e007      	b.n	80083a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b01      	cmp	r3, #1
 800839e:	d1d8      	bne.n	8008352 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000010 	.word	0x20000010
 80083b0:	431bde83 	.word	0x431bde83

080083b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d12e      	bne.n	800842c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80083de:	f7ff fca1 	bl	8007d24 <HAL_GetTick>
 80083e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80083e4:	e01b      	b.n	800841e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80083e6:	f7ff fc9d 	bl	8007d24 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d914      	bls.n	800841e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d10d      	bne.n	800841e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	f043 0210 	orr.w	r2, r3, #16
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008412:	f043 0201 	orr.w	r2, r3, #1
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e007      	b.n	800842e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d0dc      	beq.n	80083e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800844c:	2b00      	cmp	r3, #0
 800844e:	d127      	bne.n	80084a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008466:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800846a:	d115      	bne.n	8008498 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008470:	2b00      	cmp	r3, #0
 8008472:	d111      	bne.n	8008498 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d105      	bne.n	8008498 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	f043 0201 	orr.w	r2, r3, #1
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7fa f8d7 	bl	800264c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800849e:	e004      	b.n	80084aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fe13 	bl	80080ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	f043 0204 	orr.w	r2, r3, #4
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff fe02 	bl	80080fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008514:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <__NVIC_SetPriorityGrouping+0x44>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008520:	4013      	ands	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800852c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008536:	4a04      	ldr	r2, [pc, #16]	; (8008548 <__NVIC_SetPriorityGrouping+0x44>)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	60d3      	str	r3, [r2, #12]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	e000ed00 	.word	0xe000ed00

0800854c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <__NVIC_GetPriorityGrouping+0x18>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	f003 0307 	and.w	r3, r3, #7
}
 800855a:	4618      	mov	r0, r3
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008576:	2b00      	cmp	r3, #0
 8008578:	db0b      	blt.n	8008592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	f003 021f 	and.w	r2, r3, #31
 8008580:	4906      	ldr	r1, [pc, #24]	; (800859c <__NVIC_EnableIRQ+0x34>)
 8008582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	2001      	movs	r0, #1
 800858a:	fa00 f202 	lsl.w	r2, r0, r2
 800858e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr
 800859c:	e000e100 	.word	0xe000e100

080085a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	6039      	str	r1, [r7, #0]
 80085aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	db0a      	blt.n	80085ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	490c      	ldr	r1, [pc, #48]	; (80085ec <__NVIC_SetPriority+0x4c>)
 80085ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085be:	0112      	lsls	r2, r2, #4
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	440b      	add	r3, r1
 80085c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085c8:	e00a      	b.n	80085e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	4908      	ldr	r1, [pc, #32]	; (80085f0 <__NVIC_SetPriority+0x50>)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	3b04      	subs	r3, #4
 80085d8:	0112      	lsls	r2, r2, #4
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	440b      	add	r3, r1
 80085de:	761a      	strb	r2, [r3, #24]
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000e100 	.word	0xe000e100
 80085f0:	e000ed00 	.word	0xe000ed00

080085f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b089      	sub	sp, #36	; 0x24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	f1c3 0307 	rsb	r3, r3, #7
 800860e:	2b04      	cmp	r3, #4
 8008610:	bf28      	it	cs
 8008612:	2304      	movcs	r3, #4
 8008614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3304      	adds	r3, #4
 800861a:	2b06      	cmp	r3, #6
 800861c:	d902      	bls.n	8008624 <NVIC_EncodePriority+0x30>
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3b03      	subs	r3, #3
 8008622:	e000      	b.n	8008626 <NVIC_EncodePriority+0x32>
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008628:	f04f 32ff 	mov.w	r2, #4294967295
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	fa02 f303 	lsl.w	r3, r2, r3
 8008632:	43da      	mvns	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	401a      	ands	r2, r3
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800863c:	f04f 31ff 	mov.w	r1, #4294967295
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	43d9      	mvns	r1, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800864c:	4313      	orrs	r3, r2
         );
}
 800864e:	4618      	mov	r0, r3
 8008650:	3724      	adds	r7, #36	; 0x24
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800865c:	f3bf 8f4f 	dsb	sy
}
 8008660:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008662:	4b06      	ldr	r3, [pc, #24]	; (800867c <__NVIC_SystemReset+0x24>)
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800866a:	4904      	ldr	r1, [pc, #16]	; (800867c <__NVIC_SystemReset+0x24>)
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <__NVIC_SystemReset+0x28>)
 800866e:	4313      	orrs	r3, r2
 8008670:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008672:	f3bf 8f4f 	dsb	sy
}
 8008676:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <__NVIC_SystemReset+0x20>
 800867c:	e000ed00 	.word	0xe000ed00
 8008680:	05fa0004 	.word	0x05fa0004

08008684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3b01      	subs	r3, #1
 8008690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008694:	d301      	bcc.n	800869a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008696:	2301      	movs	r3, #1
 8008698:	e00f      	b.n	80086ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800869a:	4a0a      	ldr	r2, [pc, #40]	; (80086c4 <SysTick_Config+0x40>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3b01      	subs	r3, #1
 80086a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086a2:	210f      	movs	r1, #15
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	f7ff ff7a 	bl	80085a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <SysTick_Config+0x40>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086b2:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <SysTick_Config+0x40>)
 80086b4:	2207      	movs	r2, #7
 80086b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	e000e010 	.word	0xe000e010

080086c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff17 	bl	8008504 <__NVIC_SetPriorityGrouping>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	4603      	mov	r3, r0
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
 80086ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086f0:	f7ff ff2c 	bl	800854c <__NVIC_GetPriorityGrouping>
 80086f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	6978      	ldr	r0, [r7, #20]
 80086fc:	f7ff ff7a 	bl	80085f4 <NVIC_EncodePriority>
 8008700:	4602      	mov	r2, r0
 8008702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff ff49 	bl	80085a0 <__NVIC_SetPriority>
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	4603      	mov	r3, r0
 800871e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff ff1f 	bl	8008568 <__NVIC_EnableIRQ>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008736:	f7ff ff8f 	bl	8008658 <__NVIC_SystemReset>

0800873a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff ff9e 	bl	8008684 <SysTick_Config>
 8008748:	4603      	mov	r3, r0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e043      	b.n	80087f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	4b22      	ldr	r3, [pc, #136]	; (80087fc <HAL_DMA_Init+0xa8>)
 8008772:	4413      	add	r3, r2
 8008774:	4a22      	ldr	r2, [pc, #136]	; (8008800 <HAL_DMA_Init+0xac>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	091b      	lsrs	r3, r3, #4
 800877c:	009a      	lsls	r2, r3, #2
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <HAL_DMA_Init+0xb0>)
 8008786:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800879e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80087a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80087ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	bffdfff8 	.word	0xbffdfff8
 8008800:	cccccccd 	.word	0xcccccccd
 8008804:	40020000 	.word	0x40020000

08008808 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_DMA_Start_IT+0x20>
 8008824:	2302      	movs	r3, #2
 8008826:	e04a      	b.n	80088be <HAL_DMA_Start_IT+0xb6>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008836:	2b01      	cmp	r3, #1
 8008838:	d13a      	bne.n	80088b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f938 	bl	8008ad4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 020e 	orr.w	r2, r2, #14
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e00f      	b.n	800889e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0204 	bic.w	r2, r2, #4
 800888c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 020a 	orr.w	r2, r2, #10
 800889c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e005      	b.n	80088bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80088b8:	2302      	movs	r3, #2
 80088ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	2204      	movs	r2, #4
 80088e6:	409a      	lsls	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d04f      	beq.n	8008990 <HAL_DMA_IRQHandler+0xc8>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04a      	beq.n	8008990 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d107      	bne.n	8008918 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0204 	bic.w	r2, r2, #4
 8008916:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a66      	ldr	r2, [pc, #408]	; (8008ab8 <HAL_DMA_IRQHandler+0x1f0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d029      	beq.n	8008976 <HAL_DMA_IRQHandler+0xae>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a65      	ldr	r2, [pc, #404]	; (8008abc <HAL_DMA_IRQHandler+0x1f4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d022      	beq.n	8008972 <HAL_DMA_IRQHandler+0xaa>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a63      	ldr	r2, [pc, #396]	; (8008ac0 <HAL_DMA_IRQHandler+0x1f8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01a      	beq.n	800896c <HAL_DMA_IRQHandler+0xa4>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a62      	ldr	r2, [pc, #392]	; (8008ac4 <HAL_DMA_IRQHandler+0x1fc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d012      	beq.n	8008966 <HAL_DMA_IRQHandler+0x9e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a60      	ldr	r2, [pc, #384]	; (8008ac8 <HAL_DMA_IRQHandler+0x200>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d00a      	beq.n	8008960 <HAL_DMA_IRQHandler+0x98>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a5f      	ldr	r2, [pc, #380]	; (8008acc <HAL_DMA_IRQHandler+0x204>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d102      	bne.n	800895a <HAL_DMA_IRQHandler+0x92>
 8008954:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008958:	e00e      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 800895a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800895e:	e00b      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 8008960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008964:	e008      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 8008966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800896a:	e005      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 800896c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008970:	e002      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 8008972:	2340      	movs	r3, #64	; 0x40
 8008974:	e000      	b.n	8008978 <HAL_DMA_IRQHandler+0xb0>
 8008976:	2304      	movs	r3, #4
 8008978:	4a55      	ldr	r2, [pc, #340]	; (8008ad0 <HAL_DMA_IRQHandler+0x208>)
 800897a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 8094 	beq.w	8008aae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800898e:	e08e      	b.n	8008aae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	2202      	movs	r2, #2
 8008996:	409a      	lsls	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d056      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x186>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d051      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 020a 	bic.w	r2, r2, #10
 80089c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a38      	ldr	r2, [pc, #224]	; (8008ab8 <HAL_DMA_IRQHandler+0x1f0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d029      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x166>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a37      	ldr	r2, [pc, #220]	; (8008abc <HAL_DMA_IRQHandler+0x1f4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d022      	beq.n	8008a2a <HAL_DMA_IRQHandler+0x162>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a35      	ldr	r2, [pc, #212]	; (8008ac0 <HAL_DMA_IRQHandler+0x1f8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01a      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x15c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a34      	ldr	r2, [pc, #208]	; (8008ac4 <HAL_DMA_IRQHandler+0x1fc>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d012      	beq.n	8008a1e <HAL_DMA_IRQHandler+0x156>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a32      	ldr	r2, [pc, #200]	; (8008ac8 <HAL_DMA_IRQHandler+0x200>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00a      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x150>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a31      	ldr	r2, [pc, #196]	; (8008acc <HAL_DMA_IRQHandler+0x204>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d102      	bne.n	8008a12 <HAL_DMA_IRQHandler+0x14a>
 8008a0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a10:	e00e      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a16:	e00b      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a1c:	e008      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a22:	e005      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a28:	e002      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a2a:	2320      	movs	r3, #32
 8008a2c:	e000      	b.n	8008a30 <HAL_DMA_IRQHandler+0x168>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	4a27      	ldr	r2, [pc, #156]	; (8008ad0 <HAL_DMA_IRQHandler+0x208>)
 8008a32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d034      	beq.n	8008aae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008a4c:	e02f      	b.n	8008aae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	2208      	movs	r2, #8
 8008a54:	409a      	lsls	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d028      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x1e8>
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d023      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 020e 	bic.w	r2, r2, #14
 8008a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f202 	lsl.w	r2, r1, r2
 8008a86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
    }
  }
  return;
 8008aae:	bf00      	nop
 8008ab0:	bf00      	nop
}
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40020008 	.word	0x40020008
 8008abc:	4002001c 	.word	0x4002001c
 8008ac0:	40020030 	.word	0x40020030
 8008ac4:	40020044 	.word	0x40020044
 8008ac8:	40020058 	.word	0x40020058
 8008acc:	4002006c 	.word	0x4002006c
 8008ad0:	40020000 	.word	0x40020000

08008ad4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2101      	movs	r1, #1
 8008aec:	fa01 f202 	lsl.w	r2, r1, r2
 8008af0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b10      	cmp	r3, #16
 8008b00:	d108      	bne.n	8008b14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b12:	e007      	b.n	8008b24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr
	...

08008b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b08b      	sub	sp, #44	; 0x2c
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b42:	e169      	b.n	8008e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b44:	2201      	movs	r2, #1
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	4013      	ands	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	f040 8158 	bne.w	8008e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4a9a      	ldr	r2, [pc, #616]	; (8008dd0 <HAL_GPIO_Init+0x2a0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d05e      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
 8008b6c:	4a98      	ldr	r2, [pc, #608]	; (8008dd0 <HAL_GPIO_Init+0x2a0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d875      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008b72:	4a98      	ldr	r2, [pc, #608]	; (8008dd4 <HAL_GPIO_Init+0x2a4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d058      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
 8008b78:	4a96      	ldr	r2, [pc, #600]	; (8008dd4 <HAL_GPIO_Init+0x2a4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d86f      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008b7e:	4a96      	ldr	r2, [pc, #600]	; (8008dd8 <HAL_GPIO_Init+0x2a8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d052      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
 8008b84:	4a94      	ldr	r2, [pc, #592]	; (8008dd8 <HAL_GPIO_Init+0x2a8>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d869      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008b8a:	4a94      	ldr	r2, [pc, #592]	; (8008ddc <HAL_GPIO_Init+0x2ac>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d04c      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
 8008b90:	4a92      	ldr	r2, [pc, #584]	; (8008ddc <HAL_GPIO_Init+0x2ac>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d863      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008b96:	4a92      	ldr	r2, [pc, #584]	; (8008de0 <HAL_GPIO_Init+0x2b0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d046      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
 8008b9c:	4a90      	ldr	r2, [pc, #576]	; (8008de0 <HAL_GPIO_Init+0x2b0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d85d      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008ba2:	2b12      	cmp	r3, #18
 8008ba4:	d82a      	bhi.n	8008bfc <HAL_GPIO_Init+0xcc>
 8008ba6:	2b12      	cmp	r3, #18
 8008ba8:	d859      	bhi.n	8008c5e <HAL_GPIO_Init+0x12e>
 8008baa:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <HAL_GPIO_Init+0x80>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008c2b 	.word	0x08008c2b
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008c17 	.word	0x08008c17
 8008bbc:	08008c59 	.word	0x08008c59
 8008bc0:	08008c5f 	.word	0x08008c5f
 8008bc4:	08008c5f 	.word	0x08008c5f
 8008bc8:	08008c5f 	.word	0x08008c5f
 8008bcc:	08008c5f 	.word	0x08008c5f
 8008bd0:	08008c5f 	.word	0x08008c5f
 8008bd4:	08008c5f 	.word	0x08008c5f
 8008bd8:	08008c5f 	.word	0x08008c5f
 8008bdc:	08008c5f 	.word	0x08008c5f
 8008be0:	08008c5f 	.word	0x08008c5f
 8008be4:	08008c5f 	.word	0x08008c5f
 8008be8:	08008c5f 	.word	0x08008c5f
 8008bec:	08008c5f 	.word	0x08008c5f
 8008bf0:	08008c5f 	.word	0x08008c5f
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	4a79      	ldr	r2, [pc, #484]	; (8008de4 <HAL_GPIO_Init+0x2b4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c02:	e02c      	b.n	8008c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	623b      	str	r3, [r7, #32]
          break;
 8008c0a:	e029      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	3304      	adds	r3, #4
 8008c12:	623b      	str	r3, [r7, #32]
          break;
 8008c14:	e024      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	623b      	str	r3, [r7, #32]
          break;
 8008c1e:	e01f      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	330c      	adds	r3, #12
 8008c26:	623b      	str	r3, [r7, #32]
          break;
 8008c28:	e01a      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c32:	2304      	movs	r3, #4
 8008c34:	623b      	str	r3, [r7, #32]
          break;
 8008c36:	e013      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d105      	bne.n	8008c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c40:	2308      	movs	r3, #8
 8008c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	611a      	str	r2, [r3, #16]
          break;
 8008c4a:	e009      	b.n	8008c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c4c:	2308      	movs	r3, #8
 8008c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	615a      	str	r2, [r3, #20]
          break;
 8008c56:	e003      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	623b      	str	r3, [r7, #32]
          break;
 8008c5c:	e000      	b.n	8008c60 <HAL_GPIO_Init+0x130>
          break;
 8008c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2bff      	cmp	r3, #255	; 0xff
 8008c64:	d801      	bhi.n	8008c6a <HAL_GPIO_Init+0x13a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	e001      	b.n	8008c6e <HAL_GPIO_Init+0x13e>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2bff      	cmp	r3, #255	; 0xff
 8008c74:	d802      	bhi.n	8008c7c <HAL_GPIO_Init+0x14c>
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	e002      	b.n	8008c82 <HAL_GPIO_Init+0x152>
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	3b08      	subs	r3, #8
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	210f      	movs	r1, #15
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c90:	43db      	mvns	r3, r3
 8008c92:	401a      	ands	r2, r3
 8008c94:	6a39      	ldr	r1, [r7, #32]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80b1 	beq.w	8008e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008cb0:	4b4d      	ldr	r3, [pc, #308]	; (8008de8 <HAL_GPIO_Init+0x2b8>)
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	4a4c      	ldr	r2, [pc, #304]	; (8008de8 <HAL_GPIO_Init+0x2b8>)
 8008cb6:	f043 0301 	orr.w	r3, r3, #1
 8008cba:	6193      	str	r3, [r2, #24]
 8008cbc:	4b4a      	ldr	r3, [pc, #296]	; (8008de8 <HAL_GPIO_Init+0x2b8>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008cc8:	4a48      	ldr	r2, [pc, #288]	; (8008dec <HAL_GPIO_Init+0x2bc>)
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	089b      	lsrs	r3, r3, #2
 8008cce:	3302      	adds	r3, #2
 8008cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	220f      	movs	r2, #15
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a40      	ldr	r2, [pc, #256]	; (8008df0 <HAL_GPIO_Init+0x2c0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <HAL_GPIO_Init+0x1ec>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a3f      	ldr	r2, [pc, #252]	; (8008df4 <HAL_GPIO_Init+0x2c4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00d      	beq.n	8008d18 <HAL_GPIO_Init+0x1e8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a3e      	ldr	r2, [pc, #248]	; (8008df8 <HAL_GPIO_Init+0x2c8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <HAL_GPIO_Init+0x1e4>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a3d      	ldr	r2, [pc, #244]	; (8008dfc <HAL_GPIO_Init+0x2cc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d101      	bne.n	8008d10 <HAL_GPIO_Init+0x1e0>
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e006      	b.n	8008d1e <HAL_GPIO_Init+0x1ee>
 8008d10:	2304      	movs	r3, #4
 8008d12:	e004      	b.n	8008d1e <HAL_GPIO_Init+0x1ee>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e002      	b.n	8008d1e <HAL_GPIO_Init+0x1ee>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <HAL_GPIO_Init+0x1ee>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d20:	f002 0203 	and.w	r2, r2, #3
 8008d24:	0092      	lsls	r2, r2, #2
 8008d26:	4093      	lsls	r3, r2
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d2e:	492f      	ldr	r1, [pc, #188]	; (8008dec <HAL_GPIO_Init+0x2bc>)
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	3302      	adds	r3, #2
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d006      	beq.n	8008d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	492c      	ldr	r1, [pc, #176]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	600b      	str	r3, [r1, #0]
 8008d54:	e006      	b.n	8008d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008d56:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	4928      	ldr	r1, [pc, #160]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d006      	beq.n	8008d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008d70:	4b23      	ldr	r3, [pc, #140]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4922      	ldr	r1, [pc, #136]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	e006      	b.n	8008d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008d7e:	4b20      	ldr	r3, [pc, #128]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	491e      	ldr	r1, [pc, #120]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d006      	beq.n	8008da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008d98:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	4918      	ldr	r1, [pc, #96]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	608b      	str	r3, [r1, #8]
 8008da4:	e006      	b.n	8008db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008da6:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	4914      	ldr	r1, [pc, #80]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d021      	beq.n	8008e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008dc0:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	490e      	ldr	r1, [pc, #56]	; (8008e00 <HAL_GPIO_Init+0x2d0>)
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60cb      	str	r3, [r1, #12]
 8008dcc:	e021      	b.n	8008e12 <HAL_GPIO_Init+0x2e2>
 8008dce:	bf00      	nop
 8008dd0:	10320000 	.word	0x10320000
 8008dd4:	10310000 	.word	0x10310000
 8008dd8:	10220000 	.word	0x10220000
 8008ddc:	10210000 	.word	0x10210000
 8008de0:	10120000 	.word	0x10120000
 8008de4:	10110000 	.word	0x10110000
 8008de8:	40021000 	.word	0x40021000
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010800 	.word	0x40010800
 8008df4:	40010c00 	.word	0x40010c00
 8008df8:	40011000 	.word	0x40011000
 8008dfc:	40011400 	.word	0x40011400
 8008e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008e04:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <HAL_GPIO_Init+0x304>)
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	4909      	ldr	r1, [pc, #36]	; (8008e34 <HAL_GPIO_Init+0x304>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	3301      	adds	r3, #1
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f47f ae8e 	bne.w	8008b44 <HAL_GPIO_Init+0x14>
  }
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	372c      	adds	r7, #44	; 0x2c
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr
 8008e34:	40010400 	.word	0x40010400

08008e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	887b      	ldrh	r3, [r7, #2]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
 8008e54:	e001      	b.n	8008e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bc80      	pop	{r7}
 8008e64:	4770      	bx	lr

08008e66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	807b      	strh	r3, [r7, #2]
 8008e72:	4613      	mov	r3, r2
 8008e74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e76:	787b      	ldrb	r3, [r7, #1]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e7c:	887a      	ldrh	r2, [r7, #2]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008e82:	e003      	b.n	8008e8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	041a      	lsls	r2, r3, #16
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	611a      	str	r2, [r3, #16]
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
	...

08008e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ea4:	695a      	ldr	r2, [r3, #20]
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d006      	beq.n	8008ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008eae:	4a05      	ldr	r2, [pc, #20]	; (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f9 fa32 	bl	8002320 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40010400 	.word	0x40010400

08008ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e12b      	b.n	8009132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7f9 f8c6 	bl	8002080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2224      	movs	r2, #36	; 0x24
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f2c:	f000 fffa 	bl	8009f24 <HAL_RCC_GetPCLK1Freq>
 8008f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	4a81      	ldr	r2, [pc, #516]	; (800913c <HAL_I2C_Init+0x274>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d807      	bhi.n	8008f4c <HAL_I2C_Init+0x84>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4a80      	ldr	r2, [pc, #512]	; (8009140 <HAL_I2C_Init+0x278>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	bf94      	ite	ls
 8008f44:	2301      	movls	r3, #1
 8008f46:	2300      	movhi	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	e006      	b.n	8008f5a <HAL_I2C_Init+0x92>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4a7d      	ldr	r2, [pc, #500]	; (8009144 <HAL_I2C_Init+0x27c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	bf94      	ite	ls
 8008f54:	2301      	movls	r3, #1
 8008f56:	2300      	movhi	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e0e7      	b.n	8009132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a78      	ldr	r2, [pc, #480]	; (8009148 <HAL_I2C_Init+0x280>)
 8008f66:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6a:	0c9b      	lsrs	r3, r3, #18
 8008f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a6a      	ldr	r2, [pc, #424]	; (800913c <HAL_I2C_Init+0x274>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d802      	bhi.n	8008f9c <HAL_I2C_Init+0xd4>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	e009      	b.n	8008fb0 <HAL_I2C_Init+0xe8>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	4a69      	ldr	r2, [pc, #420]	; (800914c <HAL_I2C_Init+0x284>)
 8008fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fac:	099b      	lsrs	r3, r3, #6
 8008fae:	3301      	adds	r3, #1
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	495c      	ldr	r1, [pc, #368]	; (800913c <HAL_I2C_Init+0x274>)
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	d819      	bhi.n	8009004 <HAL_I2C_Init+0x13c>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	1e59      	subs	r1, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008fe4:	400b      	ands	r3, r1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <HAL_I2C_Init+0x138>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	1e59      	subs	r1, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ffe:	e051      	b.n	80090a4 <HAL_I2C_Init+0x1dc>
 8009000:	2304      	movs	r3, #4
 8009002:	e04f      	b.n	80090a4 <HAL_I2C_Init+0x1dc>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d111      	bne.n	8009030 <HAL_I2C_Init+0x168>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	1e58      	subs	r0, r3, #1
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6859      	ldr	r1, [r3, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	440b      	add	r3, r1
 800901a:	fbb0 f3f3 	udiv	r3, r0, r3
 800901e:	3301      	adds	r3, #1
 8009020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009024:	2b00      	cmp	r3, #0
 8009026:	bf0c      	ite	eq
 8009028:	2301      	moveq	r3, #1
 800902a:	2300      	movne	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	e012      	b.n	8009056 <HAL_I2C_Init+0x18e>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	1e58      	subs	r0, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6859      	ldr	r1, [r3, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	0099      	lsls	r1, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	fbb0 f3f3 	udiv	r3, r0, r3
 8009046:	3301      	adds	r3, #1
 8009048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_I2C_Init+0x196>
 800905a:	2301      	movs	r3, #1
 800905c:	e022      	b.n	80090a4 <HAL_I2C_Init+0x1dc>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10e      	bne.n	8009084 <HAL_I2C_Init+0x1bc>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1e58      	subs	r0, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6859      	ldr	r1, [r3, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	440b      	add	r3, r1
 8009074:	fbb0 f3f3 	udiv	r3, r0, r3
 8009078:	3301      	adds	r3, #1
 800907a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800907e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009082:	e00f      	b.n	80090a4 <HAL_I2C_Init+0x1dc>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1e58      	subs	r0, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6859      	ldr	r1, [r3, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	0099      	lsls	r1, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	fbb0 f3f3 	udiv	r3, r0, r3
 800909a:	3301      	adds	r3, #1
 800909c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	6809      	ldr	r1, [r1, #0]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69da      	ldr	r2, [r3, #28]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80090d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	6911      	ldr	r1, [r2, #16]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68d2      	ldr	r2, [r2, #12]
 80090de:	4311      	orrs	r1, r2
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6812      	ldr	r2, [r2, #0]
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695a      	ldr	r2, [r3, #20]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0201 	orr.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	000186a0 	.word	0x000186a0
 8009140:	001e847f 	.word	0x001e847f
 8009144:	003d08ff 	.word	0x003d08ff
 8009148:	431bde83 	.word	0x431bde83
 800914c:	10624dd3 	.word	0x10624dd3

08009150 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	4603      	mov	r3, r0
 8009160:	817b      	strh	r3, [r7, #10]
 8009162:	460b      	mov	r3, r1
 8009164:	813b      	strh	r3, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800916a:	f7fe fddb 	bl	8007d24 <HAL_GetTick>
 800916e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b20      	cmp	r3, #32
 800917a:	f040 80d9 	bne.w	8009330 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2319      	movs	r3, #25
 8009184:	2201      	movs	r2, #1
 8009186:	496d      	ldr	r1, [pc, #436]	; (800933c <HAL_I2C_Mem_Write+0x1ec>)
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 f971 	bl	8009470 <I2C_WaitOnFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009194:	2302      	movs	r3, #2
 8009196:	e0cc      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_I2C_Mem_Write+0x56>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e0c5      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d007      	beq.n	80091cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2221      	movs	r2, #33	; 0x21
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2240      	movs	r2, #64	; 0x40
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6a3a      	ldr	r2, [r7, #32]
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a4d      	ldr	r2, [pc, #308]	; (8009340 <HAL_I2C_Mem_Write+0x1f0>)
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800920e:	88f8      	ldrh	r0, [r7, #6]
 8009210:	893a      	ldrh	r2, [r7, #8]
 8009212:	8979      	ldrh	r1, [r7, #10]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	4603      	mov	r3, r0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f890 	bl	8009344 <I2C_RequestMemoryWrite>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d052      	beq.n	80092d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e081      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 f9f2 	bl	800961c <I2C_WaitOnTXEFlagUntilTimeout>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	2b04      	cmp	r3, #4
 8009244:	d107      	bne.n	8009256 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009254:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e06b      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b04      	cmp	r3, #4
 8009296:	d11b      	bne.n	80092d0 <HAL_I2C_Mem_Write+0x180>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d017      	beq.n	80092d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	781a      	ldrb	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1aa      	bne.n	800922e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f9de 	bl	800969e <I2C_WaitOnBTFFlagUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00d      	beq.n	8009304 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d107      	bne.n	8009300 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e016      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2220      	movs	r2, #32
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	e000      	b.n	8009332 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009330:	2302      	movs	r3, #2
  }
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	00100002 	.word	0x00100002
 8009340:	ffff0000 	.word	0xffff0000

08009344 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	461a      	mov	r2, r3
 8009352:	4603      	mov	r3, r0
 8009354:	817b      	strh	r3, [r7, #10]
 8009356:	460b      	mov	r3, r1
 8009358:	813b      	strh	r3, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800936c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	2200      	movs	r2, #0
 8009376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f878 	bl	8009470 <I2C_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00d      	beq.n	80093a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009394:	d103      	bne.n	800939e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e05f      	b.n	8009462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093a2:	897b      	ldrh	r3, [r7, #10]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	6a3a      	ldr	r2, [r7, #32]
 80093b6:	492d      	ldr	r1, [pc, #180]	; (800946c <I2C_RequestMemoryWrite+0x128>)
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f8b0 	bl	800951e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e04c      	b.n	8009462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e0:	6a39      	ldr	r1, [r7, #32]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f91a 	bl	800961c <I2C_WaitOnTXEFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00d      	beq.n	800940a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d107      	bne.n	8009406 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e02b      	b.n	8009462 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d105      	bne.n	800941c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009410:	893b      	ldrh	r3, [r7, #8]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	611a      	str	r2, [r3, #16]
 800941a:	e021      	b.n	8009460 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800941c:	893b      	ldrh	r3, [r7, #8]
 800941e:	0a1b      	lsrs	r3, r3, #8
 8009420:	b29b      	uxth	r3, r3
 8009422:	b2da      	uxtb	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800942a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942c:	6a39      	ldr	r1, [r7, #32]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 f8f4 	bl	800961c <I2C_WaitOnTXEFlagUntilTimeout>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	2b04      	cmp	r3, #4
 8009440:	d107      	bne.n	8009452 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e005      	b.n	8009462 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009456:	893b      	ldrh	r3, [r7, #8]
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	00010002 	.word	0x00010002

08009470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	4613      	mov	r3, r2
 800947e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009480:	e025      	b.n	80094ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d021      	beq.n	80094ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948a:	f7fe fc4b 	bl	8007d24 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d302      	bcc.n	80094a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d116      	bne.n	80094ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	f043 0220 	orr.w	r2, r3, #32
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e023      	b.n	8009516 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10d      	bne.n	80094f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	43da      	mvns	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	e00c      	b.n	800950e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	43da      	mvns	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	4013      	ands	r3, r2
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	bf0c      	ite	eq
 8009506:	2301      	moveq	r3, #1
 8009508:	2300      	movne	r3, #0
 800950a:	b2db      	uxtb	r3, r3
 800950c:	461a      	mov	r2, r3
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	429a      	cmp	r2, r3
 8009512:	d0b6      	beq.n	8009482 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800952c:	e051      	b.n	80095d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800953c:	d123      	bne.n	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009556:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f043 0204 	orr.w	r2, r3, #4
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e046      	b.n	8009614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d021      	beq.n	80095d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800958e:	f7fe fbc9 	bl	8007d24 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d302      	bcc.n	80095a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d116      	bne.n	80095d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e020      	b.n	8009614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d10c      	bne.n	80095f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	43da      	mvns	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4013      	ands	r3, r2
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bf14      	ite	ne
 80095ee:	2301      	movne	r3, #1
 80095f0:	2300      	moveq	r3, #0
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	e00b      	b.n	800960e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	43da      	mvns	r2, r3
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	4013      	ands	r3, r2
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	bf14      	ite	ne
 8009608:	2301      	movne	r3, #1
 800960a:	2300      	moveq	r3, #0
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d18d      	bne.n	800952e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009628:	e02d      	b.n	8009686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 f878 	bl	8009720 <I2C_IsAcknowledgeFailed>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e02d      	b.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009640:	d021      	beq.n	8009686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009642:	f7fe fb6f 	bl	8007d24 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	429a      	cmp	r2, r3
 8009650:	d302      	bcc.n	8009658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d116      	bne.n	8009686 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f043 0220 	orr.w	r2, r3, #32
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e007      	b.n	8009696 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009690:	2b80      	cmp	r3, #128	; 0x80
 8009692:	d1ca      	bne.n	800962a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096aa:	e02d      	b.n	8009708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f837 	bl	8009720 <I2C_IsAcknowledgeFailed>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e02d      	b.n	8009718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d021      	beq.n	8009708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c4:	f7fe fb2e 	bl	8007d24 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d116      	bne.n	8009708 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	f043 0220 	orr.w	r2, r3, #32
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e007      	b.n	8009718 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b04      	cmp	r3, #4
 8009714:	d1ca      	bne.n	80096ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009736:	d11b      	bne.n	8009770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975c:	f043 0204 	orr.w	r2, r3, #4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	bc80      	pop	{r7}
 800977a:	4770      	bx	lr

0800977c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e272      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 8087 	beq.w	80098aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800979c:	4b92      	ldr	r3, [pc, #584]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f003 030c 	and.w	r3, r3, #12
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d00c      	beq.n	80097c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80097a8:	4b8f      	ldr	r3, [pc, #572]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f003 030c 	and.w	r3, r3, #12
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d112      	bne.n	80097da <HAL_RCC_OscConfig+0x5e>
 80097b4:	4b8c      	ldr	r3, [pc, #560]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c0:	d10b      	bne.n	80097da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c2:	4b89      	ldr	r3, [pc, #548]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d06c      	beq.n	80098a8 <HAL_RCC_OscConfig+0x12c>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d168      	bne.n	80098a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e24c      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e2:	d106      	bne.n	80097f2 <HAL_RCC_OscConfig+0x76>
 80097e4:	4b80      	ldr	r3, [pc, #512]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a7f      	ldr	r2, [pc, #508]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	e02e      	b.n	8009850 <HAL_RCC_OscConfig+0xd4>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10c      	bne.n	8009814 <HAL_RCC_OscConfig+0x98>
 80097fa:	4b7b      	ldr	r3, [pc, #492]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a7a      	ldr	r2, [pc, #488]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	4b78      	ldr	r3, [pc, #480]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a77      	ldr	r2, [pc, #476]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800980c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	e01d      	b.n	8009850 <HAL_RCC_OscConfig+0xd4>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800981c:	d10c      	bne.n	8009838 <HAL_RCC_OscConfig+0xbc>
 800981e:	4b72      	ldr	r3, [pc, #456]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a71      	ldr	r2, [pc, #452]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	4b6f      	ldr	r3, [pc, #444]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a6e      	ldr	r2, [pc, #440]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	e00b      	b.n	8009850 <HAL_RCC_OscConfig+0xd4>
 8009838:	4b6b      	ldr	r3, [pc, #428]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a6a      	ldr	r2, [pc, #424]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800983e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	4b68      	ldr	r3, [pc, #416]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a67      	ldr	r2, [pc, #412]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800984a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800984e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d013      	beq.n	8009880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009858:	f7fe fa64 	bl	8007d24 <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009860:	f7fe fa60 	bl	8007d24 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b64      	cmp	r3, #100	; 0x64
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e200      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009872:	4b5d      	ldr	r3, [pc, #372]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f0      	beq.n	8009860 <HAL_RCC_OscConfig+0xe4>
 800987e:	e014      	b.n	80098aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009880:	f7fe fa50 	bl	8007d24 <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009888:	f7fe fa4c 	bl	8007d24 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b64      	cmp	r3, #100	; 0x64
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e1ec      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800989a:	4b53      	ldr	r3, [pc, #332]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0x10c>
 80098a6:	e000      	b.n	80098aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d063      	beq.n	800997e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80098b6:	4b4c      	ldr	r3, [pc, #304]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f003 030c 	and.w	r3, r3, #12
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80098c2:	4b49      	ldr	r3, [pc, #292]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f003 030c 	and.w	r3, r3, #12
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d11c      	bne.n	8009908 <HAL_RCC_OscConfig+0x18c>
 80098ce:	4b46      	ldr	r3, [pc, #280]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d116      	bne.n	8009908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098da:	4b43      	ldr	r3, [pc, #268]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_RCC_OscConfig+0x176>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d001      	beq.n	80098f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e1c0      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f2:	4b3d      	ldr	r3, [pc, #244]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4939      	ldr	r1, [pc, #228]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009902:	4313      	orrs	r3, r2
 8009904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009906:	e03a      	b.n	800997e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d020      	beq.n	8009952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009910:	4b36      	ldr	r3, [pc, #216]	; (80099ec <HAL_RCC_OscConfig+0x270>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009916:	f7fe fa05 	bl	8007d24 <HAL_GetTick>
 800991a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800991c:	e008      	b.n	8009930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800991e:	f7fe fa01 	bl	8007d24 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e1a1      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009930:	4b2d      	ldr	r3, [pc, #180]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0f0      	beq.n	800991e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800993c:	4b2a      	ldr	r3, [pc, #168]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4927      	ldr	r1, [pc, #156]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 800994c:	4313      	orrs	r3, r2
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	e015      	b.n	800997e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009952:	4b26      	ldr	r3, [pc, #152]	; (80099ec <HAL_RCC_OscConfig+0x270>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009958:	f7fe f9e4 	bl	8007d24 <HAL_GetTick>
 800995c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800995e:	e008      	b.n	8009972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009960:	f7fe f9e0 	bl	8007d24 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e180      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009972:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f0      	bne.n	8009960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0308 	and.w	r3, r3, #8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d03a      	beq.n	8009a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d019      	beq.n	80099c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009992:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <HAL_RCC_OscConfig+0x274>)
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009998:	f7fe f9c4 	bl	8007d24 <HAL_GetTick>
 800999c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800999e:	e008      	b.n	80099b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099a0:	f7fe f9c0 	bl	8007d24 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d901      	bls.n	80099b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e160      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099b2:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <HAL_RCC_OscConfig+0x26c>)
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f0      	beq.n	80099a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80099be:	2001      	movs	r0, #1
 80099c0:	f000 fad8 	bl	8009f74 <RCC_Delay>
 80099c4:	e01c      	b.n	8009a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80099c6:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <HAL_RCC_OscConfig+0x274>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099cc:	f7fe f9aa 	bl	8007d24 <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099d2:	e00f      	b.n	80099f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099d4:	f7fe f9a6 	bl	8007d24 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d908      	bls.n	80099f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e146      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
 80099e6:	bf00      	nop
 80099e8:	40021000 	.word	0x40021000
 80099ec:	42420000 	.word	0x42420000
 80099f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099f4:	4b92      	ldr	r3, [pc, #584]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e9      	bne.n	80099d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 80a6 	beq.w	8009b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a12:	4b8b      	ldr	r3, [pc, #556]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10d      	bne.n	8009a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a1e:	4b88      	ldr	r3, [pc, #544]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	4a87      	ldr	r2, [pc, #540]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a28:	61d3      	str	r3, [r2, #28]
 8009a2a:	4b85      	ldr	r3, [pc, #532]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a32:	60bb      	str	r3, [r7, #8]
 8009a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a36:	2301      	movs	r3, #1
 8009a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a3a:	4b82      	ldr	r3, [pc, #520]	; (8009c44 <HAL_RCC_OscConfig+0x4c8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d118      	bne.n	8009a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a46:	4b7f      	ldr	r3, [pc, #508]	; (8009c44 <HAL_RCC_OscConfig+0x4c8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a7e      	ldr	r2, [pc, #504]	; (8009c44 <HAL_RCC_OscConfig+0x4c8>)
 8009a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a52:	f7fe f967 	bl	8007d24 <HAL_GetTick>
 8009a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a58:	e008      	b.n	8009a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a5a:	f7fe f963 	bl	8007d24 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b64      	cmp	r3, #100	; 0x64
 8009a66:	d901      	bls.n	8009a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e103      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a6c:	4b75      	ldr	r3, [pc, #468]	; (8009c44 <HAL_RCC_OscConfig+0x4c8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0f0      	beq.n	8009a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d106      	bne.n	8009a8e <HAL_RCC_OscConfig+0x312>
 8009a80:	4b6f      	ldr	r3, [pc, #444]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	4a6e      	ldr	r2, [pc, #440]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	6213      	str	r3, [r2, #32]
 8009a8c:	e02d      	b.n	8009aea <HAL_RCC_OscConfig+0x36e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10c      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x334>
 8009a96:	4b6a      	ldr	r3, [pc, #424]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	4a69      	ldr	r2, [pc, #420]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009a9c:	f023 0301 	bic.w	r3, r3, #1
 8009aa0:	6213      	str	r3, [r2, #32]
 8009aa2:	4b67      	ldr	r3, [pc, #412]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	4a66      	ldr	r2, [pc, #408]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009aa8:	f023 0304 	bic.w	r3, r3, #4
 8009aac:	6213      	str	r3, [r2, #32]
 8009aae:	e01c      	b.n	8009aea <HAL_RCC_OscConfig+0x36e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	d10c      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x356>
 8009ab8:	4b61      	ldr	r3, [pc, #388]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	4a60      	ldr	r2, [pc, #384]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009abe:	f043 0304 	orr.w	r3, r3, #4
 8009ac2:	6213      	str	r3, [r2, #32]
 8009ac4:	4b5e      	ldr	r3, [pc, #376]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	4a5d      	ldr	r2, [pc, #372]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009aca:	f043 0301 	orr.w	r3, r3, #1
 8009ace:	6213      	str	r3, [r2, #32]
 8009ad0:	e00b      	b.n	8009aea <HAL_RCC_OscConfig+0x36e>
 8009ad2:	4b5b      	ldr	r3, [pc, #364]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	4a5a      	ldr	r2, [pc, #360]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
 8009adc:	6213      	str	r3, [r2, #32]
 8009ade:	4b58      	ldr	r3, [pc, #352]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	4a57      	ldr	r2, [pc, #348]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009ae4:	f023 0304 	bic.w	r3, r3, #4
 8009ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d015      	beq.n	8009b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009af2:	f7fe f917 	bl	8007d24 <HAL_GetTick>
 8009af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af8:	e00a      	b.n	8009b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009afa:	f7fe f913 	bl	8007d24 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e0b1      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b10:	4b4b      	ldr	r3, [pc, #300]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0ee      	beq.n	8009afa <HAL_RCC_OscConfig+0x37e>
 8009b1c:	e014      	b.n	8009b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b1e:	f7fe f901 	bl	8007d24 <HAL_GetTick>
 8009b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b24:	e00a      	b.n	8009b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b26:	f7fe f8fd 	bl	8007d24 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e09b      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b3c:	4b40      	ldr	r3, [pc, #256]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1ee      	bne.n	8009b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d105      	bne.n	8009b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b4e:	4b3c      	ldr	r3, [pc, #240]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	4a3b      	ldr	r2, [pc, #236]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8087 	beq.w	8009c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b64:	4b36      	ldr	r3, [pc, #216]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f003 030c 	and.w	r3, r3, #12
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d061      	beq.n	8009c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d146      	bne.n	8009c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b78:	4b33      	ldr	r3, [pc, #204]	; (8009c48 <HAL_RCC_OscConfig+0x4cc>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b7e:	f7fe f8d1 	bl	8007d24 <HAL_GetTick>
 8009b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b84:	e008      	b.n	8009b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b86:	f7fe f8cd 	bl	8007d24 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e06d      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b98:	4b29      	ldr	r3, [pc, #164]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f0      	bne.n	8009b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bac:	d108      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009bae:	4b24      	ldr	r3, [pc, #144]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	4921      	ldr	r1, [pc, #132]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009bc0:	4b1f      	ldr	r3, [pc, #124]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a19      	ldr	r1, [r3, #32]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	491b      	ldr	r1, [pc, #108]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <HAL_RCC_OscConfig+0x4cc>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bde:	f7fe f8a1 	bl	8007d24 <HAL_GetTick>
 8009be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009be4:	e008      	b.n	8009bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009be6:	f7fe f89d 	bl	8007d24 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e03d      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009bf8:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0f0      	beq.n	8009be6 <HAL_RCC_OscConfig+0x46a>
 8009c04:	e035      	b.n	8009c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c06:	4b10      	ldr	r3, [pc, #64]	; (8009c48 <HAL_RCC_OscConfig+0x4cc>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c0c:	f7fe f88a 	bl	8007d24 <HAL_GetTick>
 8009c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c12:	e008      	b.n	8009c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c14:	f7fe f886 	bl	8007d24 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e026      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c26:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <HAL_RCC_OscConfig+0x4c4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f0      	bne.n	8009c14 <HAL_RCC_OscConfig+0x498>
 8009c32:	e01e      	b.n	8009c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d107      	bne.n	8009c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e019      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
 8009c40:	40021000 	.word	0x40021000
 8009c44:	40007000 	.word	0x40007000
 8009c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <HAL_RCC_OscConfig+0x500>)
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d106      	bne.n	8009c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d001      	beq.n	8009c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	40021000 	.word	0x40021000

08009c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0d0      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c94:	4b6a      	ldr	r3, [pc, #424]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0307 	and.w	r3, r3, #7
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d910      	bls.n	8009cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ca2:	4b67      	ldr	r3, [pc, #412]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f023 0207 	bic.w	r2, r3, #7
 8009caa:	4965      	ldr	r1, [pc, #404]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cb2:	4b63      	ldr	r3, [pc, #396]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d001      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0b8      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d020      	beq.n	8009d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cdc:	4b59      	ldr	r3, [pc, #356]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4a58      	ldr	r2, [pc, #352]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d005      	beq.n	8009d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cf4:	4b53      	ldr	r3, [pc, #332]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a52      	ldr	r2, [pc, #328]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d00:	4b50      	ldr	r3, [pc, #320]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	494d      	ldr	r1, [pc, #308]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d040      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d107      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d26:	4b47      	ldr	r3, [pc, #284]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d115      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e07f      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d107      	bne.n	8009d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d3e:	4b41      	ldr	r3, [pc, #260]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d109      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e073      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d4e:	4b3d      	ldr	r3, [pc, #244]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e06b      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d5e:	4b39      	ldr	r3, [pc, #228]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f023 0203 	bic.w	r2, r3, #3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	4936      	ldr	r1, [pc, #216]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d70:	f7fd ffd8 	bl	8007d24 <HAL_GetTick>
 8009d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d76:	e00a      	b.n	8009d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d78:	f7fd ffd4 	bl	8007d24 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d901      	bls.n	8009d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e053      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d8e:	4b2d      	ldr	r3, [pc, #180]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f003 020c 	and.w	r2, r3, #12
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d1eb      	bne.n	8009d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009da0:	4b27      	ldr	r3, [pc, #156]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d210      	bcs.n	8009dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dae:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f023 0207 	bic.w	r2, r3, #7
 8009db6:	4922      	ldr	r1, [pc, #136]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dbe:	4b20      	ldr	r3, [pc, #128]	; (8009e40 <HAL_RCC_ClockConfig+0x1c0>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d001      	beq.n	8009dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e032      	b.n	8009e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d008      	beq.n	8009dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ddc:	4b19      	ldr	r3, [pc, #100]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4916      	ldr	r1, [pc, #88]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	490e      	ldr	r1, [pc, #56]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009e0e:	f000 f821 	bl	8009e54 <HAL_RCC_GetSysClockFreq>
 8009e12:	4602      	mov	r2, r0
 8009e14:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <HAL_RCC_ClockConfig+0x1c4>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	091b      	lsrs	r3, r3, #4
 8009e1a:	f003 030f 	and.w	r3, r3, #15
 8009e1e:	490a      	ldr	r1, [pc, #40]	; (8009e48 <HAL_RCC_ClockConfig+0x1c8>)
 8009e20:	5ccb      	ldrb	r3, [r1, r3]
 8009e22:	fa22 f303 	lsr.w	r3, r2, r3
 8009e26:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <HAL_RCC_ClockConfig+0x1cc>)
 8009e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <HAL_RCC_ClockConfig+0x1d0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd ff36 	bl	8007ca0 <HAL_InitTick>

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	40022000 	.word	0x40022000
 8009e44:	40021000 	.word	0x40021000
 8009e48:	0800fee8 	.word	0x0800fee8
 8009e4c:	20000010 	.word	0x20000010
 8009e50:	20000020 	.word	0x20000020

08009e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e54:	b490      	push	{r4, r7}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009e5a:	4b29      	ldr	r3, [pc, #164]	; (8009f00 <HAL_RCC_GetSysClockFreq+0xac>)
 8009e5c:	1d3c      	adds	r4, r7, #4
 8009e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009e64:	f240 2301 	movw	r3, #513	; 0x201
 8009e68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	2300      	movs	r3, #0
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
 8009e76:	2300      	movs	r3, #0
 8009e78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009e7e:	4b21      	ldr	r3, [pc, #132]	; (8009f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f003 030c 	and.w	r3, r3, #12
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d002      	beq.n	8009e94 <HAL_RCC_GetSysClockFreq+0x40>
 8009e8e:	2b08      	cmp	r3, #8
 8009e90:	d003      	beq.n	8009e9a <HAL_RCC_GetSysClockFreq+0x46>
 8009e92:	e02b      	b.n	8009eec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009e94:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009e96:	623b      	str	r3, [r7, #32]
      break;
 8009e98:	e02b      	b.n	8009ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	0c9b      	lsrs	r3, r3, #18
 8009e9e:	f003 030f 	and.w	r3, r3, #15
 8009ea2:	3328      	adds	r3, #40	; 0x28
 8009ea4:	443b      	add	r3, r7
 8009ea6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009eaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d012      	beq.n	8009edc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009eb6:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	0c5b      	lsrs	r3, r3, #17
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	3328      	adds	r3, #40	; 0x28
 8009ec2:	443b      	add	r3, r7
 8009ec4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009ec8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	4a0e      	ldr	r2, [pc, #56]	; (8009f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009ece:	fb03 f202 	mul.w	r2, r3, r2
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eda:	e004      	b.n	8009ee6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	4a0b      	ldr	r2, [pc, #44]	; (8009f0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ee0:	fb02 f303 	mul.w	r3, r2, r3
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	623b      	str	r3, [r7, #32]
      break;
 8009eea:	e002      	b.n	8009ef2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009eee:	623b      	str	r3, [r7, #32]
      break;
 8009ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3728      	adds	r7, #40	; 0x28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc90      	pop	{r4, r7}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	0800fed0 	.word	0x0800fed0
 8009f04:	40021000 	.word	0x40021000
 8009f08:	007a1200 	.word	0x007a1200
 8009f0c:	003d0900 	.word	0x003d0900

08009f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f14:	4b02      	ldr	r3, [pc, #8]	; (8009f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8009f16:	681b      	ldr	r3, [r3, #0]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bc80      	pop	{r7}
 8009f1e:	4770      	bx	lr
 8009f20:	20000010 	.word	0x20000010

08009f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009f28:	f7ff fff2 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	0a1b      	lsrs	r3, r3, #8
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	4903      	ldr	r1, [pc, #12]	; (8009f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f3a:	5ccb      	ldrb	r3, [r1, r3]
 8009f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	40021000 	.word	0x40021000
 8009f48:	0800fef8 	.word	0x0800fef8

08009f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009f50:	f7ff ffde 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f54:	4602      	mov	r2, r0
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	0adb      	lsrs	r3, r3, #11
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	4903      	ldr	r1, [pc, #12]	; (8009f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f62:	5ccb      	ldrb	r3, [r1, r3]
 8009f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	40021000 	.word	0x40021000
 8009f70:	0800fef8 	.word	0x0800fef8

08009f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <RCC_Delay+0x34>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a0a      	ldr	r2, [pc, #40]	; (8009fac <RCC_Delay+0x38>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	fb02 f303 	mul.w	r3, r2, r3
 8009f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009f90:	bf00      	nop
  }
  while (Delay --);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	60fa      	str	r2, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f9      	bne.n	8009f90 <RCC_Delay+0x1c>
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr
 8009fa8:	20000010 	.word	0x20000010
 8009fac:	10624dd3 	.word	0x10624dd3

08009fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d07d      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fd0:	4b4f      	ldr	r3, [pc, #316]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10d      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fdc:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	4a4b      	ldr	r2, [pc, #300]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe6:	61d3      	str	r3, [r2, #28]
 8009fe8:	4b49      	ldr	r3, [pc, #292]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff0:	60bb      	str	r3, [r7, #8]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ff8:	4b46      	ldr	r3, [pc, #280]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a000:	2b00      	cmp	r3, #0
 800a002:	d118      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a004:	4b43      	ldr	r3, [pc, #268]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a42      	ldr	r2, [pc, #264]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a00a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a00e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a010:	f7fd fe88 	bl	8007d24 <HAL_GetTick>
 800a014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a016:	e008      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a018:	f7fd fe84 	bl	8007d24 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b64      	cmp	r3, #100	; 0x64
 800a024:	d901      	bls.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e06d      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a02a:	4b3a      	ldr	r3, [pc, #232]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a036:	4b36      	ldr	r3, [pc, #216]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a03e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d02e      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	429a      	cmp	r2, r3
 800a052:	d027      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a054:	4b2e      	ldr	r3, [pc, #184]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a05c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a05e:	4b2e      	ldr	r3, [pc, #184]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a060:	2201      	movs	r2, #1
 800a062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a064:	4b2c      	ldr	r3, [pc, #176]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a06a:	4a29      	ldr	r2, [pc, #164]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d014      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a07a:	f7fd fe53 	bl	8007d24 <HAL_GetTick>
 800a07e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a080:	e00a      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a082:	f7fd fe4f 	bl	8007d24 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a090:	4293      	cmp	r3, r2
 800a092:	d901      	bls.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e036      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a098:	4b1d      	ldr	r3, [pc, #116]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0ee      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0a4:	4b1a      	ldr	r3, [pc, #104]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	4917      	ldr	r1, [pc, #92]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d105      	bne.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0bc:	4b14      	ldr	r3, [pc, #80]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	490b      	ldr	r1, [pc, #44]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0310 	and.w	r3, r3, #16
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d008      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0f2:	4b07      	ldr	r3, [pc, #28]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	4904      	ldr	r1, [pc, #16]	; (800a110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a100:	4313      	orrs	r3, r2
 800a102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40021000 	.word	0x40021000
 800a114:	40007000 	.word	0x40007000
 800a118:	42420440 	.word	0x42420440

0800a11c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e076      	b.n	800a21c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b00      	cmp	r3, #0
 800a134:	d108      	bne.n	800a148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a13e:	d009      	beq.n	800a154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	61da      	str	r2, [r3, #28]
 800a146:	e005      	b.n	800a154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7f8 fb1a 	bl	80027a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d8:	ea42 0103 	orr.w	r1, r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	0c1a      	lsrs	r2, r3, #16
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f002 0204 	and.w	r2, r2, #4
 800a1fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	69da      	ldr	r2, [r3, #28]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a20a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08c      	sub	sp, #48	; 0x30
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a232:	2301      	movs	r3, #1
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_SPI_TransmitReceive+0x26>
 800a246:	2302      	movs	r3, #2
 800a248:	e18a      	b.n	800a560 <HAL_SPI_TransmitReceive+0x33c>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a252:	f7fd fd67 	bl	8007d24 <HAL_GetTick>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a268:	887b      	ldrh	r3, [r7, #2]
 800a26a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a26c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a270:	2b01      	cmp	r3, #1
 800a272:	d00f      	beq.n	800a294 <HAL_SPI_TransmitReceive+0x70>
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a27a:	d107      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x68>
 800a284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d003      	beq.n	800a294 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a28c:	2302      	movs	r3, #2
 800a28e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a292:	e15b      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <HAL_SPI_TransmitReceive+0x82>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <HAL_SPI_TransmitReceive+0x82>
 800a2a0:	887b      	ldrh	r3, [r7, #2]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2ac:	e14e      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d003      	beq.n	800a2c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2205      	movs	r2, #5
 800a2be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	887a      	ldrh	r2, [r7, #2]
 800a2d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	887a      	ldrh	r2, [r7, #2]
 800a2d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	887a      	ldrh	r2, [r7, #2]
 800a2e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	887a      	ldrh	r2, [r7, #2]
 800a2ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a302:	2b40      	cmp	r3, #64	; 0x40
 800a304:	d007      	beq.n	800a316 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31e:	d178      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <HAL_SPI_TransmitReceive+0x10a>
 800a328:	8b7b      	ldrh	r3, [r7, #26]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d166      	bne.n	800a3fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a332:	881a      	ldrh	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33e:	1c9a      	adds	r2, r3, #2
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a348:	b29b      	uxth	r3, r3
 800a34a:	3b01      	subs	r3, #1
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a352:	e053      	b.n	800a3fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d11b      	bne.n	800a39a <HAL_SPI_TransmitReceive+0x176>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d016      	beq.n	800a39a <HAL_SPI_TransmitReceive+0x176>
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d113      	bne.n	800a39a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	881a      	ldrh	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	1c9a      	adds	r2, r3, #2
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d119      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x1b8>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d014      	beq.n	800a3dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c4:	1c9a      	adds	r2, r3, #2
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3dc:	f7fd fca2 	bl	8007d24 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d807      	bhi.n	800a3fc <HAL_SPI_TransmitReceive+0x1d8>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d003      	beq.n	800a3fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3fa:	e0a7      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a400:	b29b      	uxth	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1a6      	bne.n	800a354 <HAL_SPI_TransmitReceive+0x130>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1a1      	bne.n	800a354 <HAL_SPI_TransmitReceive+0x130>
 800a410:	e07c      	b.n	800a50c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x1fc>
 800a41a:	8b7b      	ldrh	r3, [r7, #26]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d16b      	bne.n	800a4f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	330c      	adds	r3, #12
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	3b01      	subs	r3, #1
 800a440:	b29a      	uxth	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a446:	e057      	b.n	800a4f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b02      	cmp	r3, #2
 800a454:	d11c      	bne.n	800a490 <HAL_SPI_TransmitReceive+0x26c>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d017      	beq.n	800a490 <HAL_SPI_TransmitReceive+0x26c>
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	2b01      	cmp	r3, #1
 800a464:	d114      	bne.n	800a490 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	330c      	adds	r3, #12
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a482:	b29b      	uxth	r3, r3
 800a484:	3b01      	subs	r3, #1
 800a486:	b29a      	uxth	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d119      	bne.n	800a4d2 <HAL_SPI_TransmitReceive+0x2ae>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d014      	beq.n	800a4d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4d2:	f7fd fc27 	bl	8007d24 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d803      	bhi.n	800a4ea <HAL_SPI_TransmitReceive+0x2c6>
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e8:	d102      	bne.n	800a4f0 <HAL_SPI_TransmitReceive+0x2cc>
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a4f6:	e029      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1a2      	bne.n	800a448 <HAL_SPI_TransmitReceive+0x224>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d19d      	bne.n	800a448 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 f8b1 	bl	800a678 <SPI_EndRxTxTransaction>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d006      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a528:	e010      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10b      	bne.n	800a54a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a532:	2300      	movs	r3, #0
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	e000      	b.n	800a54c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a54a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a55c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a560:	4618      	mov	r0, r3
 800a562:	3730      	adds	r7, #48	; 0x30
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	4613      	mov	r3, r2
 800a576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a578:	f7fd fbd4 	bl	8007d24 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	1a9b      	subs	r3, r3, r2
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4413      	add	r3, r2
 800a586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a588:	f7fd fbcc 	bl	8007d24 <HAL_GetTick>
 800a58c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a58e:	4b39      	ldr	r3, [pc, #228]	; (800a674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	015b      	lsls	r3, r3, #5
 800a594:	0d1b      	lsrs	r3, r3, #20
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	fb02 f303 	mul.w	r3, r2, r3
 800a59c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a59e:	e054      	b.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d050      	beq.n	800a64a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5a8:	f7fd fbbc 	bl	8007d24 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d902      	bls.n	800a5be <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d13d      	bne.n	800a63a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5d6:	d111      	bne.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e0:	d004      	beq.n	800a5ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ea:	d107      	bne.n	800a5fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a604:	d10f      	bne.n	800a626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e017      	b.n	800a66a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	3b01      	subs	r3, #1
 800a648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4013      	ands	r3, r2
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	bf0c      	ite	eq
 800a65a:	2301      	moveq	r3, #1
 800a65c:	2300      	movne	r3, #0
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	429a      	cmp	r2, r3
 800a666:	d19b      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000010 	.word	0x20000010

0800a678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2200      	movs	r2, #0
 800a68c:	2180      	movs	r1, #128	; 0x80
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff ff6a 	bl	800a568 <SPI_WaitFlagStateUntilTimeout>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d007      	beq.n	800a6aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69e:	f043 0220 	orr.w	r2, r3, #32
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e000      	b.n	800a6ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e041      	b.n	800a74a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7f8 fcd6 	bl	800308c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	f000 fcfc 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e041      	b.n	800a7e8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f839 	bl	800a7f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f000 fcad 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr
	...

0800a804 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d109      	bne.n	800a828 <HAL_TIM_OC_Start+0x24>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	e022      	b.n	800a86e <HAL_TIM_OC_Start+0x6a>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d109      	bne.n	800a842 <HAL_TIM_OC_Start+0x3e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b01      	cmp	r3, #1
 800a838:	bf14      	ite	ne
 800a83a:	2301      	movne	r3, #1
 800a83c:	2300      	moveq	r3, #0
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	e015      	b.n	800a86e <HAL_TIM_OC_Start+0x6a>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d109      	bne.n	800a85c <HAL_TIM_OC_Start+0x58>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	bf14      	ite	ne
 800a854:	2301      	movne	r3, #1
 800a856:	2300      	moveq	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	e008      	b.n	800a86e <HAL_TIM_OC_Start+0x6a>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	bf14      	ite	ne
 800a868:	2301      	movne	r3, #1
 800a86a:	2300      	moveq	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e05e      	b.n	800a934 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <HAL_TIM_OC_Start+0x82>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a884:	e013      	b.n	800a8ae <HAL_TIM_OC_Start+0xaa>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d104      	bne.n	800a896 <HAL_TIM_OC_Start+0x92>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a894:	e00b      	b.n	800a8ae <HAL_TIM_OC_Start+0xaa>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d104      	bne.n	800a8a6 <HAL_TIM_OC_Start+0xa2>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8a4:	e003      	b.n	800a8ae <HAL_TIM_OC_Start+0xaa>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 ff28 	bl	800b70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1e      	ldr	r2, [pc, #120]	; (800a93c <HAL_TIM_OC_Start+0x138>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d107      	bne.n	800a8d6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a18      	ldr	r2, [pc, #96]	; (800a93c <HAL_TIM_OC_Start+0x138>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00e      	beq.n	800a8fe <HAL_TIM_OC_Start+0xfa>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e8:	d009      	beq.n	800a8fe <HAL_TIM_OC_Start+0xfa>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a14      	ldr	r2, [pc, #80]	; (800a940 <HAL_TIM_OC_Start+0x13c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d004      	beq.n	800a8fe <HAL_TIM_OC_Start+0xfa>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a12      	ldr	r2, [pc, #72]	; (800a944 <HAL_TIM_OC_Start+0x140>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d111      	bne.n	800a922 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b06      	cmp	r3, #6
 800a90e:	d010      	beq.n	800a932 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0201 	orr.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a920:	e007      	b.n	800a932 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0201 	orr.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	40012c00 	.word	0x40012c00
 800a940:	40000400 	.word	0x40000400
 800a944:	40000800 	.word	0x40000800

0800a948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e041      	b.n	800a9de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f839 	bl	800a9e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	4619      	mov	r1, r3
 800a986:	4610      	mov	r0, r2
 800a988:	f000 fbb2 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bc80      	pop	{r7}
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d109      	bne.n	800aa1c <HAL_TIM_PWM_Start+0x24>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e022      	b.n	800aa62 <HAL_TIM_PWM_Start+0x6a>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d109      	bne.n	800aa36 <HAL_TIM_PWM_Start+0x3e>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	bf14      	ite	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	2300      	moveq	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	e015      	b.n	800aa62 <HAL_TIM_PWM_Start+0x6a>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d109      	bne.n	800aa50 <HAL_TIM_PWM_Start+0x58>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	bf14      	ite	ne
 800aa48:	2301      	movne	r3, #1
 800aa4a:	2300      	moveq	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	e008      	b.n	800aa62 <HAL_TIM_PWM_Start+0x6a>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	bf14      	ite	ne
 800aa5c:	2301      	movne	r3, #1
 800aa5e:	2300      	moveq	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e05e      	b.n	800ab28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <HAL_TIM_PWM_Start+0x82>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa78:	e013      	b.n	800aaa2 <HAL_TIM_PWM_Start+0xaa>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0x92>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa88:	e00b      	b.n	800aaa2 <HAL_TIM_PWM_Start+0xaa>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d104      	bne.n	800aa9a <HAL_TIM_PWM_Start+0xa2>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa98:	e003      	b.n	800aaa2 <HAL_TIM_PWM_Start+0xaa>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 fe2e 	bl	800b70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a1e      	ldr	r2, [pc, #120]	; (800ab30 <HAL_TIM_PWM_Start+0x138>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d107      	bne.n	800aaca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <HAL_TIM_PWM_Start+0x138>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00e      	beq.n	800aaf2 <HAL_TIM_PWM_Start+0xfa>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aadc:	d009      	beq.n	800aaf2 <HAL_TIM_PWM_Start+0xfa>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a14      	ldr	r2, [pc, #80]	; (800ab34 <HAL_TIM_PWM_Start+0x13c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d004      	beq.n	800aaf2 <HAL_TIM_PWM_Start+0xfa>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a12      	ldr	r2, [pc, #72]	; (800ab38 <HAL_TIM_PWM_Start+0x140>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d111      	bne.n	800ab16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b06      	cmp	r3, #6
 800ab02:	d010      	beq.n	800ab26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0201 	orr.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab14:	e007      	b.n	800ab26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0201 	orr.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800

0800ab3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fddc 	bl	800b70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a29      	ldr	r2, [pc, #164]	; (800ac00 <HAL_TIM_PWM_Stop+0xc4>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d117      	bne.n	800ab8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6a1a      	ldr	r2, [r3, #32]
 800ab64:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab68:	4013      	ands	r3, r2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10f      	bne.n	800ab8e <HAL_TIM_PWM_Stop+0x52>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6a1a      	ldr	r2, [r3, #32]
 800ab74:	f240 4344 	movw	r3, #1092	; 0x444
 800ab78:	4013      	ands	r3, r2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d107      	bne.n	800ab8e <HAL_TIM_PWM_Stop+0x52>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a1a      	ldr	r2, [r3, #32]
 800ab94:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab98:	4013      	ands	r3, r2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10f      	bne.n	800abbe <HAL_TIM_PWM_Stop+0x82>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6a1a      	ldr	r2, [r3, #32]
 800aba4:	f240 4344 	movw	r3, #1092	; 0x444
 800aba8:	4013      	ands	r3, r2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d107      	bne.n	800abbe <HAL_TIM_PWM_Stop+0x82>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Stop+0x92>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abcc:	e013      	b.n	800abf6 <HAL_TIM_PWM_Stop+0xba>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Stop+0xa2>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abdc:	e00b      	b.n	800abf6 <HAL_TIM_PWM_Stop+0xba>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Stop+0xb2>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abec:	e003      	b.n	800abf6 <HAL_TIM_PWM_Stop+0xba>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	40012c00 	.word	0x40012c00

0800ac04 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e041      	b.n	800ac9c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f839 	bl	800aca4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2202      	movs	r2, #2
 800ac36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4619      	mov	r1, r3
 800ac44:	4610      	mov	r0, r2
 800ac46:	f000 fa53 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0208 	bic.w	r2, r2, #8
 800ac58:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6819      	ldr	r1, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr
	...

0800acb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acca:	2b01      	cmp	r3, #1
 800accc:	d101      	bne.n	800acd2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800acce:	2302      	movs	r3, #2
 800acd0:	e046      	b.n	800ad60 <HAL_TIM_OC_ConfigChannel+0xa8>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b0c      	cmp	r3, #12
 800acde:	d839      	bhi.n	800ad54 <HAL_TIM_OC_ConfigChannel+0x9c>
 800ace0:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <HAL_TIM_OC_ConfigChannel+0x30>)
 800ace2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace6:	bf00      	nop
 800ace8:	0800ad1d 	.word	0x0800ad1d
 800acec:	0800ad55 	.word	0x0800ad55
 800acf0:	0800ad55 	.word	0x0800ad55
 800acf4:	0800ad55 	.word	0x0800ad55
 800acf8:	0800ad2b 	.word	0x0800ad2b
 800acfc:	0800ad55 	.word	0x0800ad55
 800ad00:	0800ad55 	.word	0x0800ad55
 800ad04:	0800ad55 	.word	0x0800ad55
 800ad08:	0800ad39 	.word	0x0800ad39
 800ad0c:	0800ad55 	.word	0x0800ad55
 800ad10:	0800ad55 	.word	0x0800ad55
 800ad14:	0800ad55 	.word	0x0800ad55
 800ad18:	0800ad47 	.word	0x0800ad47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fa46 	bl	800b1b4 <TIM_OC1_SetConfig>
      break;
 800ad28:	e015      	b.n	800ad56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68b9      	ldr	r1, [r7, #8]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 faa5 	bl	800b280 <TIM_OC2_SetConfig>
      break;
 800ad36:	e00e      	b.n	800ad56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fb08 	bl	800b354 <TIM_OC3_SetConfig>
      break;
 800ad44:	e007      	b.n	800ad56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fb6b 	bl	800b428 <TIM_OC4_SetConfig>
      break;
 800ad52:	e000      	b.n	800ad56 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800ad54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e0ac      	b.n	800aedc <HAL_TIM_PWM_ConfigChannel+0x174>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b0c      	cmp	r3, #12
 800ad8e:	f200 809f 	bhi.w	800aed0 <HAL_TIM_PWM_ConfigChannel+0x168>
 800ad92:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800adcd 	.word	0x0800adcd
 800ad9c:	0800aed1 	.word	0x0800aed1
 800ada0:	0800aed1 	.word	0x0800aed1
 800ada4:	0800aed1 	.word	0x0800aed1
 800ada8:	0800ae0d 	.word	0x0800ae0d
 800adac:	0800aed1 	.word	0x0800aed1
 800adb0:	0800aed1 	.word	0x0800aed1
 800adb4:	0800aed1 	.word	0x0800aed1
 800adb8:	0800ae4f 	.word	0x0800ae4f
 800adbc:	0800aed1 	.word	0x0800aed1
 800adc0:	0800aed1 	.word	0x0800aed1
 800adc4:	0800aed1 	.word	0x0800aed1
 800adc8:	0800ae8f 	.word	0x0800ae8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f9ee 	bl	800b1b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0208 	orr.w	r2, r2, #8
 800ade6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	699a      	ldr	r2, [r3, #24]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f022 0204 	bic.w	r2, r2, #4
 800adf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6999      	ldr	r1, [r3, #24]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	691a      	ldr	r2, [r3, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	619a      	str	r2, [r3, #24]
      break;
 800ae0a:	e062      	b.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fa34 	bl	800b280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699a      	ldr	r2, [r3, #24]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6999      	ldr	r1, [r3, #24]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	021a      	lsls	r2, r3, #8
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	619a      	str	r2, [r3, #24]
      break;
 800ae4c:	e041      	b.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 fa7d 	bl	800b354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69da      	ldr	r2, [r3, #28]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f042 0208 	orr.w	r2, r2, #8
 800ae68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0204 	bic.w	r2, r2, #4
 800ae78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69d9      	ldr	r1, [r3, #28]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	61da      	str	r2, [r3, #28]
      break;
 800ae8c:	e021      	b.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fac7 	bl	800b428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69d9      	ldr	r1, [r3, #28]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	021a      	lsls	r2, r3, #8
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	61da      	str	r2, [r3, #28]
      break;
 800aece:	e000      	b.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800aed0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIM_ConfigClockSource+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e0b3      	b.n	800b064 <HAL_TIM_ConfigClockSource+0x180>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af34:	d03e      	beq.n	800afb4 <HAL_TIM_ConfigClockSource+0xd0>
 800af36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af3a:	f200 8087 	bhi.w	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af42:	f000 8085 	beq.w	800b050 <HAL_TIM_ConfigClockSource+0x16c>
 800af46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af4a:	d87f      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af4c:	2b70      	cmp	r3, #112	; 0x70
 800af4e:	d01a      	beq.n	800af86 <HAL_TIM_ConfigClockSource+0xa2>
 800af50:	2b70      	cmp	r3, #112	; 0x70
 800af52:	d87b      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af54:	2b60      	cmp	r3, #96	; 0x60
 800af56:	d050      	beq.n	800affa <HAL_TIM_ConfigClockSource+0x116>
 800af58:	2b60      	cmp	r3, #96	; 0x60
 800af5a:	d877      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af5c:	2b50      	cmp	r3, #80	; 0x50
 800af5e:	d03c      	beq.n	800afda <HAL_TIM_ConfigClockSource+0xf6>
 800af60:	2b50      	cmp	r3, #80	; 0x50
 800af62:	d873      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af64:	2b40      	cmp	r3, #64	; 0x40
 800af66:	d058      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x136>
 800af68:	2b40      	cmp	r3, #64	; 0x40
 800af6a:	d86f      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af6c:	2b30      	cmp	r3, #48	; 0x30
 800af6e:	d064      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0x156>
 800af70:	2b30      	cmp	r3, #48	; 0x30
 800af72:	d86b      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af74:	2b20      	cmp	r3, #32
 800af76:	d060      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0x156>
 800af78:	2b20      	cmp	r3, #32
 800af7a:	d867      	bhi.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d05c      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0x156>
 800af80:	2b10      	cmp	r3, #16
 800af82:	d05a      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800af84:	e062      	b.n	800b04c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	6899      	ldr	r1, [r3, #8]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	f000 fb9a 	bl	800b6ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	609a      	str	r2, [r3, #8]
      break;
 800afb2:	e04e      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	6899      	ldr	r1, [r3, #8]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	f000 fb83 	bl	800b6ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afd6:	609a      	str	r2, [r3, #8]
      break;
 800afd8:	e03b      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	6859      	ldr	r1, [r3, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	461a      	mov	r2, r3
 800afe8:	f000 fafa 	bl	800b5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2150      	movs	r1, #80	; 0x50
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fb51 	bl	800b69a <TIM_ITRx_SetConfig>
      break;
 800aff8:	e02b      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6859      	ldr	r1, [r3, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	461a      	mov	r2, r3
 800b008:	f000 fb18 	bl	800b63c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2160      	movs	r1, #96	; 0x60
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fb41 	bl	800b69a <TIM_ITRx_SetConfig>
      break;
 800b018:	e01b      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	6859      	ldr	r1, [r3, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	461a      	mov	r2, r3
 800b028:	f000 fada 	bl	800b5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2140      	movs	r1, #64	; 0x40
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fb31 	bl	800b69a <TIM_ITRx_SetConfig>
      break;
 800b038:	e00b      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f000 fb28 	bl	800b69a <TIM_ITRx_SetConfig>
        break;
 800b04a:	e002      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b080:	2302      	movs	r3, #2
 800b082:	e031      	b.n	800b0e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa14 	bl	800b4c4 <TIM_SlaveTimer_SetConfig>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e018      	b.n	800b0e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b0d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a29      	ldr	r2, [pc, #164]	; (800b1a8 <TIM_Base_SetConfig+0xb8>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d00b      	beq.n	800b120 <TIM_Base_SetConfig+0x30>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10e:	d007      	beq.n	800b120 <TIM_Base_SetConfig+0x30>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a26      	ldr	r2, [pc, #152]	; (800b1ac <TIM_Base_SetConfig+0xbc>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d003      	beq.n	800b120 <TIM_Base_SetConfig+0x30>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a25      	ldr	r2, [pc, #148]	; (800b1b0 <TIM_Base_SetConfig+0xc0>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d108      	bne.n	800b132 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1c      	ldr	r2, [pc, #112]	; (800b1a8 <TIM_Base_SetConfig+0xb8>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_Base_SetConfig+0x62>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b140:	d007      	beq.n	800b152 <TIM_Base_SetConfig+0x62>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <TIM_Base_SetConfig+0xbc>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_Base_SetConfig+0x62>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a18      	ldr	r2, [pc, #96]	; (800b1b0 <TIM_Base_SetConfig+0xc0>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d108      	bne.n	800b164 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a07      	ldr	r2, [pc, #28]	; (800b1a8 <TIM_Base_SetConfig+0xb8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d103      	bne.n	800b198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	615a      	str	r2, [r3, #20]
}
 800b19e:	bf00      	nop
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bc80      	pop	{r7}
 800b1a6:	4770      	bx	lr
 800b1a8:	40012c00 	.word	0x40012c00
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800

0800b1b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	f023 0201 	bic.w	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0303 	bic.w	r3, r3, #3
 800b1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f023 0302 	bic.w	r3, r3, #2
 800b1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	4313      	orrs	r3, r2
 800b206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a1c      	ldr	r2, [pc, #112]	; (800b27c <TIM_OC1_SetConfig+0xc8>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10c      	bne.n	800b22a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f023 0308 	bic.w	r3, r3, #8
 800b216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f023 0304 	bic.w	r3, r3, #4
 800b228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a13      	ldr	r2, [pc, #76]	; (800b27c <TIM_OC1_SetConfig+0xc8>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d111      	bne.n	800b256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	4313      	orrs	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	bc80      	pop	{r7}
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40012c00 	.word	0x40012c00

0800b280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0210 	bic.w	r2, r3, #16
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	021b      	lsls	r3, r3, #8
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f023 0320 	bic.w	r3, r3, #32
 800b2ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a1d      	ldr	r2, [pc, #116]	; (800b350 <TIM_OC2_SetConfig+0xd0>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10d      	bne.n	800b2fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <TIM_OC2_SetConfig+0xd0>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d113      	bne.n	800b32c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b30a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	4313      	orrs	r3, r2
 800b32a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	621a      	str	r2, [r3, #32]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr
 800b350:	40012c00 	.word	0x40012c00

0800b354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b354:	b480      	push	{r7}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0303 	bic.w	r3, r3, #3
 800b38a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b39c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	021b      	lsls	r3, r3, #8
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a1d      	ldr	r2, [pc, #116]	; (800b424 <TIM_OC3_SetConfig+0xd0>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d10d      	bne.n	800b3ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	021b      	lsls	r3, r3, #8
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a14      	ldr	r2, [pc, #80]	; (800b424 <TIM_OC3_SetConfig+0xd0>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d113      	bne.n	800b3fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	011b      	lsls	r3, r3, #4
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	621a      	str	r2, [r3, #32]
}
 800b418:	bf00      	nop
 800b41a:	371c      	adds	r7, #28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bc80      	pop	{r7}
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	40012c00 	.word	0x40012c00

0800b428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	4313      	orrs	r3, r2
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	031b      	lsls	r3, r3, #12
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a0f      	ldr	r2, [pc, #60]	; (800b4c0 <TIM_OC4_SetConfig+0x98>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d109      	bne.n	800b49c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b48e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	019b      	lsls	r3, r3, #6
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4313      	orrs	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	621a      	str	r2, [r3, #32]
}
 800b4b6:	bf00      	nop
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bc80      	pop	{r7}
 800b4be:	4770      	bx	lr
 800b4c0:	40012c00 	.word	0x40012c00

0800b4c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	f023 0307 	bic.w	r3, r3, #7
 800b4ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b70      	cmp	r3, #112	; 0x70
 800b508:	d01a      	beq.n	800b540 <TIM_SlaveTimer_SetConfig+0x7c>
 800b50a:	2b70      	cmp	r3, #112	; 0x70
 800b50c:	d860      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b50e:	2b60      	cmp	r3, #96	; 0x60
 800b510:	d054      	beq.n	800b5bc <TIM_SlaveTimer_SetConfig+0xf8>
 800b512:	2b60      	cmp	r3, #96	; 0x60
 800b514:	d85c      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b516:	2b50      	cmp	r3, #80	; 0x50
 800b518:	d046      	beq.n	800b5a8 <TIM_SlaveTimer_SetConfig+0xe4>
 800b51a:	2b50      	cmp	r3, #80	; 0x50
 800b51c:	d858      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b51e:	2b40      	cmp	r3, #64	; 0x40
 800b520:	d019      	beq.n	800b556 <TIM_SlaveTimer_SetConfig+0x92>
 800b522:	2b40      	cmp	r3, #64	; 0x40
 800b524:	d854      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b526:	2b30      	cmp	r3, #48	; 0x30
 800b528:	d054      	beq.n	800b5d4 <TIM_SlaveTimer_SetConfig+0x110>
 800b52a:	2b30      	cmp	r3, #48	; 0x30
 800b52c:	d850      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b52e:	2b20      	cmp	r3, #32
 800b530:	d050      	beq.n	800b5d4 <TIM_SlaveTimer_SetConfig+0x110>
 800b532:	2b20      	cmp	r3, #32
 800b534:	d84c      	bhi.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d04c      	beq.n	800b5d4 <TIM_SlaveTimer_SetConfig+0x110>
 800b53a:	2b10      	cmp	r3, #16
 800b53c:	d04a      	beq.n	800b5d4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800b53e:	e047      	b.n	800b5d0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	68d9      	ldr	r1, [r3, #12]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	f000 f8bd 	bl	800b6ce <TIM_ETR_SetConfig>
      break;
 800b554:	e03f      	b.n	800b5d6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d101      	bne.n	800b562 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e03a      	b.n	800b5d8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6a1a      	ldr	r2, [r3, #32]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f022 0201 	bic.w	r2, r2, #1
 800b578:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b588:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	621a      	str	r2, [r3, #32]
      break;
 800b5a6:	e016      	b.n	800b5d6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	6899      	ldr	r1, [r3, #8]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f000 f813 	bl	800b5e0 <TIM_TI1_ConfigInputStage>
      break;
 800b5ba:	e00c      	b.n	800b5d6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6899      	ldr	r1, [r3, #8]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f000 f837 	bl	800b63c <TIM_TI2_ConfigInputStage>
      break;
 800b5ce:	e002      	b.n	800b5d6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e000      	b.n	800b5d6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800b5d4:	bf00      	nop
  }
  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	f023 0201 	bic.w	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b60a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	4313      	orrs	r3, r2
 800b614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f023 030a 	bic.w	r3, r3, #10
 800b61c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	4313      	orrs	r3, r2
 800b624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	621a      	str	r2, [r3, #32]
}
 800b632:	bf00      	nop
 800b634:	371c      	adds	r7, #28
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr

0800b63c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	f023 0210 	bic.w	r2, r3, #16
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b666:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	031b      	lsls	r3, r3, #12
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	4313      	orrs	r3, r2
 800b670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	011b      	lsls	r3, r3, #4
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	4313      	orrs	r3, r2
 800b682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	621a      	str	r2, [r3, #32]
}
 800b690:	bf00      	nop
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	bc80      	pop	{r7}
 800b698:	4770      	bx	lr

0800b69a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f043 0307 	orr.w	r3, r3, #7
 800b6bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr

0800b6ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b087      	sub	sp, #28
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	607a      	str	r2, [r7, #4]
 800b6da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	021a      	lsls	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	609a      	str	r2, [r3, #8]
}
 800b702:	bf00      	nop
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	bc80      	pop	{r7}
 800b70a:	4770      	bx	lr

0800b70c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	2201      	movs	r2, #1
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a1a      	ldr	r2, [r3, #32]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	43db      	mvns	r3, r3
 800b72e:	401a      	ands	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a1a      	ldr	r2, [r3, #32]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	fa01 f303 	lsl.w	r3, r1, r3
 800b744:	431a      	orrs	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	621a      	str	r2, [r3, #32]
}
 800b74a:	bf00      	nop
 800b74c:	371c      	adds	r7, #28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bc80      	pop	{r7}
 800b752:	4770      	bx	lr

0800b754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b768:	2302      	movs	r3, #2
 800b76a:	e046      	b.n	800b7fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a16      	ldr	r2, [pc, #88]	; (800b804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d00e      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b8:	d009      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a12      	ldr	r2, [pc, #72]	; (800b808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d004      	beq.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a10      	ldr	r2, [pc, #64]	; (800b80c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d10c      	bne.n	800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr
 800b804:	40012c00 	.word	0x40012c00
 800b808:	40000400 	.word	0x40000400
 800b80c:	40000800 	.word	0x40000800

0800b810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b824:	2b01      	cmp	r3, #1
 800b826:	d101      	bne.n	800b82c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b828:	2302      	movs	r3, #2
 800b82a:	e03d      	b.n	800b8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4313      	orrs	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bc80      	pop	{r7}
 800b8b0:	4770      	bx	lr

0800b8b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e03f      	b.n	800b944 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7f7 fd93 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2224      	movs	r2, #36	; 0x24
 800b8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f904 	bl	800bb04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	691a      	ldr	r2, [r3, #16]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b90a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	695a      	ldr	r2, [r3, #20]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b91a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b92a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2220      	movs	r2, #32
 800b93e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af02      	add	r7, sp, #8
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	4613      	mov	r3, r2
 800b95a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b20      	cmp	r3, #32
 800b96a:	d17c      	bne.n	800ba66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <HAL_UART_Transmit+0x2c>
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e075      	b.n	800ba68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b982:	2b01      	cmp	r3, #1
 800b984:	d101      	bne.n	800b98a <HAL_UART_Transmit+0x3e>
 800b986:	2302      	movs	r3, #2
 800b988:	e06e      	b.n	800ba68 <HAL_UART_Transmit+0x11c>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2221      	movs	r2, #33	; 0x21
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9a0:	f7fc f9c0 	bl	8007d24 <HAL_GetTick>
 800b9a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	88fa      	ldrh	r2, [r7, #6]
 800b9aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	88fa      	ldrh	r2, [r7, #6]
 800b9b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ba:	d108      	bne.n	800b9ce <HAL_UART_Transmit+0x82>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	61bb      	str	r3, [r7, #24]
 800b9cc:	e003      	b.n	800b9d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b9de:	e02a      	b.n	800ba36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2180      	movs	r1, #128	; 0x80
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 f840 	bl	800ba70 <UART_WaitOnFlagUntilTimeout>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e036      	b.n	800ba68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10b      	bne.n	800ba18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	3302      	adds	r3, #2
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	e007      	b.n	800ba28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	781a      	ldrb	r2, [r3, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	3301      	adds	r3, #1
 800ba26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1cf      	bne.n	800b9e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2200      	movs	r2, #0
 800ba48:	2140      	movs	r1, #64	; 0x40
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 f810 	bl	800ba70 <UART_WaitOnFlagUntilTimeout>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e006      	b.n	800ba68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e000      	b.n	800ba68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ba66:	2302      	movs	r3, #2
  }
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3720      	adds	r7, #32
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba80:	e02c      	b.n	800badc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba88:	d028      	beq.n	800badc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d007      	beq.n	800baa0 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba90:	f7fc f948 	bl	8007d24 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	69ba      	ldr	r2, [r7, #24]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d21d      	bcs.n	800badc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68da      	ldr	r2, [r3, #12]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695a      	ldr	r2, [r3, #20]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0201 	bic.w	r2, r2, #1
 800babe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2220      	movs	r2, #32
 800bacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bad8:	2303      	movs	r3, #3
 800bada:	e00f      	b.n	800bafc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	4013      	ands	r3, r2
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	429a      	cmp	r2, r3
 800baea:	bf0c      	ite	eq
 800baec:	2301      	moveq	r3, #1
 800baee:	2300      	movne	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d0c3      	beq.n	800ba82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	689a      	ldr	r2, [r3, #8]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	695b      	ldr	r3, [r3, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bb3e:	f023 030c 	bic.w	r3, r3, #12
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	699a      	ldr	r2, [r3, #24]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a2c      	ldr	r2, [pc, #176]	; (800bc18 <UART_SetConfig+0x114>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d103      	bne.n	800bb74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bb6c:	f7fe f9ee 	bl	8009f4c <HAL_RCC_GetPCLK2Freq>
 800bb70:	60f8      	str	r0, [r7, #12]
 800bb72:	e002      	b.n	800bb7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bb74:	f7fe f9d6 	bl	8009f24 <HAL_RCC_GetPCLK1Freq>
 800bb78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	009a      	lsls	r2, r3, #2
 800bb84:	441a      	add	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb90:	4a22      	ldr	r2, [pc, #136]	; (800bc1c <UART_SetConfig+0x118>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	0119      	lsls	r1, r3, #4
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4413      	add	r3, r2
 800bba2:	009a      	lsls	r2, r3, #2
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbb0:	4b1a      	ldr	r3, [pc, #104]	; (800bc1c <UART_SetConfig+0x118>)
 800bbb2:	fba3 0302 	umull	r0, r3, r3, r2
 800bbb6:	095b      	lsrs	r3, r3, #5
 800bbb8:	2064      	movs	r0, #100	; 0x64
 800bbba:	fb00 f303 	mul.w	r3, r0, r3
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	3332      	adds	r3, #50	; 0x32
 800bbc4:	4a15      	ldr	r2, [pc, #84]	; (800bc1c <UART_SetConfig+0x118>)
 800bbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbca:	095b      	lsrs	r3, r3, #5
 800bbcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbd0:	4419      	add	r1, r3
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009a      	lsls	r2, r3, #2
 800bbdc:	441a      	add	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <UART_SetConfig+0x118>)
 800bbea:	fba3 0302 	umull	r0, r3, r3, r2
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	2064      	movs	r0, #100	; 0x64
 800bbf2:	fb00 f303 	mul.w	r3, r0, r3
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	011b      	lsls	r3, r3, #4
 800bbfa:	3332      	adds	r3, #50	; 0x32
 800bbfc:	4a07      	ldr	r2, [pc, #28]	; (800bc1c <UART_SetConfig+0x118>)
 800bbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	f003 020f 	and.w	r2, r3, #15
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	440a      	add	r2, r1
 800bc0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	40013800 	.word	0x40013800
 800bc1c:	51eb851f 	.word	0x51eb851f

0800bc20 <atoi>:
 800bc20:	220a      	movs	r2, #10
 800bc22:	2100      	movs	r1, #0
 800bc24:	f000 be96 	b.w	800c954 <strtol>

0800bc28 <__errno>:
 800bc28:	4b01      	ldr	r3, [pc, #4]	; (800bc30 <__errno+0x8>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000028 	.word	0x20000028

0800bc34 <__libc_init_array>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	2600      	movs	r6, #0
 800bc38:	4d0c      	ldr	r5, [pc, #48]	; (800bc6c <__libc_init_array+0x38>)
 800bc3a:	4c0d      	ldr	r4, [pc, #52]	; (800bc70 <__libc_init_array+0x3c>)
 800bc3c:	1b64      	subs	r4, r4, r5
 800bc3e:	10a4      	asrs	r4, r4, #2
 800bc40:	42a6      	cmp	r6, r4
 800bc42:	d109      	bne.n	800bc58 <__libc_init_array+0x24>
 800bc44:	f003 feca 	bl	800f9dc <_init>
 800bc48:	2600      	movs	r6, #0
 800bc4a:	4d0a      	ldr	r5, [pc, #40]	; (800bc74 <__libc_init_array+0x40>)
 800bc4c:	4c0a      	ldr	r4, [pc, #40]	; (800bc78 <__libc_init_array+0x44>)
 800bc4e:	1b64      	subs	r4, r4, r5
 800bc50:	10a4      	asrs	r4, r4, #2
 800bc52:	42a6      	cmp	r6, r4
 800bc54:	d105      	bne.n	800bc62 <__libc_init_array+0x2e>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5c:	4798      	blx	r3
 800bc5e:	3601      	adds	r6, #1
 800bc60:	e7ee      	b.n	800bc40 <__libc_init_array+0xc>
 800bc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc66:	4798      	blx	r3
 800bc68:	3601      	adds	r6, #1
 800bc6a:	e7f2      	b.n	800bc52 <__libc_init_array+0x1e>
 800bc6c:	080115c0 	.word	0x080115c0
 800bc70:	080115c0 	.word	0x080115c0
 800bc74:	080115c0 	.word	0x080115c0
 800bc78:	080115c4 	.word	0x080115c4

0800bc7c <malloc>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <malloc+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f000 b889 	b.w	800bd98 <_malloc_r>
 800bc86:	bf00      	nop
 800bc88:	20000028 	.word	0x20000028

0800bc8c <free>:
 800bc8c:	4b02      	ldr	r3, [pc, #8]	; (800bc98 <free+0xc>)
 800bc8e:	4601      	mov	r1, r0
 800bc90:	6818      	ldr	r0, [r3, #0]
 800bc92:	f000 b819 	b.w	800bcc8 <_free_r>
 800bc96:	bf00      	nop
 800bc98:	20000028 	.word	0x20000028

0800bc9c <memcpy>:
 800bc9c:	440a      	add	r2, r1
 800bc9e:	4291      	cmp	r1, r2
 800bca0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca4:	d100      	bne.n	800bca8 <memcpy+0xc>
 800bca6:	4770      	bx	lr
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcae:	4291      	cmp	r1, r2
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	d1f9      	bne.n	800bcaa <memcpy+0xe>
 800bcb6:	bd10      	pop	{r4, pc}

0800bcb8 <memset>:
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4402      	add	r2, r0
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d100      	bne.n	800bcc2 <memset+0xa>
 800bcc0:	4770      	bx	lr
 800bcc2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc6:	e7f9      	b.n	800bcbc <memset+0x4>

0800bcc8 <_free_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4605      	mov	r5, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d040      	beq.n	800bd52 <_free_r+0x8a>
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f0c      	subs	r4, r1, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	18e4      	addlt	r4, r4, r3
 800bcdc:	f001 fcd0 	bl	800d680 <__malloc_lock>
 800bce0:	4a1c      	ldr	r2, [pc, #112]	; (800bd54 <_free_r+0x8c>)
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	b933      	cbnz	r3, 800bcf4 <_free_r+0x2c>
 800bce6:	6063      	str	r3, [r4, #4]
 800bce8:	6014      	str	r4, [r2, #0]
 800bcea:	4628      	mov	r0, r5
 800bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf0:	f001 bccc 	b.w	800d68c <__malloc_unlock>
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	d908      	bls.n	800bd0a <_free_r+0x42>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	1821      	adds	r1, r4, r0
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf01      	itttt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	e7ed      	b.n	800bce6 <_free_r+0x1e>
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b10b      	cbz	r3, 800bd14 <_free_r+0x4c>
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	d9fa      	bls.n	800bd0a <_free_r+0x42>
 800bd14:	6811      	ldr	r1, [r2, #0]
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d10b      	bne.n	800bd34 <_free_r+0x6c>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	4401      	add	r1, r0
 800bd20:	1850      	adds	r0, r2, r1
 800bd22:	4283      	cmp	r3, r0
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	d1e0      	bne.n	800bcea <_free_r+0x22>
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4401      	add	r1, r0
 800bd2e:	6011      	str	r1, [r2, #0]
 800bd30:	6053      	str	r3, [r2, #4]
 800bd32:	e7da      	b.n	800bcea <_free_r+0x22>
 800bd34:	d902      	bls.n	800bd3c <_free_r+0x74>
 800bd36:	230c      	movs	r3, #12
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	e7d6      	b.n	800bcea <_free_r+0x22>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	1821      	adds	r1, r4, r0
 800bd40:	428b      	cmp	r3, r1
 800bd42:	bf01      	itttt	eq
 800bd44:	6819      	ldreq	r1, [r3, #0]
 800bd46:	685b      	ldreq	r3, [r3, #4]
 800bd48:	1809      	addeq	r1, r1, r0
 800bd4a:	6021      	streq	r1, [r4, #0]
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	6054      	str	r4, [r2, #4]
 800bd50:	e7cb      	b.n	800bcea <_free_r+0x22>
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20001d00 	.word	0x20001d00

0800bd58 <sbrk_aligned>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	4e0e      	ldr	r6, [pc, #56]	; (800bd94 <sbrk_aligned+0x3c>)
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	6831      	ldr	r1, [r6, #0]
 800bd60:	4605      	mov	r5, r0
 800bd62:	b911      	cbnz	r1, 800bd6a <sbrk_aligned+0x12>
 800bd64:	f000 fcec 	bl	800c740 <_sbrk_r>
 800bd68:	6030      	str	r0, [r6, #0]
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f000 fce7 	bl	800c740 <_sbrk_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	d00a      	beq.n	800bd8c <sbrk_aligned+0x34>
 800bd76:	1cc4      	adds	r4, r0, #3
 800bd78:	f024 0403 	bic.w	r4, r4, #3
 800bd7c:	42a0      	cmp	r0, r4
 800bd7e:	d007      	beq.n	800bd90 <sbrk_aligned+0x38>
 800bd80:	1a21      	subs	r1, r4, r0
 800bd82:	4628      	mov	r0, r5
 800bd84:	f000 fcdc 	bl	800c740 <_sbrk_r>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d101      	bne.n	800bd90 <sbrk_aligned+0x38>
 800bd8c:	f04f 34ff 	mov.w	r4, #4294967295
 800bd90:	4620      	mov	r0, r4
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	20001d04 	.word	0x20001d04

0800bd98 <_malloc_r>:
 800bd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9c:	1ccd      	adds	r5, r1, #3
 800bd9e:	f025 0503 	bic.w	r5, r5, #3
 800bda2:	3508      	adds	r5, #8
 800bda4:	2d0c      	cmp	r5, #12
 800bda6:	bf38      	it	cc
 800bda8:	250c      	movcc	r5, #12
 800bdaa:	2d00      	cmp	r5, #0
 800bdac:	4607      	mov	r7, r0
 800bdae:	db01      	blt.n	800bdb4 <_malloc_r+0x1c>
 800bdb0:	42a9      	cmp	r1, r5
 800bdb2:	d905      	bls.n	800bdc0 <_malloc_r+0x28>
 800bdb4:	230c      	movs	r3, #12
 800bdb6:	2600      	movs	r6, #0
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	4630      	mov	r0, r6
 800bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc0:	4e2e      	ldr	r6, [pc, #184]	; (800be7c <_malloc_r+0xe4>)
 800bdc2:	f001 fc5d 	bl	800d680 <__malloc_lock>
 800bdc6:	6833      	ldr	r3, [r6, #0]
 800bdc8:	461c      	mov	r4, r3
 800bdca:	bb34      	cbnz	r4, 800be1a <_malloc_r+0x82>
 800bdcc:	4629      	mov	r1, r5
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f7ff ffc2 	bl	800bd58 <sbrk_aligned>
 800bdd4:	1c43      	adds	r3, r0, #1
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	d14d      	bne.n	800be76 <_malloc_r+0xde>
 800bdda:	6834      	ldr	r4, [r6, #0]
 800bddc:	4626      	mov	r6, r4
 800bdde:	2e00      	cmp	r6, #0
 800bde0:	d140      	bne.n	800be64 <_malloc_r+0xcc>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	4631      	mov	r1, r6
 800bde6:	4638      	mov	r0, r7
 800bde8:	eb04 0803 	add.w	r8, r4, r3
 800bdec:	f000 fca8 	bl	800c740 <_sbrk_r>
 800bdf0:	4580      	cmp	r8, r0
 800bdf2:	d13a      	bne.n	800be6a <_malloc_r+0xd2>
 800bdf4:	6821      	ldr	r1, [r4, #0]
 800bdf6:	3503      	adds	r5, #3
 800bdf8:	1a6d      	subs	r5, r5, r1
 800bdfa:	f025 0503 	bic.w	r5, r5, #3
 800bdfe:	3508      	adds	r5, #8
 800be00:	2d0c      	cmp	r5, #12
 800be02:	bf38      	it	cc
 800be04:	250c      	movcc	r5, #12
 800be06:	4638      	mov	r0, r7
 800be08:	4629      	mov	r1, r5
 800be0a:	f7ff ffa5 	bl	800bd58 <sbrk_aligned>
 800be0e:	3001      	adds	r0, #1
 800be10:	d02b      	beq.n	800be6a <_malloc_r+0xd2>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	442b      	add	r3, r5
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	e00e      	b.n	800be38 <_malloc_r+0xa0>
 800be1a:	6822      	ldr	r2, [r4, #0]
 800be1c:	1b52      	subs	r2, r2, r5
 800be1e:	d41e      	bmi.n	800be5e <_malloc_r+0xc6>
 800be20:	2a0b      	cmp	r2, #11
 800be22:	d916      	bls.n	800be52 <_malloc_r+0xba>
 800be24:	1961      	adds	r1, r4, r5
 800be26:	42a3      	cmp	r3, r4
 800be28:	6025      	str	r5, [r4, #0]
 800be2a:	bf18      	it	ne
 800be2c:	6059      	strne	r1, [r3, #4]
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	bf08      	it	eq
 800be32:	6031      	streq	r1, [r6, #0]
 800be34:	5162      	str	r2, [r4, r5]
 800be36:	604b      	str	r3, [r1, #4]
 800be38:	4638      	mov	r0, r7
 800be3a:	f104 060b 	add.w	r6, r4, #11
 800be3e:	f001 fc25 	bl	800d68c <__malloc_unlock>
 800be42:	f026 0607 	bic.w	r6, r6, #7
 800be46:	1d23      	adds	r3, r4, #4
 800be48:	1af2      	subs	r2, r6, r3
 800be4a:	d0b6      	beq.n	800bdba <_malloc_r+0x22>
 800be4c:	1b9b      	subs	r3, r3, r6
 800be4e:	50a3      	str	r3, [r4, r2]
 800be50:	e7b3      	b.n	800bdba <_malloc_r+0x22>
 800be52:	6862      	ldr	r2, [r4, #4]
 800be54:	42a3      	cmp	r3, r4
 800be56:	bf0c      	ite	eq
 800be58:	6032      	streq	r2, [r6, #0]
 800be5a:	605a      	strne	r2, [r3, #4]
 800be5c:	e7ec      	b.n	800be38 <_malloc_r+0xa0>
 800be5e:	4623      	mov	r3, r4
 800be60:	6864      	ldr	r4, [r4, #4]
 800be62:	e7b2      	b.n	800bdca <_malloc_r+0x32>
 800be64:	4634      	mov	r4, r6
 800be66:	6876      	ldr	r6, [r6, #4]
 800be68:	e7b9      	b.n	800bdde <_malloc_r+0x46>
 800be6a:	230c      	movs	r3, #12
 800be6c:	4638      	mov	r0, r7
 800be6e:	603b      	str	r3, [r7, #0]
 800be70:	f001 fc0c 	bl	800d68c <__malloc_unlock>
 800be74:	e7a1      	b.n	800bdba <_malloc_r+0x22>
 800be76:	6025      	str	r5, [r4, #0]
 800be78:	e7de      	b.n	800be38 <_malloc_r+0xa0>
 800be7a:	bf00      	nop
 800be7c:	20001d00 	.word	0x20001d00

0800be80 <__cvt>:
 800be80:	2b00      	cmp	r3, #0
 800be82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be86:	461f      	mov	r7, r3
 800be88:	bfbb      	ittet	lt
 800be8a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800be8e:	461f      	movlt	r7, r3
 800be90:	2300      	movge	r3, #0
 800be92:	232d      	movlt	r3, #45	; 0x2d
 800be94:	b088      	sub	sp, #32
 800be96:	4614      	mov	r4, r2
 800be98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800be9c:	7013      	strb	r3, [r2, #0]
 800be9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bea0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bea4:	f023 0820 	bic.w	r8, r3, #32
 800bea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800beac:	d005      	beq.n	800beba <__cvt+0x3a>
 800beae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800beb2:	d100      	bne.n	800beb6 <__cvt+0x36>
 800beb4:	3501      	adds	r5, #1
 800beb6:	2302      	movs	r3, #2
 800beb8:	e000      	b.n	800bebc <__cvt+0x3c>
 800beba:	2303      	movs	r3, #3
 800bebc:	aa07      	add	r2, sp, #28
 800bebe:	9204      	str	r2, [sp, #16]
 800bec0:	aa06      	add	r2, sp, #24
 800bec2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bec6:	e9cd 3500 	strd	r3, r5, [sp]
 800beca:	4622      	mov	r2, r4
 800becc:	463b      	mov	r3, r7
 800bece:	f000 fdd7 	bl	800ca80 <_dtoa_r>
 800bed2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bed6:	4606      	mov	r6, r0
 800bed8:	d102      	bne.n	800bee0 <__cvt+0x60>
 800beda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bedc:	07db      	lsls	r3, r3, #31
 800bede:	d522      	bpl.n	800bf26 <__cvt+0xa6>
 800bee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bee4:	eb06 0905 	add.w	r9, r6, r5
 800bee8:	d110      	bne.n	800bf0c <__cvt+0x8c>
 800beea:	7833      	ldrb	r3, [r6, #0]
 800beec:	2b30      	cmp	r3, #48	; 0x30
 800beee:	d10a      	bne.n	800bf06 <__cvt+0x86>
 800bef0:	2200      	movs	r2, #0
 800bef2:	2300      	movs	r3, #0
 800bef4:	4620      	mov	r0, r4
 800bef6:	4639      	mov	r1, r7
 800bef8:	f7f4 fd60 	bl	80009bc <__aeabi_dcmpeq>
 800befc:	b918      	cbnz	r0, 800bf06 <__cvt+0x86>
 800befe:	f1c5 0501 	rsb	r5, r5, #1
 800bf02:	f8ca 5000 	str.w	r5, [sl]
 800bf06:	f8da 3000 	ldr.w	r3, [sl]
 800bf0a:	4499      	add	r9, r3
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4620      	mov	r0, r4
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fd52 	bl	80009bc <__aeabi_dcmpeq>
 800bf18:	b108      	cbz	r0, 800bf1e <__cvt+0x9e>
 800bf1a:	f8cd 901c 	str.w	r9, [sp, #28]
 800bf1e:	2230      	movs	r2, #48	; 0x30
 800bf20:	9b07      	ldr	r3, [sp, #28]
 800bf22:	454b      	cmp	r3, r9
 800bf24:	d307      	bcc.n	800bf36 <__cvt+0xb6>
 800bf26:	4630      	mov	r0, r6
 800bf28:	9b07      	ldr	r3, [sp, #28]
 800bf2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf2c:	1b9b      	subs	r3, r3, r6
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	b008      	add	sp, #32
 800bf32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf36:	1c59      	adds	r1, r3, #1
 800bf38:	9107      	str	r1, [sp, #28]
 800bf3a:	701a      	strb	r2, [r3, #0]
 800bf3c:	e7f0      	b.n	800bf20 <__cvt+0xa0>

0800bf3e <__exponent>:
 800bf3e:	4603      	mov	r3, r0
 800bf40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf42:	2900      	cmp	r1, #0
 800bf44:	f803 2b02 	strb.w	r2, [r3], #2
 800bf48:	bfb6      	itet	lt
 800bf4a:	222d      	movlt	r2, #45	; 0x2d
 800bf4c:	222b      	movge	r2, #43	; 0x2b
 800bf4e:	4249      	neglt	r1, r1
 800bf50:	2909      	cmp	r1, #9
 800bf52:	7042      	strb	r2, [r0, #1]
 800bf54:	dd2b      	ble.n	800bfae <__exponent+0x70>
 800bf56:	f10d 0407 	add.w	r4, sp, #7
 800bf5a:	46a4      	mov	ip, r4
 800bf5c:	270a      	movs	r7, #10
 800bf5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf62:	460a      	mov	r2, r1
 800bf64:	46a6      	mov	lr, r4
 800bf66:	fb07 1516 	mls	r5, r7, r6, r1
 800bf6a:	2a63      	cmp	r2, #99	; 0x63
 800bf6c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bf70:	4631      	mov	r1, r6
 800bf72:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bf7a:	dcf0      	bgt.n	800bf5e <__exponent+0x20>
 800bf7c:	3130      	adds	r1, #48	; 0x30
 800bf7e:	f1ae 0502 	sub.w	r5, lr, #2
 800bf82:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bf86:	4629      	mov	r1, r5
 800bf88:	1c44      	adds	r4, r0, #1
 800bf8a:	4561      	cmp	r1, ip
 800bf8c:	d30a      	bcc.n	800bfa4 <__exponent+0x66>
 800bf8e:	f10d 0209 	add.w	r2, sp, #9
 800bf92:	eba2 020e 	sub.w	r2, r2, lr
 800bf96:	4565      	cmp	r5, ip
 800bf98:	bf88      	it	hi
 800bf9a:	2200      	movhi	r2, #0
 800bf9c:	4413      	add	r3, r2
 800bf9e:	1a18      	subs	r0, r3, r0
 800bfa0:	b003      	add	sp, #12
 800bfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfa8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bfac:	e7ed      	b.n	800bf8a <__exponent+0x4c>
 800bfae:	2330      	movs	r3, #48	; 0x30
 800bfb0:	3130      	adds	r1, #48	; 0x30
 800bfb2:	7083      	strb	r3, [r0, #2]
 800bfb4:	70c1      	strb	r1, [r0, #3]
 800bfb6:	1d03      	adds	r3, r0, #4
 800bfb8:	e7f1      	b.n	800bf9e <__exponent+0x60>
	...

0800bfbc <_printf_float>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	b091      	sub	sp, #68	; 0x44
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bfc8:	4616      	mov	r6, r2
 800bfca:	461f      	mov	r7, r3
 800bfcc:	4605      	mov	r5, r0
 800bfce:	f001 fb45 	bl	800d65c <_localeconv_r>
 800bfd2:	6803      	ldr	r3, [r0, #0]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd8:	f7f4 f8c4 	bl	8000164 <strlen>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	930e      	str	r3, [sp, #56]	; 0x38
 800bfe0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe4:	900a      	str	r0, [sp, #40]	; 0x28
 800bfe6:	3307      	adds	r3, #7
 800bfe8:	f023 0307 	bic.w	r3, r3, #7
 800bfec:	f103 0208 	add.w	r2, r3, #8
 800bff0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bff4:	f8d4 b000 	ldr.w	fp, [r4]
 800bff8:	f8c8 2000 	str.w	r2, [r8]
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c004:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c008:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295
 800c012:	4640      	mov	r0, r8
 800c014:	4b9c      	ldr	r3, [pc, #624]	; (800c288 <_printf_float+0x2cc>)
 800c016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c018:	f7f4 fd02 	bl	8000a20 <__aeabi_dcmpun>
 800c01c:	bb70      	cbnz	r0, 800c07c <_printf_float+0xc0>
 800c01e:	f04f 32ff 	mov.w	r2, #4294967295
 800c022:	4640      	mov	r0, r8
 800c024:	4b98      	ldr	r3, [pc, #608]	; (800c288 <_printf_float+0x2cc>)
 800c026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c028:	f7f4 fcdc 	bl	80009e4 <__aeabi_dcmple>
 800c02c:	bb30      	cbnz	r0, 800c07c <_printf_float+0xc0>
 800c02e:	2200      	movs	r2, #0
 800c030:	2300      	movs	r3, #0
 800c032:	4640      	mov	r0, r8
 800c034:	4651      	mov	r1, sl
 800c036:	f7f4 fccb 	bl	80009d0 <__aeabi_dcmplt>
 800c03a:	b110      	cbz	r0, 800c042 <_printf_float+0x86>
 800c03c:	232d      	movs	r3, #45	; 0x2d
 800c03e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c042:	4b92      	ldr	r3, [pc, #584]	; (800c28c <_printf_float+0x2d0>)
 800c044:	4892      	ldr	r0, [pc, #584]	; (800c290 <_printf_float+0x2d4>)
 800c046:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c04a:	bf94      	ite	ls
 800c04c:	4698      	movls	r8, r3
 800c04e:	4680      	movhi	r8, r0
 800c050:	2303      	movs	r3, #3
 800c052:	f04f 0a00 	mov.w	sl, #0
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	f02b 0304 	bic.w	r3, fp, #4
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	4633      	mov	r3, r6
 800c060:	4621      	mov	r1, r4
 800c062:	4628      	mov	r0, r5
 800c064:	9700      	str	r7, [sp, #0]
 800c066:	aa0f      	add	r2, sp, #60	; 0x3c
 800c068:	f000 f9d4 	bl	800c414 <_printf_common>
 800c06c:	3001      	adds	r0, #1
 800c06e:	f040 8090 	bne.w	800c192 <_printf_float+0x1d6>
 800c072:	f04f 30ff 	mov.w	r0, #4294967295
 800c076:	b011      	add	sp, #68	; 0x44
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	4642      	mov	r2, r8
 800c07e:	4653      	mov	r3, sl
 800c080:	4640      	mov	r0, r8
 800c082:	4651      	mov	r1, sl
 800c084:	f7f4 fccc 	bl	8000a20 <__aeabi_dcmpun>
 800c088:	b148      	cbz	r0, 800c09e <_printf_float+0xe2>
 800c08a:	f1ba 0f00 	cmp.w	sl, #0
 800c08e:	bfb8      	it	lt
 800c090:	232d      	movlt	r3, #45	; 0x2d
 800c092:	4880      	ldr	r0, [pc, #512]	; (800c294 <_printf_float+0x2d8>)
 800c094:	bfb8      	it	lt
 800c096:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c09a:	4b7f      	ldr	r3, [pc, #508]	; (800c298 <_printf_float+0x2dc>)
 800c09c:	e7d3      	b.n	800c046 <_printf_float+0x8a>
 800c09e:	6863      	ldr	r3, [r4, #4]
 800c0a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c0a4:	1c5a      	adds	r2, r3, #1
 800c0a6:	d142      	bne.n	800c12e <_printf_float+0x172>
 800c0a8:	2306      	movs	r3, #6
 800c0aa:	6063      	str	r3, [r4, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	9206      	str	r2, [sp, #24]
 800c0b0:	aa0e      	add	r2, sp, #56	; 0x38
 800c0b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c0b6:	aa0d      	add	r2, sp, #52	; 0x34
 800c0b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c0bc:	9203      	str	r2, [sp, #12]
 800c0be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c0c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	4642      	mov	r2, r8
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	4653      	mov	r3, sl
 800c0d2:	910b      	str	r1, [sp, #44]	; 0x2c
 800c0d4:	f7ff fed4 	bl	800be80 <__cvt>
 800c0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0da:	4680      	mov	r8, r0
 800c0dc:	2947      	cmp	r1, #71	; 0x47
 800c0de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c0e0:	d108      	bne.n	800c0f4 <_printf_float+0x138>
 800c0e2:	1cc8      	adds	r0, r1, #3
 800c0e4:	db02      	blt.n	800c0ec <_printf_float+0x130>
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	dd40      	ble.n	800c16e <_printf_float+0x1b2>
 800c0ec:	f1a9 0902 	sub.w	r9, r9, #2
 800c0f0:	fa5f f989 	uxtb.w	r9, r9
 800c0f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c0f8:	d81f      	bhi.n	800c13a <_printf_float+0x17e>
 800c0fa:	464a      	mov	r2, r9
 800c0fc:	3901      	subs	r1, #1
 800c0fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c102:	910d      	str	r1, [sp, #52]	; 0x34
 800c104:	f7ff ff1b 	bl	800bf3e <__exponent>
 800c108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c10a:	4682      	mov	sl, r0
 800c10c:	1813      	adds	r3, r2, r0
 800c10e:	2a01      	cmp	r2, #1
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	dc02      	bgt.n	800c11a <_printf_float+0x15e>
 800c114:	6822      	ldr	r2, [r4, #0]
 800c116:	07d2      	lsls	r2, r2, #31
 800c118:	d501      	bpl.n	800c11e <_printf_float+0x162>
 800c11a:	3301      	adds	r3, #1
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c122:	2b00      	cmp	r3, #0
 800c124:	d09b      	beq.n	800c05e <_printf_float+0xa2>
 800c126:	232d      	movs	r3, #45	; 0x2d
 800c128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c12c:	e797      	b.n	800c05e <_printf_float+0xa2>
 800c12e:	2947      	cmp	r1, #71	; 0x47
 800c130:	d1bc      	bne.n	800c0ac <_printf_float+0xf0>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1ba      	bne.n	800c0ac <_printf_float+0xf0>
 800c136:	2301      	movs	r3, #1
 800c138:	e7b7      	b.n	800c0aa <_printf_float+0xee>
 800c13a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c13e:	d118      	bne.n	800c172 <_printf_float+0x1b6>
 800c140:	2900      	cmp	r1, #0
 800c142:	6863      	ldr	r3, [r4, #4]
 800c144:	dd0b      	ble.n	800c15e <_printf_float+0x1a2>
 800c146:	6121      	str	r1, [r4, #16]
 800c148:	b913      	cbnz	r3, 800c150 <_printf_float+0x194>
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	07d0      	lsls	r0, r2, #31
 800c14e:	d502      	bpl.n	800c156 <_printf_float+0x19a>
 800c150:	3301      	adds	r3, #1
 800c152:	440b      	add	r3, r1
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	f04f 0a00 	mov.w	sl, #0
 800c15a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c15c:	e7df      	b.n	800c11e <_printf_float+0x162>
 800c15e:	b913      	cbnz	r3, 800c166 <_printf_float+0x1aa>
 800c160:	6822      	ldr	r2, [r4, #0]
 800c162:	07d2      	lsls	r2, r2, #31
 800c164:	d501      	bpl.n	800c16a <_printf_float+0x1ae>
 800c166:	3302      	adds	r3, #2
 800c168:	e7f4      	b.n	800c154 <_printf_float+0x198>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e7f2      	b.n	800c154 <_printf_float+0x198>
 800c16e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c174:	4299      	cmp	r1, r3
 800c176:	db05      	blt.n	800c184 <_printf_float+0x1c8>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	6121      	str	r1, [r4, #16]
 800c17c:	07d8      	lsls	r0, r3, #31
 800c17e:	d5ea      	bpl.n	800c156 <_printf_float+0x19a>
 800c180:	1c4b      	adds	r3, r1, #1
 800c182:	e7e7      	b.n	800c154 <_printf_float+0x198>
 800c184:	2900      	cmp	r1, #0
 800c186:	bfcc      	ite	gt
 800c188:	2201      	movgt	r2, #1
 800c18a:	f1c1 0202 	rsble	r2, r1, #2
 800c18e:	4413      	add	r3, r2
 800c190:	e7e0      	b.n	800c154 <_printf_float+0x198>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	055a      	lsls	r2, r3, #21
 800c196:	d407      	bmi.n	800c1a8 <_printf_float+0x1ec>
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	4642      	mov	r2, r8
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d12b      	bne.n	800c1fe <_printf_float+0x242>
 800c1a6:	e764      	b.n	800c072 <_printf_float+0xb6>
 800c1a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c1ac:	f240 80dd 	bls.w	800c36a <_printf_float+0x3ae>
 800c1b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f7f4 fc00 	bl	80009bc <__aeabi_dcmpeq>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d033      	beq.n	800c228 <_printf_float+0x26c>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	4a35      	ldr	r2, [pc, #212]	; (800c29c <_printf_float+0x2e0>)
 800c1c8:	47b8      	blx	r7
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	f43f af51 	beq.w	800c072 <_printf_float+0xb6>
 800c1d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	db02      	blt.n	800c1de <_printf_float+0x222>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	07d8      	lsls	r0, r3, #31
 800c1dc:	d50f      	bpl.n	800c1fe <_printf_float+0x242>
 800c1de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	f43f af42 	beq.w	800c072 <_printf_float+0xb6>
 800c1ee:	f04f 0800 	mov.w	r8, #0
 800c1f2:	f104 091a 	add.w	r9, r4, #26
 800c1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	4543      	cmp	r3, r8
 800c1fc:	dc09      	bgt.n	800c212 <_printf_float+0x256>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	079b      	lsls	r3, r3, #30
 800c202:	f100 8102 	bmi.w	800c40a <_printf_float+0x44e>
 800c206:	68e0      	ldr	r0, [r4, #12]
 800c208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c20a:	4298      	cmp	r0, r3
 800c20c:	bfb8      	it	lt
 800c20e:	4618      	movlt	r0, r3
 800c210:	e731      	b.n	800c076 <_printf_float+0xba>
 800c212:	2301      	movs	r3, #1
 800c214:	464a      	mov	r2, r9
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f af28 	beq.w	800c072 <_printf_float+0xb6>
 800c222:	f108 0801 	add.w	r8, r8, #1
 800c226:	e7e6      	b.n	800c1f6 <_printf_float+0x23a>
 800c228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	dc38      	bgt.n	800c2a0 <_printf_float+0x2e4>
 800c22e:	2301      	movs	r3, #1
 800c230:	4631      	mov	r1, r6
 800c232:	4628      	mov	r0, r5
 800c234:	4a19      	ldr	r2, [pc, #100]	; (800c29c <_printf_float+0x2e0>)
 800c236:	47b8      	blx	r7
 800c238:	3001      	adds	r0, #1
 800c23a:	f43f af1a 	beq.w	800c072 <_printf_float+0xb6>
 800c23e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c242:	4313      	orrs	r3, r2
 800c244:	d102      	bne.n	800c24c <_printf_float+0x290>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	07d9      	lsls	r1, r3, #31
 800c24a:	d5d8      	bpl.n	800c1fe <_printf_float+0x242>
 800c24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c250:	4631      	mov	r1, r6
 800c252:	4628      	mov	r0, r5
 800c254:	47b8      	blx	r7
 800c256:	3001      	adds	r0, #1
 800c258:	f43f af0b 	beq.w	800c072 <_printf_float+0xb6>
 800c25c:	f04f 0900 	mov.w	r9, #0
 800c260:	f104 0a1a 	add.w	sl, r4, #26
 800c264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c266:	425b      	negs	r3, r3
 800c268:	454b      	cmp	r3, r9
 800c26a:	dc01      	bgt.n	800c270 <_printf_float+0x2b4>
 800c26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c26e:	e794      	b.n	800c19a <_printf_float+0x1de>
 800c270:	2301      	movs	r3, #1
 800c272:	4652      	mov	r2, sl
 800c274:	4631      	mov	r1, r6
 800c276:	4628      	mov	r0, r5
 800c278:	47b8      	blx	r7
 800c27a:	3001      	adds	r0, #1
 800c27c:	f43f aef9 	beq.w	800c072 <_printf_float+0xb6>
 800c280:	f109 0901 	add.w	r9, r9, #1
 800c284:	e7ee      	b.n	800c264 <_printf_float+0x2a8>
 800c286:	bf00      	nop
 800c288:	7fefffff 	.word	0x7fefffff
 800c28c:	080112b4 	.word	0x080112b4
 800c290:	080112b8 	.word	0x080112b8
 800c294:	080112c0 	.word	0x080112c0
 800c298:	080112bc 	.word	0x080112bc
 800c29c:	080112c4 	.word	0x080112c4
 800c2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	bfa8      	it	ge
 800c2a8:	461a      	movge	r2, r3
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	4691      	mov	r9, r2
 800c2ae:	dc37      	bgt.n	800c320 <_printf_float+0x364>
 800c2b0:	f04f 0b00 	mov.w	fp, #0
 800c2b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2b8:	f104 021a 	add.w	r2, r4, #26
 800c2bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c2c0:	ebaa 0309 	sub.w	r3, sl, r9
 800c2c4:	455b      	cmp	r3, fp
 800c2c6:	dc33      	bgt.n	800c330 <_printf_float+0x374>
 800c2c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	db3b      	blt.n	800c348 <_printf_float+0x38c>
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	07da      	lsls	r2, r3, #31
 800c2d4:	d438      	bmi.n	800c348 <_printf_float+0x38c>
 800c2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c2da:	eba3 020a 	sub.w	r2, r3, sl
 800c2de:	eba3 0901 	sub.w	r9, r3, r1
 800c2e2:	4591      	cmp	r9, r2
 800c2e4:	bfa8      	it	ge
 800c2e6:	4691      	movge	r9, r2
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	dc34      	bgt.n	800c358 <_printf_float+0x39c>
 800c2ee:	f04f 0800 	mov.w	r8, #0
 800c2f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2f6:	f104 0a1a 	add.w	sl, r4, #26
 800c2fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c2fe:	1a9b      	subs	r3, r3, r2
 800c300:	eba3 0309 	sub.w	r3, r3, r9
 800c304:	4543      	cmp	r3, r8
 800c306:	f77f af7a 	ble.w	800c1fe <_printf_float+0x242>
 800c30a:	2301      	movs	r3, #1
 800c30c:	4652      	mov	r2, sl
 800c30e:	4631      	mov	r1, r6
 800c310:	4628      	mov	r0, r5
 800c312:	47b8      	blx	r7
 800c314:	3001      	adds	r0, #1
 800c316:	f43f aeac 	beq.w	800c072 <_printf_float+0xb6>
 800c31a:	f108 0801 	add.w	r8, r8, #1
 800c31e:	e7ec      	b.n	800c2fa <_printf_float+0x33e>
 800c320:	4613      	mov	r3, r2
 800c322:	4631      	mov	r1, r6
 800c324:	4642      	mov	r2, r8
 800c326:	4628      	mov	r0, r5
 800c328:	47b8      	blx	r7
 800c32a:	3001      	adds	r0, #1
 800c32c:	d1c0      	bne.n	800c2b0 <_printf_float+0x2f4>
 800c32e:	e6a0      	b.n	800c072 <_printf_float+0xb6>
 800c330:	2301      	movs	r3, #1
 800c332:	4631      	mov	r1, r6
 800c334:	4628      	mov	r0, r5
 800c336:	920b      	str	r2, [sp, #44]	; 0x2c
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f ae99 	beq.w	800c072 <_printf_float+0xb6>
 800c340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c342:	f10b 0b01 	add.w	fp, fp, #1
 800c346:	e7b9      	b.n	800c2bc <_printf_float+0x300>
 800c348:	4631      	mov	r1, r6
 800c34a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c34e:	4628      	mov	r0, r5
 800c350:	47b8      	blx	r7
 800c352:	3001      	adds	r0, #1
 800c354:	d1bf      	bne.n	800c2d6 <_printf_float+0x31a>
 800c356:	e68c      	b.n	800c072 <_printf_float+0xb6>
 800c358:	464b      	mov	r3, r9
 800c35a:	4631      	mov	r1, r6
 800c35c:	4628      	mov	r0, r5
 800c35e:	eb08 020a 	add.w	r2, r8, sl
 800c362:	47b8      	blx	r7
 800c364:	3001      	adds	r0, #1
 800c366:	d1c2      	bne.n	800c2ee <_printf_float+0x332>
 800c368:	e683      	b.n	800c072 <_printf_float+0xb6>
 800c36a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c36c:	2a01      	cmp	r2, #1
 800c36e:	dc01      	bgt.n	800c374 <_printf_float+0x3b8>
 800c370:	07db      	lsls	r3, r3, #31
 800c372:	d537      	bpl.n	800c3e4 <_printf_float+0x428>
 800c374:	2301      	movs	r3, #1
 800c376:	4642      	mov	r2, r8
 800c378:	4631      	mov	r1, r6
 800c37a:	4628      	mov	r0, r5
 800c37c:	47b8      	blx	r7
 800c37e:	3001      	adds	r0, #1
 800c380:	f43f ae77 	beq.w	800c072 <_printf_float+0xb6>
 800c384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	47b8      	blx	r7
 800c38e:	3001      	adds	r0, #1
 800c390:	f43f ae6f 	beq.w	800c072 <_printf_float+0xb6>
 800c394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c398:	2200      	movs	r2, #0
 800c39a:	2300      	movs	r3, #0
 800c39c:	f7f4 fb0e 	bl	80009bc <__aeabi_dcmpeq>
 800c3a0:	b9d8      	cbnz	r0, 800c3da <_printf_float+0x41e>
 800c3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3a4:	f108 0201 	add.w	r2, r8, #1
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b8      	blx	r7
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d10e      	bne.n	800c3d2 <_printf_float+0x416>
 800c3b4:	e65d      	b.n	800c072 <_printf_float+0xb6>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	464a      	mov	r2, r9
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	f43f ae56 	beq.w	800c072 <_printf_float+0xb6>
 800c3c6:	f108 0801 	add.w	r8, r8, #1
 800c3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	4543      	cmp	r3, r8
 800c3d0:	dcf1      	bgt.n	800c3b6 <_printf_float+0x3fa>
 800c3d2:	4653      	mov	r3, sl
 800c3d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3d8:	e6e0      	b.n	800c19c <_printf_float+0x1e0>
 800c3da:	f04f 0800 	mov.w	r8, #0
 800c3de:	f104 091a 	add.w	r9, r4, #26
 800c3e2:	e7f2      	b.n	800c3ca <_printf_float+0x40e>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	4642      	mov	r2, r8
 800c3e8:	e7df      	b.n	800c3aa <_printf_float+0x3ee>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	464a      	mov	r2, r9
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	f43f ae3c 	beq.w	800c072 <_printf_float+0xb6>
 800c3fa:	f108 0801 	add.w	r8, r8, #1
 800c3fe:	68e3      	ldr	r3, [r4, #12]
 800c400:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c402:	1a5b      	subs	r3, r3, r1
 800c404:	4543      	cmp	r3, r8
 800c406:	dcf0      	bgt.n	800c3ea <_printf_float+0x42e>
 800c408:	e6fd      	b.n	800c206 <_printf_float+0x24a>
 800c40a:	f04f 0800 	mov.w	r8, #0
 800c40e:	f104 0919 	add.w	r9, r4, #25
 800c412:	e7f4      	b.n	800c3fe <_printf_float+0x442>

0800c414 <_printf_common>:
 800c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c418:	4616      	mov	r6, r2
 800c41a:	4699      	mov	r9, r3
 800c41c:	688a      	ldr	r2, [r1, #8]
 800c41e:	690b      	ldr	r3, [r1, #16]
 800c420:	4607      	mov	r7, r0
 800c422:	4293      	cmp	r3, r2
 800c424:	bfb8      	it	lt
 800c426:	4613      	movlt	r3, r2
 800c428:	6033      	str	r3, [r6, #0]
 800c42a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c42e:	460c      	mov	r4, r1
 800c430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c434:	b10a      	cbz	r2, 800c43a <_printf_common+0x26>
 800c436:	3301      	adds	r3, #1
 800c438:	6033      	str	r3, [r6, #0]
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	0699      	lsls	r1, r3, #26
 800c43e:	bf42      	ittt	mi
 800c440:	6833      	ldrmi	r3, [r6, #0]
 800c442:	3302      	addmi	r3, #2
 800c444:	6033      	strmi	r3, [r6, #0]
 800c446:	6825      	ldr	r5, [r4, #0]
 800c448:	f015 0506 	ands.w	r5, r5, #6
 800c44c:	d106      	bne.n	800c45c <_printf_common+0x48>
 800c44e:	f104 0a19 	add.w	sl, r4, #25
 800c452:	68e3      	ldr	r3, [r4, #12]
 800c454:	6832      	ldr	r2, [r6, #0]
 800c456:	1a9b      	subs	r3, r3, r2
 800c458:	42ab      	cmp	r3, r5
 800c45a:	dc28      	bgt.n	800c4ae <_printf_common+0x9a>
 800c45c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c460:	1e13      	subs	r3, r2, #0
 800c462:	6822      	ldr	r2, [r4, #0]
 800c464:	bf18      	it	ne
 800c466:	2301      	movne	r3, #1
 800c468:	0692      	lsls	r2, r2, #26
 800c46a:	d42d      	bmi.n	800c4c8 <_printf_common+0xb4>
 800c46c:	4649      	mov	r1, r9
 800c46e:	4638      	mov	r0, r7
 800c470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c474:	47c0      	blx	r8
 800c476:	3001      	adds	r0, #1
 800c478:	d020      	beq.n	800c4bc <_printf_common+0xa8>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	68e5      	ldr	r5, [r4, #12]
 800c47e:	f003 0306 	and.w	r3, r3, #6
 800c482:	2b04      	cmp	r3, #4
 800c484:	bf18      	it	ne
 800c486:	2500      	movne	r5, #0
 800c488:	6832      	ldr	r2, [r6, #0]
 800c48a:	f04f 0600 	mov.w	r6, #0
 800c48e:	68a3      	ldr	r3, [r4, #8]
 800c490:	bf08      	it	eq
 800c492:	1aad      	subeq	r5, r5, r2
 800c494:	6922      	ldr	r2, [r4, #16]
 800c496:	bf08      	it	eq
 800c498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c49c:	4293      	cmp	r3, r2
 800c49e:	bfc4      	itt	gt
 800c4a0:	1a9b      	subgt	r3, r3, r2
 800c4a2:	18ed      	addgt	r5, r5, r3
 800c4a4:	341a      	adds	r4, #26
 800c4a6:	42b5      	cmp	r5, r6
 800c4a8:	d11a      	bne.n	800c4e0 <_printf_common+0xcc>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e008      	b.n	800c4c0 <_printf_common+0xac>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	47c0      	blx	r8
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d103      	bne.n	800c4c4 <_printf_common+0xb0>
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	e7c4      	b.n	800c452 <_printf_common+0x3e>
 800c4c8:	2030      	movs	r0, #48	; 0x30
 800c4ca:	18e1      	adds	r1, r4, r3
 800c4cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4d6:	4422      	add	r2, r4
 800c4d8:	3302      	adds	r3, #2
 800c4da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4de:	e7c5      	b.n	800c46c <_printf_common+0x58>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	47c0      	blx	r8
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	d0e6      	beq.n	800c4bc <_printf_common+0xa8>
 800c4ee:	3601      	adds	r6, #1
 800c4f0:	e7d9      	b.n	800c4a6 <_printf_common+0x92>
	...

0800c4f4 <_printf_i>:
 800c4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f8:	7e0f      	ldrb	r7, [r1, #24]
 800c4fa:	4691      	mov	r9, r2
 800c4fc:	2f78      	cmp	r7, #120	; 0x78
 800c4fe:	4680      	mov	r8, r0
 800c500:	460c      	mov	r4, r1
 800c502:	469a      	mov	sl, r3
 800c504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c50a:	d807      	bhi.n	800c51c <_printf_i+0x28>
 800c50c:	2f62      	cmp	r7, #98	; 0x62
 800c50e:	d80a      	bhi.n	800c526 <_printf_i+0x32>
 800c510:	2f00      	cmp	r7, #0
 800c512:	f000 80d9 	beq.w	800c6c8 <_printf_i+0x1d4>
 800c516:	2f58      	cmp	r7, #88	; 0x58
 800c518:	f000 80a4 	beq.w	800c664 <_printf_i+0x170>
 800c51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c524:	e03a      	b.n	800c59c <_printf_i+0xa8>
 800c526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c52a:	2b15      	cmp	r3, #21
 800c52c:	d8f6      	bhi.n	800c51c <_printf_i+0x28>
 800c52e:	a101      	add	r1, pc, #4	; (adr r1, 800c534 <_printf_i+0x40>)
 800c530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c534:	0800c58d 	.word	0x0800c58d
 800c538:	0800c5a1 	.word	0x0800c5a1
 800c53c:	0800c51d 	.word	0x0800c51d
 800c540:	0800c51d 	.word	0x0800c51d
 800c544:	0800c51d 	.word	0x0800c51d
 800c548:	0800c51d 	.word	0x0800c51d
 800c54c:	0800c5a1 	.word	0x0800c5a1
 800c550:	0800c51d 	.word	0x0800c51d
 800c554:	0800c51d 	.word	0x0800c51d
 800c558:	0800c51d 	.word	0x0800c51d
 800c55c:	0800c51d 	.word	0x0800c51d
 800c560:	0800c6af 	.word	0x0800c6af
 800c564:	0800c5d1 	.word	0x0800c5d1
 800c568:	0800c691 	.word	0x0800c691
 800c56c:	0800c51d 	.word	0x0800c51d
 800c570:	0800c51d 	.word	0x0800c51d
 800c574:	0800c6d1 	.word	0x0800c6d1
 800c578:	0800c51d 	.word	0x0800c51d
 800c57c:	0800c5d1 	.word	0x0800c5d1
 800c580:	0800c51d 	.word	0x0800c51d
 800c584:	0800c51d 	.word	0x0800c51d
 800c588:	0800c699 	.word	0x0800c699
 800c58c:	682b      	ldr	r3, [r5, #0]
 800c58e:	1d1a      	adds	r2, r3, #4
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	602a      	str	r2, [r5, #0]
 800c594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c59c:	2301      	movs	r3, #1
 800c59e:	e0a4      	b.n	800c6ea <_printf_i+0x1f6>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	6829      	ldr	r1, [r5, #0]
 800c5a4:	0606      	lsls	r6, r0, #24
 800c5a6:	f101 0304 	add.w	r3, r1, #4
 800c5aa:	d50a      	bpl.n	800c5c2 <_printf_i+0xce>
 800c5ac:	680e      	ldr	r6, [r1, #0]
 800c5ae:	602b      	str	r3, [r5, #0]
 800c5b0:	2e00      	cmp	r6, #0
 800c5b2:	da03      	bge.n	800c5bc <_printf_i+0xc8>
 800c5b4:	232d      	movs	r3, #45	; 0x2d
 800c5b6:	4276      	negs	r6, r6
 800c5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5bc:	230a      	movs	r3, #10
 800c5be:	485e      	ldr	r0, [pc, #376]	; (800c738 <_printf_i+0x244>)
 800c5c0:	e019      	b.n	800c5f6 <_printf_i+0x102>
 800c5c2:	680e      	ldr	r6, [r1, #0]
 800c5c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	bf18      	it	ne
 800c5cc:	b236      	sxthne	r6, r6
 800c5ce:	e7ef      	b.n	800c5b0 <_printf_i+0xbc>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	6820      	ldr	r0, [r4, #0]
 800c5d4:	1d19      	adds	r1, r3, #4
 800c5d6:	6029      	str	r1, [r5, #0]
 800c5d8:	0601      	lsls	r1, r0, #24
 800c5da:	d501      	bpl.n	800c5e0 <_printf_i+0xec>
 800c5dc:	681e      	ldr	r6, [r3, #0]
 800c5de:	e002      	b.n	800c5e6 <_printf_i+0xf2>
 800c5e0:	0646      	lsls	r6, r0, #25
 800c5e2:	d5fb      	bpl.n	800c5dc <_printf_i+0xe8>
 800c5e4:	881e      	ldrh	r6, [r3, #0]
 800c5e6:	2f6f      	cmp	r7, #111	; 0x6f
 800c5e8:	bf0c      	ite	eq
 800c5ea:	2308      	moveq	r3, #8
 800c5ec:	230a      	movne	r3, #10
 800c5ee:	4852      	ldr	r0, [pc, #328]	; (800c738 <_printf_i+0x244>)
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5f6:	6865      	ldr	r5, [r4, #4]
 800c5f8:	2d00      	cmp	r5, #0
 800c5fa:	bfa8      	it	ge
 800c5fc:	6821      	ldrge	r1, [r4, #0]
 800c5fe:	60a5      	str	r5, [r4, #8]
 800c600:	bfa4      	itt	ge
 800c602:	f021 0104 	bicge.w	r1, r1, #4
 800c606:	6021      	strge	r1, [r4, #0]
 800c608:	b90e      	cbnz	r6, 800c60e <_printf_i+0x11a>
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	d04d      	beq.n	800c6aa <_printf_i+0x1b6>
 800c60e:	4615      	mov	r5, r2
 800c610:	fbb6 f1f3 	udiv	r1, r6, r3
 800c614:	fb03 6711 	mls	r7, r3, r1, r6
 800c618:	5dc7      	ldrb	r7, [r0, r7]
 800c61a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c61e:	4637      	mov	r7, r6
 800c620:	42bb      	cmp	r3, r7
 800c622:	460e      	mov	r6, r1
 800c624:	d9f4      	bls.n	800c610 <_printf_i+0x11c>
 800c626:	2b08      	cmp	r3, #8
 800c628:	d10b      	bne.n	800c642 <_printf_i+0x14e>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	07de      	lsls	r6, r3, #31
 800c62e:	d508      	bpl.n	800c642 <_printf_i+0x14e>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	6861      	ldr	r1, [r4, #4]
 800c634:	4299      	cmp	r1, r3
 800c636:	bfde      	ittt	le
 800c638:	2330      	movle	r3, #48	; 0x30
 800c63a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c63e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c642:	1b52      	subs	r2, r2, r5
 800c644:	6122      	str	r2, [r4, #16]
 800c646:	464b      	mov	r3, r9
 800c648:	4621      	mov	r1, r4
 800c64a:	4640      	mov	r0, r8
 800c64c:	f8cd a000 	str.w	sl, [sp]
 800c650:	aa03      	add	r2, sp, #12
 800c652:	f7ff fedf 	bl	800c414 <_printf_common>
 800c656:	3001      	adds	r0, #1
 800c658:	d14c      	bne.n	800c6f4 <_printf_i+0x200>
 800c65a:	f04f 30ff 	mov.w	r0, #4294967295
 800c65e:	b004      	add	sp, #16
 800c660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c664:	4834      	ldr	r0, [pc, #208]	; (800c738 <_printf_i+0x244>)
 800c666:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c66a:	6829      	ldr	r1, [r5, #0]
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c672:	6029      	str	r1, [r5, #0]
 800c674:	061d      	lsls	r5, r3, #24
 800c676:	d514      	bpl.n	800c6a2 <_printf_i+0x1ae>
 800c678:	07df      	lsls	r7, r3, #31
 800c67a:	bf44      	itt	mi
 800c67c:	f043 0320 	orrmi.w	r3, r3, #32
 800c680:	6023      	strmi	r3, [r4, #0]
 800c682:	b91e      	cbnz	r6, 800c68c <_printf_i+0x198>
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	f023 0320 	bic.w	r3, r3, #32
 800c68a:	6023      	str	r3, [r4, #0]
 800c68c:	2310      	movs	r3, #16
 800c68e:	e7af      	b.n	800c5f0 <_printf_i+0xfc>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	f043 0320 	orr.w	r3, r3, #32
 800c696:	6023      	str	r3, [r4, #0]
 800c698:	2378      	movs	r3, #120	; 0x78
 800c69a:	4828      	ldr	r0, [pc, #160]	; (800c73c <_printf_i+0x248>)
 800c69c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6a0:	e7e3      	b.n	800c66a <_printf_i+0x176>
 800c6a2:	0659      	lsls	r1, r3, #25
 800c6a4:	bf48      	it	mi
 800c6a6:	b2b6      	uxthmi	r6, r6
 800c6a8:	e7e6      	b.n	800c678 <_printf_i+0x184>
 800c6aa:	4615      	mov	r5, r2
 800c6ac:	e7bb      	b.n	800c626 <_printf_i+0x132>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	6826      	ldr	r6, [r4, #0]
 800c6b2:	1d18      	adds	r0, r3, #4
 800c6b4:	6961      	ldr	r1, [r4, #20]
 800c6b6:	6028      	str	r0, [r5, #0]
 800c6b8:	0635      	lsls	r5, r6, #24
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	d501      	bpl.n	800c6c2 <_printf_i+0x1ce>
 800c6be:	6019      	str	r1, [r3, #0]
 800c6c0:	e002      	b.n	800c6c8 <_printf_i+0x1d4>
 800c6c2:	0670      	lsls	r0, r6, #25
 800c6c4:	d5fb      	bpl.n	800c6be <_printf_i+0x1ca>
 800c6c6:	8019      	strh	r1, [r3, #0]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	4615      	mov	r5, r2
 800c6cc:	6123      	str	r3, [r4, #16]
 800c6ce:	e7ba      	b.n	800c646 <_printf_i+0x152>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	1d1a      	adds	r2, r3, #4
 800c6d6:	602a      	str	r2, [r5, #0]
 800c6d8:	681d      	ldr	r5, [r3, #0]
 800c6da:	6862      	ldr	r2, [r4, #4]
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f000 ffc1 	bl	800d664 <memchr>
 800c6e2:	b108      	cbz	r0, 800c6e8 <_printf_i+0x1f4>
 800c6e4:	1b40      	subs	r0, r0, r5
 800c6e6:	6060      	str	r0, [r4, #4]
 800c6e8:	6863      	ldr	r3, [r4, #4]
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6f2:	e7a8      	b.n	800c646 <_printf_i+0x152>
 800c6f4:	462a      	mov	r2, r5
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	6923      	ldr	r3, [r4, #16]
 800c6fc:	47d0      	blx	sl
 800c6fe:	3001      	adds	r0, #1
 800c700:	d0ab      	beq.n	800c65a <_printf_i+0x166>
 800c702:	6823      	ldr	r3, [r4, #0]
 800c704:	079b      	lsls	r3, r3, #30
 800c706:	d413      	bmi.n	800c730 <_printf_i+0x23c>
 800c708:	68e0      	ldr	r0, [r4, #12]
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	4298      	cmp	r0, r3
 800c70e:	bfb8      	it	lt
 800c710:	4618      	movlt	r0, r3
 800c712:	e7a4      	b.n	800c65e <_printf_i+0x16a>
 800c714:	2301      	movs	r3, #1
 800c716:	4632      	mov	r2, r6
 800c718:	4649      	mov	r1, r9
 800c71a:	4640      	mov	r0, r8
 800c71c:	47d0      	blx	sl
 800c71e:	3001      	adds	r0, #1
 800c720:	d09b      	beq.n	800c65a <_printf_i+0x166>
 800c722:	3501      	adds	r5, #1
 800c724:	68e3      	ldr	r3, [r4, #12]
 800c726:	9903      	ldr	r1, [sp, #12]
 800c728:	1a5b      	subs	r3, r3, r1
 800c72a:	42ab      	cmp	r3, r5
 800c72c:	dcf2      	bgt.n	800c714 <_printf_i+0x220>
 800c72e:	e7eb      	b.n	800c708 <_printf_i+0x214>
 800c730:	2500      	movs	r5, #0
 800c732:	f104 0619 	add.w	r6, r4, #25
 800c736:	e7f5      	b.n	800c724 <_printf_i+0x230>
 800c738:	080112c6 	.word	0x080112c6
 800c73c:	080112d7 	.word	0x080112d7

0800c740 <_sbrk_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	2300      	movs	r3, #0
 800c744:	4d05      	ldr	r5, [pc, #20]	; (800c75c <_sbrk_r+0x1c>)
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f6 f9dc 	bl	8002b08 <_sbrk>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_sbrk_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_sbrk_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	20001d08 	.word	0x20001d08

0800c760 <sniprintf>:
 800c760:	b40c      	push	{r2, r3}
 800c762:	b530      	push	{r4, r5, lr}
 800c764:	4b17      	ldr	r3, [pc, #92]	; (800c7c4 <sniprintf+0x64>)
 800c766:	1e0c      	subs	r4, r1, #0
 800c768:	681d      	ldr	r5, [r3, #0]
 800c76a:	b09d      	sub	sp, #116	; 0x74
 800c76c:	da08      	bge.n	800c780 <sniprintf+0x20>
 800c76e:	238b      	movs	r3, #139	; 0x8b
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	602b      	str	r3, [r5, #0]
 800c776:	b01d      	add	sp, #116	; 0x74
 800c778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c77c:	b002      	add	sp, #8
 800c77e:	4770      	bx	lr
 800c780:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c784:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c788:	bf0c      	ite	eq
 800c78a:	4623      	moveq	r3, r4
 800c78c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	9307      	str	r3, [sp, #28]
 800c794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c798:	9002      	str	r0, [sp, #8]
 800c79a:	9006      	str	r0, [sp, #24]
 800c79c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	ab21      	add	r3, sp, #132	; 0x84
 800c7a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c7a6:	a902      	add	r1, sp, #8
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	f001 fb67 	bl	800de7c <_svfiprintf_r>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	bfbc      	itt	lt
 800c7b2:	238b      	movlt	r3, #139	; 0x8b
 800c7b4:	602b      	strlt	r3, [r5, #0]
 800c7b6:	2c00      	cmp	r4, #0
 800c7b8:	d0dd      	beq.n	800c776 <sniprintf+0x16>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	9b02      	ldr	r3, [sp, #8]
 800c7be:	701a      	strb	r2, [r3, #0]
 800c7c0:	e7d9      	b.n	800c776 <sniprintf+0x16>
 800c7c2:	bf00      	nop
 800c7c4:	20000028 	.word	0x20000028

0800c7c8 <siprintf>:
 800c7c8:	b40e      	push	{r1, r2, r3}
 800c7ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7ce:	b500      	push	{lr}
 800c7d0:	b09c      	sub	sp, #112	; 0x70
 800c7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800c7d4:	9002      	str	r0, [sp, #8]
 800c7d6:	9006      	str	r0, [sp, #24]
 800c7d8:	9107      	str	r1, [sp, #28]
 800c7da:	9104      	str	r1, [sp, #16]
 800c7dc:	4808      	ldr	r0, [pc, #32]	; (800c800 <siprintf+0x38>)
 800c7de:	4909      	ldr	r1, [pc, #36]	; (800c804 <siprintf+0x3c>)
 800c7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7e4:	9105      	str	r1, [sp, #20]
 800c7e6:	6800      	ldr	r0, [r0, #0]
 800c7e8:	a902      	add	r1, sp, #8
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	f001 fb46 	bl	800de7c <_svfiprintf_r>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	9b02      	ldr	r3, [sp, #8]
 800c7f4:	701a      	strb	r2, [r3, #0]
 800c7f6:	b01c      	add	sp, #112	; 0x70
 800c7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7fc:	b003      	add	sp, #12
 800c7fe:	4770      	bx	lr
 800c800:	20000028 	.word	0x20000028
 800c804:	ffff0208 	.word	0xffff0208

0800c808 <strncmp>:
 800c808:	4603      	mov	r3, r0
 800c80a:	b510      	push	{r4, lr}
 800c80c:	b172      	cbz	r2, 800c82c <strncmp+0x24>
 800c80e:	3901      	subs	r1, #1
 800c810:	1884      	adds	r4, r0, r2
 800c812:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c816:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c81a:	4290      	cmp	r0, r2
 800c81c:	d101      	bne.n	800c822 <strncmp+0x1a>
 800c81e:	42a3      	cmp	r3, r4
 800c820:	d101      	bne.n	800c826 <strncmp+0x1e>
 800c822:	1a80      	subs	r0, r0, r2
 800c824:	bd10      	pop	{r4, pc}
 800c826:	2800      	cmp	r0, #0
 800c828:	d1f3      	bne.n	800c812 <strncmp+0xa>
 800c82a:	e7fa      	b.n	800c822 <strncmp+0x1a>
 800c82c:	4610      	mov	r0, r2
 800c82e:	e7f9      	b.n	800c824 <strncmp+0x1c>

0800c830 <strstr>:
 800c830:	780a      	ldrb	r2, [r1, #0]
 800c832:	b570      	push	{r4, r5, r6, lr}
 800c834:	b96a      	cbnz	r2, 800c852 <strstr+0x22>
 800c836:	bd70      	pop	{r4, r5, r6, pc}
 800c838:	429a      	cmp	r2, r3
 800c83a:	d109      	bne.n	800c850 <strstr+0x20>
 800c83c:	460c      	mov	r4, r1
 800c83e:	4605      	mov	r5, r0
 800c840:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0f6      	beq.n	800c836 <strstr+0x6>
 800c848:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c84c:	429e      	cmp	r6, r3
 800c84e:	d0f7      	beq.n	800c840 <strstr+0x10>
 800c850:	3001      	adds	r0, #1
 800c852:	7803      	ldrb	r3, [r0, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1ef      	bne.n	800c838 <strstr+0x8>
 800c858:	4618      	mov	r0, r3
 800c85a:	e7ec      	b.n	800c836 <strstr+0x6>

0800c85c <_strtol_l.constprop.0>:
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c862:	4680      	mov	r8, r0
 800c864:	d001      	beq.n	800c86a <_strtol_l.constprop.0+0xe>
 800c866:	2b24      	cmp	r3, #36	; 0x24
 800c868:	d906      	bls.n	800c878 <_strtol_l.constprop.0+0x1c>
 800c86a:	f7ff f9dd 	bl	800bc28 <__errno>
 800c86e:	2316      	movs	r3, #22
 800c870:	6003      	str	r3, [r0, #0]
 800c872:	2000      	movs	r0, #0
 800c874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c878:	460d      	mov	r5, r1
 800c87a:	4f35      	ldr	r7, [pc, #212]	; (800c950 <_strtol_l.constprop.0+0xf4>)
 800c87c:	4628      	mov	r0, r5
 800c87e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c882:	5de6      	ldrb	r6, [r4, r7]
 800c884:	f016 0608 	ands.w	r6, r6, #8
 800c888:	d1f8      	bne.n	800c87c <_strtol_l.constprop.0+0x20>
 800c88a:	2c2d      	cmp	r4, #45	; 0x2d
 800c88c:	d12f      	bne.n	800c8ee <_strtol_l.constprop.0+0x92>
 800c88e:	2601      	movs	r6, #1
 800c890:	782c      	ldrb	r4, [r5, #0]
 800c892:	1c85      	adds	r5, r0, #2
 800c894:	2b00      	cmp	r3, #0
 800c896:	d057      	beq.n	800c948 <_strtol_l.constprop.0+0xec>
 800c898:	2b10      	cmp	r3, #16
 800c89a:	d109      	bne.n	800c8b0 <_strtol_l.constprop.0+0x54>
 800c89c:	2c30      	cmp	r4, #48	; 0x30
 800c89e:	d107      	bne.n	800c8b0 <_strtol_l.constprop.0+0x54>
 800c8a0:	7828      	ldrb	r0, [r5, #0]
 800c8a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c8a6:	2858      	cmp	r0, #88	; 0x58
 800c8a8:	d149      	bne.n	800c93e <_strtol_l.constprop.0+0xe2>
 800c8aa:	2310      	movs	r3, #16
 800c8ac:	786c      	ldrb	r4, [r5, #1]
 800c8ae:	3502      	adds	r5, #2
 800c8b0:	2700      	movs	r7, #0
 800c8b2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c8b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c8ba:	fbbe f9f3 	udiv	r9, lr, r3
 800c8be:	4638      	mov	r0, r7
 800c8c0:	fb03 ea19 	mls	sl, r3, r9, lr
 800c8c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c8c8:	f1bc 0f09 	cmp.w	ip, #9
 800c8cc:	d814      	bhi.n	800c8f8 <_strtol_l.constprop.0+0x9c>
 800c8ce:	4664      	mov	r4, ip
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	dd22      	ble.n	800c91a <_strtol_l.constprop.0+0xbe>
 800c8d4:	2f00      	cmp	r7, #0
 800c8d6:	db1d      	blt.n	800c914 <_strtol_l.constprop.0+0xb8>
 800c8d8:	4581      	cmp	r9, r0
 800c8da:	d31b      	bcc.n	800c914 <_strtol_l.constprop.0+0xb8>
 800c8dc:	d101      	bne.n	800c8e2 <_strtol_l.constprop.0+0x86>
 800c8de:	45a2      	cmp	sl, r4
 800c8e0:	db18      	blt.n	800c914 <_strtol_l.constprop.0+0xb8>
 800c8e2:	2701      	movs	r7, #1
 800c8e4:	fb00 4003 	mla	r0, r0, r3, r4
 800c8e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8ec:	e7ea      	b.n	800c8c4 <_strtol_l.constprop.0+0x68>
 800c8ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c8f0:	bf04      	itt	eq
 800c8f2:	782c      	ldrbeq	r4, [r5, #0]
 800c8f4:	1c85      	addeq	r5, r0, #2
 800c8f6:	e7cd      	b.n	800c894 <_strtol_l.constprop.0+0x38>
 800c8f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c8fc:	f1bc 0f19 	cmp.w	ip, #25
 800c900:	d801      	bhi.n	800c906 <_strtol_l.constprop.0+0xaa>
 800c902:	3c37      	subs	r4, #55	; 0x37
 800c904:	e7e4      	b.n	800c8d0 <_strtol_l.constprop.0+0x74>
 800c906:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c90a:	f1bc 0f19 	cmp.w	ip, #25
 800c90e:	d804      	bhi.n	800c91a <_strtol_l.constprop.0+0xbe>
 800c910:	3c57      	subs	r4, #87	; 0x57
 800c912:	e7dd      	b.n	800c8d0 <_strtol_l.constprop.0+0x74>
 800c914:	f04f 37ff 	mov.w	r7, #4294967295
 800c918:	e7e6      	b.n	800c8e8 <_strtol_l.constprop.0+0x8c>
 800c91a:	2f00      	cmp	r7, #0
 800c91c:	da07      	bge.n	800c92e <_strtol_l.constprop.0+0xd2>
 800c91e:	2322      	movs	r3, #34	; 0x22
 800c920:	4670      	mov	r0, lr
 800c922:	f8c8 3000 	str.w	r3, [r8]
 800c926:	2a00      	cmp	r2, #0
 800c928:	d0a4      	beq.n	800c874 <_strtol_l.constprop.0+0x18>
 800c92a:	1e69      	subs	r1, r5, #1
 800c92c:	e005      	b.n	800c93a <_strtol_l.constprop.0+0xde>
 800c92e:	b106      	cbz	r6, 800c932 <_strtol_l.constprop.0+0xd6>
 800c930:	4240      	negs	r0, r0
 800c932:	2a00      	cmp	r2, #0
 800c934:	d09e      	beq.n	800c874 <_strtol_l.constprop.0+0x18>
 800c936:	2f00      	cmp	r7, #0
 800c938:	d1f7      	bne.n	800c92a <_strtol_l.constprop.0+0xce>
 800c93a:	6011      	str	r1, [r2, #0]
 800c93c:	e79a      	b.n	800c874 <_strtol_l.constprop.0+0x18>
 800c93e:	2430      	movs	r4, #48	; 0x30
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1b5      	bne.n	800c8b0 <_strtol_l.constprop.0+0x54>
 800c944:	2308      	movs	r3, #8
 800c946:	e7b3      	b.n	800c8b0 <_strtol_l.constprop.0+0x54>
 800c948:	2c30      	cmp	r4, #48	; 0x30
 800c94a:	d0a9      	beq.n	800c8a0 <_strtol_l.constprop.0+0x44>
 800c94c:	230a      	movs	r3, #10
 800c94e:	e7af      	b.n	800c8b0 <_strtol_l.constprop.0+0x54>
 800c950:	080111ad 	.word	0x080111ad

0800c954 <strtol>:
 800c954:	4613      	mov	r3, r2
 800c956:	460a      	mov	r2, r1
 800c958:	4601      	mov	r1, r0
 800c95a:	4802      	ldr	r0, [pc, #8]	; (800c964 <strtol+0x10>)
 800c95c:	6800      	ldr	r0, [r0, #0]
 800c95e:	f7ff bf7d 	b.w	800c85c <_strtol_l.constprop.0>
 800c962:	bf00      	nop
 800c964:	20000028 	.word	0x20000028

0800c968 <quorem>:
 800c968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	6903      	ldr	r3, [r0, #16]
 800c96e:	690c      	ldr	r4, [r1, #16]
 800c970:	4607      	mov	r7, r0
 800c972:	42a3      	cmp	r3, r4
 800c974:	f2c0 8082 	blt.w	800ca7c <quorem+0x114>
 800c978:	3c01      	subs	r4, #1
 800c97a:	f100 0514 	add.w	r5, r0, #20
 800c97e:	f101 0814 	add.w	r8, r1, #20
 800c982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c98c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c990:	3301      	adds	r3, #1
 800c992:	429a      	cmp	r2, r3
 800c994:	fbb2 f6f3 	udiv	r6, r2, r3
 800c998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c99c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9a0:	d331      	bcc.n	800ca06 <quorem+0x9e>
 800c9a2:	f04f 0e00 	mov.w	lr, #0
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	46ac      	mov	ip, r5
 800c9aa:	46f2      	mov	sl, lr
 800c9ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9b0:	b293      	uxth	r3, r2
 800c9b2:	fb06 e303 	mla	r3, r6, r3, lr
 800c9b6:	0c12      	lsrs	r2, r2, #16
 800c9b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	fb06 e202 	mla	r2, r6, r2, lr
 800c9c2:	ebaa 0303 	sub.w	r3, sl, r3
 800c9c6:	f8dc a000 	ldr.w	sl, [ip]
 800c9ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9ce:	fa1f fa8a 	uxth.w	sl, sl
 800c9d2:	4453      	add	r3, sl
 800c9d4:	f8dc a000 	ldr.w	sl, [ip]
 800c9d8:	b292      	uxth	r2, r2
 800c9da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9e8:	4581      	cmp	r9, r0
 800c9ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9ee:	f84c 3b04 	str.w	r3, [ip], #4
 800c9f2:	d2db      	bcs.n	800c9ac <quorem+0x44>
 800c9f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9f8:	b92b      	cbnz	r3, 800ca06 <quorem+0x9e>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	461a      	mov	r2, r3
 800ca02:	d32f      	bcc.n	800ca64 <quorem+0xfc>
 800ca04:	613c      	str	r4, [r7, #16]
 800ca06:	4638      	mov	r0, r7
 800ca08:	f001 f8c4 	bl	800db94 <__mcmp>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	db25      	blt.n	800ca5c <quorem+0xf4>
 800ca10:	4628      	mov	r0, r5
 800ca12:	f04f 0c00 	mov.w	ip, #0
 800ca16:	3601      	adds	r6, #1
 800ca18:	f858 1b04 	ldr.w	r1, [r8], #4
 800ca1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ca20:	b28b      	uxth	r3, r1
 800ca22:	ebac 0303 	sub.w	r3, ip, r3
 800ca26:	fa1f f28e 	uxth.w	r2, lr
 800ca2a:	4413      	add	r3, r2
 800ca2c:	0c0a      	lsrs	r2, r1, #16
 800ca2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca3c:	45c1      	cmp	r9, r8
 800ca3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca42:	f840 3b04 	str.w	r3, [r0], #4
 800ca46:	d2e7      	bcs.n	800ca18 <quorem+0xb0>
 800ca48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca50:	b922      	cbnz	r2, 800ca5c <quorem+0xf4>
 800ca52:	3b04      	subs	r3, #4
 800ca54:	429d      	cmp	r5, r3
 800ca56:	461a      	mov	r2, r3
 800ca58:	d30a      	bcc.n	800ca70 <quorem+0x108>
 800ca5a:	613c      	str	r4, [r7, #16]
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	b003      	add	sp, #12
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	6812      	ldr	r2, [r2, #0]
 800ca66:	3b04      	subs	r3, #4
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	d1cb      	bne.n	800ca04 <quorem+0x9c>
 800ca6c:	3c01      	subs	r4, #1
 800ca6e:	e7c6      	b.n	800c9fe <quorem+0x96>
 800ca70:	6812      	ldr	r2, [r2, #0]
 800ca72:	3b04      	subs	r3, #4
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	d1f0      	bne.n	800ca5a <quorem+0xf2>
 800ca78:	3c01      	subs	r4, #1
 800ca7a:	e7eb      	b.n	800ca54 <quorem+0xec>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7ee      	b.n	800ca5e <quorem+0xf6>

0800ca80 <_dtoa_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	4616      	mov	r6, r2
 800ca86:	461f      	mov	r7, r3
 800ca88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ca8a:	b099      	sub	sp, #100	; 0x64
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ca92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ca96:	b974      	cbnz	r4, 800cab6 <_dtoa_r+0x36>
 800ca98:	2010      	movs	r0, #16
 800ca9a:	f7ff f8ef 	bl	800bc7c <malloc>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	6268      	str	r0, [r5, #36]	; 0x24
 800caa2:	b920      	cbnz	r0, 800caae <_dtoa_r+0x2e>
 800caa4:	21ea      	movs	r1, #234	; 0xea
 800caa6:	4ba8      	ldr	r3, [pc, #672]	; (800cd48 <_dtoa_r+0x2c8>)
 800caa8:	48a8      	ldr	r0, [pc, #672]	; (800cd4c <_dtoa_r+0x2cc>)
 800caaa:	f001 fae7 	bl	800e07c <__assert_func>
 800caae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cab2:	6004      	str	r4, [r0, #0]
 800cab4:	60c4      	str	r4, [r0, #12]
 800cab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cab8:	6819      	ldr	r1, [r3, #0]
 800caba:	b151      	cbz	r1, 800cad2 <_dtoa_r+0x52>
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	2301      	movs	r3, #1
 800cac0:	4093      	lsls	r3, r2
 800cac2:	604a      	str	r2, [r1, #4]
 800cac4:	608b      	str	r3, [r1, #8]
 800cac6:	4628      	mov	r0, r5
 800cac8:	f000 fe26 	bl	800d718 <_Bfree>
 800cacc:	2200      	movs	r2, #0
 800cace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	1e3b      	subs	r3, r7, #0
 800cad4:	bfaf      	iteee	ge
 800cad6:	2300      	movge	r3, #0
 800cad8:	2201      	movlt	r2, #1
 800cada:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cade:	9305      	strlt	r3, [sp, #20]
 800cae0:	bfa8      	it	ge
 800cae2:	f8c8 3000 	strge.w	r3, [r8]
 800cae6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800caea:	4b99      	ldr	r3, [pc, #612]	; (800cd50 <_dtoa_r+0x2d0>)
 800caec:	bfb8      	it	lt
 800caee:	f8c8 2000 	strlt.w	r2, [r8]
 800caf2:	ea33 0309 	bics.w	r3, r3, r9
 800caf6:	d119      	bne.n	800cb2c <_dtoa_r+0xac>
 800caf8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cafc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb04:	4333      	orrs	r3, r6
 800cb06:	f000 857f 	beq.w	800d608 <_dtoa_r+0xb88>
 800cb0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb0c:	b953      	cbnz	r3, 800cb24 <_dtoa_r+0xa4>
 800cb0e:	4b91      	ldr	r3, [pc, #580]	; (800cd54 <_dtoa_r+0x2d4>)
 800cb10:	e022      	b.n	800cb58 <_dtoa_r+0xd8>
 800cb12:	4b91      	ldr	r3, [pc, #580]	; (800cd58 <_dtoa_r+0x2d8>)
 800cb14:	9303      	str	r3, [sp, #12]
 800cb16:	3308      	adds	r3, #8
 800cb18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	9803      	ldr	r0, [sp, #12]
 800cb1e:	b019      	add	sp, #100	; 0x64
 800cb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb24:	4b8b      	ldr	r3, [pc, #556]	; (800cd54 <_dtoa_r+0x2d4>)
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	3303      	adds	r3, #3
 800cb2a:	e7f5      	b.n	800cb18 <_dtoa_r+0x98>
 800cb2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800cb34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	f7f3 ff3e 	bl	80009bc <__aeabi_dcmpeq>
 800cb40:	4680      	mov	r8, r0
 800cb42:	b158      	cbz	r0, 800cb5c <_dtoa_r+0xdc>
 800cb44:	2301      	movs	r3, #1
 800cb46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 8558 	beq.w	800d602 <_dtoa_r+0xb82>
 800cb52:	4882      	ldr	r0, [pc, #520]	; (800cd5c <_dtoa_r+0x2dc>)
 800cb54:	6018      	str	r0, [r3, #0]
 800cb56:	1e43      	subs	r3, r0, #1
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	e7df      	b.n	800cb1c <_dtoa_r+0x9c>
 800cb5c:	ab16      	add	r3, sp, #88	; 0x58
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	ab17      	add	r3, sp, #92	; 0x5c
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	4628      	mov	r0, r5
 800cb66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cb6a:	f001 f8bb 	bl	800dce4 <__d2b>
 800cb6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cb72:	4683      	mov	fp, r0
 800cb74:	2c00      	cmp	r4, #0
 800cb76:	d07f      	beq.n	800cc78 <_dtoa_r+0x1f8>
 800cb78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cb82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cb8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cb8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cb92:	2200      	movs	r2, #0
 800cb94:	4b72      	ldr	r3, [pc, #456]	; (800cd60 <_dtoa_r+0x2e0>)
 800cb96:	f7f3 faf1 	bl	800017c <__aeabi_dsub>
 800cb9a:	a365      	add	r3, pc, #404	; (adr r3, 800cd30 <_dtoa_r+0x2b0>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fca4 	bl	80004ec <__aeabi_dmul>
 800cba4:	a364      	add	r3, pc, #400	; (adr r3, 800cd38 <_dtoa_r+0x2b8>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fae9 	bl	8000180 <__adddf3>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	460f      	mov	r7, r1
 800cbb4:	f7f3 fc30 	bl	8000418 <__aeabi_i2d>
 800cbb8:	a361      	add	r3, pc, #388	; (adr r3, 800cd40 <_dtoa_r+0x2c0>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fc95 	bl	80004ec <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fad9 	bl	8000180 <__adddf3>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	f7f3 ff3b 	bl	8000a4c <__aeabi_d2iz>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4682      	mov	sl, r0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 fef6 	bl	80009d0 <__aeabi_dcmplt>
 800cbe4:	b148      	cbz	r0, 800cbfa <_dtoa_r+0x17a>
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	f7f3 fc16 	bl	8000418 <__aeabi_i2d>
 800cbec:	4632      	mov	r2, r6
 800cbee:	463b      	mov	r3, r7
 800cbf0:	f7f3 fee4 	bl	80009bc <__aeabi_dcmpeq>
 800cbf4:	b908      	cbnz	r0, 800cbfa <_dtoa_r+0x17a>
 800cbf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbfa:	f1ba 0f16 	cmp.w	sl, #22
 800cbfe:	d858      	bhi.n	800ccb2 <_dtoa_r+0x232>
 800cc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc04:	4b57      	ldr	r3, [pc, #348]	; (800cd64 <_dtoa_r+0x2e4>)
 800cc06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f7f3 fedf 	bl	80009d0 <__aeabi_dcmplt>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d04f      	beq.n	800ccb6 <_dtoa_r+0x236>
 800cc16:	2300      	movs	r3, #0
 800cc18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc20:	1b1c      	subs	r4, r3, r4
 800cc22:	1e63      	subs	r3, r4, #1
 800cc24:	9309      	str	r3, [sp, #36]	; 0x24
 800cc26:	bf49      	itett	mi
 800cc28:	f1c4 0301 	rsbmi	r3, r4, #1
 800cc2c:	2300      	movpl	r3, #0
 800cc2e:	9306      	strmi	r3, [sp, #24]
 800cc30:	2300      	movmi	r3, #0
 800cc32:	bf54      	ite	pl
 800cc34:	9306      	strpl	r3, [sp, #24]
 800cc36:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cc38:	f1ba 0f00 	cmp.w	sl, #0
 800cc3c:	db3d      	blt.n	800ccba <_dtoa_r+0x23a>
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc44:	4453      	add	r3, sl
 800cc46:	9309      	str	r3, [sp, #36]	; 0x24
 800cc48:	2300      	movs	r3, #0
 800cc4a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc4e:	2b09      	cmp	r3, #9
 800cc50:	f200 808c 	bhi.w	800cd6c <_dtoa_r+0x2ec>
 800cc54:	2b05      	cmp	r3, #5
 800cc56:	bfc4      	itt	gt
 800cc58:	3b04      	subgt	r3, #4
 800cc5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800cc5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc5e:	bfc8      	it	gt
 800cc60:	2400      	movgt	r4, #0
 800cc62:	f1a3 0302 	sub.w	r3, r3, #2
 800cc66:	bfd8      	it	le
 800cc68:	2401      	movle	r4, #1
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	f200 808a 	bhi.w	800cd84 <_dtoa_r+0x304>
 800cc70:	e8df f003 	tbb	[pc, r3]
 800cc74:	5b4d4f2d 	.word	0x5b4d4f2d
 800cc78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800cc7c:	441c      	add	r4, r3
 800cc7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	bfc3      	ittte	gt
 800cc86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800cc8e:	fa09 f303 	lslgt.w	r3, r9, r3
 800cc92:	f1c3 0320 	rsble	r3, r3, #32
 800cc96:	bfc6      	itte	gt
 800cc98:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc9c:	4318      	orrgt	r0, r3
 800cc9e:	fa06 f003 	lslle.w	r0, r6, r3
 800cca2:	f7f3 fba9 	bl	80003f8 <__aeabi_ui2d>
 800cca6:	2301      	movs	r3, #1
 800cca8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ccac:	3c01      	subs	r4, #1
 800ccae:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccb0:	e76f      	b.n	800cb92 <_dtoa_r+0x112>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7b2      	b.n	800cc1c <_dtoa_r+0x19c>
 800ccb6:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccb8:	e7b1      	b.n	800cc1e <_dtoa_r+0x19e>
 800ccba:	9b06      	ldr	r3, [sp, #24]
 800ccbc:	eba3 030a 	sub.w	r3, r3, sl
 800ccc0:	9306      	str	r3, [sp, #24]
 800ccc2:	f1ca 0300 	rsb	r3, sl, #0
 800ccc6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc8:	2300      	movs	r3, #0
 800ccca:	930e      	str	r3, [sp, #56]	; 0x38
 800cccc:	e7be      	b.n	800cc4c <_dtoa_r+0x1cc>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	dc58      	bgt.n	800cd8a <_dtoa_r+0x30a>
 800ccd8:	f04f 0901 	mov.w	r9, #1
 800ccdc:	464b      	mov	r3, r9
 800ccde:	f8cd 9020 	str.w	r9, [sp, #32]
 800cce2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800cce6:	2200      	movs	r2, #0
 800cce8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ccea:	6042      	str	r2, [r0, #4]
 800ccec:	2204      	movs	r2, #4
 800ccee:	f102 0614 	add.w	r6, r2, #20
 800ccf2:	429e      	cmp	r6, r3
 800ccf4:	6841      	ldr	r1, [r0, #4]
 800ccf6:	d94e      	bls.n	800cd96 <_dtoa_r+0x316>
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 fccd 	bl	800d698 <_Balloc>
 800ccfe:	9003      	str	r0, [sp, #12]
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d14c      	bne.n	800cd9e <_dtoa_r+0x31e>
 800cd04:	4602      	mov	r2, r0
 800cd06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd0a:	4b17      	ldr	r3, [pc, #92]	; (800cd68 <_dtoa_r+0x2e8>)
 800cd0c:	e6cc      	b.n	800caa8 <_dtoa_r+0x28>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e7de      	b.n	800ccd0 <_dtoa_r+0x250>
 800cd12:	2300      	movs	r3, #0
 800cd14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cd18:	eb0a 0903 	add.w	r9, sl, r3
 800cd1c:	f109 0301 	add.w	r3, r9, #1
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	9308      	str	r3, [sp, #32]
 800cd24:	bfb8      	it	lt
 800cd26:	2301      	movlt	r3, #1
 800cd28:	e7dd      	b.n	800cce6 <_dtoa_r+0x266>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e7f2      	b.n	800cd14 <_dtoa_r+0x294>
 800cd2e:	bf00      	nop
 800cd30:	636f4361 	.word	0x636f4361
 800cd34:	3fd287a7 	.word	0x3fd287a7
 800cd38:	8b60c8b3 	.word	0x8b60c8b3
 800cd3c:	3fc68a28 	.word	0x3fc68a28
 800cd40:	509f79fb 	.word	0x509f79fb
 800cd44:	3fd34413 	.word	0x3fd34413
 800cd48:	080112f5 	.word	0x080112f5
 800cd4c:	0801130c 	.word	0x0801130c
 800cd50:	7ff00000 	.word	0x7ff00000
 800cd54:	080112f1 	.word	0x080112f1
 800cd58:	080112e8 	.word	0x080112e8
 800cd5c:	080112c5 	.word	0x080112c5
 800cd60:	3ff80000 	.word	0x3ff80000
 800cd64:	08011400 	.word	0x08011400
 800cd68:	08011367 	.word	0x08011367
 800cd6c:	2401      	movs	r4, #1
 800cd6e:	2300      	movs	r3, #0
 800cd70:	940b      	str	r4, [sp, #44]	; 0x2c
 800cd72:	9322      	str	r3, [sp, #136]	; 0x88
 800cd74:	f04f 39ff 	mov.w	r9, #4294967295
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2312      	movs	r3, #18
 800cd7c:	f8cd 9020 	str.w	r9, [sp, #32]
 800cd80:	9223      	str	r2, [sp, #140]	; 0x8c
 800cd82:	e7b0      	b.n	800cce6 <_dtoa_r+0x266>
 800cd84:	2301      	movs	r3, #1
 800cd86:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd88:	e7f4      	b.n	800cd74 <_dtoa_r+0x2f4>
 800cd8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800cd8e:	464b      	mov	r3, r9
 800cd90:	f8cd 9020 	str.w	r9, [sp, #32]
 800cd94:	e7a7      	b.n	800cce6 <_dtoa_r+0x266>
 800cd96:	3101      	adds	r1, #1
 800cd98:	6041      	str	r1, [r0, #4]
 800cd9a:	0052      	lsls	r2, r2, #1
 800cd9c:	e7a7      	b.n	800ccee <_dtoa_r+0x26e>
 800cd9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cda0:	9a03      	ldr	r2, [sp, #12]
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	2b0e      	cmp	r3, #14
 800cda8:	f200 80a8 	bhi.w	800cefc <_dtoa_r+0x47c>
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	f000 80a5 	beq.w	800cefc <_dtoa_r+0x47c>
 800cdb2:	f1ba 0f00 	cmp.w	sl, #0
 800cdb6:	dd34      	ble.n	800ce22 <_dtoa_r+0x3a2>
 800cdb8:	4a9a      	ldr	r2, [pc, #616]	; (800d024 <_dtoa_r+0x5a4>)
 800cdba:	f00a 030f 	and.w	r3, sl, #15
 800cdbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cdc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cdca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cdce:	ea4f 142a 	mov.w	r4, sl, asr #4
 800cdd2:	d016      	beq.n	800ce02 <_dtoa_r+0x382>
 800cdd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cdd8:	4b93      	ldr	r3, [pc, #588]	; (800d028 <_dtoa_r+0x5a8>)
 800cdda:	2703      	movs	r7, #3
 800cddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cde0:	f7f3 fcae 	bl	8000740 <__aeabi_ddiv>
 800cde4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cde8:	f004 040f 	and.w	r4, r4, #15
 800cdec:	4e8e      	ldr	r6, [pc, #568]	; (800d028 <_dtoa_r+0x5a8>)
 800cdee:	b954      	cbnz	r4, 800ce06 <_dtoa_r+0x386>
 800cdf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdf8:	f7f3 fca2 	bl	8000740 <__aeabi_ddiv>
 800cdfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce00:	e029      	b.n	800ce56 <_dtoa_r+0x3d6>
 800ce02:	2702      	movs	r7, #2
 800ce04:	e7f2      	b.n	800cdec <_dtoa_r+0x36c>
 800ce06:	07e1      	lsls	r1, r4, #31
 800ce08:	d508      	bpl.n	800ce1c <_dtoa_r+0x39c>
 800ce0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce12:	f7f3 fb6b 	bl	80004ec <__aeabi_dmul>
 800ce16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce1a:	3701      	adds	r7, #1
 800ce1c:	1064      	asrs	r4, r4, #1
 800ce1e:	3608      	adds	r6, #8
 800ce20:	e7e5      	b.n	800cdee <_dtoa_r+0x36e>
 800ce22:	f000 80a5 	beq.w	800cf70 <_dtoa_r+0x4f0>
 800ce26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce2a:	f1ca 0400 	rsb	r4, sl, #0
 800ce2e:	4b7d      	ldr	r3, [pc, #500]	; (800d024 <_dtoa_r+0x5a4>)
 800ce30:	f004 020f 	and.w	r2, r4, #15
 800ce34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3c:	f7f3 fb56 	bl	80004ec <__aeabi_dmul>
 800ce40:	2702      	movs	r7, #2
 800ce42:	2300      	movs	r3, #0
 800ce44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce48:	4e77      	ldr	r6, [pc, #476]	; (800d028 <_dtoa_r+0x5a8>)
 800ce4a:	1124      	asrs	r4, r4, #4
 800ce4c:	2c00      	cmp	r4, #0
 800ce4e:	f040 8084 	bne.w	800cf5a <_dtoa_r+0x4da>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1d2      	bne.n	800cdfc <_dtoa_r+0x37c>
 800ce56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 808b 	beq.w	800cf74 <_dtoa_r+0x4f4>
 800ce5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ce62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ce66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4b6f      	ldr	r3, [pc, #444]	; (800d02c <_dtoa_r+0x5ac>)
 800ce6e:	f7f3 fdaf 	bl	80009d0 <__aeabi_dcmplt>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d07e      	beq.n	800cf74 <_dtoa_r+0x4f4>
 800ce76:	9b08      	ldr	r3, [sp, #32]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d07b      	beq.n	800cf74 <_dtoa_r+0x4f4>
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	dd38      	ble.n	800cef4 <_dtoa_r+0x474>
 800ce82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce86:	2200      	movs	r2, #0
 800ce88:	4b69      	ldr	r3, [pc, #420]	; (800d030 <_dtoa_r+0x5b0>)
 800ce8a:	f7f3 fb2f 	bl	80004ec <__aeabi_dmul>
 800ce8e:	464c      	mov	r4, r9
 800ce90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce94:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ce98:	3701      	adds	r7, #1
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	f7f3 fabc 	bl	8000418 <__aeabi_i2d>
 800cea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cea4:	f7f3 fb22 	bl	80004ec <__aeabi_dmul>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	4b62      	ldr	r3, [pc, #392]	; (800d034 <_dtoa_r+0x5b4>)
 800ceac:	f7f3 f968 	bl	8000180 <__adddf3>
 800ceb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ceb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ceb8:	9611      	str	r6, [sp, #68]	; 0x44
 800ceba:	2c00      	cmp	r4, #0
 800cebc:	d15d      	bne.n	800cf7a <_dtoa_r+0x4fa>
 800cebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cec2:	2200      	movs	r2, #0
 800cec4:	4b5c      	ldr	r3, [pc, #368]	; (800d038 <_dtoa_r+0x5b8>)
 800cec6:	f7f3 f959 	bl	800017c <__aeabi_dsub>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ced2:	4633      	mov	r3, r6
 800ced4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ced6:	f7f3 fd99 	bl	8000a0c <__aeabi_dcmpgt>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	f040 829c 	bne.w	800d418 <_dtoa_r+0x998>
 800cee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cee6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ceea:	f7f3 fd71 	bl	80009d0 <__aeabi_dcmplt>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	f040 8290 	bne.w	800d414 <_dtoa_r+0x994>
 800cef4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cef8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cefc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f2c0 8152 	blt.w	800d1a8 <_dtoa_r+0x728>
 800cf04:	f1ba 0f0e 	cmp.w	sl, #14
 800cf08:	f300 814e 	bgt.w	800d1a8 <_dtoa_r+0x728>
 800cf0c:	4b45      	ldr	r3, [pc, #276]	; (800d024 <_dtoa_r+0x5a4>)
 800cf0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cf1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f280 80db 	bge.w	800d0d8 <_dtoa_r+0x658>
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f300 80d7 	bgt.w	800d0d8 <_dtoa_r+0x658>
 800cf2a:	f040 8272 	bne.w	800d412 <_dtoa_r+0x992>
 800cf2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf32:	2200      	movs	r2, #0
 800cf34:	4b40      	ldr	r3, [pc, #256]	; (800d038 <_dtoa_r+0x5b8>)
 800cf36:	f7f3 fad9 	bl	80004ec <__aeabi_dmul>
 800cf3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf3e:	f7f3 fd5b 	bl	80009f8 <__aeabi_dcmpge>
 800cf42:	9c08      	ldr	r4, [sp, #32]
 800cf44:	4626      	mov	r6, r4
 800cf46:	2800      	cmp	r0, #0
 800cf48:	f040 8248 	bne.w	800d3dc <_dtoa_r+0x95c>
 800cf4c:	2331      	movs	r3, #49	; 0x31
 800cf4e:	9f03      	ldr	r7, [sp, #12]
 800cf50:	f10a 0a01 	add.w	sl, sl, #1
 800cf54:	f807 3b01 	strb.w	r3, [r7], #1
 800cf58:	e244      	b.n	800d3e4 <_dtoa_r+0x964>
 800cf5a:	07e2      	lsls	r2, r4, #31
 800cf5c:	d505      	bpl.n	800cf6a <_dtoa_r+0x4ea>
 800cf5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf62:	f7f3 fac3 	bl	80004ec <__aeabi_dmul>
 800cf66:	2301      	movs	r3, #1
 800cf68:	3701      	adds	r7, #1
 800cf6a:	1064      	asrs	r4, r4, #1
 800cf6c:	3608      	adds	r6, #8
 800cf6e:	e76d      	b.n	800ce4c <_dtoa_r+0x3cc>
 800cf70:	2702      	movs	r7, #2
 800cf72:	e770      	b.n	800ce56 <_dtoa_r+0x3d6>
 800cf74:	46d0      	mov	r8, sl
 800cf76:	9c08      	ldr	r4, [sp, #32]
 800cf78:	e78f      	b.n	800ce9a <_dtoa_r+0x41a>
 800cf7a:	9903      	ldr	r1, [sp, #12]
 800cf7c:	4b29      	ldr	r3, [pc, #164]	; (800d024 <_dtoa_r+0x5a4>)
 800cf7e:	4421      	add	r1, r4
 800cf80:	9112      	str	r1, [sp, #72]	; 0x48
 800cf82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cf8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf90:	2900      	cmp	r1, #0
 800cf92:	d055      	beq.n	800d040 <_dtoa_r+0x5c0>
 800cf94:	2000      	movs	r0, #0
 800cf96:	4929      	ldr	r1, [pc, #164]	; (800d03c <_dtoa_r+0x5bc>)
 800cf98:	f7f3 fbd2 	bl	8000740 <__aeabi_ddiv>
 800cf9c:	463b      	mov	r3, r7
 800cf9e:	4632      	mov	r2, r6
 800cfa0:	f7f3 f8ec 	bl	800017c <__aeabi_dsub>
 800cfa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cfa8:	9f03      	ldr	r7, [sp, #12]
 800cfaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfae:	f7f3 fd4d 	bl	8000a4c <__aeabi_d2iz>
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	f7f3 fa30 	bl	8000418 <__aeabi_i2d>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfc0:	f7f3 f8dc 	bl	800017c <__aeabi_dsub>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	3430      	adds	r4, #48	; 0x30
 800cfca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfd2:	f807 4b01 	strb.w	r4, [r7], #1
 800cfd6:	f7f3 fcfb 	bl	80009d0 <__aeabi_dcmplt>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d174      	bne.n	800d0c8 <_dtoa_r+0x648>
 800cfde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	4911      	ldr	r1, [pc, #68]	; (800d02c <_dtoa_r+0x5ac>)
 800cfe6:	f7f3 f8c9 	bl	800017c <__aeabi_dsub>
 800cfea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfee:	f7f3 fcef 	bl	80009d0 <__aeabi_dcmplt>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	f040 80b7 	bne.w	800d166 <_dtoa_r+0x6e6>
 800cff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cffa:	429f      	cmp	r7, r3
 800cffc:	f43f af7a 	beq.w	800cef4 <_dtoa_r+0x474>
 800d000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d004:	2200      	movs	r2, #0
 800d006:	4b0a      	ldr	r3, [pc, #40]	; (800d030 <_dtoa_r+0x5b0>)
 800d008:	f7f3 fa70 	bl	80004ec <__aeabi_dmul>
 800d00c:	2200      	movs	r2, #0
 800d00e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d016:	4b06      	ldr	r3, [pc, #24]	; (800d030 <_dtoa_r+0x5b0>)
 800d018:	f7f3 fa68 	bl	80004ec <__aeabi_dmul>
 800d01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d020:	e7c3      	b.n	800cfaa <_dtoa_r+0x52a>
 800d022:	bf00      	nop
 800d024:	08011400 	.word	0x08011400
 800d028:	080113d8 	.word	0x080113d8
 800d02c:	3ff00000 	.word	0x3ff00000
 800d030:	40240000 	.word	0x40240000
 800d034:	401c0000 	.word	0x401c0000
 800d038:	40140000 	.word	0x40140000
 800d03c:	3fe00000 	.word	0x3fe00000
 800d040:	4630      	mov	r0, r6
 800d042:	4639      	mov	r1, r7
 800d044:	f7f3 fa52 	bl	80004ec <__aeabi_dmul>
 800d048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d04a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d04e:	9c03      	ldr	r4, [sp, #12]
 800d050:	9314      	str	r3, [sp, #80]	; 0x50
 800d052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d056:	f7f3 fcf9 	bl	8000a4c <__aeabi_d2iz>
 800d05a:	9015      	str	r0, [sp, #84]	; 0x54
 800d05c:	f7f3 f9dc 	bl	8000418 <__aeabi_i2d>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d068:	f7f3 f888 	bl	800017c <__aeabi_dsub>
 800d06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d06e:	4606      	mov	r6, r0
 800d070:	3330      	adds	r3, #48	; 0x30
 800d072:	f804 3b01 	strb.w	r3, [r4], #1
 800d076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d078:	460f      	mov	r7, r1
 800d07a:	429c      	cmp	r4, r3
 800d07c:	f04f 0200 	mov.w	r2, #0
 800d080:	d124      	bne.n	800d0cc <_dtoa_r+0x64c>
 800d082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d086:	4bb0      	ldr	r3, [pc, #704]	; (800d348 <_dtoa_r+0x8c8>)
 800d088:	f7f3 f87a 	bl	8000180 <__adddf3>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4630      	mov	r0, r6
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 fcba 	bl	8000a0c <__aeabi_dcmpgt>
 800d098:	2800      	cmp	r0, #0
 800d09a:	d163      	bne.n	800d164 <_dtoa_r+0x6e4>
 800d09c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	49a9      	ldr	r1, [pc, #676]	; (800d348 <_dtoa_r+0x8c8>)
 800d0a4:	f7f3 f86a 	bl	800017c <__aeabi_dsub>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	f7f3 fc8e 	bl	80009d0 <__aeabi_dcmplt>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	f43f af1d 	beq.w	800cef4 <_dtoa_r+0x474>
 800d0ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d0bc:	1e7b      	subs	r3, r7, #1
 800d0be:	9314      	str	r3, [sp, #80]	; 0x50
 800d0c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d0c4:	2b30      	cmp	r3, #48	; 0x30
 800d0c6:	d0f8      	beq.n	800d0ba <_dtoa_r+0x63a>
 800d0c8:	46c2      	mov	sl, r8
 800d0ca:	e03b      	b.n	800d144 <_dtoa_r+0x6c4>
 800d0cc:	4b9f      	ldr	r3, [pc, #636]	; (800d34c <_dtoa_r+0x8cc>)
 800d0ce:	f7f3 fa0d 	bl	80004ec <__aeabi_dmul>
 800d0d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0d6:	e7bc      	b.n	800d052 <_dtoa_r+0x5d2>
 800d0d8:	9f03      	ldr	r7, [sp, #12]
 800d0da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d0de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	f7f3 fb2b 	bl	8000740 <__aeabi_ddiv>
 800d0ea:	f7f3 fcaf 	bl	8000a4c <__aeabi_d2iz>
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	f7f3 f992 	bl	8000418 <__aeabi_i2d>
 800d0f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0f8:	f7f3 f9f8 	bl	80004ec <__aeabi_dmul>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	f7f3 f83a 	bl	800017c <__aeabi_dsub>
 800d108:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d10c:	f807 6b01 	strb.w	r6, [r7], #1
 800d110:	9e03      	ldr	r6, [sp, #12]
 800d112:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d116:	1bbe      	subs	r6, r7, r6
 800d118:	45b4      	cmp	ip, r6
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	d136      	bne.n	800d18e <_dtoa_r+0x70e>
 800d120:	f7f3 f82e 	bl	8000180 <__adddf3>
 800d124:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d128:	4680      	mov	r8, r0
 800d12a:	4689      	mov	r9, r1
 800d12c:	f7f3 fc6e 	bl	8000a0c <__aeabi_dcmpgt>
 800d130:	bb58      	cbnz	r0, 800d18a <_dtoa_r+0x70a>
 800d132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 fc3f 	bl	80009bc <__aeabi_dcmpeq>
 800d13e:	b108      	cbz	r0, 800d144 <_dtoa_r+0x6c4>
 800d140:	07e1      	lsls	r1, r4, #31
 800d142:	d422      	bmi.n	800d18a <_dtoa_r+0x70a>
 800d144:	4628      	mov	r0, r5
 800d146:	4659      	mov	r1, fp
 800d148:	f000 fae6 	bl	800d718 <_Bfree>
 800d14c:	2300      	movs	r3, #0
 800d14e:	703b      	strb	r3, [r7, #0]
 800d150:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d152:	f10a 0001 	add.w	r0, sl, #1
 800d156:	6018      	str	r0, [r3, #0]
 800d158:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f43f acde 	beq.w	800cb1c <_dtoa_r+0x9c>
 800d160:	601f      	str	r7, [r3, #0]
 800d162:	e4db      	b.n	800cb1c <_dtoa_r+0x9c>
 800d164:	4627      	mov	r7, r4
 800d166:	463b      	mov	r3, r7
 800d168:	461f      	mov	r7, r3
 800d16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d16e:	2a39      	cmp	r2, #57	; 0x39
 800d170:	d107      	bne.n	800d182 <_dtoa_r+0x702>
 800d172:	9a03      	ldr	r2, [sp, #12]
 800d174:	429a      	cmp	r2, r3
 800d176:	d1f7      	bne.n	800d168 <_dtoa_r+0x6e8>
 800d178:	2230      	movs	r2, #48	; 0x30
 800d17a:	9903      	ldr	r1, [sp, #12]
 800d17c:	f108 0801 	add.w	r8, r8, #1
 800d180:	700a      	strb	r2, [r1, #0]
 800d182:	781a      	ldrb	r2, [r3, #0]
 800d184:	3201      	adds	r2, #1
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	e79e      	b.n	800d0c8 <_dtoa_r+0x648>
 800d18a:	46d0      	mov	r8, sl
 800d18c:	e7eb      	b.n	800d166 <_dtoa_r+0x6e6>
 800d18e:	2200      	movs	r2, #0
 800d190:	4b6e      	ldr	r3, [pc, #440]	; (800d34c <_dtoa_r+0x8cc>)
 800d192:	f7f3 f9ab 	bl	80004ec <__aeabi_dmul>
 800d196:	2200      	movs	r2, #0
 800d198:	2300      	movs	r3, #0
 800d19a:	4680      	mov	r8, r0
 800d19c:	4689      	mov	r9, r1
 800d19e:	f7f3 fc0d 	bl	80009bc <__aeabi_dcmpeq>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d09b      	beq.n	800d0de <_dtoa_r+0x65e>
 800d1a6:	e7cd      	b.n	800d144 <_dtoa_r+0x6c4>
 800d1a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1aa:	2a00      	cmp	r2, #0
 800d1ac:	f000 80d0 	beq.w	800d350 <_dtoa_r+0x8d0>
 800d1b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d1b2:	2a01      	cmp	r2, #1
 800d1b4:	f300 80ae 	bgt.w	800d314 <_dtoa_r+0x894>
 800d1b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	f000 80a6 	beq.w	800d30c <_dtoa_r+0x88c>
 800d1c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d1c6:	9f06      	ldr	r7, [sp, #24]
 800d1c8:	9a06      	ldr	r2, [sp, #24]
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	441a      	add	r2, r3
 800d1ce:	9206      	str	r2, [sp, #24]
 800d1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	441a      	add	r2, r3
 800d1d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1d8:	f000 fb54 	bl	800d884 <__i2b>
 800d1dc:	4606      	mov	r6, r0
 800d1de:	2f00      	cmp	r7, #0
 800d1e0:	dd0c      	ble.n	800d1fc <_dtoa_r+0x77c>
 800d1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dd09      	ble.n	800d1fc <_dtoa_r+0x77c>
 800d1e8:	42bb      	cmp	r3, r7
 800d1ea:	bfa8      	it	ge
 800d1ec:	463b      	movge	r3, r7
 800d1ee:	9a06      	ldr	r2, [sp, #24]
 800d1f0:	1aff      	subs	r7, r7, r3
 800d1f2:	1ad2      	subs	r2, r2, r3
 800d1f4:	9206      	str	r2, [sp, #24]
 800d1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fe:	b1f3      	cbz	r3, 800d23e <_dtoa_r+0x7be>
 800d200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d202:	2b00      	cmp	r3, #0
 800d204:	f000 80a8 	beq.w	800d358 <_dtoa_r+0x8d8>
 800d208:	2c00      	cmp	r4, #0
 800d20a:	dd10      	ble.n	800d22e <_dtoa_r+0x7ae>
 800d20c:	4631      	mov	r1, r6
 800d20e:	4622      	mov	r2, r4
 800d210:	4628      	mov	r0, r5
 800d212:	f000 fbf5 	bl	800da00 <__pow5mult>
 800d216:	465a      	mov	r2, fp
 800d218:	4601      	mov	r1, r0
 800d21a:	4606      	mov	r6, r0
 800d21c:	4628      	mov	r0, r5
 800d21e:	f000 fb47 	bl	800d8b0 <__multiply>
 800d222:	4680      	mov	r8, r0
 800d224:	4659      	mov	r1, fp
 800d226:	4628      	mov	r0, r5
 800d228:	f000 fa76 	bl	800d718 <_Bfree>
 800d22c:	46c3      	mov	fp, r8
 800d22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d230:	1b1a      	subs	r2, r3, r4
 800d232:	d004      	beq.n	800d23e <_dtoa_r+0x7be>
 800d234:	4659      	mov	r1, fp
 800d236:	4628      	mov	r0, r5
 800d238:	f000 fbe2 	bl	800da00 <__pow5mult>
 800d23c:	4683      	mov	fp, r0
 800d23e:	2101      	movs	r1, #1
 800d240:	4628      	mov	r0, r5
 800d242:	f000 fb1f 	bl	800d884 <__i2b>
 800d246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d248:	4604      	mov	r4, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f340 8086 	ble.w	800d35c <_dtoa_r+0x8dc>
 800d250:	461a      	mov	r2, r3
 800d252:	4601      	mov	r1, r0
 800d254:	4628      	mov	r0, r5
 800d256:	f000 fbd3 	bl	800da00 <__pow5mult>
 800d25a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d25c:	4604      	mov	r4, r0
 800d25e:	2b01      	cmp	r3, #1
 800d260:	dd7f      	ble.n	800d362 <_dtoa_r+0x8e2>
 800d262:	f04f 0800 	mov.w	r8, #0
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d26c:	6918      	ldr	r0, [r3, #16]
 800d26e:	f000 fabb 	bl	800d7e8 <__hi0bits>
 800d272:	f1c0 0020 	rsb	r0, r0, #32
 800d276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d278:	4418      	add	r0, r3
 800d27a:	f010 001f 	ands.w	r0, r0, #31
 800d27e:	f000 8092 	beq.w	800d3a6 <_dtoa_r+0x926>
 800d282:	f1c0 0320 	rsb	r3, r0, #32
 800d286:	2b04      	cmp	r3, #4
 800d288:	f340 808a 	ble.w	800d3a0 <_dtoa_r+0x920>
 800d28c:	f1c0 001c 	rsb	r0, r0, #28
 800d290:	9b06      	ldr	r3, [sp, #24]
 800d292:	4407      	add	r7, r0
 800d294:	4403      	add	r3, r0
 800d296:	9306      	str	r3, [sp, #24]
 800d298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d29a:	4403      	add	r3, r0
 800d29c:	9309      	str	r3, [sp, #36]	; 0x24
 800d29e:	9b06      	ldr	r3, [sp, #24]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dd05      	ble.n	800d2b0 <_dtoa_r+0x830>
 800d2a4:	4659      	mov	r1, fp
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f000 fc03 	bl	800dab4 <__lshift>
 800d2ae:	4683      	mov	fp, r0
 800d2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	dd05      	ble.n	800d2c2 <_dtoa_r+0x842>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f000 fbfa 	bl	800dab4 <__lshift>
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d070      	beq.n	800d3aa <_dtoa_r+0x92a>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4658      	mov	r0, fp
 800d2cc:	f000 fc62 	bl	800db94 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	da6a      	bge.n	800d3aa <_dtoa_r+0x92a>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4659      	mov	r1, fp
 800d2d8:	220a      	movs	r2, #10
 800d2da:	4628      	mov	r0, r5
 800d2dc:	f000 fa3e 	bl	800d75c <__multadd>
 800d2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e2:	4683      	mov	fp, r0
 800d2e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8194 	beq.w	800d616 <_dtoa_r+0xb96>
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	220a      	movs	r2, #10
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	f000 fa31 	bl	800d75c <__multadd>
 800d2fa:	f1b9 0f00 	cmp.w	r9, #0
 800d2fe:	4606      	mov	r6, r0
 800d300:	f300 8093 	bgt.w	800d42a <_dtoa_r+0x9aa>
 800d304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d306:	2b02      	cmp	r3, #2
 800d308:	dc57      	bgt.n	800d3ba <_dtoa_r+0x93a>
 800d30a:	e08e      	b.n	800d42a <_dtoa_r+0x9aa>
 800d30c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d30e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d312:	e757      	b.n	800d1c4 <_dtoa_r+0x744>
 800d314:	9b08      	ldr	r3, [sp, #32]
 800d316:	1e5c      	subs	r4, r3, #1
 800d318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d31a:	42a3      	cmp	r3, r4
 800d31c:	bfb7      	itett	lt
 800d31e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d320:	1b1c      	subge	r4, r3, r4
 800d322:	1ae2      	sublt	r2, r4, r3
 800d324:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d326:	bfbe      	ittt	lt
 800d328:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d32a:	189b      	addlt	r3, r3, r2
 800d32c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d32e:	9b08      	ldr	r3, [sp, #32]
 800d330:	bfb8      	it	lt
 800d332:	2400      	movlt	r4, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	bfbb      	ittet	lt
 800d338:	9b06      	ldrlt	r3, [sp, #24]
 800d33a:	9a08      	ldrlt	r2, [sp, #32]
 800d33c:	9f06      	ldrge	r7, [sp, #24]
 800d33e:	1a9f      	sublt	r7, r3, r2
 800d340:	bfac      	ite	ge
 800d342:	9b08      	ldrge	r3, [sp, #32]
 800d344:	2300      	movlt	r3, #0
 800d346:	e73f      	b.n	800d1c8 <_dtoa_r+0x748>
 800d348:	3fe00000 	.word	0x3fe00000
 800d34c:	40240000 	.word	0x40240000
 800d350:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d352:	9f06      	ldr	r7, [sp, #24]
 800d354:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d356:	e742      	b.n	800d1de <_dtoa_r+0x75e>
 800d358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d35a:	e76b      	b.n	800d234 <_dtoa_r+0x7b4>
 800d35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d35e:	2b01      	cmp	r3, #1
 800d360:	dc19      	bgt.n	800d396 <_dtoa_r+0x916>
 800d362:	9b04      	ldr	r3, [sp, #16]
 800d364:	b9bb      	cbnz	r3, 800d396 <_dtoa_r+0x916>
 800d366:	9b05      	ldr	r3, [sp, #20]
 800d368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d36c:	b99b      	cbnz	r3, 800d396 <_dtoa_r+0x916>
 800d36e:	9b05      	ldr	r3, [sp, #20]
 800d370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d374:	0d1b      	lsrs	r3, r3, #20
 800d376:	051b      	lsls	r3, r3, #20
 800d378:	b183      	cbz	r3, 800d39c <_dtoa_r+0x91c>
 800d37a:	f04f 0801 	mov.w	r8, #1
 800d37e:	9b06      	ldr	r3, [sp, #24]
 800d380:	3301      	adds	r3, #1
 800d382:	9306      	str	r3, [sp, #24]
 800d384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d386:	3301      	adds	r3, #1
 800d388:	9309      	str	r3, [sp, #36]	; 0x24
 800d38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f47f af6a 	bne.w	800d266 <_dtoa_r+0x7e6>
 800d392:	2001      	movs	r0, #1
 800d394:	e76f      	b.n	800d276 <_dtoa_r+0x7f6>
 800d396:	f04f 0800 	mov.w	r8, #0
 800d39a:	e7f6      	b.n	800d38a <_dtoa_r+0x90a>
 800d39c:	4698      	mov	r8, r3
 800d39e:	e7f4      	b.n	800d38a <_dtoa_r+0x90a>
 800d3a0:	f43f af7d 	beq.w	800d29e <_dtoa_r+0x81e>
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	301c      	adds	r0, #28
 800d3a8:	e772      	b.n	800d290 <_dtoa_r+0x810>
 800d3aa:	9b08      	ldr	r3, [sp, #32]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dc36      	bgt.n	800d41e <_dtoa_r+0x99e>
 800d3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	dd33      	ble.n	800d41e <_dtoa_r+0x99e>
 800d3b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3ba:	f1b9 0f00 	cmp.w	r9, #0
 800d3be:	d10d      	bne.n	800d3dc <_dtoa_r+0x95c>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	2205      	movs	r2, #5
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	f000 f9c8 	bl	800d75c <__multadd>
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	4658      	mov	r0, fp
 800d3d2:	f000 fbdf 	bl	800db94 <__mcmp>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	f73f adb8 	bgt.w	800cf4c <_dtoa_r+0x4cc>
 800d3dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3de:	9f03      	ldr	r7, [sp, #12]
 800d3e0:	ea6f 0a03 	mvn.w	sl, r3
 800d3e4:	f04f 0800 	mov.w	r8, #0
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f000 f994 	bl	800d718 <_Bfree>
 800d3f0:	2e00      	cmp	r6, #0
 800d3f2:	f43f aea7 	beq.w	800d144 <_dtoa_r+0x6c4>
 800d3f6:	f1b8 0f00 	cmp.w	r8, #0
 800d3fa:	d005      	beq.n	800d408 <_dtoa_r+0x988>
 800d3fc:	45b0      	cmp	r8, r6
 800d3fe:	d003      	beq.n	800d408 <_dtoa_r+0x988>
 800d400:	4641      	mov	r1, r8
 800d402:	4628      	mov	r0, r5
 800d404:	f000 f988 	bl	800d718 <_Bfree>
 800d408:	4631      	mov	r1, r6
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f984 	bl	800d718 <_Bfree>
 800d410:	e698      	b.n	800d144 <_dtoa_r+0x6c4>
 800d412:	2400      	movs	r4, #0
 800d414:	4626      	mov	r6, r4
 800d416:	e7e1      	b.n	800d3dc <_dtoa_r+0x95c>
 800d418:	46c2      	mov	sl, r8
 800d41a:	4626      	mov	r6, r4
 800d41c:	e596      	b.n	800cf4c <_dtoa_r+0x4cc>
 800d41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80fd 	beq.w	800d624 <_dtoa_r+0xba4>
 800d42a:	2f00      	cmp	r7, #0
 800d42c:	dd05      	ble.n	800d43a <_dtoa_r+0x9ba>
 800d42e:	4631      	mov	r1, r6
 800d430:	463a      	mov	r2, r7
 800d432:	4628      	mov	r0, r5
 800d434:	f000 fb3e 	bl	800dab4 <__lshift>
 800d438:	4606      	mov	r6, r0
 800d43a:	f1b8 0f00 	cmp.w	r8, #0
 800d43e:	d05c      	beq.n	800d4fa <_dtoa_r+0xa7a>
 800d440:	4628      	mov	r0, r5
 800d442:	6871      	ldr	r1, [r6, #4]
 800d444:	f000 f928 	bl	800d698 <_Balloc>
 800d448:	4607      	mov	r7, r0
 800d44a:	b928      	cbnz	r0, 800d458 <_dtoa_r+0x9d8>
 800d44c:	4602      	mov	r2, r0
 800d44e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d452:	4b7f      	ldr	r3, [pc, #508]	; (800d650 <_dtoa_r+0xbd0>)
 800d454:	f7ff bb28 	b.w	800caa8 <_dtoa_r+0x28>
 800d458:	6932      	ldr	r2, [r6, #16]
 800d45a:	f106 010c 	add.w	r1, r6, #12
 800d45e:	3202      	adds	r2, #2
 800d460:	0092      	lsls	r2, r2, #2
 800d462:	300c      	adds	r0, #12
 800d464:	f7fe fc1a 	bl	800bc9c <memcpy>
 800d468:	2201      	movs	r2, #1
 800d46a:	4639      	mov	r1, r7
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 fb21 	bl	800dab4 <__lshift>
 800d472:	46b0      	mov	r8, r6
 800d474:	4606      	mov	r6, r0
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	9308      	str	r3, [sp, #32]
 800d47c:	9b03      	ldr	r3, [sp, #12]
 800d47e:	444b      	add	r3, r9
 800d480:	930a      	str	r3, [sp, #40]	; 0x28
 800d482:	9b04      	ldr	r3, [sp, #16]
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	9309      	str	r3, [sp, #36]	; 0x24
 800d48a:	9b08      	ldr	r3, [sp, #32]
 800d48c:	4621      	mov	r1, r4
 800d48e:	3b01      	subs	r3, #1
 800d490:	4658      	mov	r0, fp
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	f7ff fa68 	bl	800c968 <quorem>
 800d498:	4603      	mov	r3, r0
 800d49a:	4641      	mov	r1, r8
 800d49c:	3330      	adds	r3, #48	; 0x30
 800d49e:	9006      	str	r0, [sp, #24]
 800d4a0:	4658      	mov	r0, fp
 800d4a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4a4:	f000 fb76 	bl	800db94 <__mcmp>
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	4681      	mov	r9, r0
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f000 fb8c 	bl	800dbcc <__mdiff>
 800d4b4:	68c2      	ldr	r2, [r0, #12]
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ba:	bb02      	cbnz	r2, 800d4fe <_dtoa_r+0xa7e>
 800d4bc:	4601      	mov	r1, r0
 800d4be:	4658      	mov	r0, fp
 800d4c0:	f000 fb68 	bl	800db94 <__mcmp>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d4d0:	f000 f922 	bl	800d718 <_Bfree>
 800d4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4d8:	9f08      	ldr	r7, [sp, #32]
 800d4da:	ea43 0102 	orr.w	r1, r3, r2
 800d4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e0:	430b      	orrs	r3, r1
 800d4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4e4:	d10d      	bne.n	800d502 <_dtoa_r+0xa82>
 800d4e6:	2b39      	cmp	r3, #57	; 0x39
 800d4e8:	d029      	beq.n	800d53e <_dtoa_r+0xabe>
 800d4ea:	f1b9 0f00 	cmp.w	r9, #0
 800d4ee:	dd01      	ble.n	800d4f4 <_dtoa_r+0xa74>
 800d4f0:	9b06      	ldr	r3, [sp, #24]
 800d4f2:	3331      	adds	r3, #49	; 0x31
 800d4f4:	9a04      	ldr	r2, [sp, #16]
 800d4f6:	7013      	strb	r3, [r2, #0]
 800d4f8:	e776      	b.n	800d3e8 <_dtoa_r+0x968>
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	e7b9      	b.n	800d472 <_dtoa_r+0x9f2>
 800d4fe:	2201      	movs	r2, #1
 800d500:	e7e2      	b.n	800d4c8 <_dtoa_r+0xa48>
 800d502:	f1b9 0f00 	cmp.w	r9, #0
 800d506:	db06      	blt.n	800d516 <_dtoa_r+0xa96>
 800d508:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d50a:	ea41 0909 	orr.w	r9, r1, r9
 800d50e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d510:	ea59 0101 	orrs.w	r1, r9, r1
 800d514:	d120      	bne.n	800d558 <_dtoa_r+0xad8>
 800d516:	2a00      	cmp	r2, #0
 800d518:	ddec      	ble.n	800d4f4 <_dtoa_r+0xa74>
 800d51a:	4659      	mov	r1, fp
 800d51c:	2201      	movs	r2, #1
 800d51e:	4628      	mov	r0, r5
 800d520:	9308      	str	r3, [sp, #32]
 800d522:	f000 fac7 	bl	800dab4 <__lshift>
 800d526:	4621      	mov	r1, r4
 800d528:	4683      	mov	fp, r0
 800d52a:	f000 fb33 	bl	800db94 <__mcmp>
 800d52e:	2800      	cmp	r0, #0
 800d530:	9b08      	ldr	r3, [sp, #32]
 800d532:	dc02      	bgt.n	800d53a <_dtoa_r+0xaba>
 800d534:	d1de      	bne.n	800d4f4 <_dtoa_r+0xa74>
 800d536:	07da      	lsls	r2, r3, #31
 800d538:	d5dc      	bpl.n	800d4f4 <_dtoa_r+0xa74>
 800d53a:	2b39      	cmp	r3, #57	; 0x39
 800d53c:	d1d8      	bne.n	800d4f0 <_dtoa_r+0xa70>
 800d53e:	2339      	movs	r3, #57	; 0x39
 800d540:	9a04      	ldr	r2, [sp, #16]
 800d542:	7013      	strb	r3, [r2, #0]
 800d544:	463b      	mov	r3, r7
 800d546:	461f      	mov	r7, r3
 800d548:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	2a39      	cmp	r2, #57	; 0x39
 800d550:	d050      	beq.n	800d5f4 <_dtoa_r+0xb74>
 800d552:	3201      	adds	r2, #1
 800d554:	701a      	strb	r2, [r3, #0]
 800d556:	e747      	b.n	800d3e8 <_dtoa_r+0x968>
 800d558:	2a00      	cmp	r2, #0
 800d55a:	dd03      	ble.n	800d564 <_dtoa_r+0xae4>
 800d55c:	2b39      	cmp	r3, #57	; 0x39
 800d55e:	d0ee      	beq.n	800d53e <_dtoa_r+0xabe>
 800d560:	3301      	adds	r3, #1
 800d562:	e7c7      	b.n	800d4f4 <_dtoa_r+0xa74>
 800d564:	9a08      	ldr	r2, [sp, #32]
 800d566:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d568:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d56c:	428a      	cmp	r2, r1
 800d56e:	d02a      	beq.n	800d5c6 <_dtoa_r+0xb46>
 800d570:	4659      	mov	r1, fp
 800d572:	2300      	movs	r3, #0
 800d574:	220a      	movs	r2, #10
 800d576:	4628      	mov	r0, r5
 800d578:	f000 f8f0 	bl	800d75c <__multadd>
 800d57c:	45b0      	cmp	r8, r6
 800d57e:	4683      	mov	fp, r0
 800d580:	f04f 0300 	mov.w	r3, #0
 800d584:	f04f 020a 	mov.w	r2, #10
 800d588:	4641      	mov	r1, r8
 800d58a:	4628      	mov	r0, r5
 800d58c:	d107      	bne.n	800d59e <_dtoa_r+0xb1e>
 800d58e:	f000 f8e5 	bl	800d75c <__multadd>
 800d592:	4680      	mov	r8, r0
 800d594:	4606      	mov	r6, r0
 800d596:	9b08      	ldr	r3, [sp, #32]
 800d598:	3301      	adds	r3, #1
 800d59a:	9308      	str	r3, [sp, #32]
 800d59c:	e775      	b.n	800d48a <_dtoa_r+0xa0a>
 800d59e:	f000 f8dd 	bl	800d75c <__multadd>
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	4680      	mov	r8, r0
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	220a      	movs	r2, #10
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f000 f8d6 	bl	800d75c <__multadd>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	e7f0      	b.n	800d596 <_dtoa_r+0xb16>
 800d5b4:	f1b9 0f00 	cmp.w	r9, #0
 800d5b8:	bfcc      	ite	gt
 800d5ba:	464f      	movgt	r7, r9
 800d5bc:	2701      	movle	r7, #1
 800d5be:	f04f 0800 	mov.w	r8, #0
 800d5c2:	9a03      	ldr	r2, [sp, #12]
 800d5c4:	4417      	add	r7, r2
 800d5c6:	4659      	mov	r1, fp
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	9308      	str	r3, [sp, #32]
 800d5ce:	f000 fa71 	bl	800dab4 <__lshift>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4683      	mov	fp, r0
 800d5d6:	f000 fadd 	bl	800db94 <__mcmp>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	dcb2      	bgt.n	800d544 <_dtoa_r+0xac4>
 800d5de:	d102      	bne.n	800d5e6 <_dtoa_r+0xb66>
 800d5e0:	9b08      	ldr	r3, [sp, #32]
 800d5e2:	07db      	lsls	r3, r3, #31
 800d5e4:	d4ae      	bmi.n	800d544 <_dtoa_r+0xac4>
 800d5e6:	463b      	mov	r3, r7
 800d5e8:	461f      	mov	r7, r3
 800d5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ee:	2a30      	cmp	r2, #48	; 0x30
 800d5f0:	d0fa      	beq.n	800d5e8 <_dtoa_r+0xb68>
 800d5f2:	e6f9      	b.n	800d3e8 <_dtoa_r+0x968>
 800d5f4:	9a03      	ldr	r2, [sp, #12]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d1a5      	bne.n	800d546 <_dtoa_r+0xac6>
 800d5fa:	2331      	movs	r3, #49	; 0x31
 800d5fc:	f10a 0a01 	add.w	sl, sl, #1
 800d600:	e779      	b.n	800d4f6 <_dtoa_r+0xa76>
 800d602:	4b14      	ldr	r3, [pc, #80]	; (800d654 <_dtoa_r+0xbd4>)
 800d604:	f7ff baa8 	b.w	800cb58 <_dtoa_r+0xd8>
 800d608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f47f aa81 	bne.w	800cb12 <_dtoa_r+0x92>
 800d610:	4b11      	ldr	r3, [pc, #68]	; (800d658 <_dtoa_r+0xbd8>)
 800d612:	f7ff baa1 	b.w	800cb58 <_dtoa_r+0xd8>
 800d616:	f1b9 0f00 	cmp.w	r9, #0
 800d61a:	dc03      	bgt.n	800d624 <_dtoa_r+0xba4>
 800d61c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d61e:	2b02      	cmp	r3, #2
 800d620:	f73f aecb 	bgt.w	800d3ba <_dtoa_r+0x93a>
 800d624:	9f03      	ldr	r7, [sp, #12]
 800d626:	4621      	mov	r1, r4
 800d628:	4658      	mov	r0, fp
 800d62a:	f7ff f99d 	bl	800c968 <quorem>
 800d62e:	9a03      	ldr	r2, [sp, #12]
 800d630:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d634:	f807 3b01 	strb.w	r3, [r7], #1
 800d638:	1aba      	subs	r2, r7, r2
 800d63a:	4591      	cmp	r9, r2
 800d63c:	ddba      	ble.n	800d5b4 <_dtoa_r+0xb34>
 800d63e:	4659      	mov	r1, fp
 800d640:	2300      	movs	r3, #0
 800d642:	220a      	movs	r2, #10
 800d644:	4628      	mov	r0, r5
 800d646:	f000 f889 	bl	800d75c <__multadd>
 800d64a:	4683      	mov	fp, r0
 800d64c:	e7eb      	b.n	800d626 <_dtoa_r+0xba6>
 800d64e:	bf00      	nop
 800d650:	08011367 	.word	0x08011367
 800d654:	080112c4 	.word	0x080112c4
 800d658:	080112e8 	.word	0x080112e8

0800d65c <_localeconv_r>:
 800d65c:	4800      	ldr	r0, [pc, #0]	; (800d660 <_localeconv_r+0x4>)
 800d65e:	4770      	bx	lr
 800d660:	2000017c 	.word	0x2000017c

0800d664 <memchr>:
 800d664:	4603      	mov	r3, r0
 800d666:	b510      	push	{r4, lr}
 800d668:	b2c9      	uxtb	r1, r1
 800d66a:	4402      	add	r2, r0
 800d66c:	4293      	cmp	r3, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	d101      	bne.n	800d676 <memchr+0x12>
 800d672:	2000      	movs	r0, #0
 800d674:	e003      	b.n	800d67e <memchr+0x1a>
 800d676:	7804      	ldrb	r4, [r0, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	428c      	cmp	r4, r1
 800d67c:	d1f6      	bne.n	800d66c <memchr+0x8>
 800d67e:	bd10      	pop	{r4, pc}

0800d680 <__malloc_lock>:
 800d680:	4801      	ldr	r0, [pc, #4]	; (800d688 <__malloc_lock+0x8>)
 800d682:	f000 bd2c 	b.w	800e0de <__retarget_lock_acquire_recursive>
 800d686:	bf00      	nop
 800d688:	20001d0c 	.word	0x20001d0c

0800d68c <__malloc_unlock>:
 800d68c:	4801      	ldr	r0, [pc, #4]	; (800d694 <__malloc_unlock+0x8>)
 800d68e:	f000 bd27 	b.w	800e0e0 <__retarget_lock_release_recursive>
 800d692:	bf00      	nop
 800d694:	20001d0c 	.word	0x20001d0c

0800d698 <_Balloc>:
 800d698:	b570      	push	{r4, r5, r6, lr}
 800d69a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d69c:	4604      	mov	r4, r0
 800d69e:	460d      	mov	r5, r1
 800d6a0:	b976      	cbnz	r6, 800d6c0 <_Balloc+0x28>
 800d6a2:	2010      	movs	r0, #16
 800d6a4:	f7fe faea 	bl	800bc7c <malloc>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	6260      	str	r0, [r4, #36]	; 0x24
 800d6ac:	b920      	cbnz	r0, 800d6b8 <_Balloc+0x20>
 800d6ae:	2166      	movs	r1, #102	; 0x66
 800d6b0:	4b17      	ldr	r3, [pc, #92]	; (800d710 <_Balloc+0x78>)
 800d6b2:	4818      	ldr	r0, [pc, #96]	; (800d714 <_Balloc+0x7c>)
 800d6b4:	f000 fce2 	bl	800e07c <__assert_func>
 800d6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6bc:	6006      	str	r6, [r0, #0]
 800d6be:	60c6      	str	r6, [r0, #12]
 800d6c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6c2:	68f3      	ldr	r3, [r6, #12]
 800d6c4:	b183      	cbz	r3, 800d6e8 <_Balloc+0x50>
 800d6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6ce:	b9b8      	cbnz	r0, 800d700 <_Balloc+0x68>
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	fa01 f605 	lsl.w	r6, r1, r5
 800d6d6:	1d72      	adds	r2, r6, #5
 800d6d8:	4620      	mov	r0, r4
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	f000 fb5e 	bl	800dd9c <_calloc_r>
 800d6e0:	b160      	cbz	r0, 800d6fc <_Balloc+0x64>
 800d6e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6e6:	e00e      	b.n	800d706 <_Balloc+0x6e>
 800d6e8:	2221      	movs	r2, #33	; 0x21
 800d6ea:	2104      	movs	r1, #4
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 fb55 	bl	800dd9c <_calloc_r>
 800d6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f4:	60f0      	str	r0, [r6, #12]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1e4      	bne.n	800d6c6 <_Balloc+0x2e>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	bd70      	pop	{r4, r5, r6, pc}
 800d700:	6802      	ldr	r2, [r0, #0]
 800d702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d706:	2300      	movs	r3, #0
 800d708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d70c:	e7f7      	b.n	800d6fe <_Balloc+0x66>
 800d70e:	bf00      	nop
 800d710:	080112f5 	.word	0x080112f5
 800d714:	08011378 	.word	0x08011378

0800d718 <_Bfree>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d71c:	4605      	mov	r5, r0
 800d71e:	460c      	mov	r4, r1
 800d720:	b976      	cbnz	r6, 800d740 <_Bfree+0x28>
 800d722:	2010      	movs	r0, #16
 800d724:	f7fe faaa 	bl	800bc7c <malloc>
 800d728:	4602      	mov	r2, r0
 800d72a:	6268      	str	r0, [r5, #36]	; 0x24
 800d72c:	b920      	cbnz	r0, 800d738 <_Bfree+0x20>
 800d72e:	218a      	movs	r1, #138	; 0x8a
 800d730:	4b08      	ldr	r3, [pc, #32]	; (800d754 <_Bfree+0x3c>)
 800d732:	4809      	ldr	r0, [pc, #36]	; (800d758 <_Bfree+0x40>)
 800d734:	f000 fca2 	bl	800e07c <__assert_func>
 800d738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d73c:	6006      	str	r6, [r0, #0]
 800d73e:	60c6      	str	r6, [r0, #12]
 800d740:	b13c      	cbz	r4, 800d752 <_Bfree+0x3a>
 800d742:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d744:	6862      	ldr	r2, [r4, #4]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d74c:	6021      	str	r1, [r4, #0]
 800d74e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	080112f5 	.word	0x080112f5
 800d758:	08011378 	.word	0x08011378

0800d75c <__multadd>:
 800d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d760:	4607      	mov	r7, r0
 800d762:	460c      	mov	r4, r1
 800d764:	461e      	mov	r6, r3
 800d766:	2000      	movs	r0, #0
 800d768:	690d      	ldr	r5, [r1, #16]
 800d76a:	f101 0c14 	add.w	ip, r1, #20
 800d76e:	f8dc 3000 	ldr.w	r3, [ip]
 800d772:	3001      	adds	r0, #1
 800d774:	b299      	uxth	r1, r3
 800d776:	fb02 6101 	mla	r1, r2, r1, r6
 800d77a:	0c1e      	lsrs	r6, r3, #16
 800d77c:	0c0b      	lsrs	r3, r1, #16
 800d77e:	fb02 3306 	mla	r3, r2, r6, r3
 800d782:	b289      	uxth	r1, r1
 800d784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d788:	4285      	cmp	r5, r0
 800d78a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d78e:	f84c 1b04 	str.w	r1, [ip], #4
 800d792:	dcec      	bgt.n	800d76e <__multadd+0x12>
 800d794:	b30e      	cbz	r6, 800d7da <__multadd+0x7e>
 800d796:	68a3      	ldr	r3, [r4, #8]
 800d798:	42ab      	cmp	r3, r5
 800d79a:	dc19      	bgt.n	800d7d0 <__multadd+0x74>
 800d79c:	6861      	ldr	r1, [r4, #4]
 800d79e:	4638      	mov	r0, r7
 800d7a0:	3101      	adds	r1, #1
 800d7a2:	f7ff ff79 	bl	800d698 <_Balloc>
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	b928      	cbnz	r0, 800d7b6 <__multadd+0x5a>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	21b5      	movs	r1, #181	; 0xb5
 800d7ae:	4b0c      	ldr	r3, [pc, #48]	; (800d7e0 <__multadd+0x84>)
 800d7b0:	480c      	ldr	r0, [pc, #48]	; (800d7e4 <__multadd+0x88>)
 800d7b2:	f000 fc63 	bl	800e07c <__assert_func>
 800d7b6:	6922      	ldr	r2, [r4, #16]
 800d7b8:	f104 010c 	add.w	r1, r4, #12
 800d7bc:	3202      	adds	r2, #2
 800d7be:	0092      	lsls	r2, r2, #2
 800d7c0:	300c      	adds	r0, #12
 800d7c2:	f7fe fa6b 	bl	800bc9c <memcpy>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7ff ffa5 	bl	800d718 <_Bfree>
 800d7ce:	4644      	mov	r4, r8
 800d7d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	615e      	str	r6, [r3, #20]
 800d7d8:	6125      	str	r5, [r4, #16]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e0:	08011367 	.word	0x08011367
 800d7e4:	08011378 	.word	0x08011378

0800d7e8 <__hi0bits>:
 800d7e8:	0c02      	lsrs	r2, r0, #16
 800d7ea:	0412      	lsls	r2, r2, #16
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	b9ca      	cbnz	r2, 800d824 <__hi0bits+0x3c>
 800d7f0:	0403      	lsls	r3, r0, #16
 800d7f2:	2010      	movs	r0, #16
 800d7f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d7f8:	bf04      	itt	eq
 800d7fa:	021b      	lsleq	r3, r3, #8
 800d7fc:	3008      	addeq	r0, #8
 800d7fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d802:	bf04      	itt	eq
 800d804:	011b      	lsleq	r3, r3, #4
 800d806:	3004      	addeq	r0, #4
 800d808:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d80c:	bf04      	itt	eq
 800d80e:	009b      	lsleq	r3, r3, #2
 800d810:	3002      	addeq	r0, #2
 800d812:	2b00      	cmp	r3, #0
 800d814:	db05      	blt.n	800d822 <__hi0bits+0x3a>
 800d816:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d81a:	f100 0001 	add.w	r0, r0, #1
 800d81e:	bf08      	it	eq
 800d820:	2020      	moveq	r0, #32
 800d822:	4770      	bx	lr
 800d824:	2000      	movs	r0, #0
 800d826:	e7e5      	b.n	800d7f4 <__hi0bits+0xc>

0800d828 <__lo0bits>:
 800d828:	6803      	ldr	r3, [r0, #0]
 800d82a:	4602      	mov	r2, r0
 800d82c:	f013 0007 	ands.w	r0, r3, #7
 800d830:	d00b      	beq.n	800d84a <__lo0bits+0x22>
 800d832:	07d9      	lsls	r1, r3, #31
 800d834:	d421      	bmi.n	800d87a <__lo0bits+0x52>
 800d836:	0798      	lsls	r0, r3, #30
 800d838:	bf49      	itett	mi
 800d83a:	085b      	lsrmi	r3, r3, #1
 800d83c:	089b      	lsrpl	r3, r3, #2
 800d83e:	2001      	movmi	r0, #1
 800d840:	6013      	strmi	r3, [r2, #0]
 800d842:	bf5c      	itt	pl
 800d844:	2002      	movpl	r0, #2
 800d846:	6013      	strpl	r3, [r2, #0]
 800d848:	4770      	bx	lr
 800d84a:	b299      	uxth	r1, r3
 800d84c:	b909      	cbnz	r1, 800d852 <__lo0bits+0x2a>
 800d84e:	2010      	movs	r0, #16
 800d850:	0c1b      	lsrs	r3, r3, #16
 800d852:	b2d9      	uxtb	r1, r3
 800d854:	b909      	cbnz	r1, 800d85a <__lo0bits+0x32>
 800d856:	3008      	adds	r0, #8
 800d858:	0a1b      	lsrs	r3, r3, #8
 800d85a:	0719      	lsls	r1, r3, #28
 800d85c:	bf04      	itt	eq
 800d85e:	091b      	lsreq	r3, r3, #4
 800d860:	3004      	addeq	r0, #4
 800d862:	0799      	lsls	r1, r3, #30
 800d864:	bf04      	itt	eq
 800d866:	089b      	lsreq	r3, r3, #2
 800d868:	3002      	addeq	r0, #2
 800d86a:	07d9      	lsls	r1, r3, #31
 800d86c:	d403      	bmi.n	800d876 <__lo0bits+0x4e>
 800d86e:	085b      	lsrs	r3, r3, #1
 800d870:	f100 0001 	add.w	r0, r0, #1
 800d874:	d003      	beq.n	800d87e <__lo0bits+0x56>
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	4770      	bx	lr
 800d87a:	2000      	movs	r0, #0
 800d87c:	4770      	bx	lr
 800d87e:	2020      	movs	r0, #32
 800d880:	4770      	bx	lr
	...

0800d884 <__i2b>:
 800d884:	b510      	push	{r4, lr}
 800d886:	460c      	mov	r4, r1
 800d888:	2101      	movs	r1, #1
 800d88a:	f7ff ff05 	bl	800d698 <_Balloc>
 800d88e:	4602      	mov	r2, r0
 800d890:	b928      	cbnz	r0, 800d89e <__i2b+0x1a>
 800d892:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d896:	4b04      	ldr	r3, [pc, #16]	; (800d8a8 <__i2b+0x24>)
 800d898:	4804      	ldr	r0, [pc, #16]	; (800d8ac <__i2b+0x28>)
 800d89a:	f000 fbef 	bl	800e07c <__assert_func>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	6144      	str	r4, [r0, #20]
 800d8a2:	6103      	str	r3, [r0, #16]
 800d8a4:	bd10      	pop	{r4, pc}
 800d8a6:	bf00      	nop
 800d8a8:	08011367 	.word	0x08011367
 800d8ac:	08011378 	.word	0x08011378

0800d8b0 <__multiply>:
 800d8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b4:	4691      	mov	r9, r2
 800d8b6:	690a      	ldr	r2, [r1, #16]
 800d8b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8bc:	460c      	mov	r4, r1
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	bfbe      	ittt	lt
 800d8c2:	460b      	movlt	r3, r1
 800d8c4:	464c      	movlt	r4, r9
 800d8c6:	4699      	movlt	r9, r3
 800d8c8:	6927      	ldr	r7, [r4, #16]
 800d8ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	6861      	ldr	r1, [r4, #4]
 800d8d2:	eb07 060a 	add.w	r6, r7, sl
 800d8d6:	42b3      	cmp	r3, r6
 800d8d8:	b085      	sub	sp, #20
 800d8da:	bfb8      	it	lt
 800d8dc:	3101      	addlt	r1, #1
 800d8de:	f7ff fedb 	bl	800d698 <_Balloc>
 800d8e2:	b930      	cbnz	r0, 800d8f2 <__multiply+0x42>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	f240 115d 	movw	r1, #349	; 0x15d
 800d8ea:	4b43      	ldr	r3, [pc, #268]	; (800d9f8 <__multiply+0x148>)
 800d8ec:	4843      	ldr	r0, [pc, #268]	; (800d9fc <__multiply+0x14c>)
 800d8ee:	f000 fbc5 	bl	800e07c <__assert_func>
 800d8f2:	f100 0514 	add.w	r5, r0, #20
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8fe:	4543      	cmp	r3, r8
 800d900:	d321      	bcc.n	800d946 <__multiply+0x96>
 800d902:	f104 0314 	add.w	r3, r4, #20
 800d906:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d90a:	f109 0314 	add.w	r3, r9, #20
 800d90e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d912:	9202      	str	r2, [sp, #8]
 800d914:	1b3a      	subs	r2, r7, r4
 800d916:	3a15      	subs	r2, #21
 800d918:	f022 0203 	bic.w	r2, r2, #3
 800d91c:	3204      	adds	r2, #4
 800d91e:	f104 0115 	add.w	r1, r4, #21
 800d922:	428f      	cmp	r7, r1
 800d924:	bf38      	it	cc
 800d926:	2204      	movcc	r2, #4
 800d928:	9201      	str	r2, [sp, #4]
 800d92a:	9a02      	ldr	r2, [sp, #8]
 800d92c:	9303      	str	r3, [sp, #12]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d80c      	bhi.n	800d94c <__multiply+0x9c>
 800d932:	2e00      	cmp	r6, #0
 800d934:	dd03      	ble.n	800d93e <__multiply+0x8e>
 800d936:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d059      	beq.n	800d9f2 <__multiply+0x142>
 800d93e:	6106      	str	r6, [r0, #16]
 800d940:	b005      	add	sp, #20
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	f843 2b04 	str.w	r2, [r3], #4
 800d94a:	e7d8      	b.n	800d8fe <__multiply+0x4e>
 800d94c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d950:	f1ba 0f00 	cmp.w	sl, #0
 800d954:	d023      	beq.n	800d99e <__multiply+0xee>
 800d956:	46a9      	mov	r9, r5
 800d958:	f04f 0c00 	mov.w	ip, #0
 800d95c:	f104 0e14 	add.w	lr, r4, #20
 800d960:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d964:	f8d9 1000 	ldr.w	r1, [r9]
 800d968:	fa1f fb82 	uxth.w	fp, r2
 800d96c:	b289      	uxth	r1, r1
 800d96e:	fb0a 110b 	mla	r1, sl, fp, r1
 800d972:	4461      	add	r1, ip
 800d974:	f8d9 c000 	ldr.w	ip, [r9]
 800d978:	0c12      	lsrs	r2, r2, #16
 800d97a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d97e:	fb0a c202 	mla	r2, sl, r2, ip
 800d982:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d986:	b289      	uxth	r1, r1
 800d988:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d98c:	4577      	cmp	r7, lr
 800d98e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d992:	f849 1b04 	str.w	r1, [r9], #4
 800d996:	d8e3      	bhi.n	800d960 <__multiply+0xb0>
 800d998:	9a01      	ldr	r2, [sp, #4]
 800d99a:	f845 c002 	str.w	ip, [r5, r2]
 800d99e:	9a03      	ldr	r2, [sp, #12]
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	d020      	beq.n	800d9ee <__multiply+0x13e>
 800d9ac:	46ae      	mov	lr, r5
 800d9ae:	f04f 0a00 	mov.w	sl, #0
 800d9b2:	6829      	ldr	r1, [r5, #0]
 800d9b4:	f104 0c14 	add.w	ip, r4, #20
 800d9b8:	f8bc b000 	ldrh.w	fp, [ip]
 800d9bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9c0:	b289      	uxth	r1, r1
 800d9c2:	fb09 220b 	mla	r2, r9, fp, r2
 800d9c6:	4492      	add	sl, r2
 800d9c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d9cc:	f84e 1b04 	str.w	r1, [lr], #4
 800d9d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9d4:	f8be 1000 	ldrh.w	r1, [lr]
 800d9d8:	0c12      	lsrs	r2, r2, #16
 800d9da:	fb09 1102 	mla	r1, r9, r2, r1
 800d9de:	4567      	cmp	r7, ip
 800d9e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d9e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9e8:	d8e6      	bhi.n	800d9b8 <__multiply+0x108>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	50a9      	str	r1, [r5, r2]
 800d9ee:	3504      	adds	r5, #4
 800d9f0:	e79b      	b.n	800d92a <__multiply+0x7a>
 800d9f2:	3e01      	subs	r6, #1
 800d9f4:	e79d      	b.n	800d932 <__multiply+0x82>
 800d9f6:	bf00      	nop
 800d9f8:	08011367 	.word	0x08011367
 800d9fc:	08011378 	.word	0x08011378

0800da00 <__pow5mult>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	4615      	mov	r5, r2
 800da06:	f012 0203 	ands.w	r2, r2, #3
 800da0a:	4606      	mov	r6, r0
 800da0c:	460f      	mov	r7, r1
 800da0e:	d007      	beq.n	800da20 <__pow5mult+0x20>
 800da10:	4c25      	ldr	r4, [pc, #148]	; (800daa8 <__pow5mult+0xa8>)
 800da12:	3a01      	subs	r2, #1
 800da14:	2300      	movs	r3, #0
 800da16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da1a:	f7ff fe9f 	bl	800d75c <__multadd>
 800da1e:	4607      	mov	r7, r0
 800da20:	10ad      	asrs	r5, r5, #2
 800da22:	d03d      	beq.n	800daa0 <__pow5mult+0xa0>
 800da24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da26:	b97c      	cbnz	r4, 800da48 <__pow5mult+0x48>
 800da28:	2010      	movs	r0, #16
 800da2a:	f7fe f927 	bl	800bc7c <malloc>
 800da2e:	4602      	mov	r2, r0
 800da30:	6270      	str	r0, [r6, #36]	; 0x24
 800da32:	b928      	cbnz	r0, 800da40 <__pow5mult+0x40>
 800da34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da38:	4b1c      	ldr	r3, [pc, #112]	; (800daac <__pow5mult+0xac>)
 800da3a:	481d      	ldr	r0, [pc, #116]	; (800dab0 <__pow5mult+0xb0>)
 800da3c:	f000 fb1e 	bl	800e07c <__assert_func>
 800da40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da44:	6004      	str	r4, [r0, #0]
 800da46:	60c4      	str	r4, [r0, #12]
 800da48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da50:	b94c      	cbnz	r4, 800da66 <__pow5mult+0x66>
 800da52:	f240 2171 	movw	r1, #625	; 0x271
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff ff14 	bl	800d884 <__i2b>
 800da5c:	2300      	movs	r3, #0
 800da5e:	4604      	mov	r4, r0
 800da60:	f8c8 0008 	str.w	r0, [r8, #8]
 800da64:	6003      	str	r3, [r0, #0]
 800da66:	f04f 0900 	mov.w	r9, #0
 800da6a:	07eb      	lsls	r3, r5, #31
 800da6c:	d50a      	bpl.n	800da84 <__pow5mult+0x84>
 800da6e:	4639      	mov	r1, r7
 800da70:	4622      	mov	r2, r4
 800da72:	4630      	mov	r0, r6
 800da74:	f7ff ff1c 	bl	800d8b0 <__multiply>
 800da78:	4680      	mov	r8, r0
 800da7a:	4639      	mov	r1, r7
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7ff fe4b 	bl	800d718 <_Bfree>
 800da82:	4647      	mov	r7, r8
 800da84:	106d      	asrs	r5, r5, #1
 800da86:	d00b      	beq.n	800daa0 <__pow5mult+0xa0>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	b938      	cbnz	r0, 800da9c <__pow5mult+0x9c>
 800da8c:	4622      	mov	r2, r4
 800da8e:	4621      	mov	r1, r4
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff ff0d 	bl	800d8b0 <__multiply>
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	f8c0 9000 	str.w	r9, [r0]
 800da9c:	4604      	mov	r4, r0
 800da9e:	e7e4      	b.n	800da6a <__pow5mult+0x6a>
 800daa0:	4638      	mov	r0, r7
 800daa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa6:	bf00      	nop
 800daa8:	080114c8 	.word	0x080114c8
 800daac:	080112f5 	.word	0x080112f5
 800dab0:	08011378 	.word	0x08011378

0800dab4 <__lshift>:
 800dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab8:	460c      	mov	r4, r1
 800daba:	4607      	mov	r7, r0
 800dabc:	4691      	mov	r9, r2
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	6849      	ldr	r1, [r1, #4]
 800dac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dac6:	68a3      	ldr	r3, [r4, #8]
 800dac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dacc:	f108 0601 	add.w	r6, r8, #1
 800dad0:	42b3      	cmp	r3, r6
 800dad2:	db0b      	blt.n	800daec <__lshift+0x38>
 800dad4:	4638      	mov	r0, r7
 800dad6:	f7ff fddf 	bl	800d698 <_Balloc>
 800dada:	4605      	mov	r5, r0
 800dadc:	b948      	cbnz	r0, 800daf2 <__lshift+0x3e>
 800dade:	4602      	mov	r2, r0
 800dae0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dae4:	4b29      	ldr	r3, [pc, #164]	; (800db8c <__lshift+0xd8>)
 800dae6:	482a      	ldr	r0, [pc, #168]	; (800db90 <__lshift+0xdc>)
 800dae8:	f000 fac8 	bl	800e07c <__assert_func>
 800daec:	3101      	adds	r1, #1
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	e7ee      	b.n	800dad0 <__lshift+0x1c>
 800daf2:	2300      	movs	r3, #0
 800daf4:	f100 0114 	add.w	r1, r0, #20
 800daf8:	f100 0210 	add.w	r2, r0, #16
 800dafc:	4618      	mov	r0, r3
 800dafe:	4553      	cmp	r3, sl
 800db00:	db37      	blt.n	800db72 <__lshift+0xbe>
 800db02:	6920      	ldr	r0, [r4, #16]
 800db04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db08:	f104 0314 	add.w	r3, r4, #20
 800db0c:	f019 091f 	ands.w	r9, r9, #31
 800db10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db18:	d02f      	beq.n	800db7a <__lshift+0xc6>
 800db1a:	468a      	mov	sl, r1
 800db1c:	f04f 0c00 	mov.w	ip, #0
 800db20:	f1c9 0e20 	rsb	lr, r9, #32
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	fa02 f209 	lsl.w	r2, r2, r9
 800db2a:	ea42 020c 	orr.w	r2, r2, ip
 800db2e:	f84a 2b04 	str.w	r2, [sl], #4
 800db32:	f853 2b04 	ldr.w	r2, [r3], #4
 800db36:	4298      	cmp	r0, r3
 800db38:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db3c:	d8f2      	bhi.n	800db24 <__lshift+0x70>
 800db3e:	1b03      	subs	r3, r0, r4
 800db40:	3b15      	subs	r3, #21
 800db42:	f023 0303 	bic.w	r3, r3, #3
 800db46:	3304      	adds	r3, #4
 800db48:	f104 0215 	add.w	r2, r4, #21
 800db4c:	4290      	cmp	r0, r2
 800db4e:	bf38      	it	cc
 800db50:	2304      	movcc	r3, #4
 800db52:	f841 c003 	str.w	ip, [r1, r3]
 800db56:	f1bc 0f00 	cmp.w	ip, #0
 800db5a:	d001      	beq.n	800db60 <__lshift+0xac>
 800db5c:	f108 0602 	add.w	r6, r8, #2
 800db60:	3e01      	subs	r6, #1
 800db62:	4638      	mov	r0, r7
 800db64:	4621      	mov	r1, r4
 800db66:	612e      	str	r6, [r5, #16]
 800db68:	f7ff fdd6 	bl	800d718 <_Bfree>
 800db6c:	4628      	mov	r0, r5
 800db6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db72:	f842 0f04 	str.w	r0, [r2, #4]!
 800db76:	3301      	adds	r3, #1
 800db78:	e7c1      	b.n	800dafe <__lshift+0x4a>
 800db7a:	3904      	subs	r1, #4
 800db7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db80:	4298      	cmp	r0, r3
 800db82:	f841 2f04 	str.w	r2, [r1, #4]!
 800db86:	d8f9      	bhi.n	800db7c <__lshift+0xc8>
 800db88:	e7ea      	b.n	800db60 <__lshift+0xac>
 800db8a:	bf00      	nop
 800db8c:	08011367 	.word	0x08011367
 800db90:	08011378 	.word	0x08011378

0800db94 <__mcmp>:
 800db94:	4603      	mov	r3, r0
 800db96:	690a      	ldr	r2, [r1, #16]
 800db98:	6900      	ldr	r0, [r0, #16]
 800db9a:	b530      	push	{r4, r5, lr}
 800db9c:	1a80      	subs	r0, r0, r2
 800db9e:	d10d      	bne.n	800dbbc <__mcmp+0x28>
 800dba0:	3314      	adds	r3, #20
 800dba2:	3114      	adds	r1, #20
 800dba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbb4:	4295      	cmp	r5, r2
 800dbb6:	d002      	beq.n	800dbbe <__mcmp+0x2a>
 800dbb8:	d304      	bcc.n	800dbc4 <__mcmp+0x30>
 800dbba:	2001      	movs	r0, #1
 800dbbc:	bd30      	pop	{r4, r5, pc}
 800dbbe:	42a3      	cmp	r3, r4
 800dbc0:	d3f4      	bcc.n	800dbac <__mcmp+0x18>
 800dbc2:	e7fb      	b.n	800dbbc <__mcmp+0x28>
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	e7f8      	b.n	800dbbc <__mcmp+0x28>
	...

0800dbcc <__mdiff>:
 800dbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	4607      	mov	r7, r0
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	4614      	mov	r4, r2
 800dbda:	f7ff ffdb 	bl	800db94 <__mcmp>
 800dbde:	1e06      	subs	r6, r0, #0
 800dbe0:	d111      	bne.n	800dc06 <__mdiff+0x3a>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	f7ff fd57 	bl	800d698 <_Balloc>
 800dbea:	4602      	mov	r2, r0
 800dbec:	b928      	cbnz	r0, 800dbfa <__mdiff+0x2e>
 800dbee:	f240 2132 	movw	r1, #562	; 0x232
 800dbf2:	4b3a      	ldr	r3, [pc, #232]	; (800dcdc <__mdiff+0x110>)
 800dbf4:	483a      	ldr	r0, [pc, #232]	; (800dce0 <__mdiff+0x114>)
 800dbf6:	f000 fa41 	bl	800e07c <__assert_func>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dc00:	4610      	mov	r0, r2
 800dc02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	bfa4      	itt	ge
 800dc08:	4623      	movge	r3, r4
 800dc0a:	462c      	movge	r4, r5
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	6861      	ldr	r1, [r4, #4]
 800dc10:	bfa6      	itte	ge
 800dc12:	461d      	movge	r5, r3
 800dc14:	2600      	movge	r6, #0
 800dc16:	2601      	movlt	r6, #1
 800dc18:	f7ff fd3e 	bl	800d698 <_Balloc>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	b918      	cbnz	r0, 800dc28 <__mdiff+0x5c>
 800dc20:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc24:	4b2d      	ldr	r3, [pc, #180]	; (800dcdc <__mdiff+0x110>)
 800dc26:	e7e5      	b.n	800dbf4 <__mdiff+0x28>
 800dc28:	f102 0814 	add.w	r8, r2, #20
 800dc2c:	46c2      	mov	sl, r8
 800dc2e:	f04f 0c00 	mov.w	ip, #0
 800dc32:	6927      	ldr	r7, [r4, #16]
 800dc34:	60c6      	str	r6, [r0, #12]
 800dc36:	692e      	ldr	r6, [r5, #16]
 800dc38:	f104 0014 	add.w	r0, r4, #20
 800dc3c:	f105 0914 	add.w	r9, r5, #20
 800dc40:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800dc44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc48:	3410      	adds	r4, #16
 800dc4a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800dc4e:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc52:	fa1f f18b 	uxth.w	r1, fp
 800dc56:	448c      	add	ip, r1
 800dc58:	b299      	uxth	r1, r3
 800dc5a:	0c1b      	lsrs	r3, r3, #16
 800dc5c:	ebac 0101 	sub.w	r1, ip, r1
 800dc60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dc68:	b289      	uxth	r1, r1
 800dc6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dc6e:	454e      	cmp	r6, r9
 800dc70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dc74:	f84a 3b04 	str.w	r3, [sl], #4
 800dc78:	d8e7      	bhi.n	800dc4a <__mdiff+0x7e>
 800dc7a:	1b73      	subs	r3, r6, r5
 800dc7c:	3b15      	subs	r3, #21
 800dc7e:	f023 0303 	bic.w	r3, r3, #3
 800dc82:	3515      	adds	r5, #21
 800dc84:	3304      	adds	r3, #4
 800dc86:	42ae      	cmp	r6, r5
 800dc88:	bf38      	it	cc
 800dc8a:	2304      	movcc	r3, #4
 800dc8c:	4418      	add	r0, r3
 800dc8e:	4443      	add	r3, r8
 800dc90:	461e      	mov	r6, r3
 800dc92:	4605      	mov	r5, r0
 800dc94:	4575      	cmp	r5, lr
 800dc96:	d30e      	bcc.n	800dcb6 <__mdiff+0xea>
 800dc98:	f10e 0103 	add.w	r1, lr, #3
 800dc9c:	1a09      	subs	r1, r1, r0
 800dc9e:	f021 0103 	bic.w	r1, r1, #3
 800dca2:	3803      	subs	r0, #3
 800dca4:	4586      	cmp	lr, r0
 800dca6:	bf38      	it	cc
 800dca8:	2100      	movcc	r1, #0
 800dcaa:	4419      	add	r1, r3
 800dcac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dcb0:	b18b      	cbz	r3, 800dcd6 <__mdiff+0x10a>
 800dcb2:	6117      	str	r7, [r2, #16]
 800dcb4:	e7a4      	b.n	800dc00 <__mdiff+0x34>
 800dcb6:	f855 8b04 	ldr.w	r8, [r5], #4
 800dcba:	fa1f f188 	uxth.w	r1, r8
 800dcbe:	4461      	add	r1, ip
 800dcc0:	140c      	asrs	r4, r1, #16
 800dcc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcc6:	b289      	uxth	r1, r1
 800dcc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dccc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800dcd0:	f846 1b04 	str.w	r1, [r6], #4
 800dcd4:	e7de      	b.n	800dc94 <__mdiff+0xc8>
 800dcd6:	3f01      	subs	r7, #1
 800dcd8:	e7e8      	b.n	800dcac <__mdiff+0xe0>
 800dcda:	bf00      	nop
 800dcdc:	08011367 	.word	0x08011367
 800dce0:	08011378 	.word	0x08011378

0800dce4 <__d2b>:
 800dce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dce8:	2101      	movs	r1, #1
 800dcea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800dcee:	4690      	mov	r8, r2
 800dcf0:	461d      	mov	r5, r3
 800dcf2:	f7ff fcd1 	bl	800d698 <_Balloc>
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	b930      	cbnz	r0, 800dd08 <__d2b+0x24>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dd00:	4b24      	ldr	r3, [pc, #144]	; (800dd94 <__d2b+0xb0>)
 800dd02:	4825      	ldr	r0, [pc, #148]	; (800dd98 <__d2b+0xb4>)
 800dd04:	f000 f9ba 	bl	800e07c <__assert_func>
 800dd08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dd0c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dd10:	bb2d      	cbnz	r5, 800dd5e <__d2b+0x7a>
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	f1b8 0300 	subs.w	r3, r8, #0
 800dd18:	d026      	beq.n	800dd68 <__d2b+0x84>
 800dd1a:	4668      	mov	r0, sp
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	f7ff fd83 	bl	800d828 <__lo0bits>
 800dd22:	9900      	ldr	r1, [sp, #0]
 800dd24:	b1f0      	cbz	r0, 800dd64 <__d2b+0x80>
 800dd26:	9a01      	ldr	r2, [sp, #4]
 800dd28:	f1c0 0320 	rsb	r3, r0, #32
 800dd2c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd30:	430b      	orrs	r3, r1
 800dd32:	40c2      	lsrs	r2, r0
 800dd34:	6163      	str	r3, [r4, #20]
 800dd36:	9201      	str	r2, [sp, #4]
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bf14      	ite	ne
 800dd3e:	2102      	movne	r1, #2
 800dd40:	2101      	moveq	r1, #1
 800dd42:	61a3      	str	r3, [r4, #24]
 800dd44:	6121      	str	r1, [r4, #16]
 800dd46:	b1c5      	cbz	r5, 800dd7a <__d2b+0x96>
 800dd48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd4c:	4405      	add	r5, r0
 800dd4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd52:	603d      	str	r5, [r7, #0]
 800dd54:	6030      	str	r0, [r6, #0]
 800dd56:	4620      	mov	r0, r4
 800dd58:	b002      	add	sp, #8
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd62:	e7d6      	b.n	800dd12 <__d2b+0x2e>
 800dd64:	6161      	str	r1, [r4, #20]
 800dd66:	e7e7      	b.n	800dd38 <__d2b+0x54>
 800dd68:	a801      	add	r0, sp, #4
 800dd6a:	f7ff fd5d 	bl	800d828 <__lo0bits>
 800dd6e:	2101      	movs	r1, #1
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	6121      	str	r1, [r4, #16]
 800dd74:	6163      	str	r3, [r4, #20]
 800dd76:	3020      	adds	r0, #32
 800dd78:	e7e5      	b.n	800dd46 <__d2b+0x62>
 800dd7a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800dd7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd82:	6038      	str	r0, [r7, #0]
 800dd84:	6918      	ldr	r0, [r3, #16]
 800dd86:	f7ff fd2f 	bl	800d7e8 <__hi0bits>
 800dd8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800dd8e:	6031      	str	r1, [r6, #0]
 800dd90:	e7e1      	b.n	800dd56 <__d2b+0x72>
 800dd92:	bf00      	nop
 800dd94:	08011367 	.word	0x08011367
 800dd98:	08011378 	.word	0x08011378

0800dd9c <_calloc_r>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	fba1 5402 	umull	r5, r4, r1, r2
 800dda2:	b934      	cbnz	r4, 800ddb2 <_calloc_r+0x16>
 800dda4:	4629      	mov	r1, r5
 800dda6:	f7fd fff7 	bl	800bd98 <_malloc_r>
 800ddaa:	4606      	mov	r6, r0
 800ddac:	b928      	cbnz	r0, 800ddba <_calloc_r+0x1e>
 800ddae:	4630      	mov	r0, r6
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	220c      	movs	r2, #12
 800ddb4:	2600      	movs	r6, #0
 800ddb6:	6002      	str	r2, [r0, #0]
 800ddb8:	e7f9      	b.n	800ddae <_calloc_r+0x12>
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f7fd ff7b 	bl	800bcb8 <memset>
 800ddc2:	e7f4      	b.n	800ddae <_calloc_r+0x12>

0800ddc4 <__ssputs_r>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	688e      	ldr	r6, [r1, #8]
 800ddca:	4682      	mov	sl, r0
 800ddcc:	429e      	cmp	r6, r3
 800ddce:	460c      	mov	r4, r1
 800ddd0:	4690      	mov	r8, r2
 800ddd2:	461f      	mov	r7, r3
 800ddd4:	d838      	bhi.n	800de48 <__ssputs_r+0x84>
 800ddd6:	898a      	ldrh	r2, [r1, #12]
 800ddd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dddc:	d032      	beq.n	800de44 <__ssputs_r+0x80>
 800ddde:	6825      	ldr	r5, [r4, #0]
 800dde0:	6909      	ldr	r1, [r1, #16]
 800dde2:	3301      	adds	r3, #1
 800dde4:	eba5 0901 	sub.w	r9, r5, r1
 800dde8:	6965      	ldr	r5, [r4, #20]
 800ddea:	444b      	add	r3, r9
 800ddec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddf4:	106d      	asrs	r5, r5, #1
 800ddf6:	429d      	cmp	r5, r3
 800ddf8:	bf38      	it	cc
 800ddfa:	461d      	movcc	r5, r3
 800ddfc:	0553      	lsls	r3, r2, #21
 800ddfe:	d531      	bpl.n	800de64 <__ssputs_r+0xa0>
 800de00:	4629      	mov	r1, r5
 800de02:	f7fd ffc9 	bl	800bd98 <_malloc_r>
 800de06:	4606      	mov	r6, r0
 800de08:	b950      	cbnz	r0, 800de20 <__ssputs_r+0x5c>
 800de0a:	230c      	movs	r3, #12
 800de0c:	f04f 30ff 	mov.w	r0, #4294967295
 800de10:	f8ca 3000 	str.w	r3, [sl]
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1a:	81a3      	strh	r3, [r4, #12]
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de20:	464a      	mov	r2, r9
 800de22:	6921      	ldr	r1, [r4, #16]
 800de24:	f7fd ff3a 	bl	800bc9c <memcpy>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de32:	81a3      	strh	r3, [r4, #12]
 800de34:	6126      	str	r6, [r4, #16]
 800de36:	444e      	add	r6, r9
 800de38:	6026      	str	r6, [r4, #0]
 800de3a:	463e      	mov	r6, r7
 800de3c:	6165      	str	r5, [r4, #20]
 800de3e:	eba5 0509 	sub.w	r5, r5, r9
 800de42:	60a5      	str	r5, [r4, #8]
 800de44:	42be      	cmp	r6, r7
 800de46:	d900      	bls.n	800de4a <__ssputs_r+0x86>
 800de48:	463e      	mov	r6, r7
 800de4a:	4632      	mov	r2, r6
 800de4c:	4641      	mov	r1, r8
 800de4e:	6820      	ldr	r0, [r4, #0]
 800de50:	f000 f959 	bl	800e106 <memmove>
 800de54:	68a3      	ldr	r3, [r4, #8]
 800de56:	2000      	movs	r0, #0
 800de58:	1b9b      	subs	r3, r3, r6
 800de5a:	60a3      	str	r3, [r4, #8]
 800de5c:	6823      	ldr	r3, [r4, #0]
 800de5e:	4433      	add	r3, r6
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	e7db      	b.n	800de1c <__ssputs_r+0x58>
 800de64:	462a      	mov	r2, r5
 800de66:	f000 f968 	bl	800e13a <_realloc_r>
 800de6a:	4606      	mov	r6, r0
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d1e1      	bne.n	800de34 <__ssputs_r+0x70>
 800de70:	4650      	mov	r0, sl
 800de72:	6921      	ldr	r1, [r4, #16]
 800de74:	f7fd ff28 	bl	800bcc8 <_free_r>
 800de78:	e7c7      	b.n	800de0a <__ssputs_r+0x46>
	...

0800de7c <_svfiprintf_r>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	4698      	mov	r8, r3
 800de82:	898b      	ldrh	r3, [r1, #12]
 800de84:	4607      	mov	r7, r0
 800de86:	061b      	lsls	r3, r3, #24
 800de88:	460d      	mov	r5, r1
 800de8a:	4614      	mov	r4, r2
 800de8c:	b09d      	sub	sp, #116	; 0x74
 800de8e:	d50e      	bpl.n	800deae <_svfiprintf_r+0x32>
 800de90:	690b      	ldr	r3, [r1, #16]
 800de92:	b963      	cbnz	r3, 800deae <_svfiprintf_r+0x32>
 800de94:	2140      	movs	r1, #64	; 0x40
 800de96:	f7fd ff7f 	bl	800bd98 <_malloc_r>
 800de9a:	6028      	str	r0, [r5, #0]
 800de9c:	6128      	str	r0, [r5, #16]
 800de9e:	b920      	cbnz	r0, 800deaa <_svfiprintf_r+0x2e>
 800dea0:	230c      	movs	r3, #12
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	e0d1      	b.n	800e04e <_svfiprintf_r+0x1d2>
 800deaa:	2340      	movs	r3, #64	; 0x40
 800deac:	616b      	str	r3, [r5, #20]
 800deae:	2300      	movs	r3, #0
 800deb0:	9309      	str	r3, [sp, #36]	; 0x24
 800deb2:	2320      	movs	r3, #32
 800deb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deb8:	2330      	movs	r3, #48	; 0x30
 800deba:	f04f 0901 	mov.w	r9, #1
 800debe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e068 <_svfiprintf_r+0x1ec>
 800dec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800deca:	4623      	mov	r3, r4
 800decc:	469a      	mov	sl, r3
 800dece:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded2:	b10a      	cbz	r2, 800ded8 <_svfiprintf_r+0x5c>
 800ded4:	2a25      	cmp	r2, #37	; 0x25
 800ded6:	d1f9      	bne.n	800decc <_svfiprintf_r+0x50>
 800ded8:	ebba 0b04 	subs.w	fp, sl, r4
 800dedc:	d00b      	beq.n	800def6 <_svfiprintf_r+0x7a>
 800dede:	465b      	mov	r3, fp
 800dee0:	4622      	mov	r2, r4
 800dee2:	4629      	mov	r1, r5
 800dee4:	4638      	mov	r0, r7
 800dee6:	f7ff ff6d 	bl	800ddc4 <__ssputs_r>
 800deea:	3001      	adds	r0, #1
 800deec:	f000 80aa 	beq.w	800e044 <_svfiprintf_r+0x1c8>
 800def0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800def2:	445a      	add	r2, fp
 800def4:	9209      	str	r2, [sp, #36]	; 0x24
 800def6:	f89a 3000 	ldrb.w	r3, [sl]
 800defa:	2b00      	cmp	r3, #0
 800defc:	f000 80a2 	beq.w	800e044 <_svfiprintf_r+0x1c8>
 800df00:	2300      	movs	r3, #0
 800df02:	f04f 32ff 	mov.w	r2, #4294967295
 800df06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df0a:	f10a 0a01 	add.w	sl, sl, #1
 800df0e:	9304      	str	r3, [sp, #16]
 800df10:	9307      	str	r3, [sp, #28]
 800df12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df16:	931a      	str	r3, [sp, #104]	; 0x68
 800df18:	4654      	mov	r4, sl
 800df1a:	2205      	movs	r2, #5
 800df1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df20:	4851      	ldr	r0, [pc, #324]	; (800e068 <_svfiprintf_r+0x1ec>)
 800df22:	f7ff fb9f 	bl	800d664 <memchr>
 800df26:	9a04      	ldr	r2, [sp, #16]
 800df28:	b9d8      	cbnz	r0, 800df62 <_svfiprintf_r+0xe6>
 800df2a:	06d0      	lsls	r0, r2, #27
 800df2c:	bf44      	itt	mi
 800df2e:	2320      	movmi	r3, #32
 800df30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df34:	0711      	lsls	r1, r2, #28
 800df36:	bf44      	itt	mi
 800df38:	232b      	movmi	r3, #43	; 0x2b
 800df3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df3e:	f89a 3000 	ldrb.w	r3, [sl]
 800df42:	2b2a      	cmp	r3, #42	; 0x2a
 800df44:	d015      	beq.n	800df72 <_svfiprintf_r+0xf6>
 800df46:	4654      	mov	r4, sl
 800df48:	2000      	movs	r0, #0
 800df4a:	f04f 0c0a 	mov.w	ip, #10
 800df4e:	9a07      	ldr	r2, [sp, #28]
 800df50:	4621      	mov	r1, r4
 800df52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df56:	3b30      	subs	r3, #48	; 0x30
 800df58:	2b09      	cmp	r3, #9
 800df5a:	d94e      	bls.n	800dffa <_svfiprintf_r+0x17e>
 800df5c:	b1b0      	cbz	r0, 800df8c <_svfiprintf_r+0x110>
 800df5e:	9207      	str	r2, [sp, #28]
 800df60:	e014      	b.n	800df8c <_svfiprintf_r+0x110>
 800df62:	eba0 0308 	sub.w	r3, r0, r8
 800df66:	fa09 f303 	lsl.w	r3, r9, r3
 800df6a:	4313      	orrs	r3, r2
 800df6c:	46a2      	mov	sl, r4
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	e7d2      	b.n	800df18 <_svfiprintf_r+0x9c>
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	1d19      	adds	r1, r3, #4
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	9103      	str	r1, [sp, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	bfbb      	ittet	lt
 800df7e:	425b      	neglt	r3, r3
 800df80:	f042 0202 	orrlt.w	r2, r2, #2
 800df84:	9307      	strge	r3, [sp, #28]
 800df86:	9307      	strlt	r3, [sp, #28]
 800df88:	bfb8      	it	lt
 800df8a:	9204      	strlt	r2, [sp, #16]
 800df8c:	7823      	ldrb	r3, [r4, #0]
 800df8e:	2b2e      	cmp	r3, #46	; 0x2e
 800df90:	d10c      	bne.n	800dfac <_svfiprintf_r+0x130>
 800df92:	7863      	ldrb	r3, [r4, #1]
 800df94:	2b2a      	cmp	r3, #42	; 0x2a
 800df96:	d135      	bne.n	800e004 <_svfiprintf_r+0x188>
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	3402      	adds	r4, #2
 800df9c:	1d1a      	adds	r2, r3, #4
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	9203      	str	r2, [sp, #12]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	bfb8      	it	lt
 800dfa6:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e06c <_svfiprintf_r+0x1f0>
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	7821      	ldrb	r1, [r4, #0]
 800dfb6:	f7ff fb55 	bl	800d664 <memchr>
 800dfba:	b140      	cbz	r0, 800dfce <_svfiprintf_r+0x152>
 800dfbc:	2340      	movs	r3, #64	; 0x40
 800dfbe:	eba0 000a 	sub.w	r0, r0, sl
 800dfc2:	fa03 f000 	lsl.w	r0, r3, r0
 800dfc6:	9b04      	ldr	r3, [sp, #16]
 800dfc8:	3401      	adds	r4, #1
 800dfca:	4303      	orrs	r3, r0
 800dfcc:	9304      	str	r3, [sp, #16]
 800dfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd2:	2206      	movs	r2, #6
 800dfd4:	4826      	ldr	r0, [pc, #152]	; (800e070 <_svfiprintf_r+0x1f4>)
 800dfd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfda:	f7ff fb43 	bl	800d664 <memchr>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d038      	beq.n	800e054 <_svfiprintf_r+0x1d8>
 800dfe2:	4b24      	ldr	r3, [pc, #144]	; (800e074 <_svfiprintf_r+0x1f8>)
 800dfe4:	bb1b      	cbnz	r3, 800e02e <_svfiprintf_r+0x1b2>
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	3307      	adds	r3, #7
 800dfea:	f023 0307 	bic.w	r3, r3, #7
 800dfee:	3308      	adds	r3, #8
 800dff0:	9303      	str	r3, [sp, #12]
 800dff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff4:	4433      	add	r3, r6
 800dff6:	9309      	str	r3, [sp, #36]	; 0x24
 800dff8:	e767      	b.n	800deca <_svfiprintf_r+0x4e>
 800dffa:	460c      	mov	r4, r1
 800dffc:	2001      	movs	r0, #1
 800dffe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e002:	e7a5      	b.n	800df50 <_svfiprintf_r+0xd4>
 800e004:	2300      	movs	r3, #0
 800e006:	f04f 0c0a 	mov.w	ip, #10
 800e00a:	4619      	mov	r1, r3
 800e00c:	3401      	adds	r4, #1
 800e00e:	9305      	str	r3, [sp, #20]
 800e010:	4620      	mov	r0, r4
 800e012:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e016:	3a30      	subs	r2, #48	; 0x30
 800e018:	2a09      	cmp	r2, #9
 800e01a:	d903      	bls.n	800e024 <_svfiprintf_r+0x1a8>
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0c5      	beq.n	800dfac <_svfiprintf_r+0x130>
 800e020:	9105      	str	r1, [sp, #20]
 800e022:	e7c3      	b.n	800dfac <_svfiprintf_r+0x130>
 800e024:	4604      	mov	r4, r0
 800e026:	2301      	movs	r3, #1
 800e028:	fb0c 2101 	mla	r1, ip, r1, r2
 800e02c:	e7f0      	b.n	800e010 <_svfiprintf_r+0x194>
 800e02e:	ab03      	add	r3, sp, #12
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	462a      	mov	r2, r5
 800e034:	4638      	mov	r0, r7
 800e036:	4b10      	ldr	r3, [pc, #64]	; (800e078 <_svfiprintf_r+0x1fc>)
 800e038:	a904      	add	r1, sp, #16
 800e03a:	f7fd ffbf 	bl	800bfbc <_printf_float>
 800e03e:	1c42      	adds	r2, r0, #1
 800e040:	4606      	mov	r6, r0
 800e042:	d1d6      	bne.n	800dff2 <_svfiprintf_r+0x176>
 800e044:	89ab      	ldrh	r3, [r5, #12]
 800e046:	065b      	lsls	r3, r3, #25
 800e048:	f53f af2c 	bmi.w	800dea4 <_svfiprintf_r+0x28>
 800e04c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e04e:	b01d      	add	sp, #116	; 0x74
 800e050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e054:	ab03      	add	r3, sp, #12
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	462a      	mov	r2, r5
 800e05a:	4638      	mov	r0, r7
 800e05c:	4b06      	ldr	r3, [pc, #24]	; (800e078 <_svfiprintf_r+0x1fc>)
 800e05e:	a904      	add	r1, sp, #16
 800e060:	f7fe fa48 	bl	800c4f4 <_printf_i>
 800e064:	e7eb      	b.n	800e03e <_svfiprintf_r+0x1c2>
 800e066:	bf00      	nop
 800e068:	080114d4 	.word	0x080114d4
 800e06c:	080114da 	.word	0x080114da
 800e070:	080114de 	.word	0x080114de
 800e074:	0800bfbd 	.word	0x0800bfbd
 800e078:	0800ddc5 	.word	0x0800ddc5

0800e07c <__assert_func>:
 800e07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07e:	4614      	mov	r4, r2
 800e080:	461a      	mov	r2, r3
 800e082:	4b09      	ldr	r3, [pc, #36]	; (800e0a8 <__assert_func+0x2c>)
 800e084:	4605      	mov	r5, r0
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68d8      	ldr	r0, [r3, #12]
 800e08a:	b14c      	cbz	r4, 800e0a0 <__assert_func+0x24>
 800e08c:	4b07      	ldr	r3, [pc, #28]	; (800e0ac <__assert_func+0x30>)
 800e08e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e092:	9100      	str	r1, [sp, #0]
 800e094:	462b      	mov	r3, r5
 800e096:	4906      	ldr	r1, [pc, #24]	; (800e0b0 <__assert_func+0x34>)
 800e098:	f000 f80e 	bl	800e0b8 <fiprintf>
 800e09c:	f000 faa2 	bl	800e5e4 <abort>
 800e0a0:	4b04      	ldr	r3, [pc, #16]	; (800e0b4 <__assert_func+0x38>)
 800e0a2:	461c      	mov	r4, r3
 800e0a4:	e7f3      	b.n	800e08e <__assert_func+0x12>
 800e0a6:	bf00      	nop
 800e0a8:	20000028 	.word	0x20000028
 800e0ac:	080114e5 	.word	0x080114e5
 800e0b0:	080114f2 	.word	0x080114f2
 800e0b4:	08011520 	.word	0x08011520

0800e0b8 <fiprintf>:
 800e0b8:	b40e      	push	{r1, r2, r3}
 800e0ba:	b503      	push	{r0, r1, lr}
 800e0bc:	4601      	mov	r1, r0
 800e0be:	ab03      	add	r3, sp, #12
 800e0c0:	4805      	ldr	r0, [pc, #20]	; (800e0d8 <fiprintf+0x20>)
 800e0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0c6:	6800      	ldr	r0, [r0, #0]
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	f000 f88d 	bl	800e1e8 <_vfiprintf_r>
 800e0ce:	b002      	add	sp, #8
 800e0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d4:	b003      	add	sp, #12
 800e0d6:	4770      	bx	lr
 800e0d8:	20000028 	.word	0x20000028

0800e0dc <__retarget_lock_init_recursive>:
 800e0dc:	4770      	bx	lr

0800e0de <__retarget_lock_acquire_recursive>:
 800e0de:	4770      	bx	lr

0800e0e0 <__retarget_lock_release_recursive>:
 800e0e0:	4770      	bx	lr

0800e0e2 <__ascii_mbtowc>:
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	b901      	cbnz	r1, 800e0e8 <__ascii_mbtowc+0x6>
 800e0e6:	a901      	add	r1, sp, #4
 800e0e8:	b142      	cbz	r2, 800e0fc <__ascii_mbtowc+0x1a>
 800e0ea:	b14b      	cbz	r3, 800e100 <__ascii_mbtowc+0x1e>
 800e0ec:	7813      	ldrb	r3, [r2, #0]
 800e0ee:	600b      	str	r3, [r1, #0]
 800e0f0:	7812      	ldrb	r2, [r2, #0]
 800e0f2:	1e10      	subs	r0, r2, #0
 800e0f4:	bf18      	it	ne
 800e0f6:	2001      	movne	r0, #1
 800e0f8:	b002      	add	sp, #8
 800e0fa:	4770      	bx	lr
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	e7fb      	b.n	800e0f8 <__ascii_mbtowc+0x16>
 800e100:	f06f 0001 	mvn.w	r0, #1
 800e104:	e7f8      	b.n	800e0f8 <__ascii_mbtowc+0x16>

0800e106 <memmove>:
 800e106:	4288      	cmp	r0, r1
 800e108:	b510      	push	{r4, lr}
 800e10a:	eb01 0402 	add.w	r4, r1, r2
 800e10e:	d902      	bls.n	800e116 <memmove+0x10>
 800e110:	4284      	cmp	r4, r0
 800e112:	4623      	mov	r3, r4
 800e114:	d807      	bhi.n	800e126 <memmove+0x20>
 800e116:	1e43      	subs	r3, r0, #1
 800e118:	42a1      	cmp	r1, r4
 800e11a:	d008      	beq.n	800e12e <memmove+0x28>
 800e11c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e120:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e124:	e7f8      	b.n	800e118 <memmove+0x12>
 800e126:	4601      	mov	r1, r0
 800e128:	4402      	add	r2, r0
 800e12a:	428a      	cmp	r2, r1
 800e12c:	d100      	bne.n	800e130 <memmove+0x2a>
 800e12e:	bd10      	pop	{r4, pc}
 800e130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e134:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e138:	e7f7      	b.n	800e12a <memmove+0x24>

0800e13a <_realloc_r>:
 800e13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13e:	4680      	mov	r8, r0
 800e140:	4614      	mov	r4, r2
 800e142:	460e      	mov	r6, r1
 800e144:	b921      	cbnz	r1, 800e150 <_realloc_r+0x16>
 800e146:	4611      	mov	r1, r2
 800e148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	f7fd be24 	b.w	800bd98 <_malloc_r>
 800e150:	b92a      	cbnz	r2, 800e15e <_realloc_r+0x24>
 800e152:	f7fd fdb9 	bl	800bcc8 <_free_r>
 800e156:	4625      	mov	r5, r4
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15e:	f000 fc61 	bl	800ea24 <_malloc_usable_size_r>
 800e162:	4284      	cmp	r4, r0
 800e164:	4607      	mov	r7, r0
 800e166:	d802      	bhi.n	800e16e <_realloc_r+0x34>
 800e168:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e16c:	d812      	bhi.n	800e194 <_realloc_r+0x5a>
 800e16e:	4621      	mov	r1, r4
 800e170:	4640      	mov	r0, r8
 800e172:	f7fd fe11 	bl	800bd98 <_malloc_r>
 800e176:	4605      	mov	r5, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d0ed      	beq.n	800e158 <_realloc_r+0x1e>
 800e17c:	42bc      	cmp	r4, r7
 800e17e:	4622      	mov	r2, r4
 800e180:	4631      	mov	r1, r6
 800e182:	bf28      	it	cs
 800e184:	463a      	movcs	r2, r7
 800e186:	f7fd fd89 	bl	800bc9c <memcpy>
 800e18a:	4631      	mov	r1, r6
 800e18c:	4640      	mov	r0, r8
 800e18e:	f7fd fd9b 	bl	800bcc8 <_free_r>
 800e192:	e7e1      	b.n	800e158 <_realloc_r+0x1e>
 800e194:	4635      	mov	r5, r6
 800e196:	e7df      	b.n	800e158 <_realloc_r+0x1e>

0800e198 <__sfputc_r>:
 800e198:	6893      	ldr	r3, [r2, #8]
 800e19a:	b410      	push	{r4}
 800e19c:	3b01      	subs	r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	6093      	str	r3, [r2, #8]
 800e1a2:	da07      	bge.n	800e1b4 <__sfputc_r+0x1c>
 800e1a4:	6994      	ldr	r4, [r2, #24]
 800e1a6:	42a3      	cmp	r3, r4
 800e1a8:	db01      	blt.n	800e1ae <__sfputc_r+0x16>
 800e1aa:	290a      	cmp	r1, #10
 800e1ac:	d102      	bne.n	800e1b4 <__sfputc_r+0x1c>
 800e1ae:	bc10      	pop	{r4}
 800e1b0:	f000 b94a 	b.w	800e448 <__swbuf_r>
 800e1b4:	6813      	ldr	r3, [r2, #0]
 800e1b6:	1c58      	adds	r0, r3, #1
 800e1b8:	6010      	str	r0, [r2, #0]
 800e1ba:	7019      	strb	r1, [r3, #0]
 800e1bc:	4608      	mov	r0, r1
 800e1be:	bc10      	pop	{r4}
 800e1c0:	4770      	bx	lr

0800e1c2 <__sfputs_r>:
 800e1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	4614      	mov	r4, r2
 800e1ca:	18d5      	adds	r5, r2, r3
 800e1cc:	42ac      	cmp	r4, r5
 800e1ce:	d101      	bne.n	800e1d4 <__sfputs_r+0x12>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e007      	b.n	800e1e4 <__sfputs_r+0x22>
 800e1d4:	463a      	mov	r2, r7
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1dc:	f7ff ffdc 	bl	800e198 <__sfputc_r>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d1f3      	bne.n	800e1cc <__sfputs_r+0xa>
 800e1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1e8 <_vfiprintf_r>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	4614      	mov	r4, r2
 800e1f0:	4698      	mov	r8, r3
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	b09d      	sub	sp, #116	; 0x74
 800e1f6:	b118      	cbz	r0, 800e200 <_vfiprintf_r+0x18>
 800e1f8:	6983      	ldr	r3, [r0, #24]
 800e1fa:	b90b      	cbnz	r3, 800e200 <_vfiprintf_r+0x18>
 800e1fc:	f000 fb10 	bl	800e820 <__sinit>
 800e200:	4b89      	ldr	r3, [pc, #548]	; (800e428 <_vfiprintf_r+0x240>)
 800e202:	429d      	cmp	r5, r3
 800e204:	d11b      	bne.n	800e23e <_vfiprintf_r+0x56>
 800e206:	6875      	ldr	r5, [r6, #4]
 800e208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e20a:	07d9      	lsls	r1, r3, #31
 800e20c:	d405      	bmi.n	800e21a <_vfiprintf_r+0x32>
 800e20e:	89ab      	ldrh	r3, [r5, #12]
 800e210:	059a      	lsls	r2, r3, #22
 800e212:	d402      	bmi.n	800e21a <_vfiprintf_r+0x32>
 800e214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e216:	f7ff ff62 	bl	800e0de <__retarget_lock_acquire_recursive>
 800e21a:	89ab      	ldrh	r3, [r5, #12]
 800e21c:	071b      	lsls	r3, r3, #28
 800e21e:	d501      	bpl.n	800e224 <_vfiprintf_r+0x3c>
 800e220:	692b      	ldr	r3, [r5, #16]
 800e222:	b9eb      	cbnz	r3, 800e260 <_vfiprintf_r+0x78>
 800e224:	4629      	mov	r1, r5
 800e226:	4630      	mov	r0, r6
 800e228:	f000 f96e 	bl	800e508 <__swsetup_r>
 800e22c:	b1c0      	cbz	r0, 800e260 <_vfiprintf_r+0x78>
 800e22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e230:	07dc      	lsls	r4, r3, #31
 800e232:	d50e      	bpl.n	800e252 <_vfiprintf_r+0x6a>
 800e234:	f04f 30ff 	mov.w	r0, #4294967295
 800e238:	b01d      	add	sp, #116	; 0x74
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	4b7b      	ldr	r3, [pc, #492]	; (800e42c <_vfiprintf_r+0x244>)
 800e240:	429d      	cmp	r5, r3
 800e242:	d101      	bne.n	800e248 <_vfiprintf_r+0x60>
 800e244:	68b5      	ldr	r5, [r6, #8]
 800e246:	e7df      	b.n	800e208 <_vfiprintf_r+0x20>
 800e248:	4b79      	ldr	r3, [pc, #484]	; (800e430 <_vfiprintf_r+0x248>)
 800e24a:	429d      	cmp	r5, r3
 800e24c:	bf08      	it	eq
 800e24e:	68f5      	ldreq	r5, [r6, #12]
 800e250:	e7da      	b.n	800e208 <_vfiprintf_r+0x20>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	0598      	lsls	r0, r3, #22
 800e256:	d4ed      	bmi.n	800e234 <_vfiprintf_r+0x4c>
 800e258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e25a:	f7ff ff41 	bl	800e0e0 <__retarget_lock_release_recursive>
 800e25e:	e7e9      	b.n	800e234 <_vfiprintf_r+0x4c>
 800e260:	2300      	movs	r3, #0
 800e262:	9309      	str	r3, [sp, #36]	; 0x24
 800e264:	2320      	movs	r3, #32
 800e266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e26a:	2330      	movs	r3, #48	; 0x30
 800e26c:	f04f 0901 	mov.w	r9, #1
 800e270:	f8cd 800c 	str.w	r8, [sp, #12]
 800e274:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e434 <_vfiprintf_r+0x24c>
 800e278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e27c:	4623      	mov	r3, r4
 800e27e:	469a      	mov	sl, r3
 800e280:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e284:	b10a      	cbz	r2, 800e28a <_vfiprintf_r+0xa2>
 800e286:	2a25      	cmp	r2, #37	; 0x25
 800e288:	d1f9      	bne.n	800e27e <_vfiprintf_r+0x96>
 800e28a:	ebba 0b04 	subs.w	fp, sl, r4
 800e28e:	d00b      	beq.n	800e2a8 <_vfiprintf_r+0xc0>
 800e290:	465b      	mov	r3, fp
 800e292:	4622      	mov	r2, r4
 800e294:	4629      	mov	r1, r5
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff ff93 	bl	800e1c2 <__sfputs_r>
 800e29c:	3001      	adds	r0, #1
 800e29e:	f000 80aa 	beq.w	800e3f6 <_vfiprintf_r+0x20e>
 800e2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2a4:	445a      	add	r2, fp
 800e2a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 80a2 	beq.w	800e3f6 <_vfiprintf_r+0x20e>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2bc:	f10a 0a01 	add.w	sl, sl, #1
 800e2c0:	9304      	str	r3, [sp, #16]
 800e2c2:	9307      	str	r3, [sp, #28]
 800e2c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e2ca:	4654      	mov	r4, sl
 800e2cc:	2205      	movs	r2, #5
 800e2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d2:	4858      	ldr	r0, [pc, #352]	; (800e434 <_vfiprintf_r+0x24c>)
 800e2d4:	f7ff f9c6 	bl	800d664 <memchr>
 800e2d8:	9a04      	ldr	r2, [sp, #16]
 800e2da:	b9d8      	cbnz	r0, 800e314 <_vfiprintf_r+0x12c>
 800e2dc:	06d1      	lsls	r1, r2, #27
 800e2de:	bf44      	itt	mi
 800e2e0:	2320      	movmi	r3, #32
 800e2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2e6:	0713      	lsls	r3, r2, #28
 800e2e8:	bf44      	itt	mi
 800e2ea:	232b      	movmi	r3, #43	; 0x2b
 800e2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e2f6:	d015      	beq.n	800e324 <_vfiprintf_r+0x13c>
 800e2f8:	4654      	mov	r4, sl
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	f04f 0c0a 	mov.w	ip, #10
 800e300:	9a07      	ldr	r2, [sp, #28]
 800e302:	4621      	mov	r1, r4
 800e304:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e308:	3b30      	subs	r3, #48	; 0x30
 800e30a:	2b09      	cmp	r3, #9
 800e30c:	d94e      	bls.n	800e3ac <_vfiprintf_r+0x1c4>
 800e30e:	b1b0      	cbz	r0, 800e33e <_vfiprintf_r+0x156>
 800e310:	9207      	str	r2, [sp, #28]
 800e312:	e014      	b.n	800e33e <_vfiprintf_r+0x156>
 800e314:	eba0 0308 	sub.w	r3, r0, r8
 800e318:	fa09 f303 	lsl.w	r3, r9, r3
 800e31c:	4313      	orrs	r3, r2
 800e31e:	46a2      	mov	sl, r4
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	e7d2      	b.n	800e2ca <_vfiprintf_r+0xe2>
 800e324:	9b03      	ldr	r3, [sp, #12]
 800e326:	1d19      	adds	r1, r3, #4
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	9103      	str	r1, [sp, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bfbb      	ittet	lt
 800e330:	425b      	neglt	r3, r3
 800e332:	f042 0202 	orrlt.w	r2, r2, #2
 800e336:	9307      	strge	r3, [sp, #28]
 800e338:	9307      	strlt	r3, [sp, #28]
 800e33a:	bfb8      	it	lt
 800e33c:	9204      	strlt	r2, [sp, #16]
 800e33e:	7823      	ldrb	r3, [r4, #0]
 800e340:	2b2e      	cmp	r3, #46	; 0x2e
 800e342:	d10c      	bne.n	800e35e <_vfiprintf_r+0x176>
 800e344:	7863      	ldrb	r3, [r4, #1]
 800e346:	2b2a      	cmp	r3, #42	; 0x2a
 800e348:	d135      	bne.n	800e3b6 <_vfiprintf_r+0x1ce>
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	3402      	adds	r4, #2
 800e34e:	1d1a      	adds	r2, r3, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	9203      	str	r2, [sp, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	bfb8      	it	lt
 800e358:	f04f 33ff 	movlt.w	r3, #4294967295
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e438 <_vfiprintf_r+0x250>
 800e362:	2203      	movs	r2, #3
 800e364:	4650      	mov	r0, sl
 800e366:	7821      	ldrb	r1, [r4, #0]
 800e368:	f7ff f97c 	bl	800d664 <memchr>
 800e36c:	b140      	cbz	r0, 800e380 <_vfiprintf_r+0x198>
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	eba0 000a 	sub.w	r0, r0, sl
 800e374:	fa03 f000 	lsl.w	r0, r3, r0
 800e378:	9b04      	ldr	r3, [sp, #16]
 800e37a:	3401      	adds	r4, #1
 800e37c:	4303      	orrs	r3, r0
 800e37e:	9304      	str	r3, [sp, #16]
 800e380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e384:	2206      	movs	r2, #6
 800e386:	482d      	ldr	r0, [pc, #180]	; (800e43c <_vfiprintf_r+0x254>)
 800e388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e38c:	f7ff f96a 	bl	800d664 <memchr>
 800e390:	2800      	cmp	r0, #0
 800e392:	d03f      	beq.n	800e414 <_vfiprintf_r+0x22c>
 800e394:	4b2a      	ldr	r3, [pc, #168]	; (800e440 <_vfiprintf_r+0x258>)
 800e396:	bb1b      	cbnz	r3, 800e3e0 <_vfiprintf_r+0x1f8>
 800e398:	9b03      	ldr	r3, [sp, #12]
 800e39a:	3307      	adds	r3, #7
 800e39c:	f023 0307 	bic.w	r3, r3, #7
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a6:	443b      	add	r3, r7
 800e3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3aa:	e767      	b.n	800e27c <_vfiprintf_r+0x94>
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3b4:	e7a5      	b.n	800e302 <_vfiprintf_r+0x11a>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f04f 0c0a 	mov.w	ip, #10
 800e3bc:	4619      	mov	r1, r3
 800e3be:	3401      	adds	r4, #1
 800e3c0:	9305      	str	r3, [sp, #20]
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3c8:	3a30      	subs	r2, #48	; 0x30
 800e3ca:	2a09      	cmp	r2, #9
 800e3cc:	d903      	bls.n	800e3d6 <_vfiprintf_r+0x1ee>
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d0c5      	beq.n	800e35e <_vfiprintf_r+0x176>
 800e3d2:	9105      	str	r1, [sp, #20]
 800e3d4:	e7c3      	b.n	800e35e <_vfiprintf_r+0x176>
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	2301      	movs	r3, #1
 800e3da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3de:	e7f0      	b.n	800e3c2 <_vfiprintf_r+0x1da>
 800e3e0:	ab03      	add	r3, sp, #12
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	462a      	mov	r2, r5
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	4b16      	ldr	r3, [pc, #88]	; (800e444 <_vfiprintf_r+0x25c>)
 800e3ea:	a904      	add	r1, sp, #16
 800e3ec:	f7fd fde6 	bl	800bfbc <_printf_float>
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	1c78      	adds	r0, r7, #1
 800e3f4:	d1d6      	bne.n	800e3a4 <_vfiprintf_r+0x1bc>
 800e3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3f8:	07d9      	lsls	r1, r3, #31
 800e3fa:	d405      	bmi.n	800e408 <_vfiprintf_r+0x220>
 800e3fc:	89ab      	ldrh	r3, [r5, #12]
 800e3fe:	059a      	lsls	r2, r3, #22
 800e400:	d402      	bmi.n	800e408 <_vfiprintf_r+0x220>
 800e402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e404:	f7ff fe6c 	bl	800e0e0 <__retarget_lock_release_recursive>
 800e408:	89ab      	ldrh	r3, [r5, #12]
 800e40a:	065b      	lsls	r3, r3, #25
 800e40c:	f53f af12 	bmi.w	800e234 <_vfiprintf_r+0x4c>
 800e410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e412:	e711      	b.n	800e238 <_vfiprintf_r+0x50>
 800e414:	ab03      	add	r3, sp, #12
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	462a      	mov	r2, r5
 800e41a:	4630      	mov	r0, r6
 800e41c:	4b09      	ldr	r3, [pc, #36]	; (800e444 <_vfiprintf_r+0x25c>)
 800e41e:	a904      	add	r1, sp, #16
 800e420:	f7fe f868 	bl	800c4f4 <_printf_i>
 800e424:	e7e4      	b.n	800e3f0 <_vfiprintf_r+0x208>
 800e426:	bf00      	nop
 800e428:	0801154c 	.word	0x0801154c
 800e42c:	0801156c 	.word	0x0801156c
 800e430:	0801152c 	.word	0x0801152c
 800e434:	080114d4 	.word	0x080114d4
 800e438:	080114da 	.word	0x080114da
 800e43c:	080114de 	.word	0x080114de
 800e440:	0800bfbd 	.word	0x0800bfbd
 800e444:	0800e1c3 	.word	0x0800e1c3

0800e448 <__swbuf_r>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	460e      	mov	r6, r1
 800e44c:	4614      	mov	r4, r2
 800e44e:	4605      	mov	r5, r0
 800e450:	b118      	cbz	r0, 800e45a <__swbuf_r+0x12>
 800e452:	6983      	ldr	r3, [r0, #24]
 800e454:	b90b      	cbnz	r3, 800e45a <__swbuf_r+0x12>
 800e456:	f000 f9e3 	bl	800e820 <__sinit>
 800e45a:	4b21      	ldr	r3, [pc, #132]	; (800e4e0 <__swbuf_r+0x98>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	d12b      	bne.n	800e4b8 <__swbuf_r+0x70>
 800e460:	686c      	ldr	r4, [r5, #4]
 800e462:	69a3      	ldr	r3, [r4, #24]
 800e464:	60a3      	str	r3, [r4, #8]
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	071a      	lsls	r2, r3, #28
 800e46a:	d52f      	bpl.n	800e4cc <__swbuf_r+0x84>
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	b36b      	cbz	r3, 800e4cc <__swbuf_r+0x84>
 800e470:	6923      	ldr	r3, [r4, #16]
 800e472:	6820      	ldr	r0, [r4, #0]
 800e474:	b2f6      	uxtb	r6, r6
 800e476:	1ac0      	subs	r0, r0, r3
 800e478:	6963      	ldr	r3, [r4, #20]
 800e47a:	4637      	mov	r7, r6
 800e47c:	4283      	cmp	r3, r0
 800e47e:	dc04      	bgt.n	800e48a <__swbuf_r+0x42>
 800e480:	4621      	mov	r1, r4
 800e482:	4628      	mov	r0, r5
 800e484:	f000 f938 	bl	800e6f8 <_fflush_r>
 800e488:	bb30      	cbnz	r0, 800e4d8 <__swbuf_r+0x90>
 800e48a:	68a3      	ldr	r3, [r4, #8]
 800e48c:	3001      	adds	r0, #1
 800e48e:	3b01      	subs	r3, #1
 800e490:	60a3      	str	r3, [r4, #8]
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	6022      	str	r2, [r4, #0]
 800e498:	701e      	strb	r6, [r3, #0]
 800e49a:	6963      	ldr	r3, [r4, #20]
 800e49c:	4283      	cmp	r3, r0
 800e49e:	d004      	beq.n	800e4aa <__swbuf_r+0x62>
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	07db      	lsls	r3, r3, #31
 800e4a4:	d506      	bpl.n	800e4b4 <__swbuf_r+0x6c>
 800e4a6:	2e0a      	cmp	r6, #10
 800e4a8:	d104      	bne.n	800e4b4 <__swbuf_r+0x6c>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f000 f923 	bl	800e6f8 <_fflush_r>
 800e4b2:	b988      	cbnz	r0, 800e4d8 <__swbuf_r+0x90>
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b8:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <__swbuf_r+0x9c>)
 800e4ba:	429c      	cmp	r4, r3
 800e4bc:	d101      	bne.n	800e4c2 <__swbuf_r+0x7a>
 800e4be:	68ac      	ldr	r4, [r5, #8]
 800e4c0:	e7cf      	b.n	800e462 <__swbuf_r+0x1a>
 800e4c2:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <__swbuf_r+0xa0>)
 800e4c4:	429c      	cmp	r4, r3
 800e4c6:	bf08      	it	eq
 800e4c8:	68ec      	ldreq	r4, [r5, #12]
 800e4ca:	e7ca      	b.n	800e462 <__swbuf_r+0x1a>
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f000 f81a 	bl	800e508 <__swsetup_r>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d0cb      	beq.n	800e470 <__swbuf_r+0x28>
 800e4d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e4dc:	e7ea      	b.n	800e4b4 <__swbuf_r+0x6c>
 800e4de:	bf00      	nop
 800e4e0:	0801154c 	.word	0x0801154c
 800e4e4:	0801156c 	.word	0x0801156c
 800e4e8:	0801152c 	.word	0x0801152c

0800e4ec <__ascii_wctomb>:
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	4608      	mov	r0, r1
 800e4f0:	b141      	cbz	r1, 800e504 <__ascii_wctomb+0x18>
 800e4f2:	2aff      	cmp	r2, #255	; 0xff
 800e4f4:	d904      	bls.n	800e500 <__ascii_wctomb+0x14>
 800e4f6:	228a      	movs	r2, #138	; 0x8a
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	4770      	bx	lr
 800e500:	2001      	movs	r0, #1
 800e502:	700a      	strb	r2, [r1, #0]
 800e504:	4770      	bx	lr
	...

0800e508 <__swsetup_r>:
 800e508:	4b32      	ldr	r3, [pc, #200]	; (800e5d4 <__swsetup_r+0xcc>)
 800e50a:	b570      	push	{r4, r5, r6, lr}
 800e50c:	681d      	ldr	r5, [r3, #0]
 800e50e:	4606      	mov	r6, r0
 800e510:	460c      	mov	r4, r1
 800e512:	b125      	cbz	r5, 800e51e <__swsetup_r+0x16>
 800e514:	69ab      	ldr	r3, [r5, #24]
 800e516:	b913      	cbnz	r3, 800e51e <__swsetup_r+0x16>
 800e518:	4628      	mov	r0, r5
 800e51a:	f000 f981 	bl	800e820 <__sinit>
 800e51e:	4b2e      	ldr	r3, [pc, #184]	; (800e5d8 <__swsetup_r+0xd0>)
 800e520:	429c      	cmp	r4, r3
 800e522:	d10f      	bne.n	800e544 <__swsetup_r+0x3c>
 800e524:	686c      	ldr	r4, [r5, #4]
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e52c:	0719      	lsls	r1, r3, #28
 800e52e:	d42c      	bmi.n	800e58a <__swsetup_r+0x82>
 800e530:	06dd      	lsls	r5, r3, #27
 800e532:	d411      	bmi.n	800e558 <__swsetup_r+0x50>
 800e534:	2309      	movs	r3, #9
 800e536:	6033      	str	r3, [r6, #0]
 800e538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	81a3      	strh	r3, [r4, #12]
 800e542:	e03e      	b.n	800e5c2 <__swsetup_r+0xba>
 800e544:	4b25      	ldr	r3, [pc, #148]	; (800e5dc <__swsetup_r+0xd4>)
 800e546:	429c      	cmp	r4, r3
 800e548:	d101      	bne.n	800e54e <__swsetup_r+0x46>
 800e54a:	68ac      	ldr	r4, [r5, #8]
 800e54c:	e7eb      	b.n	800e526 <__swsetup_r+0x1e>
 800e54e:	4b24      	ldr	r3, [pc, #144]	; (800e5e0 <__swsetup_r+0xd8>)
 800e550:	429c      	cmp	r4, r3
 800e552:	bf08      	it	eq
 800e554:	68ec      	ldreq	r4, [r5, #12]
 800e556:	e7e6      	b.n	800e526 <__swsetup_r+0x1e>
 800e558:	0758      	lsls	r0, r3, #29
 800e55a:	d512      	bpl.n	800e582 <__swsetup_r+0x7a>
 800e55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e55e:	b141      	cbz	r1, 800e572 <__swsetup_r+0x6a>
 800e560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e564:	4299      	cmp	r1, r3
 800e566:	d002      	beq.n	800e56e <__swsetup_r+0x66>
 800e568:	4630      	mov	r0, r6
 800e56a:	f7fd fbad 	bl	800bcc8 <_free_r>
 800e56e:	2300      	movs	r3, #0
 800e570:	6363      	str	r3, [r4, #52]	; 0x34
 800e572:	89a3      	ldrh	r3, [r4, #12]
 800e574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e578:	81a3      	strh	r3, [r4, #12]
 800e57a:	2300      	movs	r3, #0
 800e57c:	6063      	str	r3, [r4, #4]
 800e57e:	6923      	ldr	r3, [r4, #16]
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	f043 0308 	orr.w	r3, r3, #8
 800e588:	81a3      	strh	r3, [r4, #12]
 800e58a:	6923      	ldr	r3, [r4, #16]
 800e58c:	b94b      	cbnz	r3, 800e5a2 <__swsetup_r+0x9a>
 800e58e:	89a3      	ldrh	r3, [r4, #12]
 800e590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e598:	d003      	beq.n	800e5a2 <__swsetup_r+0x9a>
 800e59a:	4621      	mov	r1, r4
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 fa01 	bl	800e9a4 <__smakebuf_r>
 800e5a2:	89a0      	ldrh	r0, [r4, #12]
 800e5a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5a8:	f010 0301 	ands.w	r3, r0, #1
 800e5ac:	d00a      	beq.n	800e5c4 <__swsetup_r+0xbc>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	60a3      	str	r3, [r4, #8]
 800e5b2:	6963      	ldr	r3, [r4, #20]
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	61a3      	str	r3, [r4, #24]
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	b943      	cbnz	r3, 800e5ce <__swsetup_r+0xc6>
 800e5bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5c0:	d1ba      	bne.n	800e538 <__swsetup_r+0x30>
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}
 800e5c4:	0781      	lsls	r1, r0, #30
 800e5c6:	bf58      	it	pl
 800e5c8:	6963      	ldrpl	r3, [r4, #20]
 800e5ca:	60a3      	str	r3, [r4, #8]
 800e5cc:	e7f4      	b.n	800e5b8 <__swsetup_r+0xb0>
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	e7f7      	b.n	800e5c2 <__swsetup_r+0xba>
 800e5d2:	bf00      	nop
 800e5d4:	20000028 	.word	0x20000028
 800e5d8:	0801154c 	.word	0x0801154c
 800e5dc:	0801156c 	.word	0x0801156c
 800e5e0:	0801152c 	.word	0x0801152c

0800e5e4 <abort>:
 800e5e4:	2006      	movs	r0, #6
 800e5e6:	b508      	push	{r3, lr}
 800e5e8:	f000 fa4c 	bl	800ea84 <raise>
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	f7f4 fa18 	bl	8002a22 <_exit>
	...

0800e5f4 <__sflush_r>:
 800e5f4:	898a      	ldrh	r2, [r1, #12]
 800e5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	0710      	lsls	r0, r2, #28
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	d457      	bmi.n	800e6b0 <__sflush_r+0xbc>
 800e600:	684b      	ldr	r3, [r1, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	dc04      	bgt.n	800e610 <__sflush_r+0x1c>
 800e606:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dc01      	bgt.n	800e610 <__sflush_r+0x1c>
 800e60c:	2000      	movs	r0, #0
 800e60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e612:	2e00      	cmp	r6, #0
 800e614:	d0fa      	beq.n	800e60c <__sflush_r+0x18>
 800e616:	2300      	movs	r3, #0
 800e618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e61c:	682f      	ldr	r7, [r5, #0]
 800e61e:	602b      	str	r3, [r5, #0]
 800e620:	d032      	beq.n	800e688 <__sflush_r+0x94>
 800e622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	075a      	lsls	r2, r3, #29
 800e628:	d505      	bpl.n	800e636 <__sflush_r+0x42>
 800e62a:	6863      	ldr	r3, [r4, #4]
 800e62c:	1ac0      	subs	r0, r0, r3
 800e62e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e630:	b10b      	cbz	r3, 800e636 <__sflush_r+0x42>
 800e632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e634:	1ac0      	subs	r0, r0, r3
 800e636:	2300      	movs	r3, #0
 800e638:	4602      	mov	r2, r0
 800e63a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e63c:	4628      	mov	r0, r5
 800e63e:	6a21      	ldr	r1, [r4, #32]
 800e640:	47b0      	blx	r6
 800e642:	1c43      	adds	r3, r0, #1
 800e644:	89a3      	ldrh	r3, [r4, #12]
 800e646:	d106      	bne.n	800e656 <__sflush_r+0x62>
 800e648:	6829      	ldr	r1, [r5, #0]
 800e64a:	291d      	cmp	r1, #29
 800e64c:	d82c      	bhi.n	800e6a8 <__sflush_r+0xb4>
 800e64e:	4a29      	ldr	r2, [pc, #164]	; (800e6f4 <__sflush_r+0x100>)
 800e650:	40ca      	lsrs	r2, r1
 800e652:	07d6      	lsls	r6, r2, #31
 800e654:	d528      	bpl.n	800e6a8 <__sflush_r+0xb4>
 800e656:	2200      	movs	r2, #0
 800e658:	6062      	str	r2, [r4, #4]
 800e65a:	6922      	ldr	r2, [r4, #16]
 800e65c:	04d9      	lsls	r1, r3, #19
 800e65e:	6022      	str	r2, [r4, #0]
 800e660:	d504      	bpl.n	800e66c <__sflush_r+0x78>
 800e662:	1c42      	adds	r2, r0, #1
 800e664:	d101      	bne.n	800e66a <__sflush_r+0x76>
 800e666:	682b      	ldr	r3, [r5, #0]
 800e668:	b903      	cbnz	r3, 800e66c <__sflush_r+0x78>
 800e66a:	6560      	str	r0, [r4, #84]	; 0x54
 800e66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e66e:	602f      	str	r7, [r5, #0]
 800e670:	2900      	cmp	r1, #0
 800e672:	d0cb      	beq.n	800e60c <__sflush_r+0x18>
 800e674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e678:	4299      	cmp	r1, r3
 800e67a:	d002      	beq.n	800e682 <__sflush_r+0x8e>
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7fd fb23 	bl	800bcc8 <_free_r>
 800e682:	2000      	movs	r0, #0
 800e684:	6360      	str	r0, [r4, #52]	; 0x34
 800e686:	e7c2      	b.n	800e60e <__sflush_r+0x1a>
 800e688:	6a21      	ldr	r1, [r4, #32]
 800e68a:	2301      	movs	r3, #1
 800e68c:	4628      	mov	r0, r5
 800e68e:	47b0      	blx	r6
 800e690:	1c41      	adds	r1, r0, #1
 800e692:	d1c7      	bne.n	800e624 <__sflush_r+0x30>
 800e694:	682b      	ldr	r3, [r5, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0c4      	beq.n	800e624 <__sflush_r+0x30>
 800e69a:	2b1d      	cmp	r3, #29
 800e69c:	d001      	beq.n	800e6a2 <__sflush_r+0xae>
 800e69e:	2b16      	cmp	r3, #22
 800e6a0:	d101      	bne.n	800e6a6 <__sflush_r+0xb2>
 800e6a2:	602f      	str	r7, [r5, #0]
 800e6a4:	e7b2      	b.n	800e60c <__sflush_r+0x18>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ac:	81a3      	strh	r3, [r4, #12]
 800e6ae:	e7ae      	b.n	800e60e <__sflush_r+0x1a>
 800e6b0:	690f      	ldr	r7, [r1, #16]
 800e6b2:	2f00      	cmp	r7, #0
 800e6b4:	d0aa      	beq.n	800e60c <__sflush_r+0x18>
 800e6b6:	0793      	lsls	r3, r2, #30
 800e6b8:	bf18      	it	ne
 800e6ba:	2300      	movne	r3, #0
 800e6bc:	680e      	ldr	r6, [r1, #0]
 800e6be:	bf08      	it	eq
 800e6c0:	694b      	ldreq	r3, [r1, #20]
 800e6c2:	1bf6      	subs	r6, r6, r7
 800e6c4:	600f      	str	r7, [r1, #0]
 800e6c6:	608b      	str	r3, [r1, #8]
 800e6c8:	2e00      	cmp	r6, #0
 800e6ca:	dd9f      	ble.n	800e60c <__sflush_r+0x18>
 800e6cc:	4633      	mov	r3, r6
 800e6ce:	463a      	mov	r2, r7
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	6a21      	ldr	r1, [r4, #32]
 800e6d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e6d8:	47e0      	blx	ip
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	dc06      	bgt.n	800e6ec <__sflush_r+0xf8>
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	e790      	b.n	800e60e <__sflush_r+0x1a>
 800e6ec:	4407      	add	r7, r0
 800e6ee:	1a36      	subs	r6, r6, r0
 800e6f0:	e7ea      	b.n	800e6c8 <__sflush_r+0xd4>
 800e6f2:	bf00      	nop
 800e6f4:	20400001 	.word	0x20400001

0800e6f8 <_fflush_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	690b      	ldr	r3, [r1, #16]
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	460c      	mov	r4, r1
 800e700:	b913      	cbnz	r3, 800e708 <_fflush_r+0x10>
 800e702:	2500      	movs	r5, #0
 800e704:	4628      	mov	r0, r5
 800e706:	bd38      	pop	{r3, r4, r5, pc}
 800e708:	b118      	cbz	r0, 800e712 <_fflush_r+0x1a>
 800e70a:	6983      	ldr	r3, [r0, #24]
 800e70c:	b90b      	cbnz	r3, 800e712 <_fflush_r+0x1a>
 800e70e:	f000 f887 	bl	800e820 <__sinit>
 800e712:	4b14      	ldr	r3, [pc, #80]	; (800e764 <_fflush_r+0x6c>)
 800e714:	429c      	cmp	r4, r3
 800e716:	d11b      	bne.n	800e750 <_fflush_r+0x58>
 800e718:	686c      	ldr	r4, [r5, #4]
 800e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0ef      	beq.n	800e702 <_fflush_r+0xa>
 800e722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e724:	07d0      	lsls	r0, r2, #31
 800e726:	d404      	bmi.n	800e732 <_fflush_r+0x3a>
 800e728:	0599      	lsls	r1, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_fflush_r+0x3a>
 800e72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e72e:	f7ff fcd6 	bl	800e0de <__retarget_lock_acquire_recursive>
 800e732:	4628      	mov	r0, r5
 800e734:	4621      	mov	r1, r4
 800e736:	f7ff ff5d 	bl	800e5f4 <__sflush_r>
 800e73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e73c:	4605      	mov	r5, r0
 800e73e:	07da      	lsls	r2, r3, #31
 800e740:	d4e0      	bmi.n	800e704 <_fflush_r+0xc>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	059b      	lsls	r3, r3, #22
 800e746:	d4dd      	bmi.n	800e704 <_fflush_r+0xc>
 800e748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e74a:	f7ff fcc9 	bl	800e0e0 <__retarget_lock_release_recursive>
 800e74e:	e7d9      	b.n	800e704 <_fflush_r+0xc>
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <_fflush_r+0x70>)
 800e752:	429c      	cmp	r4, r3
 800e754:	d101      	bne.n	800e75a <_fflush_r+0x62>
 800e756:	68ac      	ldr	r4, [r5, #8]
 800e758:	e7df      	b.n	800e71a <_fflush_r+0x22>
 800e75a:	4b04      	ldr	r3, [pc, #16]	; (800e76c <_fflush_r+0x74>)
 800e75c:	429c      	cmp	r4, r3
 800e75e:	bf08      	it	eq
 800e760:	68ec      	ldreq	r4, [r5, #12]
 800e762:	e7da      	b.n	800e71a <_fflush_r+0x22>
 800e764:	0801154c 	.word	0x0801154c
 800e768:	0801156c 	.word	0x0801156c
 800e76c:	0801152c 	.word	0x0801152c

0800e770 <std>:
 800e770:	2300      	movs	r3, #0
 800e772:	b510      	push	{r4, lr}
 800e774:	4604      	mov	r4, r0
 800e776:	e9c0 3300 	strd	r3, r3, [r0]
 800e77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e77e:	6083      	str	r3, [r0, #8]
 800e780:	8181      	strh	r1, [r0, #12]
 800e782:	6643      	str	r3, [r0, #100]	; 0x64
 800e784:	81c2      	strh	r2, [r0, #14]
 800e786:	6183      	str	r3, [r0, #24]
 800e788:	4619      	mov	r1, r3
 800e78a:	2208      	movs	r2, #8
 800e78c:	305c      	adds	r0, #92	; 0x5c
 800e78e:	f7fd fa93 	bl	800bcb8 <memset>
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <std+0x38>)
 800e794:	6224      	str	r4, [r4, #32]
 800e796:	6263      	str	r3, [r4, #36]	; 0x24
 800e798:	4b04      	ldr	r3, [pc, #16]	; (800e7ac <std+0x3c>)
 800e79a:	62a3      	str	r3, [r4, #40]	; 0x28
 800e79c:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <std+0x40>)
 800e79e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7a0:	4b04      	ldr	r3, [pc, #16]	; (800e7b4 <std+0x44>)
 800e7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7a4:	bd10      	pop	{r4, pc}
 800e7a6:	bf00      	nop
 800e7a8:	0800eabd 	.word	0x0800eabd
 800e7ac:	0800eadf 	.word	0x0800eadf
 800e7b0:	0800eb17 	.word	0x0800eb17
 800e7b4:	0800eb3b 	.word	0x0800eb3b

0800e7b8 <_cleanup_r>:
 800e7b8:	4901      	ldr	r1, [pc, #4]	; (800e7c0 <_cleanup_r+0x8>)
 800e7ba:	f000 b8af 	b.w	800e91c <_fwalk_reent>
 800e7be:	bf00      	nop
 800e7c0:	0800e6f9 	.word	0x0800e6f9

0800e7c4 <__sfmoreglue>:
 800e7c4:	2268      	movs	r2, #104	; 0x68
 800e7c6:	b570      	push	{r4, r5, r6, lr}
 800e7c8:	1e4d      	subs	r5, r1, #1
 800e7ca:	4355      	muls	r5, r2
 800e7cc:	460e      	mov	r6, r1
 800e7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7d2:	f7fd fae1 	bl	800bd98 <_malloc_r>
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	b140      	cbz	r0, 800e7ec <__sfmoreglue+0x28>
 800e7da:	2100      	movs	r1, #0
 800e7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800e7e0:	300c      	adds	r0, #12
 800e7e2:	60a0      	str	r0, [r4, #8]
 800e7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e7e8:	f7fd fa66 	bl	800bcb8 <memset>
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}

0800e7f0 <__sfp_lock_acquire>:
 800e7f0:	4801      	ldr	r0, [pc, #4]	; (800e7f8 <__sfp_lock_acquire+0x8>)
 800e7f2:	f7ff bc74 	b.w	800e0de <__retarget_lock_acquire_recursive>
 800e7f6:	bf00      	nop
 800e7f8:	20001d0d 	.word	0x20001d0d

0800e7fc <__sfp_lock_release>:
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__sfp_lock_release+0x8>)
 800e7fe:	f7ff bc6f 	b.w	800e0e0 <__retarget_lock_release_recursive>
 800e802:	bf00      	nop
 800e804:	20001d0d 	.word	0x20001d0d

0800e808 <__sinit_lock_acquire>:
 800e808:	4801      	ldr	r0, [pc, #4]	; (800e810 <__sinit_lock_acquire+0x8>)
 800e80a:	f7ff bc68 	b.w	800e0de <__retarget_lock_acquire_recursive>
 800e80e:	bf00      	nop
 800e810:	20001d0e 	.word	0x20001d0e

0800e814 <__sinit_lock_release>:
 800e814:	4801      	ldr	r0, [pc, #4]	; (800e81c <__sinit_lock_release+0x8>)
 800e816:	f7ff bc63 	b.w	800e0e0 <__retarget_lock_release_recursive>
 800e81a:	bf00      	nop
 800e81c:	20001d0e 	.word	0x20001d0e

0800e820 <__sinit>:
 800e820:	b510      	push	{r4, lr}
 800e822:	4604      	mov	r4, r0
 800e824:	f7ff fff0 	bl	800e808 <__sinit_lock_acquire>
 800e828:	69a3      	ldr	r3, [r4, #24]
 800e82a:	b11b      	cbz	r3, 800e834 <__sinit+0x14>
 800e82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e830:	f7ff bff0 	b.w	800e814 <__sinit_lock_release>
 800e834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e838:	6523      	str	r3, [r4, #80]	; 0x50
 800e83a:	4b13      	ldr	r3, [pc, #76]	; (800e888 <__sinit+0x68>)
 800e83c:	4a13      	ldr	r2, [pc, #76]	; (800e88c <__sinit+0x6c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	62a2      	str	r2, [r4, #40]	; 0x28
 800e842:	42a3      	cmp	r3, r4
 800e844:	bf08      	it	eq
 800e846:	2301      	moveq	r3, #1
 800e848:	4620      	mov	r0, r4
 800e84a:	bf08      	it	eq
 800e84c:	61a3      	streq	r3, [r4, #24]
 800e84e:	f000 f81f 	bl	800e890 <__sfp>
 800e852:	6060      	str	r0, [r4, #4]
 800e854:	4620      	mov	r0, r4
 800e856:	f000 f81b 	bl	800e890 <__sfp>
 800e85a:	60a0      	str	r0, [r4, #8]
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 f817 	bl	800e890 <__sfp>
 800e862:	2200      	movs	r2, #0
 800e864:	2104      	movs	r1, #4
 800e866:	60e0      	str	r0, [r4, #12]
 800e868:	6860      	ldr	r0, [r4, #4]
 800e86a:	f7ff ff81 	bl	800e770 <std>
 800e86e:	2201      	movs	r2, #1
 800e870:	2109      	movs	r1, #9
 800e872:	68a0      	ldr	r0, [r4, #8]
 800e874:	f7ff ff7c 	bl	800e770 <std>
 800e878:	2202      	movs	r2, #2
 800e87a:	2112      	movs	r1, #18
 800e87c:	68e0      	ldr	r0, [r4, #12]
 800e87e:	f7ff ff77 	bl	800e770 <std>
 800e882:	2301      	movs	r3, #1
 800e884:	61a3      	str	r3, [r4, #24]
 800e886:	e7d1      	b.n	800e82c <__sinit+0xc>
 800e888:	080112b0 	.word	0x080112b0
 800e88c:	0800e7b9 	.word	0x0800e7b9

0800e890 <__sfp>:
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	4607      	mov	r7, r0
 800e894:	f7ff ffac 	bl	800e7f0 <__sfp_lock_acquire>
 800e898:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <__sfp+0x84>)
 800e89a:	681e      	ldr	r6, [r3, #0]
 800e89c:	69b3      	ldr	r3, [r6, #24]
 800e89e:	b913      	cbnz	r3, 800e8a6 <__sfp+0x16>
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f7ff ffbd 	bl	800e820 <__sinit>
 800e8a6:	3648      	adds	r6, #72	; 0x48
 800e8a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	d503      	bpl.n	800e8b8 <__sfp+0x28>
 800e8b0:	6833      	ldr	r3, [r6, #0]
 800e8b2:	b30b      	cbz	r3, 800e8f8 <__sfp+0x68>
 800e8b4:	6836      	ldr	r6, [r6, #0]
 800e8b6:	e7f7      	b.n	800e8a8 <__sfp+0x18>
 800e8b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8bc:	b9d5      	cbnz	r5, 800e8f4 <__sfp+0x64>
 800e8be:	4b16      	ldr	r3, [pc, #88]	; (800e918 <__sfp+0x88>)
 800e8c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8c4:	60e3      	str	r3, [r4, #12]
 800e8c6:	6665      	str	r5, [r4, #100]	; 0x64
 800e8c8:	f7ff fc08 	bl	800e0dc <__retarget_lock_init_recursive>
 800e8cc:	f7ff ff96 	bl	800e7fc <__sfp_lock_release>
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8dc:	6025      	str	r5, [r4, #0]
 800e8de:	61a5      	str	r5, [r4, #24]
 800e8e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e8e4:	f7fd f9e8 	bl	800bcb8 <memset>
 800e8e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e8ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f4:	3468      	adds	r4, #104	; 0x68
 800e8f6:	e7d9      	b.n	800e8ac <__sfp+0x1c>
 800e8f8:	2104      	movs	r1, #4
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	f7ff ff62 	bl	800e7c4 <__sfmoreglue>
 800e900:	4604      	mov	r4, r0
 800e902:	6030      	str	r0, [r6, #0]
 800e904:	2800      	cmp	r0, #0
 800e906:	d1d5      	bne.n	800e8b4 <__sfp+0x24>
 800e908:	f7ff ff78 	bl	800e7fc <__sfp_lock_release>
 800e90c:	230c      	movs	r3, #12
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	e7ee      	b.n	800e8f0 <__sfp+0x60>
 800e912:	bf00      	nop
 800e914:	080112b0 	.word	0x080112b0
 800e918:	ffff0001 	.word	0xffff0001

0800e91c <_fwalk_reent>:
 800e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e920:	4606      	mov	r6, r0
 800e922:	4688      	mov	r8, r1
 800e924:	2700      	movs	r7, #0
 800e926:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e92a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e92e:	f1b9 0901 	subs.w	r9, r9, #1
 800e932:	d505      	bpl.n	800e940 <_fwalk_reent+0x24>
 800e934:	6824      	ldr	r4, [r4, #0]
 800e936:	2c00      	cmp	r4, #0
 800e938:	d1f7      	bne.n	800e92a <_fwalk_reent+0xe>
 800e93a:	4638      	mov	r0, r7
 800e93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e940:	89ab      	ldrh	r3, [r5, #12]
 800e942:	2b01      	cmp	r3, #1
 800e944:	d907      	bls.n	800e956 <_fwalk_reent+0x3a>
 800e946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e94a:	3301      	adds	r3, #1
 800e94c:	d003      	beq.n	800e956 <_fwalk_reent+0x3a>
 800e94e:	4629      	mov	r1, r5
 800e950:	4630      	mov	r0, r6
 800e952:	47c0      	blx	r8
 800e954:	4307      	orrs	r7, r0
 800e956:	3568      	adds	r5, #104	; 0x68
 800e958:	e7e9      	b.n	800e92e <_fwalk_reent+0x12>

0800e95a <__swhatbuf_r>:
 800e95a:	b570      	push	{r4, r5, r6, lr}
 800e95c:	460e      	mov	r6, r1
 800e95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e962:	4614      	mov	r4, r2
 800e964:	2900      	cmp	r1, #0
 800e966:	461d      	mov	r5, r3
 800e968:	b096      	sub	sp, #88	; 0x58
 800e96a:	da08      	bge.n	800e97e <__swhatbuf_r+0x24>
 800e96c:	2200      	movs	r2, #0
 800e96e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e972:	602a      	str	r2, [r5, #0]
 800e974:	061a      	lsls	r2, r3, #24
 800e976:	d410      	bmi.n	800e99a <__swhatbuf_r+0x40>
 800e978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e97c:	e00e      	b.n	800e99c <__swhatbuf_r+0x42>
 800e97e:	466a      	mov	r2, sp
 800e980:	f000 f902 	bl	800eb88 <_fstat_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	dbf1      	blt.n	800e96c <__swhatbuf_r+0x12>
 800e988:	9a01      	ldr	r2, [sp, #4]
 800e98a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e98e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e992:	425a      	negs	r2, r3
 800e994:	415a      	adcs	r2, r3
 800e996:	602a      	str	r2, [r5, #0]
 800e998:	e7ee      	b.n	800e978 <__swhatbuf_r+0x1e>
 800e99a:	2340      	movs	r3, #64	; 0x40
 800e99c:	2000      	movs	r0, #0
 800e99e:	6023      	str	r3, [r4, #0]
 800e9a0:	b016      	add	sp, #88	; 0x58
 800e9a2:	bd70      	pop	{r4, r5, r6, pc}

0800e9a4 <__smakebuf_r>:
 800e9a4:	898b      	ldrh	r3, [r1, #12]
 800e9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9a8:	079d      	lsls	r5, r3, #30
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	d507      	bpl.n	800e9c0 <__smakebuf_r+0x1c>
 800e9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	6163      	str	r3, [r4, #20]
 800e9bc:	b002      	add	sp, #8
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
 800e9c0:	466a      	mov	r2, sp
 800e9c2:	ab01      	add	r3, sp, #4
 800e9c4:	f7ff ffc9 	bl	800e95a <__swhatbuf_r>
 800e9c8:	9900      	ldr	r1, [sp, #0]
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7fd f9e3 	bl	800bd98 <_malloc_r>
 800e9d2:	b948      	cbnz	r0, 800e9e8 <__smakebuf_r+0x44>
 800e9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d8:	059a      	lsls	r2, r3, #22
 800e9da:	d4ef      	bmi.n	800e9bc <__smakebuf_r+0x18>
 800e9dc:	f023 0303 	bic.w	r3, r3, #3
 800e9e0:	f043 0302 	orr.w	r3, r3, #2
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	e7e3      	b.n	800e9b0 <__smakebuf_r+0xc>
 800e9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <__smakebuf_r+0x7c>)
 800e9ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	6020      	str	r0, [r4, #0]
 800e9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9f4:	81a3      	strh	r3, [r4, #12]
 800e9f6:	9b00      	ldr	r3, [sp, #0]
 800e9f8:	6120      	str	r0, [r4, #16]
 800e9fa:	6163      	str	r3, [r4, #20]
 800e9fc:	9b01      	ldr	r3, [sp, #4]
 800e9fe:	b15b      	cbz	r3, 800ea18 <__smakebuf_r+0x74>
 800ea00:	4630      	mov	r0, r6
 800ea02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea06:	f000 f8d1 	bl	800ebac <_isatty_r>
 800ea0a:	b128      	cbz	r0, 800ea18 <__smakebuf_r+0x74>
 800ea0c:	89a3      	ldrh	r3, [r4, #12]
 800ea0e:	f023 0303 	bic.w	r3, r3, #3
 800ea12:	f043 0301 	orr.w	r3, r3, #1
 800ea16:	81a3      	strh	r3, [r4, #12]
 800ea18:	89a0      	ldrh	r0, [r4, #12]
 800ea1a:	4305      	orrs	r5, r0
 800ea1c:	81a5      	strh	r5, [r4, #12]
 800ea1e:	e7cd      	b.n	800e9bc <__smakebuf_r+0x18>
 800ea20:	0800e7b9 	.word	0x0800e7b9

0800ea24 <_malloc_usable_size_r>:
 800ea24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea28:	1f18      	subs	r0, r3, #4
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	bfbc      	itt	lt
 800ea2e:	580b      	ldrlt	r3, [r1, r0]
 800ea30:	18c0      	addlt	r0, r0, r3
 800ea32:	4770      	bx	lr

0800ea34 <_raise_r>:
 800ea34:	291f      	cmp	r1, #31
 800ea36:	b538      	push	{r3, r4, r5, lr}
 800ea38:	4604      	mov	r4, r0
 800ea3a:	460d      	mov	r5, r1
 800ea3c:	d904      	bls.n	800ea48 <_raise_r+0x14>
 800ea3e:	2316      	movs	r3, #22
 800ea40:	6003      	str	r3, [r0, #0]
 800ea42:	f04f 30ff 	mov.w	r0, #4294967295
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea4a:	b112      	cbz	r2, 800ea52 <_raise_r+0x1e>
 800ea4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea50:	b94b      	cbnz	r3, 800ea66 <_raise_r+0x32>
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 f830 	bl	800eab8 <_getpid_r>
 800ea58:	462a      	mov	r2, r5
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea62:	f000 b817 	b.w	800ea94 <_kill_r>
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d00a      	beq.n	800ea80 <_raise_r+0x4c>
 800ea6a:	1c59      	adds	r1, r3, #1
 800ea6c:	d103      	bne.n	800ea76 <_raise_r+0x42>
 800ea6e:	2316      	movs	r3, #22
 800ea70:	6003      	str	r3, [r0, #0]
 800ea72:	2001      	movs	r0, #1
 800ea74:	e7e7      	b.n	800ea46 <_raise_r+0x12>
 800ea76:	2400      	movs	r4, #0
 800ea78:	4628      	mov	r0, r5
 800ea7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea7e:	4798      	blx	r3
 800ea80:	2000      	movs	r0, #0
 800ea82:	e7e0      	b.n	800ea46 <_raise_r+0x12>

0800ea84 <raise>:
 800ea84:	4b02      	ldr	r3, [pc, #8]	; (800ea90 <raise+0xc>)
 800ea86:	4601      	mov	r1, r0
 800ea88:	6818      	ldr	r0, [r3, #0]
 800ea8a:	f7ff bfd3 	b.w	800ea34 <_raise_r>
 800ea8e:	bf00      	nop
 800ea90:	20000028 	.word	0x20000028

0800ea94 <_kill_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	2300      	movs	r3, #0
 800ea98:	4d06      	ldr	r5, [pc, #24]	; (800eab4 <_kill_r+0x20>)
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	4608      	mov	r0, r1
 800ea9e:	4611      	mov	r1, r2
 800eaa0:	602b      	str	r3, [r5, #0]
 800eaa2:	f7f3 ffae 	bl	8002a02 <_kill>
 800eaa6:	1c43      	adds	r3, r0, #1
 800eaa8:	d102      	bne.n	800eab0 <_kill_r+0x1c>
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	b103      	cbz	r3, 800eab0 <_kill_r+0x1c>
 800eaae:	6023      	str	r3, [r4, #0]
 800eab0:	bd38      	pop	{r3, r4, r5, pc}
 800eab2:	bf00      	nop
 800eab4:	20001d08 	.word	0x20001d08

0800eab8 <_getpid_r>:
 800eab8:	f7f3 bf9c 	b.w	80029f4 <_getpid>

0800eabc <__sread>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	460c      	mov	r4, r1
 800eac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac4:	f000 f894 	bl	800ebf0 <_read_r>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	bfab      	itete	ge
 800eacc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eace:	89a3      	ldrhlt	r3, [r4, #12]
 800ead0:	181b      	addge	r3, r3, r0
 800ead2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ead6:	bfac      	ite	ge
 800ead8:	6563      	strge	r3, [r4, #84]	; 0x54
 800eada:	81a3      	strhlt	r3, [r4, #12]
 800eadc:	bd10      	pop	{r4, pc}

0800eade <__swrite>:
 800eade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae2:	461f      	mov	r7, r3
 800eae4:	898b      	ldrh	r3, [r1, #12]
 800eae6:	4605      	mov	r5, r0
 800eae8:	05db      	lsls	r3, r3, #23
 800eaea:	460c      	mov	r4, r1
 800eaec:	4616      	mov	r6, r2
 800eaee:	d505      	bpl.n	800eafc <__swrite+0x1e>
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf8:	f000 f868 	bl	800ebcc <_lseek_r>
 800eafc:	89a3      	ldrh	r3, [r4, #12]
 800eafe:	4632      	mov	r2, r6
 800eb00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	4628      	mov	r0, r5
 800eb08:	463b      	mov	r3, r7
 800eb0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb12:	f000 b817 	b.w	800eb44 <_write_r>

0800eb16 <__sseek>:
 800eb16:	b510      	push	{r4, lr}
 800eb18:	460c      	mov	r4, r1
 800eb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1e:	f000 f855 	bl	800ebcc <_lseek_r>
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	bf15      	itete	ne
 800eb28:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb32:	81a3      	strheq	r3, [r4, #12]
 800eb34:	bf18      	it	ne
 800eb36:	81a3      	strhne	r3, [r4, #12]
 800eb38:	bd10      	pop	{r4, pc}

0800eb3a <__sclose>:
 800eb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3e:	f000 b813 	b.w	800eb68 <_close_r>
	...

0800eb44 <_write_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4604      	mov	r4, r0
 800eb48:	4608      	mov	r0, r1
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	4d05      	ldr	r5, [pc, #20]	; (800eb64 <_write_r+0x20>)
 800eb50:	602a      	str	r2, [r5, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	f7f3 ff8c 	bl	8002a70 <_write>
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	d102      	bne.n	800eb62 <_write_r+0x1e>
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	b103      	cbz	r3, 800eb62 <_write_r+0x1e>
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	bd38      	pop	{r3, r4, r5, pc}
 800eb64:	20001d08 	.word	0x20001d08

0800eb68 <_close_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	4d05      	ldr	r5, [pc, #20]	; (800eb84 <_close_r+0x1c>)
 800eb6e:	4604      	mov	r4, r0
 800eb70:	4608      	mov	r0, r1
 800eb72:	602b      	str	r3, [r5, #0]
 800eb74:	f7f3 ff98 	bl	8002aa8 <_close>
 800eb78:	1c43      	adds	r3, r0, #1
 800eb7a:	d102      	bne.n	800eb82 <_close_r+0x1a>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b103      	cbz	r3, 800eb82 <_close_r+0x1a>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	20001d08 	.word	0x20001d08

0800eb88 <_fstat_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	4d06      	ldr	r5, [pc, #24]	; (800eba8 <_fstat_r+0x20>)
 800eb8e:	4604      	mov	r4, r0
 800eb90:	4608      	mov	r0, r1
 800eb92:	4611      	mov	r1, r2
 800eb94:	602b      	str	r3, [r5, #0]
 800eb96:	f7f3 ff92 	bl	8002abe <_fstat>
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	d102      	bne.n	800eba4 <_fstat_r+0x1c>
 800eb9e:	682b      	ldr	r3, [r5, #0]
 800eba0:	b103      	cbz	r3, 800eba4 <_fstat_r+0x1c>
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	bd38      	pop	{r3, r4, r5, pc}
 800eba6:	bf00      	nop
 800eba8:	20001d08 	.word	0x20001d08

0800ebac <_isatty_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	2300      	movs	r3, #0
 800ebb0:	4d05      	ldr	r5, [pc, #20]	; (800ebc8 <_isatty_r+0x1c>)
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	4608      	mov	r0, r1
 800ebb6:	602b      	str	r3, [r5, #0]
 800ebb8:	f7f3 ff90 	bl	8002adc <_isatty>
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d102      	bne.n	800ebc6 <_isatty_r+0x1a>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	b103      	cbz	r3, 800ebc6 <_isatty_r+0x1a>
 800ebc4:	6023      	str	r3, [r4, #0]
 800ebc6:	bd38      	pop	{r3, r4, r5, pc}
 800ebc8:	20001d08 	.word	0x20001d08

0800ebcc <_lseek_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4604      	mov	r4, r0
 800ebd0:	4608      	mov	r0, r1
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	4d05      	ldr	r5, [pc, #20]	; (800ebec <_lseek_r+0x20>)
 800ebd8:	602a      	str	r2, [r5, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	f7f3 ff88 	bl	8002af0 <_lseek>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_lseek_r+0x1e>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_lseek_r+0x1e>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	20001d08 	.word	0x20001d08

0800ebf0 <_read_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	4608      	mov	r0, r1
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	4d05      	ldr	r5, [pc, #20]	; (800ec10 <_read_r+0x20>)
 800ebfc:	602a      	str	r2, [r5, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	f7f3 ff19 	bl	8002a36 <_read>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d102      	bne.n	800ec0e <_read_r+0x1e>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	b103      	cbz	r3, 800ec0e <_read_r+0x1e>
 800ec0c:	6023      	str	r3, [r4, #0]
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}
 800ec10:	20001d08 	.word	0x20001d08

0800ec14 <pow>:
 800ec14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec18:	4614      	mov	r4, r2
 800ec1a:	461d      	mov	r5, r3
 800ec1c:	4680      	mov	r8, r0
 800ec1e:	4689      	mov	r9, r1
 800ec20:	f000 f862 	bl	800ece8 <__ieee754_pow>
 800ec24:	4622      	mov	r2, r4
 800ec26:	4606      	mov	r6, r0
 800ec28:	460f      	mov	r7, r1
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f7f1 fef6 	bl	8000a20 <__aeabi_dcmpun>
 800ec34:	bbc8      	cbnz	r0, 800ecaa <pow+0x96>
 800ec36:	2200      	movs	r2, #0
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	4649      	mov	r1, r9
 800ec3e:	f7f1 febd 	bl	80009bc <__aeabi_dcmpeq>
 800ec42:	b1b8      	cbz	r0, 800ec74 <pow+0x60>
 800ec44:	2200      	movs	r2, #0
 800ec46:	2300      	movs	r3, #0
 800ec48:	4620      	mov	r0, r4
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 feb6 	bl	80009bc <__aeabi_dcmpeq>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d141      	bne.n	800ecd8 <pow+0xc4>
 800ec54:	4620      	mov	r0, r4
 800ec56:	4629      	mov	r1, r5
 800ec58:	f000 fe3b 	bl	800f8d2 <finite>
 800ec5c:	b328      	cbz	r0, 800ecaa <pow+0x96>
 800ec5e:	2200      	movs	r2, #0
 800ec60:	2300      	movs	r3, #0
 800ec62:	4620      	mov	r0, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 feb3 	bl	80009d0 <__aeabi_dcmplt>
 800ec6a:	b1f0      	cbz	r0, 800ecaa <pow+0x96>
 800ec6c:	f7fc ffdc 	bl	800bc28 <__errno>
 800ec70:	2322      	movs	r3, #34	; 0x22
 800ec72:	e019      	b.n	800eca8 <pow+0x94>
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	f000 fe2b 	bl	800f8d2 <finite>
 800ec7c:	b9c8      	cbnz	r0, 800ecb2 <pow+0x9e>
 800ec7e:	4640      	mov	r0, r8
 800ec80:	4649      	mov	r1, r9
 800ec82:	f000 fe26 	bl	800f8d2 <finite>
 800ec86:	b1a0      	cbz	r0, 800ecb2 <pow+0x9e>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	f000 fe21 	bl	800f8d2 <finite>
 800ec90:	b178      	cbz	r0, 800ecb2 <pow+0x9e>
 800ec92:	4632      	mov	r2, r6
 800ec94:	463b      	mov	r3, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	4639      	mov	r1, r7
 800ec9a:	f7f1 fec1 	bl	8000a20 <__aeabi_dcmpun>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d0e4      	beq.n	800ec6c <pow+0x58>
 800eca2:	f7fc ffc1 	bl	800bc28 <__errno>
 800eca6:	2321      	movs	r3, #33	; 0x21
 800eca8:	6003      	str	r3, [r0, #0]
 800ecaa:	4630      	mov	r0, r6
 800ecac:	4639      	mov	r1, r7
 800ecae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	4639      	mov	r1, r7
 800ecba:	f7f1 fe7f 	bl	80009bc <__aeabi_dcmpeq>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	d0f3      	beq.n	800ecaa <pow+0x96>
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	f000 fe04 	bl	800f8d2 <finite>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0ed      	beq.n	800ecaa <pow+0x96>
 800ecce:	4620      	mov	r0, r4
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	f000 fdfe 	bl	800f8d2 <finite>
 800ecd6:	e7c8      	b.n	800ec6a <pow+0x56>
 800ecd8:	2600      	movs	r6, #0
 800ecda:	4f01      	ldr	r7, [pc, #4]	; (800ece0 <pow+0xcc>)
 800ecdc:	e7e5      	b.n	800ecaa <pow+0x96>
 800ecde:	bf00      	nop
 800ece0:	3ff00000 	.word	0x3ff00000
 800ece4:	00000000 	.word	0x00000000

0800ece8 <__ieee754_pow>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	b093      	sub	sp, #76	; 0x4c
 800ecee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecf2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800ecf6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ecfa:	4689      	mov	r9, r1
 800ecfc:	ea56 0102 	orrs.w	r1, r6, r2
 800ed00:	4680      	mov	r8, r0
 800ed02:	d111      	bne.n	800ed28 <__ieee754_pow+0x40>
 800ed04:	1803      	adds	r3, r0, r0
 800ed06:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ed0a:	4152      	adcs	r2, r2
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	4b82      	ldr	r3, [pc, #520]	; (800ef18 <__ieee754_pow+0x230>)
 800ed10:	4193      	sbcs	r3, r2
 800ed12:	f080 84b9 	bcs.w	800f688 <__ieee754_pow+0x9a0>
 800ed16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	f7f1 fa2f 	bl	8000180 <__adddf3>
 800ed22:	4683      	mov	fp, r0
 800ed24:	468c      	mov	ip, r1
 800ed26:	e06f      	b.n	800ee08 <__ieee754_pow+0x120>
 800ed28:	4b7c      	ldr	r3, [pc, #496]	; (800ef1c <__ieee754_pow+0x234>)
 800ed2a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800ed2e:	429c      	cmp	r4, r3
 800ed30:	464d      	mov	r5, r9
 800ed32:	4682      	mov	sl, r0
 800ed34:	dc06      	bgt.n	800ed44 <__ieee754_pow+0x5c>
 800ed36:	d101      	bne.n	800ed3c <__ieee754_pow+0x54>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d1ec      	bne.n	800ed16 <__ieee754_pow+0x2e>
 800ed3c:	429e      	cmp	r6, r3
 800ed3e:	dc01      	bgt.n	800ed44 <__ieee754_pow+0x5c>
 800ed40:	d10f      	bne.n	800ed62 <__ieee754_pow+0x7a>
 800ed42:	b172      	cbz	r2, 800ed62 <__ieee754_pow+0x7a>
 800ed44:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ed48:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ed4c:	ea55 050a 	orrs.w	r5, r5, sl
 800ed50:	d1e1      	bne.n	800ed16 <__ieee754_pow+0x2e>
 800ed52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ed56:	18db      	adds	r3, r3, r3
 800ed58:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ed5c:	4152      	adcs	r2, r2
 800ed5e:	429d      	cmp	r5, r3
 800ed60:	e7d5      	b.n	800ed0e <__ieee754_pow+0x26>
 800ed62:	2d00      	cmp	r5, #0
 800ed64:	da39      	bge.n	800edda <__ieee754_pow+0xf2>
 800ed66:	4b6e      	ldr	r3, [pc, #440]	; (800ef20 <__ieee754_pow+0x238>)
 800ed68:	429e      	cmp	r6, r3
 800ed6a:	dc52      	bgt.n	800ee12 <__ieee754_pow+0x12a>
 800ed6c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ed70:	429e      	cmp	r6, r3
 800ed72:	f340 849c 	ble.w	800f6ae <__ieee754_pow+0x9c6>
 800ed76:	1533      	asrs	r3, r6, #20
 800ed78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed7c:	2b14      	cmp	r3, #20
 800ed7e:	dd0f      	ble.n	800eda0 <__ieee754_pow+0xb8>
 800ed80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ed84:	fa22 f103 	lsr.w	r1, r2, r3
 800ed88:	fa01 f303 	lsl.w	r3, r1, r3
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	f040 848e 	bne.w	800f6ae <__ieee754_pow+0x9c6>
 800ed92:	f001 0101 	and.w	r1, r1, #1
 800ed96:	f1c1 0302 	rsb	r3, r1, #2
 800ed9a:	9300      	str	r3, [sp, #0]
 800ed9c:	b182      	cbz	r2, 800edc0 <__ieee754_pow+0xd8>
 800ed9e:	e05d      	b.n	800ee5c <__ieee754_pow+0x174>
 800eda0:	2a00      	cmp	r2, #0
 800eda2:	d159      	bne.n	800ee58 <__ieee754_pow+0x170>
 800eda4:	f1c3 0314 	rsb	r3, r3, #20
 800eda8:	fa46 f103 	asr.w	r1, r6, r3
 800edac:	fa01 f303 	lsl.w	r3, r1, r3
 800edb0:	42b3      	cmp	r3, r6
 800edb2:	f040 8479 	bne.w	800f6a8 <__ieee754_pow+0x9c0>
 800edb6:	f001 0101 	and.w	r1, r1, #1
 800edba:	f1c1 0302 	rsb	r3, r1, #2
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	4b58      	ldr	r3, [pc, #352]	; (800ef24 <__ieee754_pow+0x23c>)
 800edc2:	429e      	cmp	r6, r3
 800edc4:	d132      	bne.n	800ee2c <__ieee754_pow+0x144>
 800edc6:	2f00      	cmp	r7, #0
 800edc8:	f280 846a 	bge.w	800f6a0 <__ieee754_pow+0x9b8>
 800edcc:	4642      	mov	r2, r8
 800edce:	464b      	mov	r3, r9
 800edd0:	2000      	movs	r0, #0
 800edd2:	4954      	ldr	r1, [pc, #336]	; (800ef24 <__ieee754_pow+0x23c>)
 800edd4:	f7f1 fcb4 	bl	8000740 <__aeabi_ddiv>
 800edd8:	e7a3      	b.n	800ed22 <__ieee754_pow+0x3a>
 800edda:	2300      	movs	r3, #0
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	2a00      	cmp	r2, #0
 800ede0:	d13c      	bne.n	800ee5c <__ieee754_pow+0x174>
 800ede2:	4b4e      	ldr	r3, [pc, #312]	; (800ef1c <__ieee754_pow+0x234>)
 800ede4:	429e      	cmp	r6, r3
 800ede6:	d1eb      	bne.n	800edc0 <__ieee754_pow+0xd8>
 800ede8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800edec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800edf0:	ea53 030a 	orrs.w	r3, r3, sl
 800edf4:	f000 8448 	beq.w	800f688 <__ieee754_pow+0x9a0>
 800edf8:	4b4b      	ldr	r3, [pc, #300]	; (800ef28 <__ieee754_pow+0x240>)
 800edfa:	429c      	cmp	r4, r3
 800edfc:	dd0b      	ble.n	800ee16 <__ieee754_pow+0x12e>
 800edfe:	2f00      	cmp	r7, #0
 800ee00:	f2c0 8448 	blt.w	800f694 <__ieee754_pow+0x9ac>
 800ee04:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ee08:	4658      	mov	r0, fp
 800ee0a:	4661      	mov	r1, ip
 800ee0c:	b013      	add	sp, #76	; 0x4c
 800ee0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee12:	2302      	movs	r3, #2
 800ee14:	e7e2      	b.n	800eddc <__ieee754_pow+0xf4>
 800ee16:	2f00      	cmp	r7, #0
 800ee18:	f04f 0b00 	mov.w	fp, #0
 800ee1c:	f04f 0c00 	mov.w	ip, #0
 800ee20:	daf2      	bge.n	800ee08 <__ieee754_pow+0x120>
 800ee22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ee26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ee2a:	e7ed      	b.n	800ee08 <__ieee754_pow+0x120>
 800ee2c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ee30:	d106      	bne.n	800ee40 <__ieee754_pow+0x158>
 800ee32:	4642      	mov	r2, r8
 800ee34:	464b      	mov	r3, r9
 800ee36:	4640      	mov	r0, r8
 800ee38:	4649      	mov	r1, r9
 800ee3a:	f7f1 fb57 	bl	80004ec <__aeabi_dmul>
 800ee3e:	e770      	b.n	800ed22 <__ieee754_pow+0x3a>
 800ee40:	4b3a      	ldr	r3, [pc, #232]	; (800ef2c <__ieee754_pow+0x244>)
 800ee42:	429f      	cmp	r7, r3
 800ee44:	d10a      	bne.n	800ee5c <__ieee754_pow+0x174>
 800ee46:	2d00      	cmp	r5, #0
 800ee48:	db08      	blt.n	800ee5c <__ieee754_pow+0x174>
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	4649      	mov	r1, r9
 800ee4e:	b013      	add	sp, #76	; 0x4c
 800ee50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	f000 bc5e 	b.w	800f714 <__ieee754_sqrt>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	4649      	mov	r1, r9
 800ee60:	f000 fd34 	bl	800f8cc <fabs>
 800ee64:	4683      	mov	fp, r0
 800ee66:	468c      	mov	ip, r1
 800ee68:	f1ba 0f00 	cmp.w	sl, #0
 800ee6c:	d128      	bne.n	800eec0 <__ieee754_pow+0x1d8>
 800ee6e:	b124      	cbz	r4, 800ee7a <__ieee754_pow+0x192>
 800ee70:	4b2c      	ldr	r3, [pc, #176]	; (800ef24 <__ieee754_pow+0x23c>)
 800ee72:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d122      	bne.n	800eec0 <__ieee754_pow+0x1d8>
 800ee7a:	2f00      	cmp	r7, #0
 800ee7c:	da07      	bge.n	800ee8e <__ieee754_pow+0x1a6>
 800ee7e:	465a      	mov	r2, fp
 800ee80:	4663      	mov	r3, ip
 800ee82:	2000      	movs	r0, #0
 800ee84:	4927      	ldr	r1, [pc, #156]	; (800ef24 <__ieee754_pow+0x23c>)
 800ee86:	f7f1 fc5b 	bl	8000740 <__aeabi_ddiv>
 800ee8a:	4683      	mov	fp, r0
 800ee8c:	468c      	mov	ip, r1
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	daba      	bge.n	800ee08 <__ieee754_pow+0x120>
 800ee92:	9b00      	ldr	r3, [sp, #0]
 800ee94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ee98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ee9c:	4323      	orrs	r3, r4
 800ee9e:	d108      	bne.n	800eeb2 <__ieee754_pow+0x1ca>
 800eea0:	465a      	mov	r2, fp
 800eea2:	4663      	mov	r3, ip
 800eea4:	4658      	mov	r0, fp
 800eea6:	4661      	mov	r1, ip
 800eea8:	f7f1 f968 	bl	800017c <__aeabi_dsub>
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	e790      	b.n	800edd4 <__ieee754_pow+0xec>
 800eeb2:	9b00      	ldr	r3, [sp, #0]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d1a7      	bne.n	800ee08 <__ieee754_pow+0x120>
 800eeb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800eebc:	469c      	mov	ip, r3
 800eebe:	e7a3      	b.n	800ee08 <__ieee754_pow+0x120>
 800eec0:	0feb      	lsrs	r3, r5, #31
 800eec2:	3b01      	subs	r3, #1
 800eec4:	930c      	str	r3, [sp, #48]	; 0x30
 800eec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eec8:	9b00      	ldr	r3, [sp, #0]
 800eeca:	4313      	orrs	r3, r2
 800eecc:	d104      	bne.n	800eed8 <__ieee754_pow+0x1f0>
 800eece:	4642      	mov	r2, r8
 800eed0:	464b      	mov	r3, r9
 800eed2:	4640      	mov	r0, r8
 800eed4:	4649      	mov	r1, r9
 800eed6:	e7e7      	b.n	800eea8 <__ieee754_pow+0x1c0>
 800eed8:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <__ieee754_pow+0x248>)
 800eeda:	429e      	cmp	r6, r3
 800eedc:	f340 80f6 	ble.w	800f0cc <__ieee754_pow+0x3e4>
 800eee0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800eee4:	429e      	cmp	r6, r3
 800eee6:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <__ieee754_pow+0x240>)
 800eee8:	dd09      	ble.n	800eefe <__ieee754_pow+0x216>
 800eeea:	429c      	cmp	r4, r3
 800eeec:	dc0c      	bgt.n	800ef08 <__ieee754_pow+0x220>
 800eeee:	2f00      	cmp	r7, #0
 800eef0:	da0c      	bge.n	800ef0c <__ieee754_pow+0x224>
 800eef2:	2000      	movs	r0, #0
 800eef4:	b013      	add	sp, #76	; 0x4c
 800eef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefa:	f000 bce2 	b.w	800f8c2 <__math_oflow>
 800eefe:	429c      	cmp	r4, r3
 800ef00:	dbf5      	blt.n	800eeee <__ieee754_pow+0x206>
 800ef02:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <__ieee754_pow+0x23c>)
 800ef04:	429c      	cmp	r4, r3
 800ef06:	dd15      	ble.n	800ef34 <__ieee754_pow+0x24c>
 800ef08:	2f00      	cmp	r7, #0
 800ef0a:	dcf2      	bgt.n	800eef2 <__ieee754_pow+0x20a>
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	b013      	add	sp, #76	; 0x4c
 800ef10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	f000 bcd0 	b.w	800f8b8 <__math_uflow>
 800ef18:	fff00000 	.word	0xfff00000
 800ef1c:	7ff00000 	.word	0x7ff00000
 800ef20:	433fffff 	.word	0x433fffff
 800ef24:	3ff00000 	.word	0x3ff00000
 800ef28:	3fefffff 	.word	0x3fefffff
 800ef2c:	3fe00000 	.word	0x3fe00000
 800ef30:	41e00000 	.word	0x41e00000
 800ef34:	4661      	mov	r1, ip
 800ef36:	2200      	movs	r2, #0
 800ef38:	4658      	mov	r0, fp
 800ef3a:	4b5f      	ldr	r3, [pc, #380]	; (800f0b8 <__ieee754_pow+0x3d0>)
 800ef3c:	f7f1 f91e 	bl	800017c <__aeabi_dsub>
 800ef40:	a355      	add	r3, pc, #340	; (adr r3, 800f098 <__ieee754_pow+0x3b0>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	4604      	mov	r4, r0
 800ef48:	460d      	mov	r5, r1
 800ef4a:	f7f1 facf 	bl	80004ec <__aeabi_dmul>
 800ef4e:	a354      	add	r3, pc, #336	; (adr r3, 800f0a0 <__ieee754_pow+0x3b8>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	4606      	mov	r6, r0
 800ef56:	460f      	mov	r7, r1
 800ef58:	4620      	mov	r0, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	f7f1 fac6 	bl	80004ec <__aeabi_dmul>
 800ef60:	2200      	movs	r2, #0
 800ef62:	4682      	mov	sl, r0
 800ef64:	468b      	mov	fp, r1
 800ef66:	4620      	mov	r0, r4
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4b54      	ldr	r3, [pc, #336]	; (800f0bc <__ieee754_pow+0x3d4>)
 800ef6c:	f7f1 fabe 	bl	80004ec <__aeabi_dmul>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	a14c      	add	r1, pc, #304	; (adr r1, 800f0a8 <__ieee754_pow+0x3c0>)
 800ef76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef7a:	f7f1 f8ff 	bl	800017c <__aeabi_dsub>
 800ef7e:	4622      	mov	r2, r4
 800ef80:	462b      	mov	r3, r5
 800ef82:	f7f1 fab3 	bl	80004ec <__aeabi_dmul>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	494c      	ldr	r1, [pc, #304]	; (800f0c0 <__ieee754_pow+0x3d8>)
 800ef8e:	f7f1 f8f5 	bl	800017c <__aeabi_dsub>
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	4680      	mov	r8, r0
 800ef98:	4689      	mov	r9, r1
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	f7f1 faa5 	bl	80004ec <__aeabi_dmul>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4640      	mov	r0, r8
 800efa8:	4649      	mov	r1, r9
 800efaa:	f7f1 fa9f 	bl	80004ec <__aeabi_dmul>
 800efae:	a340      	add	r3, pc, #256	; (adr r3, 800f0b0 <__ieee754_pow+0x3c8>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f7f1 fa9a 	bl	80004ec <__aeabi_dmul>
 800efb8:	4602      	mov	r2, r0
 800efba:	460b      	mov	r3, r1
 800efbc:	4650      	mov	r0, sl
 800efbe:	4659      	mov	r1, fp
 800efc0:	f7f1 f8dc 	bl	800017c <__aeabi_dsub>
 800efc4:	f04f 0a00 	mov.w	sl, #0
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	4604      	mov	r4, r0
 800efce:	460d      	mov	r5, r1
 800efd0:	4630      	mov	r0, r6
 800efd2:	4639      	mov	r1, r7
 800efd4:	f7f1 f8d4 	bl	8000180 <__adddf3>
 800efd8:	4632      	mov	r2, r6
 800efda:	463b      	mov	r3, r7
 800efdc:	4650      	mov	r0, sl
 800efde:	468b      	mov	fp, r1
 800efe0:	f7f1 f8cc 	bl	800017c <__aeabi_dsub>
 800efe4:	4602      	mov	r2, r0
 800efe6:	460b      	mov	r3, r1
 800efe8:	4620      	mov	r0, r4
 800efea:	4629      	mov	r1, r5
 800efec:	f7f1 f8c6 	bl	800017c <__aeabi_dsub>
 800eff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eff4:	9b00      	ldr	r3, [sp, #0]
 800eff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eff8:	3b01      	subs	r3, #1
 800effa:	4313      	orrs	r3, r2
 800effc:	f04f 0600 	mov.w	r6, #0
 800f000:	f04f 0200 	mov.w	r2, #0
 800f004:	bf0c      	ite	eq
 800f006:	4b2f      	ldreq	r3, [pc, #188]	; (800f0c4 <__ieee754_pow+0x3dc>)
 800f008:	4b2b      	ldrne	r3, [pc, #172]	; (800f0b8 <__ieee754_pow+0x3d0>)
 800f00a:	4604      	mov	r4, r0
 800f00c:	460d      	mov	r5, r1
 800f00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f012:	e9cd 2300 	strd	r2, r3, [sp]
 800f016:	4632      	mov	r2, r6
 800f018:	463b      	mov	r3, r7
 800f01a:	f7f1 f8af 	bl	800017c <__aeabi_dsub>
 800f01e:	4652      	mov	r2, sl
 800f020:	465b      	mov	r3, fp
 800f022:	f7f1 fa63 	bl	80004ec <__aeabi_dmul>
 800f026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f02a:	4680      	mov	r8, r0
 800f02c:	4689      	mov	r9, r1
 800f02e:	4620      	mov	r0, r4
 800f030:	4629      	mov	r1, r5
 800f032:	f7f1 fa5b 	bl	80004ec <__aeabi_dmul>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4640      	mov	r0, r8
 800f03c:	4649      	mov	r1, r9
 800f03e:	f7f1 f89f 	bl	8000180 <__adddf3>
 800f042:	4632      	mov	r2, r6
 800f044:	463b      	mov	r3, r7
 800f046:	4680      	mov	r8, r0
 800f048:	4689      	mov	r9, r1
 800f04a:	4650      	mov	r0, sl
 800f04c:	4659      	mov	r1, fp
 800f04e:	f7f1 fa4d 	bl	80004ec <__aeabi_dmul>
 800f052:	4604      	mov	r4, r0
 800f054:	460d      	mov	r5, r1
 800f056:	460b      	mov	r3, r1
 800f058:	4602      	mov	r2, r0
 800f05a:	4649      	mov	r1, r9
 800f05c:	4640      	mov	r0, r8
 800f05e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f062:	f7f1 f88d 	bl	8000180 <__adddf3>
 800f066:	4b18      	ldr	r3, [pc, #96]	; (800f0c8 <__ieee754_pow+0x3e0>)
 800f068:	4682      	mov	sl, r0
 800f06a:	4299      	cmp	r1, r3
 800f06c:	460f      	mov	r7, r1
 800f06e:	460e      	mov	r6, r1
 800f070:	f340 82e5 	ble.w	800f63e <__ieee754_pow+0x956>
 800f074:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f078:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f07c:	4303      	orrs	r3, r0
 800f07e:	f000 81df 	beq.w	800f440 <__ieee754_pow+0x758>
 800f082:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f086:	2200      	movs	r2, #0
 800f088:	2300      	movs	r3, #0
 800f08a:	f7f1 fca1 	bl	80009d0 <__aeabi_dcmplt>
 800f08e:	3800      	subs	r0, #0
 800f090:	bf18      	it	ne
 800f092:	2001      	movne	r0, #1
 800f094:	e72e      	b.n	800eef4 <__ieee754_pow+0x20c>
 800f096:	bf00      	nop
 800f098:	60000000 	.word	0x60000000
 800f09c:	3ff71547 	.word	0x3ff71547
 800f0a0:	f85ddf44 	.word	0xf85ddf44
 800f0a4:	3e54ae0b 	.word	0x3e54ae0b
 800f0a8:	55555555 	.word	0x55555555
 800f0ac:	3fd55555 	.word	0x3fd55555
 800f0b0:	652b82fe 	.word	0x652b82fe
 800f0b4:	3ff71547 	.word	0x3ff71547
 800f0b8:	3ff00000 	.word	0x3ff00000
 800f0bc:	3fd00000 	.word	0x3fd00000
 800f0c0:	3fe00000 	.word	0x3fe00000
 800f0c4:	bff00000 	.word	0xbff00000
 800f0c8:	408fffff 	.word	0x408fffff
 800f0cc:	4bd2      	ldr	r3, [pc, #840]	; (800f418 <__ieee754_pow+0x730>)
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	402b      	ands	r3, r5
 800f0d2:	b943      	cbnz	r3, 800f0e6 <__ieee754_pow+0x3fe>
 800f0d4:	4658      	mov	r0, fp
 800f0d6:	4661      	mov	r1, ip
 800f0d8:	4bd0      	ldr	r3, [pc, #832]	; (800f41c <__ieee754_pow+0x734>)
 800f0da:	f7f1 fa07 	bl	80004ec <__aeabi_dmul>
 800f0de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f0e2:	4683      	mov	fp, r0
 800f0e4:	460c      	mov	r4, r1
 800f0e6:	1523      	asrs	r3, r4, #20
 800f0e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f0ec:	4413      	add	r3, r2
 800f0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f0:	4bcb      	ldr	r3, [pc, #812]	; (800f420 <__ieee754_pow+0x738>)
 800f0f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f0f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f0fa:	429c      	cmp	r4, r3
 800f0fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f100:	dd08      	ble.n	800f114 <__ieee754_pow+0x42c>
 800f102:	4bc8      	ldr	r3, [pc, #800]	; (800f424 <__ieee754_pow+0x73c>)
 800f104:	429c      	cmp	r4, r3
 800f106:	f340 8199 	ble.w	800f43c <__ieee754_pow+0x754>
 800f10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f10c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f110:	3301      	adds	r3, #1
 800f112:	930b      	str	r3, [sp, #44]	; 0x2c
 800f114:	2600      	movs	r6, #0
 800f116:	00f3      	lsls	r3, r6, #3
 800f118:	930d      	str	r3, [sp, #52]	; 0x34
 800f11a:	4bc3      	ldr	r3, [pc, #780]	; (800f428 <__ieee754_pow+0x740>)
 800f11c:	4658      	mov	r0, fp
 800f11e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f122:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f126:	4629      	mov	r1, r5
 800f128:	461a      	mov	r2, r3
 800f12a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800f12e:	4623      	mov	r3, r4
 800f130:	f7f1 f824 	bl	800017c <__aeabi_dsub>
 800f134:	46da      	mov	sl, fp
 800f136:	462b      	mov	r3, r5
 800f138:	4652      	mov	r2, sl
 800f13a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f13e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f142:	f7f1 f81d 	bl	8000180 <__adddf3>
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	2000      	movs	r0, #0
 800f14c:	49b7      	ldr	r1, [pc, #732]	; (800f42c <__ieee754_pow+0x744>)
 800f14e:	f7f1 faf7 	bl	8000740 <__aeabi_ddiv>
 800f152:	4602      	mov	r2, r0
 800f154:	460b      	mov	r3, r1
 800f156:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f15a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f15e:	f7f1 f9c5 	bl	80004ec <__aeabi_dmul>
 800f162:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f166:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f16a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f16e:	2300      	movs	r3, #0
 800f170:	2200      	movs	r2, #0
 800f172:	46ab      	mov	fp, r5
 800f174:	106d      	asrs	r5, r5, #1
 800f176:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f17a:	9304      	str	r3, [sp, #16]
 800f17c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f180:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f184:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800f188:	4640      	mov	r0, r8
 800f18a:	4649      	mov	r1, r9
 800f18c:	4614      	mov	r4, r2
 800f18e:	461d      	mov	r5, r3
 800f190:	f7f1 f9ac 	bl	80004ec <__aeabi_dmul>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f19c:	f7f0 ffee 	bl	800017c <__aeabi_dsub>
 800f1a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	f7f0 ffe6 	bl	800017c <__aeabi_dsub>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4650      	mov	r0, sl
 800f1b6:	4659      	mov	r1, fp
 800f1b8:	f7f0 ffe0 	bl	800017c <__aeabi_dsub>
 800f1bc:	4642      	mov	r2, r8
 800f1be:	464b      	mov	r3, r9
 800f1c0:	f7f1 f994 	bl	80004ec <__aeabi_dmul>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	4639      	mov	r1, r7
 800f1cc:	f7f0 ffd6 	bl	800017c <__aeabi_dsub>
 800f1d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f1d4:	f7f1 f98a 	bl	80004ec <__aeabi_dmul>
 800f1d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f7f1 f982 	bl	80004ec <__aeabi_dmul>
 800f1e8:	a379      	add	r3, pc, #484	; (adr r3, 800f3d0 <__ieee754_pow+0x6e8>)
 800f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	460d      	mov	r5, r1
 800f1f2:	f7f1 f97b 	bl	80004ec <__aeabi_dmul>
 800f1f6:	a378      	add	r3, pc, #480	; (adr r3, 800f3d8 <__ieee754_pow+0x6f0>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f0 ffc0 	bl	8000180 <__adddf3>
 800f200:	4622      	mov	r2, r4
 800f202:	462b      	mov	r3, r5
 800f204:	f7f1 f972 	bl	80004ec <__aeabi_dmul>
 800f208:	a375      	add	r3, pc, #468	; (adr r3, 800f3e0 <__ieee754_pow+0x6f8>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f7f0 ffb7 	bl	8000180 <__adddf3>
 800f212:	4622      	mov	r2, r4
 800f214:	462b      	mov	r3, r5
 800f216:	f7f1 f969 	bl	80004ec <__aeabi_dmul>
 800f21a:	a373      	add	r3, pc, #460	; (adr r3, 800f3e8 <__ieee754_pow+0x700>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f0 ffae 	bl	8000180 <__adddf3>
 800f224:	4622      	mov	r2, r4
 800f226:	462b      	mov	r3, r5
 800f228:	f7f1 f960 	bl	80004ec <__aeabi_dmul>
 800f22c:	a370      	add	r3, pc, #448	; (adr r3, 800f3f0 <__ieee754_pow+0x708>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f0 ffa5 	bl	8000180 <__adddf3>
 800f236:	4622      	mov	r2, r4
 800f238:	462b      	mov	r3, r5
 800f23a:	f7f1 f957 	bl	80004ec <__aeabi_dmul>
 800f23e:	a36e      	add	r3, pc, #440	; (adr r3, 800f3f8 <__ieee754_pow+0x710>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f0 ff9c 	bl	8000180 <__adddf3>
 800f248:	4622      	mov	r2, r4
 800f24a:	4606      	mov	r6, r0
 800f24c:	460f      	mov	r7, r1
 800f24e:	462b      	mov	r3, r5
 800f250:	4620      	mov	r0, r4
 800f252:	4629      	mov	r1, r5
 800f254:	f7f1 f94a 	bl	80004ec <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 f944 	bl	80004ec <__aeabi_dmul>
 800f264:	4604      	mov	r4, r0
 800f266:	460d      	mov	r5, r1
 800f268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f26c:	4642      	mov	r2, r8
 800f26e:	464b      	mov	r3, r9
 800f270:	f7f0 ff86 	bl	8000180 <__adddf3>
 800f274:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f278:	f7f1 f938 	bl	80004ec <__aeabi_dmul>
 800f27c:	4622      	mov	r2, r4
 800f27e:	462b      	mov	r3, r5
 800f280:	f7f0 ff7e 	bl	8000180 <__adddf3>
 800f284:	4642      	mov	r2, r8
 800f286:	4606      	mov	r6, r0
 800f288:	460f      	mov	r7, r1
 800f28a:	464b      	mov	r3, r9
 800f28c:	4640      	mov	r0, r8
 800f28e:	4649      	mov	r1, r9
 800f290:	f7f1 f92c 	bl	80004ec <__aeabi_dmul>
 800f294:	2200      	movs	r2, #0
 800f296:	4b66      	ldr	r3, [pc, #408]	; (800f430 <__ieee754_pow+0x748>)
 800f298:	4682      	mov	sl, r0
 800f29a:	468b      	mov	fp, r1
 800f29c:	f7f0 ff70 	bl	8000180 <__adddf3>
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	f7f0 ff6c 	bl	8000180 <__adddf3>
 800f2a8:	2400      	movs	r4, #0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	4622      	mov	r2, r4
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	4649      	mov	r1, r9
 800f2b4:	f7f1 f91a 	bl	80004ec <__aeabi_dmul>
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	4689      	mov	r9, r1
 800f2be:	4620      	mov	r0, r4
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4b5b      	ldr	r3, [pc, #364]	; (800f430 <__ieee754_pow+0x748>)
 800f2c4:	f7f0 ff5a 	bl	800017c <__aeabi_dsub>
 800f2c8:	4652      	mov	r2, sl
 800f2ca:	465b      	mov	r3, fp
 800f2cc:	f7f0 ff56 	bl	800017c <__aeabi_dsub>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	f7f0 ff50 	bl	800017c <__aeabi_dsub>
 800f2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2e0:	f7f1 f904 	bl	80004ec <__aeabi_dmul>
 800f2e4:	4622      	mov	r2, r4
 800f2e6:	4606      	mov	r6, r0
 800f2e8:	460f      	mov	r7, r1
 800f2ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f2ee:	462b      	mov	r3, r5
 800f2f0:	f7f1 f8fc 	bl	80004ec <__aeabi_dmul>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	f7f0 ff40 	bl	8000180 <__adddf3>
 800f300:	2400      	movs	r4, #0
 800f302:	4606      	mov	r6, r0
 800f304:	460f      	mov	r7, r1
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	4640      	mov	r0, r8
 800f30c:	4649      	mov	r1, r9
 800f30e:	f7f0 ff37 	bl	8000180 <__adddf3>
 800f312:	a33b      	add	r3, pc, #236	; (adr r3, 800f400 <__ieee754_pow+0x718>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	4620      	mov	r0, r4
 800f31a:	460d      	mov	r5, r1
 800f31c:	f7f1 f8e6 	bl	80004ec <__aeabi_dmul>
 800f320:	4642      	mov	r2, r8
 800f322:	464b      	mov	r3, r9
 800f324:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f328:	4620      	mov	r0, r4
 800f32a:	4629      	mov	r1, r5
 800f32c:	f7f0 ff26 	bl	800017c <__aeabi_dsub>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4630      	mov	r0, r6
 800f336:	4639      	mov	r1, r7
 800f338:	f7f0 ff20 	bl	800017c <__aeabi_dsub>
 800f33c:	a332      	add	r3, pc, #200	; (adr r3, 800f408 <__ieee754_pow+0x720>)
 800f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f342:	f7f1 f8d3 	bl	80004ec <__aeabi_dmul>
 800f346:	a332      	add	r3, pc, #200	; (adr r3, 800f410 <__ieee754_pow+0x728>)
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	4606      	mov	r6, r0
 800f34e:	460f      	mov	r7, r1
 800f350:	4620      	mov	r0, r4
 800f352:	4629      	mov	r1, r5
 800f354:	f7f1 f8ca 	bl	80004ec <__aeabi_dmul>
 800f358:	4602      	mov	r2, r0
 800f35a:	460b      	mov	r3, r1
 800f35c:	4630      	mov	r0, r6
 800f35e:	4639      	mov	r1, r7
 800f360:	f7f0 ff0e 	bl	8000180 <__adddf3>
 800f364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f366:	4b33      	ldr	r3, [pc, #204]	; (800f434 <__ieee754_pow+0x74c>)
 800f368:	f04f 0a00 	mov.w	sl, #0
 800f36c:	4413      	add	r3, r2
 800f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f372:	f7f0 ff05 	bl	8000180 <__adddf3>
 800f376:	4680      	mov	r8, r0
 800f378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f37a:	4689      	mov	r9, r1
 800f37c:	f7f1 f84c 	bl	8000418 <__aeabi_i2d>
 800f380:	4604      	mov	r4, r0
 800f382:	460d      	mov	r5, r1
 800f384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f386:	4b2c      	ldr	r3, [pc, #176]	; (800f438 <__ieee754_pow+0x750>)
 800f388:	4413      	add	r3, r2
 800f38a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f38e:	4642      	mov	r2, r8
 800f390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f394:	464b      	mov	r3, r9
 800f396:	f7f0 fef3 	bl	8000180 <__adddf3>
 800f39a:	4632      	mov	r2, r6
 800f39c:	463b      	mov	r3, r7
 800f39e:	f7f0 feef 	bl	8000180 <__adddf3>
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	462b      	mov	r3, r5
 800f3a6:	f7f0 feeb 	bl	8000180 <__adddf3>
 800f3aa:	4622      	mov	r2, r4
 800f3ac:	462b      	mov	r3, r5
 800f3ae:	4650      	mov	r0, sl
 800f3b0:	468b      	mov	fp, r1
 800f3b2:	f7f0 fee3 	bl	800017c <__aeabi_dsub>
 800f3b6:	4632      	mov	r2, r6
 800f3b8:	463b      	mov	r3, r7
 800f3ba:	f7f0 fedf 	bl	800017c <__aeabi_dsub>
 800f3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3c2:	f7f0 fedb 	bl	800017c <__aeabi_dsub>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	4640      	mov	r0, r8
 800f3cc:	4649      	mov	r1, r9
 800f3ce:	e60d      	b.n	800efec <__ieee754_pow+0x304>
 800f3d0:	4a454eef 	.word	0x4a454eef
 800f3d4:	3fca7e28 	.word	0x3fca7e28
 800f3d8:	93c9db65 	.word	0x93c9db65
 800f3dc:	3fcd864a 	.word	0x3fcd864a
 800f3e0:	a91d4101 	.word	0xa91d4101
 800f3e4:	3fd17460 	.word	0x3fd17460
 800f3e8:	518f264d 	.word	0x518f264d
 800f3ec:	3fd55555 	.word	0x3fd55555
 800f3f0:	db6fabff 	.word	0xdb6fabff
 800f3f4:	3fdb6db6 	.word	0x3fdb6db6
 800f3f8:	33333303 	.word	0x33333303
 800f3fc:	3fe33333 	.word	0x3fe33333
 800f400:	e0000000 	.word	0xe0000000
 800f404:	3feec709 	.word	0x3feec709
 800f408:	dc3a03fd 	.word	0xdc3a03fd
 800f40c:	3feec709 	.word	0x3feec709
 800f410:	145b01f5 	.word	0x145b01f5
 800f414:	be3e2fe0 	.word	0xbe3e2fe0
 800f418:	7ff00000 	.word	0x7ff00000
 800f41c:	43400000 	.word	0x43400000
 800f420:	0003988e 	.word	0x0003988e
 800f424:	000bb679 	.word	0x000bb679
 800f428:	08011590 	.word	0x08011590
 800f42c:	3ff00000 	.word	0x3ff00000
 800f430:	40080000 	.word	0x40080000
 800f434:	080115b0 	.word	0x080115b0
 800f438:	080115a0 	.word	0x080115a0
 800f43c:	2601      	movs	r6, #1
 800f43e:	e66a      	b.n	800f116 <__ieee754_pow+0x42e>
 800f440:	a39d      	add	r3, pc, #628	; (adr r3, 800f6b8 <__ieee754_pow+0x9d0>)
 800f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f446:	4640      	mov	r0, r8
 800f448:	4649      	mov	r1, r9
 800f44a:	f7f0 fe99 	bl	8000180 <__adddf3>
 800f44e:	4622      	mov	r2, r4
 800f450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f454:	462b      	mov	r3, r5
 800f456:	4650      	mov	r0, sl
 800f458:	4639      	mov	r1, r7
 800f45a:	f7f0 fe8f 	bl	800017c <__aeabi_dsub>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f466:	f7f1 fad1 	bl	8000a0c <__aeabi_dcmpgt>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f47f ae09 	bne.w	800f082 <__ieee754_pow+0x39a>
 800f470:	4aa3      	ldr	r2, [pc, #652]	; (800f700 <__ieee754_pow+0xa18>)
 800f472:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800f476:	4293      	cmp	r3, r2
 800f478:	f340 8101 	ble.w	800f67e <__ieee754_pow+0x996>
 800f47c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f480:	2000      	movs	r0, #0
 800f482:	151b      	asrs	r3, r3, #20
 800f484:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f488:	fa4a f303 	asr.w	r3, sl, r3
 800f48c:	4433      	add	r3, r6
 800f48e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f492:	4f9c      	ldr	r7, [pc, #624]	; (800f704 <__ieee754_pow+0xa1c>)
 800f494:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f498:	4117      	asrs	r7, r2
 800f49a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f49e:	ea23 0107 	bic.w	r1, r3, r7
 800f4a2:	f1c2 0214 	rsb	r2, r2, #20
 800f4a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	fa4a fa02 	asr.w	sl, sl, r2
 800f4b0:	2e00      	cmp	r6, #0
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	bfb8      	it	lt
 800f4ba:	f1ca 0a00 	rsblt	sl, sl, #0
 800f4be:	f7f0 fe5d 	bl	800017c <__aeabi_dsub>
 800f4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4ca:	2400      	movs	r4, #0
 800f4cc:	4642      	mov	r2, r8
 800f4ce:	464b      	mov	r3, r9
 800f4d0:	f7f0 fe56 	bl	8000180 <__adddf3>
 800f4d4:	a37a      	add	r3, pc, #488	; (adr r3, 800f6c0 <__ieee754_pow+0x9d8>)
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	4620      	mov	r0, r4
 800f4dc:	460d      	mov	r5, r1
 800f4de:	f7f1 f805 	bl	80004ec <__aeabi_dmul>
 800f4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	460f      	mov	r7, r1
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	f7f0 fe45 	bl	800017c <__aeabi_dsub>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4640      	mov	r0, r8
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	f7f0 fe3f 	bl	800017c <__aeabi_dsub>
 800f4fe:	a372      	add	r3, pc, #456	; (adr r3, 800f6c8 <__ieee754_pow+0x9e0>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f0 fff2 	bl	80004ec <__aeabi_dmul>
 800f508:	a371      	add	r3, pc, #452	; (adr r3, 800f6d0 <__ieee754_pow+0x9e8>)
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	4680      	mov	r8, r0
 800f510:	4689      	mov	r9, r1
 800f512:	4620      	mov	r0, r4
 800f514:	4629      	mov	r1, r5
 800f516:	f7f0 ffe9 	bl	80004ec <__aeabi_dmul>
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	4640      	mov	r0, r8
 800f520:	4649      	mov	r1, r9
 800f522:	f7f0 fe2d 	bl	8000180 <__adddf3>
 800f526:	4604      	mov	r4, r0
 800f528:	460d      	mov	r5, r1
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4630      	mov	r0, r6
 800f530:	4639      	mov	r1, r7
 800f532:	f7f0 fe25 	bl	8000180 <__adddf3>
 800f536:	4632      	mov	r2, r6
 800f538:	463b      	mov	r3, r7
 800f53a:	4680      	mov	r8, r0
 800f53c:	4689      	mov	r9, r1
 800f53e:	f7f0 fe1d 	bl	800017c <__aeabi_dsub>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	4620      	mov	r0, r4
 800f548:	4629      	mov	r1, r5
 800f54a:	f7f0 fe17 	bl	800017c <__aeabi_dsub>
 800f54e:	4642      	mov	r2, r8
 800f550:	4606      	mov	r6, r0
 800f552:	460f      	mov	r7, r1
 800f554:	464b      	mov	r3, r9
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f0 ffc7 	bl	80004ec <__aeabi_dmul>
 800f55e:	a35e      	add	r3, pc, #376	; (adr r3, 800f6d8 <__ieee754_pow+0x9f0>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	4604      	mov	r4, r0
 800f566:	460d      	mov	r5, r1
 800f568:	f7f0 ffc0 	bl	80004ec <__aeabi_dmul>
 800f56c:	a35c      	add	r3, pc, #368	; (adr r3, 800f6e0 <__ieee754_pow+0x9f8>)
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	f7f0 fe03 	bl	800017c <__aeabi_dsub>
 800f576:	4622      	mov	r2, r4
 800f578:	462b      	mov	r3, r5
 800f57a:	f7f0 ffb7 	bl	80004ec <__aeabi_dmul>
 800f57e:	a35a      	add	r3, pc, #360	; (adr r3, 800f6e8 <__ieee754_pow+0xa00>)
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f7f0 fdfc 	bl	8000180 <__adddf3>
 800f588:	4622      	mov	r2, r4
 800f58a:	462b      	mov	r3, r5
 800f58c:	f7f0 ffae 	bl	80004ec <__aeabi_dmul>
 800f590:	a357      	add	r3, pc, #348	; (adr r3, 800f6f0 <__ieee754_pow+0xa08>)
 800f592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f596:	f7f0 fdf1 	bl	800017c <__aeabi_dsub>
 800f59a:	4622      	mov	r2, r4
 800f59c:	462b      	mov	r3, r5
 800f59e:	f7f0 ffa5 	bl	80004ec <__aeabi_dmul>
 800f5a2:	a355      	add	r3, pc, #340	; (adr r3, 800f6f8 <__ieee754_pow+0xa10>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	f7f0 fdea 	bl	8000180 <__adddf3>
 800f5ac:	4622      	mov	r2, r4
 800f5ae:	462b      	mov	r3, r5
 800f5b0:	f7f0 ff9c 	bl	80004ec <__aeabi_dmul>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	f7f0 fdde 	bl	800017c <__aeabi_dsub>
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	4649      	mov	r1, r9
 800f5cc:	f7f0 ff8e 	bl	80004ec <__aeabi_dmul>
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5da:	4620      	mov	r0, r4
 800f5dc:	4629      	mov	r1, r5
 800f5de:	f7f0 fdcd 	bl	800017c <__aeabi_dsub>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ea:	f7f1 f8a9 	bl	8000740 <__aeabi_ddiv>
 800f5ee:	4632      	mov	r2, r6
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	460d      	mov	r5, r1
 800f5f4:	463b      	mov	r3, r7
 800f5f6:	4640      	mov	r0, r8
 800f5f8:	4649      	mov	r1, r9
 800f5fa:	f7f0 ff77 	bl	80004ec <__aeabi_dmul>
 800f5fe:	4632      	mov	r2, r6
 800f600:	463b      	mov	r3, r7
 800f602:	f7f0 fdbd 	bl	8000180 <__adddf3>
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	4620      	mov	r0, r4
 800f60c:	4629      	mov	r1, r5
 800f60e:	f7f0 fdb5 	bl	800017c <__aeabi_dsub>
 800f612:	4642      	mov	r2, r8
 800f614:	464b      	mov	r3, r9
 800f616:	f7f0 fdb1 	bl	800017c <__aeabi_dsub>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	2000      	movs	r0, #0
 800f620:	4939      	ldr	r1, [pc, #228]	; (800f708 <__ieee754_pow+0xa20>)
 800f622:	f7f0 fdab 	bl	800017c <__aeabi_dsub>
 800f626:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f62a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f62e:	da29      	bge.n	800f684 <__ieee754_pow+0x99c>
 800f630:	4652      	mov	r2, sl
 800f632:	f000 f955 	bl	800f8e0 <scalbn>
 800f636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f63a:	f7ff bbfe 	b.w	800ee3a <__ieee754_pow+0x152>
 800f63e:	4b33      	ldr	r3, [pc, #204]	; (800f70c <__ieee754_pow+0xa24>)
 800f640:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f644:	429f      	cmp	r7, r3
 800f646:	f77f af13 	ble.w	800f470 <__ieee754_pow+0x788>
 800f64a:	4b31      	ldr	r3, [pc, #196]	; (800f710 <__ieee754_pow+0xa28>)
 800f64c:	440b      	add	r3, r1
 800f64e:	4303      	orrs	r3, r0
 800f650:	d009      	beq.n	800f666 <__ieee754_pow+0x97e>
 800f652:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f656:	2200      	movs	r2, #0
 800f658:	2300      	movs	r3, #0
 800f65a:	f7f1 f9b9 	bl	80009d0 <__aeabi_dcmplt>
 800f65e:	3800      	subs	r0, #0
 800f660:	bf18      	it	ne
 800f662:	2001      	movne	r0, #1
 800f664:	e453      	b.n	800ef0e <__ieee754_pow+0x226>
 800f666:	4622      	mov	r2, r4
 800f668:	462b      	mov	r3, r5
 800f66a:	f7f0 fd87 	bl	800017c <__aeabi_dsub>
 800f66e:	4642      	mov	r2, r8
 800f670:	464b      	mov	r3, r9
 800f672:	f7f1 f9c1 	bl	80009f8 <__aeabi_dcmpge>
 800f676:	2800      	cmp	r0, #0
 800f678:	f43f aefa 	beq.w	800f470 <__ieee754_pow+0x788>
 800f67c:	e7e9      	b.n	800f652 <__ieee754_pow+0x96a>
 800f67e:	f04f 0a00 	mov.w	sl, #0
 800f682:	e720      	b.n	800f4c6 <__ieee754_pow+0x7de>
 800f684:	4621      	mov	r1, r4
 800f686:	e7d6      	b.n	800f636 <__ieee754_pow+0x94e>
 800f688:	f04f 0b00 	mov.w	fp, #0
 800f68c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800f708 <__ieee754_pow+0xa20>
 800f690:	f7ff bbba 	b.w	800ee08 <__ieee754_pow+0x120>
 800f694:	f04f 0b00 	mov.w	fp, #0
 800f698:	f04f 0c00 	mov.w	ip, #0
 800f69c:	f7ff bbb4 	b.w	800ee08 <__ieee754_pow+0x120>
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	4649      	mov	r1, r9
 800f6a4:	f7ff bb3d 	b.w	800ed22 <__ieee754_pow+0x3a>
 800f6a8:	9200      	str	r2, [sp, #0]
 800f6aa:	f7ff bb89 	b.w	800edc0 <__ieee754_pow+0xd8>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f7ff bb73 	b.w	800ed9a <__ieee754_pow+0xb2>
 800f6b4:	f3af 8000 	nop.w
 800f6b8:	652b82fe 	.word	0x652b82fe
 800f6bc:	3c971547 	.word	0x3c971547
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	3fe62e43 	.word	0x3fe62e43
 800f6c8:	fefa39ef 	.word	0xfefa39ef
 800f6cc:	3fe62e42 	.word	0x3fe62e42
 800f6d0:	0ca86c39 	.word	0x0ca86c39
 800f6d4:	be205c61 	.word	0xbe205c61
 800f6d8:	72bea4d0 	.word	0x72bea4d0
 800f6dc:	3e663769 	.word	0x3e663769
 800f6e0:	c5d26bf1 	.word	0xc5d26bf1
 800f6e4:	3ebbbd41 	.word	0x3ebbbd41
 800f6e8:	af25de2c 	.word	0xaf25de2c
 800f6ec:	3f11566a 	.word	0x3f11566a
 800f6f0:	16bebd93 	.word	0x16bebd93
 800f6f4:	3f66c16c 	.word	0x3f66c16c
 800f6f8:	5555553e 	.word	0x5555553e
 800f6fc:	3fc55555 	.word	0x3fc55555
 800f700:	3fe00000 	.word	0x3fe00000
 800f704:	000fffff 	.word	0x000fffff
 800f708:	3ff00000 	.word	0x3ff00000
 800f70c:	4090cbff 	.word	0x4090cbff
 800f710:	3f6f3400 	.word	0x3f6f3400

0800f714 <__ieee754_sqrt>:
 800f714:	f8df c158 	ldr.w	ip, [pc, #344]	; 800f870 <__ieee754_sqrt+0x15c>
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	ea3c 0c01 	bics.w	ip, ip, r1
 800f720:	4606      	mov	r6, r0
 800f722:	460d      	mov	r5, r1
 800f724:	460c      	mov	r4, r1
 800f726:	460a      	mov	r2, r1
 800f728:	4607      	mov	r7, r0
 800f72a:	4603      	mov	r3, r0
 800f72c:	d10f      	bne.n	800f74e <__ieee754_sqrt+0x3a>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	f7f0 fedb 	bl	80004ec <__aeabi_dmul>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	4630      	mov	r0, r6
 800f73c:	4629      	mov	r1, r5
 800f73e:	f7f0 fd1f 	bl	8000180 <__adddf3>
 800f742:	4606      	mov	r6, r0
 800f744:	460d      	mov	r5, r1
 800f746:	4630      	mov	r0, r6
 800f748:	4629      	mov	r1, r5
 800f74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74e:	2900      	cmp	r1, #0
 800f750:	dc0e      	bgt.n	800f770 <__ieee754_sqrt+0x5c>
 800f752:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f756:	ea5c 0707 	orrs.w	r7, ip, r7
 800f75a:	d0f4      	beq.n	800f746 <__ieee754_sqrt+0x32>
 800f75c:	b141      	cbz	r1, 800f770 <__ieee754_sqrt+0x5c>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	f7f0 fd0b 	bl	800017c <__aeabi_dsub>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	f7f0 ffe9 	bl	8000740 <__aeabi_ddiv>
 800f76e:	e7e8      	b.n	800f742 <__ieee754_sqrt+0x2e>
 800f770:	1521      	asrs	r1, r4, #20
 800f772:	d075      	beq.n	800f860 <__ieee754_sqrt+0x14c>
 800f774:	07cc      	lsls	r4, r1, #31
 800f776:	f04f 0400 	mov.w	r4, #0
 800f77a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f77e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800f782:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f786:	bf5e      	ittt	pl
 800f788:	0fd9      	lsrpl	r1, r3, #31
 800f78a:	005b      	lslpl	r3, r3, #1
 800f78c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800f790:	0fd9      	lsrs	r1, r3, #31
 800f792:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f796:	2516      	movs	r5, #22
 800f798:	4620      	mov	r0, r4
 800f79a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f79e:	107f      	asrs	r7, r7, #1
 800f7a0:	005b      	lsls	r3, r3, #1
 800f7a2:	1846      	adds	r6, r0, r1
 800f7a4:	4296      	cmp	r6, r2
 800f7a6:	bfde      	ittt	le
 800f7a8:	1b92      	suble	r2, r2, r6
 800f7aa:	1870      	addle	r0, r6, r1
 800f7ac:	1864      	addle	r4, r4, r1
 800f7ae:	0052      	lsls	r2, r2, #1
 800f7b0:	3d01      	subs	r5, #1
 800f7b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f7b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f7ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f7be:	d1f0      	bne.n	800f7a2 <__ieee754_sqrt+0x8e>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	f04f 0e20 	mov.w	lr, #32
 800f7c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f7ca:	4282      	cmp	r2, r0
 800f7cc:	eb06 0c05 	add.w	ip, r6, r5
 800f7d0:	dc02      	bgt.n	800f7d8 <__ieee754_sqrt+0xc4>
 800f7d2:	d113      	bne.n	800f7fc <__ieee754_sqrt+0xe8>
 800f7d4:	459c      	cmp	ip, r3
 800f7d6:	d811      	bhi.n	800f7fc <__ieee754_sqrt+0xe8>
 800f7d8:	f1bc 0f00 	cmp.w	ip, #0
 800f7dc:	eb0c 0506 	add.w	r5, ip, r6
 800f7e0:	da43      	bge.n	800f86a <__ieee754_sqrt+0x156>
 800f7e2:	2d00      	cmp	r5, #0
 800f7e4:	db41      	blt.n	800f86a <__ieee754_sqrt+0x156>
 800f7e6:	f100 0801 	add.w	r8, r0, #1
 800f7ea:	1a12      	subs	r2, r2, r0
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	459c      	cmp	ip, r3
 800f7f0:	bf88      	it	hi
 800f7f2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f7f6:	eba3 030c 	sub.w	r3, r3, ip
 800f7fa:	4431      	add	r1, r6
 800f7fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f800:	f1be 0e01 	subs.w	lr, lr, #1
 800f804:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800f808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f80c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f810:	d1db      	bne.n	800f7ca <__ieee754_sqrt+0xb6>
 800f812:	4313      	orrs	r3, r2
 800f814:	d006      	beq.n	800f824 <__ieee754_sqrt+0x110>
 800f816:	1c48      	adds	r0, r1, #1
 800f818:	bf0b      	itete	eq
 800f81a:	4671      	moveq	r1, lr
 800f81c:	3101      	addne	r1, #1
 800f81e:	3401      	addeq	r4, #1
 800f820:	f021 0101 	bicne.w	r1, r1, #1
 800f824:	1063      	asrs	r3, r4, #1
 800f826:	0849      	lsrs	r1, r1, #1
 800f828:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f82c:	07e2      	lsls	r2, r4, #31
 800f82e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f832:	bf48      	it	mi
 800f834:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f838:	460e      	mov	r6, r1
 800f83a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f83e:	e782      	b.n	800f746 <__ieee754_sqrt+0x32>
 800f840:	0ada      	lsrs	r2, r3, #11
 800f842:	3815      	subs	r0, #21
 800f844:	055b      	lsls	r3, r3, #21
 800f846:	2a00      	cmp	r2, #0
 800f848:	d0fa      	beq.n	800f840 <__ieee754_sqrt+0x12c>
 800f84a:	02d5      	lsls	r5, r2, #11
 800f84c:	d50a      	bpl.n	800f864 <__ieee754_sqrt+0x150>
 800f84e:	f1c1 0420 	rsb	r4, r1, #32
 800f852:	fa23 f404 	lsr.w	r4, r3, r4
 800f856:	1e4d      	subs	r5, r1, #1
 800f858:	408b      	lsls	r3, r1
 800f85a:	4322      	orrs	r2, r4
 800f85c:	1b41      	subs	r1, r0, r5
 800f85e:	e789      	b.n	800f774 <__ieee754_sqrt+0x60>
 800f860:	4608      	mov	r0, r1
 800f862:	e7f0      	b.n	800f846 <__ieee754_sqrt+0x132>
 800f864:	0052      	lsls	r2, r2, #1
 800f866:	3101      	adds	r1, #1
 800f868:	e7ef      	b.n	800f84a <__ieee754_sqrt+0x136>
 800f86a:	4680      	mov	r8, r0
 800f86c:	e7bd      	b.n	800f7ea <__ieee754_sqrt+0xd6>
 800f86e:	bf00      	nop
 800f870:	7ff00000 	.word	0x7ff00000

0800f874 <with_errno>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	4604      	mov	r4, r0
 800f878:	460d      	mov	r5, r1
 800f87a:	4616      	mov	r6, r2
 800f87c:	f7fc f9d4 	bl	800bc28 <__errno>
 800f880:	4629      	mov	r1, r5
 800f882:	6006      	str	r6, [r0, #0]
 800f884:	4620      	mov	r0, r4
 800f886:	bd70      	pop	{r4, r5, r6, pc}

0800f888 <xflow>:
 800f888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f88a:	4615      	mov	r5, r2
 800f88c:	461c      	mov	r4, r3
 800f88e:	b180      	cbz	r0, 800f8b2 <xflow+0x2a>
 800f890:	4610      	mov	r0, r2
 800f892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f896:	e9cd 0100 	strd	r0, r1, [sp]
 800f89a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	f7f0 fe23 	bl	80004ec <__aeabi_dmul>
 800f8a6:	2222      	movs	r2, #34	; 0x22
 800f8a8:	b003      	add	sp, #12
 800f8aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8ae:	f7ff bfe1 	b.w	800f874 <with_errno>
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	e7ee      	b.n	800f896 <xflow+0xe>

0800f8b8 <__math_uflow>:
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f8be:	f7ff bfe3 	b.w	800f888 <xflow>

0800f8c2 <__math_oflow>:
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f8c8:	f7ff bfde 	b.w	800f888 <xflow>

0800f8cc <fabs>:
 800f8cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f8d0:	4770      	bx	lr

0800f8d2 <finite>:
 800f8d2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800f8d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f8da:	0fc0      	lsrs	r0, r0, #31
 800f8dc:	4770      	bx	lr
	...

0800f8e0 <scalbn>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	460d      	mov	r5, r1
 800f8ea:	4617      	mov	r7, r2
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	b996      	cbnz	r6, 800f916 <scalbn+0x36>
 800f8f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f8f4:	4303      	orrs	r3, r0
 800f8f6:	d039      	beq.n	800f96c <scalbn+0x8c>
 800f8f8:	4b33      	ldr	r3, [pc, #204]	; (800f9c8 <scalbn+0xe8>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f7f0 fdf6 	bl	80004ec <__aeabi_dmul>
 800f900:	4b32      	ldr	r3, [pc, #200]	; (800f9cc <scalbn+0xec>)
 800f902:	4604      	mov	r4, r0
 800f904:	429f      	cmp	r7, r3
 800f906:	460d      	mov	r5, r1
 800f908:	da0f      	bge.n	800f92a <scalbn+0x4a>
 800f90a:	a32b      	add	r3, pc, #172	; (adr r3, 800f9b8 <scalbn+0xd8>)
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	f7f0 fdec 	bl	80004ec <__aeabi_dmul>
 800f914:	e006      	b.n	800f924 <scalbn+0x44>
 800f916:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f91a:	4296      	cmp	r6, r2
 800f91c:	d10a      	bne.n	800f934 <scalbn+0x54>
 800f91e:	4602      	mov	r2, r0
 800f920:	f7f0 fc2e 	bl	8000180 <__adddf3>
 800f924:	4604      	mov	r4, r0
 800f926:	460d      	mov	r5, r1
 800f928:	e020      	b.n	800f96c <scalbn+0x8c>
 800f92a:	460b      	mov	r3, r1
 800f92c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f930:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f934:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f938:	19b9      	adds	r1, r7, r6
 800f93a:	4291      	cmp	r1, r2
 800f93c:	dd0e      	ble.n	800f95c <scalbn+0x7c>
 800f93e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f942:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f946:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f94a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f94e:	4820      	ldr	r0, [pc, #128]	; (800f9d0 <scalbn+0xf0>)
 800f950:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f954:	a31a      	add	r3, pc, #104	; (adr r3, 800f9c0 <scalbn+0xe0>)
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	e7d9      	b.n	800f910 <scalbn+0x30>
 800f95c:	2900      	cmp	r1, #0
 800f95e:	dd08      	ble.n	800f972 <scalbn+0x92>
 800f960:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f968:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f96c:	4620      	mov	r0, r4
 800f96e:	4629      	mov	r1, r5
 800f970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f972:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f976:	da12      	bge.n	800f99e <scalbn+0xbe>
 800f978:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f97c:	429f      	cmp	r7, r3
 800f97e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f982:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800f986:	dcdc      	bgt.n	800f942 <scalbn+0x62>
 800f988:	a30b      	add	r3, pc, #44	; (adr r3, 800f9b8 <scalbn+0xd8>)
 800f98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f992:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f996:	480f      	ldr	r0, [pc, #60]	; (800f9d4 <scalbn+0xf4>)
 800f998:	f041 011f 	orr.w	r1, r1, #31
 800f99c:	e7b8      	b.n	800f910 <scalbn+0x30>
 800f99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9a2:	3136      	adds	r1, #54	; 0x36
 800f9a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <scalbn+0xf8>)
 800f9b4:	e7ac      	b.n	800f910 <scalbn+0x30>
 800f9b6:	bf00      	nop
 800f9b8:	c2f8f359 	.word	0xc2f8f359
 800f9bc:	01a56e1f 	.word	0x01a56e1f
 800f9c0:	8800759c 	.word	0x8800759c
 800f9c4:	7e37e43c 	.word	0x7e37e43c
 800f9c8:	43500000 	.word	0x43500000
 800f9cc:	ffff3cb0 	.word	0xffff3cb0
 800f9d0:	8800759c 	.word	0x8800759c
 800f9d4:	c2f8f359 	.word	0xc2f8f359
 800f9d8:	3c900000 	.word	0x3c900000

0800f9dc <_init>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	bf00      	nop
 800f9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9e2:	bc08      	pop	{r3}
 800f9e4:	469e      	mov	lr, r3
 800f9e6:	4770      	bx	lr

0800f9e8 <_fini>:
 800f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ea:	bf00      	nop
 800f9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ee:	bc08      	pop	{r3}
 800f9f0:	469e      	mov	lr, r3
 800f9f2:	4770      	bx	lr
