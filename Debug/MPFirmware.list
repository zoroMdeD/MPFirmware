
MPFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f38c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b48  0800f4a0  0800f4a0  0001f4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fe8  08010fe8  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08010fe8  08010fe8  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010fe8  08010fe8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fe8  08010fe8  00020fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fec  08010fec  00020fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010ff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b0c  200001f8  080111e4  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  080111e4  00031d04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a995  00000000  00000000  0003021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f8  00000000  00000000  0004abb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  0004f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00050dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a40e  00000000  00000000  00052618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027028  00000000  00000000  0005ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099953  00000000  00000000  00083a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d3a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008020  00000000  00000000  0011d3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f484 	.word	0x0800f484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800f484 	.word	0x0800f484

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <cJSON_strcasecmp>:
static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	if (!s1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d107      	bne.n	8000abc <cJSON_strcasecmp+0x20>
		return (s1==s2)?0:1;
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	e055      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	if (!s2)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10d      	bne.n	8000ade <cJSON_strcasecmp+0x42>
		return 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e050      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
		if(*s1 == 0)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <cJSON_strcasecmp+0x36>
			return 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e04a      	b.n	8000b68 <cJSON_strcasecmp+0xcc>
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <cJSON_strcasecmp+0x62>
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	f103 0220 	add.w	r2, r3, #32
 8000afc:	e000      	b.n	8000b00 <cJSON_strcasecmp+0x64>
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	73bb      	strb	r3, [r7, #14]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	491a      	ldr	r1, [pc, #104]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b0c:	440b      	add	r3, r1
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <cJSON_strcasecmp+0x82>
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	e000      	b.n	8000b20 <cJSON_strcasecmp+0x84>
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d0d0      	beq.n	8000ac6 <cJSON_strcasecmp+0x2a>
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	737b      	strb	r3, [r7, #13]
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d103      	bne.n	8000b44 <cJSON_strcasecmp+0xa8>
 8000b3c:	7b7b      	ldrb	r3, [r7, #13]
 8000b3e:	f103 0220 	add.w	r2, r3, #32
 8000b42:	e000      	b.n	8000b46 <cJSON_strcasecmp+0xaa>
 8000b44:	7b7a      	ldrb	r2, [r7, #13]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	733b      	strb	r3, [r7, #12]
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4908      	ldr	r1, [pc, #32]	; (8000b74 <cJSON_strcasecmp+0xd8>)
 8000b52:	440b      	add	r3, r1
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d102      	bne.n	8000b64 <cJSON_strcasecmp+0xc8>
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	3320      	adds	r3, #32
 8000b62:	e000      	b.n	8000b66 <cJSON_strcasecmp+0xca>
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	1ad3      	subs	r3, r2, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	08010bd8 	.word	0x08010bd8

08000b78 <cJSON_New_Item>:
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <cJSON_New_Item+0x2c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2028      	movs	r0, #40	; 0x28
 8000b84:	4798      	blx	r3
 8000b86:	6078      	str	r0, [r7, #4]
	if (node) memset(node,0,sizeof(cJSON));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <cJSON_New_Item+0x20>
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f00a fde4 	bl	800b760 <memset>
	return node;
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <cJSON_Delete>:

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	cJSON *next;
	while (c)
 8000bb0:	e037      	b.n	8000c22 <cJSON_Delete+0x7a>
	{
		next=c->next;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d108      	bne.n	8000bd6 <cJSON_Delete+0x2e>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <cJSON_Delete+0x2e>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffe9 	bl	8000ba8 <cJSON_Delete>
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d109      	bne.n	8000bf6 <cJSON_Delete+0x4e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <cJSON_Delete+0x4e>
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <cJSON_Delete+0x8c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	6912      	ldr	r2, [r2, #16]
 8000bf2:	4610      	mov	r0, r2
 8000bf4:	4798      	blx	r3
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <cJSON_Delete+0x6e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <cJSON_Delete+0x6e>
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <cJSON_Delete+0x8c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6a12      	ldr	r2, [r2, #32]
 8000c12:	4610      	mov	r0, r2
 8000c14:	4798      	blx	r3
		cJSON_free(c);
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <cJSON_Delete+0x8c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	4798      	blx	r3
		c=next;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	607b      	str	r3, [r7, #4]
	while (c)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1c4      	bne.n	8000bb2 <cJSON_Delete+0xa>
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004

08000c38 <parse_number>:

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <parse_number+0x210>)
 8000c54:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]

	if (*num=='-') sign=-1,num++;	/* Has sign? */
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b2d      	cmp	r3, #45	; 0x2d
 8000c72:	d107      	bne.n	8000c84 <parse_number+0x4c>
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	4b74      	ldr	r3, [pc, #464]	; (8000e4c <parse_number+0x214>)
 8000c7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
	if (*num=='0') num++;			/* is zero */
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b30      	cmp	r3, #48	; 0x30
 8000c8a:	d102      	bne.n	8000c92 <parse_number+0x5a>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b30      	cmp	r3, #48	; 0x30
 8000c98:	d928      	bls.n	8000cec <parse_number+0xb4>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b39      	cmp	r3, #57	; 0x39
 8000ca0:	d824      	bhi.n	8000cec <parse_number+0xb4>
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	; (8000e50 <parse_number+0x218>)
 8000ca8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000cac:	f7ff fc1e 	bl	80004ec <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4614      	mov	r4, r2
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	3b30      	subs	r3, #48	; 0x30
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fba8 	bl	8000418 <__aeabi_i2d>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	f7ff fa56 	bl	8000180 <__adddf3>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ce2:	d903      	bls.n	8000cec <parse_number+0xb4>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b39      	cmp	r3, #57	; 0x39
 8000cea:	d9da      	bls.n	8000ca2 <parse_number+0x6a>
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cf2:	d13c      	bne.n	8000d6e <parse_number+0x136>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8000cfc:	d937      	bls.n	8000d6e <parse_number+0x136>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b39      	cmp	r3, #57	; 0x39
 8000d06:	d832      	bhi.n	8000d6e <parse_number+0x136>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <parse_number+0x218>)
 8000d14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d18:	f7ff fbe8 	bl	80004ec <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4614      	mov	r4, r2
 8000d22:	461d      	mov	r5, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	603a      	str	r2, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3b30      	subs	r3, #48	; 0x30
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb72 	bl	8000418 <__aeabi_i2d>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa20 	bl	8000180 <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <parse_number+0x210>)
 8000d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d52:	f7ff fa13 	bl	800017c <__aeabi_dsub>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b2f      	cmp	r3, #47	; 0x2f
 8000d64:	d903      	bls.n	8000d6e <parse_number+0x136>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b39      	cmp	r3, #57	; 0x39
 8000d6c:	d9cf      	bls.n	8000d0e <parse_number+0xd6>
	if (*num=='e' || *num=='E')		/* Exponent? */
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b65      	cmp	r3, #101	; 0x65
 8000d74:	d003      	beq.n	8000d7e <parse_number+0x146>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b45      	cmp	r3, #69	; 0x45
 8000d7c:	d12a      	bne.n	8000dd4 <parse_number+0x19c>
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b2b      	cmp	r3, #43	; 0x2b
 8000d8a:	d103      	bne.n	8000d94 <parse_number+0x15c>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	e017      	b.n	8000dc4 <parse_number+0x18c>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b2d      	cmp	r3, #45	; 0x2d
 8000d9a:	d113      	bne.n	8000dc4 <parse_number+0x18c>
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	603b      	str	r3, [r7, #0]
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
 8000da8:	e00c      	b.n	8000dc4 <parse_number+0x18c>
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	603a      	str	r2, [r7, #0]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3b30      	subs	r3, #48	; 0x30
 8000dc0:	440b      	add	r3, r1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8000dca:	d903      	bls.n	8000dd4 <parse_number+0x19c>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b39      	cmp	r3, #57	; 0x39
 8000dd2:	d9ea      	bls.n	8000daa <parse_number+0x172>
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
 8000dd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ddc:	f7ff fb86 	bl	80004ec <__aeabi_dmul>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4614      	mov	r4, r2
 8000de6:	461d      	mov	r5, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb11 	bl	8000418 <__aeabi_i2d>
 8000df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dfa:	f7ff f9c1 	bl	8000180 <__adddf3>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4912      	ldr	r1, [pc, #72]	; (8000e50 <parse_number+0x218>)
 8000e08:	f00d fc58 	bl	800e6bc <pow>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4620      	mov	r0, r4
 8000e12:	4629      	mov	r1, r5
 8000e14:	f7ff fb6a 	bl	80004ec <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	item->valuedouble=n;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e26:	e9c1 2306 	strd	r2, r3, [r1, #24]
	item->valueint=(int)n;
 8000e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2e:	f7ff fe0d 	bl	8000a4c <__aeabi_d2iz>
 8000e32:	4602      	mov	r2, r0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	615a      	str	r2, [r3, #20]
	item->type=cJSON_Number;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	60da      	str	r2, [r3, #12]
	return num;
 8000e3e:	683b      	ldr	r3, [r7, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bdb0      	pop	{r4, r5, r7, pc}
 8000e48:	3ff00000 	.word	0x3ff00000
 8000e4c:	bff00000 	.word	0xbff00000
 8000e50:	40240000 	.word	0x40240000

08000e54 <parse_hex4>:
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	unsigned h=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b2f      	cmp	r3, #47	; 0x2f
 8000e66:	d90b      	bls.n	8000e80 <parse_hex4+0x2c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b39      	cmp	r3, #57	; 0x39
 8000e6e:	d807      	bhi.n	8000e80 <parse_hex4+0x2c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b30      	subs	r3, #48	; 0x30
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e021      	b.n	8000ec4 <parse_hex4+0x70>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b40      	cmp	r3, #64	; 0x40
 8000e86:	d90b      	bls.n	8000ea0 <parse_hex4+0x4c>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b46      	cmp	r3, #70	; 0x46
 8000e8e:	d807      	bhi.n	8000ea0 <parse_hex4+0x4c>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b37      	subs	r3, #55	; 0x37
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	e011      	b.n	8000ec4 <parse_hex4+0x70>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b60      	cmp	r3, #96	; 0x60
 8000ea6:	d90b      	bls.n	8000ec0 <parse_hex4+0x6c>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b66      	cmp	r3, #102	; 0x66
 8000eae:	d807      	bhi.n	8000ec0 <parse_hex4+0x6c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b57      	subs	r3, #87	; 0x57
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e001      	b.n	8000ec4 <parse_hex4+0x70>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e0a8      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed6:	d90b      	bls.n	8000ef0 <parse_hex4+0x9c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b39      	cmp	r3, #57	; 0x39
 8000ede:	d807      	bhi.n	8000ef0 <parse_hex4+0x9c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	3b30      	subs	r3, #48	; 0x30
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e021      	b.n	8000f34 <parse_hex4+0xe0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b40      	cmp	r3, #64	; 0x40
 8000ef6:	d90b      	bls.n	8000f10 <parse_hex4+0xbc>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b46      	cmp	r3, #70	; 0x46
 8000efe:	d807      	bhi.n	8000f10 <parse_hex4+0xbc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b37      	subs	r3, #55	; 0x37
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e011      	b.n	8000f34 <parse_hex4+0xe0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b60      	cmp	r3, #96	; 0x60
 8000f16:	d90b      	bls.n	8000f30 <parse_hex4+0xdc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b66      	cmp	r3, #102	; 0x66
 8000f1e:	d807      	bhi.n	8000f30 <parse_hex4+0xdc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b57      	subs	r3, #87	; 0x57
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e001      	b.n	8000f34 <parse_hex4+0xe0>
 8000f30:	2300      	movs	r3, #0
 8000f32:	e070      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b2f      	cmp	r3, #47	; 0x2f
 8000f46:	d90b      	bls.n	8000f60 <parse_hex4+0x10c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b39      	cmp	r3, #57	; 0x39
 8000f4e:	d807      	bhi.n	8000f60 <parse_hex4+0x10c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	3b30      	subs	r3, #48	; 0x30
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e021      	b.n	8000fa4 <parse_hex4+0x150>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d90b      	bls.n	8000f80 <parse_hex4+0x12c>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b46      	cmp	r3, #70	; 0x46
 8000f6e:	d807      	bhi.n	8000f80 <parse_hex4+0x12c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b37      	subs	r3, #55	; 0x37
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e011      	b.n	8000fa4 <parse_hex4+0x150>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b60      	cmp	r3, #96	; 0x60
 8000f86:	d90b      	bls.n	8000fa0 <parse_hex4+0x14c>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b66      	cmp	r3, #102	; 0x66
 8000f8e:	d807      	bhi.n	8000fa0 <parse_hex4+0x14c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b57      	subs	r3, #87	; 0x57
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e001      	b.n	8000fa4 <parse_hex4+0x150>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e038      	b.n	8001016 <parse_hex4+0x1c2>
	h=h<<4;str++;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb6:	d90b      	bls.n	8000fd0 <parse_hex4+0x17c>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b39      	cmp	r3, #57	; 0x39
 8000fbe:	d807      	bhi.n	8000fd0 <parse_hex4+0x17c>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b30      	subs	r3, #48	; 0x30
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e021      	b.n	8001014 <parse_hex4+0x1c0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	d90b      	bls.n	8000ff0 <parse_hex4+0x19c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b46      	cmp	r3, #70	; 0x46
 8000fde:	d807      	bhi.n	8000ff0 <parse_hex4+0x19c>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b37      	subs	r3, #55	; 0x37
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e011      	b.n	8001014 <parse_hex4+0x1c0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b60      	cmp	r3, #96	; 0x60
 8000ff6:	d90b      	bls.n	8001010 <parse_hex4+0x1bc>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b66      	cmp	r3, #102	; 0x66
 8000ffe:	d807      	bhi.n	8001010 <parse_hex4+0x1bc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	3b57      	subs	r3, #87	; 0x57
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e001      	b.n	8001014 <parse_hex4+0x1c0>
 8001010:	2300      	movs	r3, #0
 8001012:	e000      	b.n	8001016 <parse_hex4+0x1c2>
	return h;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <parse_string>:

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b22      	cmp	r3, #34	; 0x22
 800103a:	d00d      	beq.n	8001058 <parse_string+0x38>
 800103c:	4aa3      	ldr	r2, [pc, #652]	; (80012cc <parse_string+0x2ac>)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	e168      	b.n	8001318 <parse_string+0x2f8>
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	61fa      	str	r2, [r7, #28]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b5c      	cmp	r3, #92	; 0x5c
 8001050:	d102      	bne.n	8001058 <parse_string+0x38>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b22      	cmp	r3, #34	; 0x22
 800105e:	d009      	beq.n	8001074 <parse_string+0x54>
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <parse_string+0x54>
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e8      	bne.n	8001046 <parse_string+0x26>
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <parse_string+0x2b0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	3201      	adds	r2, #1
 800107c:	4610      	mov	r0, r2
 800107e:	4798      	blx	r3
 8001080:	60f8      	str	r0, [r7, #12]
	if (!out) return 0;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <parse_string+0x6c>
 8001088:	2300      	movs	r3, #0
 800108a:	e145      	b.n	8001318 <parse_string+0x2f8>
	
	ptr=str+1;ptr2=out;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	61bb      	str	r3, [r7, #24]
	while (*ptr!='\"' && *ptr)
 8001096:	e125      	b.n	80012e4 <parse_string+0x2c4>
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b5c      	cmp	r3, #92	; 0x5c
 800109e:	d008      	beq.n	80010b2 <parse_string+0x92>
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	1c53      	adds	r3, r2, #1
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1c59      	adds	r1, r3, #1
 80010aa:	61b9      	str	r1, [r7, #24]
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e118      	b.n	80012e4 <parse_string+0x2c4>
		else
		{
			ptr++;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
			switch (*ptr)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b62      	subs	r3, #98	; 0x62
 80010be:	2b13      	cmp	r3, #19
 80010c0:	f200 80fc 	bhi.w	80012bc <parse_string+0x29c>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <parse_string+0xac>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	080012bd 	.word	0x080012bd
 80010d4:	080012bd 	.word	0x080012bd
 80010d8:	080012bd 	.word	0x080012bd
 80010dc:	08001129 	.word	0x08001129
 80010e0:	080012bd 	.word	0x080012bd
 80010e4:	080012bd 	.word	0x080012bd
 80010e8:	080012bd 	.word	0x080012bd
 80010ec:	080012bd 	.word	0x080012bd
 80010f0:	080012bd 	.word	0x080012bd
 80010f4:	080012bd 	.word	0x080012bd
 80010f8:	080012bd 	.word	0x080012bd
 80010fc:	08001135 	.word	0x08001135
 8001100:	080012bd 	.word	0x080012bd
 8001104:	080012bd 	.word	0x080012bd
 8001108:	080012bd 	.word	0x080012bd
 800110c:	08001141 	.word	0x08001141
 8001110:	080012bd 	.word	0x080012bd
 8001114:	0800114d 	.word	0x0800114d
 8001118:	08001159 	.word	0x08001159
			{
				case 'b': *ptr2++='\b';	break;
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	61ba      	str	r2, [r7, #24]
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e0da      	b.n	80012de <parse_string+0x2be>
				case 'f': *ptr2++='\f';	break;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	61ba      	str	r2, [r7, #24]
 800112e:	220c      	movs	r2, #12
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e0d4      	b.n	80012de <parse_string+0x2be>
				case 'n': *ptr2++='\n';	break;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	61ba      	str	r2, [r7, #24]
 800113a:	220a      	movs	r2, #10
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e0ce      	b.n	80012de <parse_string+0x2be>
				case 'r': *ptr2++='\r';	break;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	61ba      	str	r2, [r7, #24]
 8001146:	220d      	movs	r2, #13
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e0c8      	b.n	80012de <parse_string+0x2be>
				case 't': *ptr2++='\t';	break;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	61ba      	str	r2, [r7, #24]
 8001152:	2209      	movs	r2, #9
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e0c2      	b.n	80012de <parse_string+0x2be>
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	3301      	adds	r3, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe79 	bl	8000e54 <parse_hex4>
 8001162:	6138      	str	r0, [r7, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3304      	adds	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001170:	d304      	bcc.n	800117c <parse_string+0x15c>
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001178:	f0c0 80b0 	bcc.w	80012dc <parse_string+0x2bc>
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80ac 	beq.w	80012dc <parse_string+0x2bc>

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800118a:	d32d      	bcc.n	80011e8 <parse_string+0x1c8>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001192:	d229      	bcs.n	80011e8 <parse_string+0x1c8>
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	3301      	adds	r3, #1
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b5c      	cmp	r3, #92	; 0x5c
 800119c:	f040 809e 	bne.w	80012dc <parse_string+0x2bc>
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3302      	adds	r3, #2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b75      	cmp	r3, #117	; 0x75
 80011a8:	f040 8098 	bne.w	80012dc <parse_string+0x2bc>
						uc2=parse_hex4(ptr+3);ptr+=6;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3303      	adds	r3, #3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe4f 	bl	8000e54 <parse_hex4>
 80011b6:	60b8      	str	r0, [r7, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3306      	adds	r3, #6
 80011bc:	61fb      	str	r3, [r7, #28]
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80011c4:	f0c0 808a 	bcc.w	80012dc <parse_string+0x2bc>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80011ce:	f080 8085 	bcs.w	80012dc <parse_string+0x2bc>
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	029a      	lsls	r2, r3, #10
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <parse_string+0x2b4>)
 80011d8:	4013      	ands	r3, r2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011e6:	613b      	str	r3, [r7, #16]
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b7f      	cmp	r3, #127	; 0x7f
 80011f0:	d802      	bhi.n	80011f8 <parse_string+0x1d8>
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e00c      	b.n	8001212 <parse_string+0x1f2>
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011fe:	d202      	bcs.n	8001206 <parse_string+0x1e6>
 8001200:	2302      	movs	r3, #2
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e005      	b.n	8001212 <parse_string+0x1f2>
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d201      	bcs.n	8001212 <parse_string+0x1f2>
 800120e:	2303      	movs	r3, #3
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4413      	add	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3b01      	subs	r3, #1
 800121e:	2b03      	cmp	r3, #3
 8001220:	d847      	bhi.n	80012b2 <parse_string+0x292>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <parse_string+0x208>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001299 	.word	0x08001299
 800122c:	08001279 	.word	0x08001279
 8001230:	08001259 	.word	0x08001259
 8001234:	08001239 	.word	0x08001239
					
					switch (len) {
						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	b2db      	uxtb	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	3a01      	subs	r2, #1
 8001246:	61ba      	str	r2, [r7, #24]
 8001248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124c:	b2da      	uxtb	r2, r3
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	099b      	lsrs	r3, r3, #6
 8001256:	613b      	str	r3, [r7, #16]
						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001260:	b2db      	uxtb	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	3a01      	subs	r2, #1
 8001266:	61ba      	str	r2, [r7, #24]
 8001268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800126c:	b2da      	uxtb	r2, r3
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	613b      	str	r3, [r7, #16]
						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	3a01      	subs	r2, #1
 8001286:	61ba      	str	r2, [r7, #24]
 8001288:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800128c:	b2da      	uxtb	r2, r3
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	099b      	lsrs	r3, r3, #6
 8001296:	613b      	str	r3, [r7, #16]
						case 1: *--ptr2 =(uc | firstByteMark[len]);
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <parse_string+0x2b8>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	69b9      	ldr	r1, [r7, #24]
 80012a6:	3901      	subs	r1, #1
 80012a8:	61b9      	str	r1, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	701a      	strb	r2, [r3, #0]
					}
					ptr2+=len;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4413      	add	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
					break;
 80012ba:	e010      	b.n	80012de <parse_string+0x2be>
				default:  *ptr2++=*ptr; break;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61ba      	str	r2, [r7, #24]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e009      	b.n	80012de <parse_string+0x2be>
 80012ca:	bf00      	nop
 80012cc:	20000214 	.word	0x20000214
 80012d0:	20000000 	.word	0x20000000
 80012d4:	000ffc00 	.word	0x000ffc00
 80012d8:	0800f90c 	.word	0x0800f90c
			}
			ptr++;
 80012dc:	bf00      	nop
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
	while (*ptr!='\"' && *ptr)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b22      	cmp	r3, #34	; 0x22
 80012ea:	d004      	beq.n	80012f6 <parse_string+0x2d6>
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f47f aed1 	bne.w	8001098 <parse_string+0x78>
		}
	}
	*ptr2=0;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
	if (*ptr=='\"') ptr++;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b22      	cmp	r3, #34	; 0x22
 8001302:	d102      	bne.n	800130a <parse_string+0x2ea>
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
	item->valuestring=out;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	611a      	str	r2, [r3, #16]
	item->type=cJSON_String;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2204      	movs	r2, #4
 8001314:	60da      	str	r2, [r3, #12]
	return ptr;
 8001316:	69fb      	ldr	r3, [r7, #28]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <skip>:
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	e002      	b.n	8001330 <skip+0x10>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3301      	adds	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <skip+0x26>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <skip+0x26>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b20      	cmp	r3, #32
 8001344:	d9f1      	bls.n	800132a <skip+0xa>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
	...

08001354 <cJSON_ParseWithOpts>:

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	const char *end=0;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
	cJSON *c=cJSON_New_Item();
 8001364:	f7ff fc08 	bl	8000b78 <cJSON_New_Item>
 8001368:	6138      	str	r0, [r7, #16]
	ep=0;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <cJSON_ParseWithOpts+0x84>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
	if (!c) return 0;       /* memory fail */
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <cJSON_ParseWithOpts+0x26>
 8001376:	2300      	movs	r3, #0
 8001378:	e02a      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>

	end=parse_value(c,skip(value));
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ffd0 	bl	8001320 <skip>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	6938      	ldr	r0, [r7, #16]
 8001386:	f000 f837 	bl	80013f8 <parse_value>
 800138a:	6178      	str	r0, [r7, #20]
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d104      	bne.n	800139c <cJSON_ParseWithOpts+0x48>
 8001392:	6938      	ldr	r0, [r7, #16]
 8001394:	f7ff fc08 	bl	8000ba8 <cJSON_Delete>
 8001398:	2300      	movs	r3, #0
 800139a:	e019      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00f      	beq.n	80013c2 <cJSON_ParseWithOpts+0x6e>
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ffbc 	bl	8001320 <skip>
 80013a8:	6178      	str	r0, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <cJSON_ParseWithOpts+0x6e>
 80013b2:	6938      	ldr	r0, [r7, #16]
 80013b4:	f7ff fbf8 	bl	8000ba8 <cJSON_Delete>
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <cJSON_ParseWithOpts+0x84>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	e006      	b.n	80013d0 <cJSON_ParseWithOpts+0x7c>
	if (return_parse_end) *return_parse_end=end;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <cJSON_ParseWithOpts+0x7a>
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	601a      	str	r2, [r3, #0]
	return c;
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000214 	.word	0x20000214

080013dc <cJSON_Parse>:
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffb3 	bl	8001354 <cJSON_ParseWithOpts>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	if (!value)						return 0;	/* Fail on null. */
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <parse_value+0x14>
 8001408:	2300      	movs	r3, #0
 800140a:	e060      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
 800140c:	2204      	movs	r2, #4
 800140e:	4932      	ldr	r1, [pc, #200]	; (80014d8 <parse_value+0xe0>)
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f00a ff4d 	bl	800c2b0 <strncmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <parse_value+0x30>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	e052      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
 8001428:	2205      	movs	r2, #5
 800142a:	492c      	ldr	r1, [pc, #176]	; (80014dc <parse_value+0xe4>)
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f00a ff3f 	bl	800c2b0 <strncmp>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <parse_value+0x4c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3305      	adds	r3, #5
 8001442:	e044      	b.n	80014ce <parse_value+0xd6>
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
 8001444:	2204      	movs	r2, #4
 8001446:	4926      	ldr	r1, [pc, #152]	; (80014e0 <parse_value+0xe8>)
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f00a ff31 	bl	800c2b0 <strncmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d108      	bne.n	8001466 <parse_value+0x6e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3304      	adds	r3, #4
 8001464:	e033      	b.n	80014ce <parse_value+0xd6>
	if (*value=='\"')				{ return parse_string(item,value); }
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b22      	cmp	r3, #34	; 0x22
 800146c:	d105      	bne.n	800147a <parse_value+0x82>
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fdd5 	bl	8001020 <parse_string>
 8001476:	4603      	mov	r3, r0
 8001478:	e029      	b.n	80014ce <parse_value+0xd6>
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b2d      	cmp	r3, #45	; 0x2d
 8001480:	d007      	beq.n	8001492 <parse_value+0x9a>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b2f      	cmp	r3, #47	; 0x2f
 8001488:	d909      	bls.n	800149e <parse_value+0xa6>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b39      	cmp	r3, #57	; 0x39
 8001490:	d805      	bhi.n	800149e <parse_value+0xa6>
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fbcf 	bl	8000c38 <parse_number>
 800149a:	4603      	mov	r3, r0
 800149c:	e017      	b.n	80014ce <parse_value+0xd6>
	if (*value=='[')				{ return parse_array(item,value); }
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b5b      	cmp	r3, #91	; 0x5b
 80014a4:	d105      	bne.n	80014b2 <parse_value+0xba>
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f81d 	bl	80014e8 <parse_array>
 80014ae:	4603      	mov	r3, r0
 80014b0:	e00d      	b.n	80014ce <parse_value+0xd6>
	if (*value=='{')				{ return parse_object(item,value); }
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b7b      	cmp	r3, #123	; 0x7b
 80014b8:	d105      	bne.n	80014c6 <parse_value+0xce>
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f889 	bl	80015d4 <parse_object>
 80014c2:	4603      	mov	r3, r0
 80014c4:	e003      	b.n	80014ce <parse_value+0xd6>

	ep=value;return 0;	/* failure. */
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <parse_value+0xec>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800f4cc 	.word	0x0800f4cc
 80014dc:	0800f4d4 	.word	0x0800f4d4
 80014e0:	0800f4dc 	.word	0x0800f4dc
 80014e4:	20000214 	.word	0x20000214

080014e8 <parse_array>:
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b5b      	cmp	r3, #91	; 0x5b
 80014f8:	d004      	beq.n	8001504 <parse_array+0x1c>
 80014fa:	4a35      	ldr	r2, [pc, #212]	; (80015d0 <parse_array+0xe8>)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	e060      	b.n	80015c6 <parse_array+0xde>

	item->type=cJSON_Array;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff06 	bl	8001320 <skip>
 8001514:	6038      	str	r0, [r7, #0]
	if (*value==']') return value+1;	/* empty array. */
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b5d      	cmp	r3, #93	; 0x5d
 800151c:	d102      	bne.n	8001524 <parse_array+0x3c>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	e050      	b.n	80015c6 <parse_array+0xde>

	item->child=child=cJSON_New_Item();
 8001524:	f7ff fb28 	bl	8000b78 <cJSON_New_Item>
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;		 /* memory fail */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <parse_array+0x54>
 8001538:	2300      	movs	r3, #0
 800153a:	e044      	b.n	80015c6 <parse_array+0xde>
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7ff feef 	bl	8001320 <skip>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff ff56 	bl	80013f8 <parse_value>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fee6 	bl	8001320 <skip>
 8001554:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d125      	bne.n	80015a8 <parse_array+0xc0>
 800155c:	2300      	movs	r3, #0
 800155e:	e032      	b.n	80015c6 <parse_array+0xde>

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
 8001560:	f7ff fb0a 	bl	8000b78 <cJSON_New_Item>
 8001564:	60b8      	str	r0, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <parse_array+0x88>
 800156c:	2300      	movs	r3, #0
 800156e:	e02a      	b.n	80015c6 <parse_array+0xde>
		child->next=new_item;new_item->prev=child;child=new_item;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60fb      	str	r3, [r7, #12]
		value=skip(parse_value(child,skip(value+1)));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fecb 	bl	8001320 <skip>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f7ff ff32 	bl	80013f8 <parse_value>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fec2 	bl	8001320 <skip>
 800159c:	6038      	str	r0, [r7, #0]
		if (!value) return 0;	/* memory fail */
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <parse_array+0xc0>
 80015a4:	2300      	movs	r3, #0
 80015a6:	e00e      	b.n	80015c6 <parse_array+0xde>
	while (*value==',')
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b2c      	cmp	r3, #44	; 0x2c
 80015ae:	d0d7      	beq.n	8001560 <parse_array+0x78>
	}

	if (*value==']') return value+1;	/* end of array */
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b5d      	cmp	r3, #93	; 0x5d
 80015b6:	d102      	bne.n	80015be <parse_array+0xd6>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	e003      	b.n	80015c6 <parse_array+0xde>
	ep=value;return 0;	/* malformed. */
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <parse_array+0xe8>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000214 	.word	0x20000214

080015d4 <parse_object>:
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b7b      	cmp	r3, #123	; 0x7b
 80015e4:	d004      	beq.n	80015f0 <parse_object+0x1c>
 80015e6:	4a59      	ldr	r2, [pc, #356]	; (800174c <parse_object+0x178>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	e0a8      	b.n	8001742 <parse_object+0x16e>
	
	item->type=cJSON_Object;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2206      	movs	r2, #6
 80015f4:	60da      	str	r2, [r3, #12]
	value=skip(value+1);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe90 	bl	8001320 <skip>
 8001600:	6038      	str	r0, [r7, #0]
	if (*value=='}') return value+1;	/* empty array. */
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b7d      	cmp	r3, #125	; 0x7d
 8001608:	d102      	bne.n	8001610 <parse_object+0x3c>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	e098      	b.n	8001742 <parse_object+0x16e>
	
	item->child=child=cJSON_New_Item();
 8001610:	f7ff fab2 	bl	8000b78 <cJSON_New_Item>
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	609a      	str	r2, [r3, #8]
	if (!item->child) return 0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <parse_object+0x54>
 8001624:	2300      	movs	r3, #0
 8001626:	e08c      	b.n	8001742 <parse_object+0x16e>
	value=skip(parse_string(child,skip(value)));
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff fe79 	bl	8001320 <skip>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff fcf4 	bl	8001020 <parse_string>
 8001638:	4603      	mov	r3, r0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fe70 	bl	8001320 <skip>
 8001640:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <parse_object+0x78>
 8001648:	2300      	movs	r3, #0
 800164a:	e07a      	b.n	8001742 <parse_object+0x16e>
	child->string=child->valuestring;child->valuestring=0;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
	if (*value!=':') {ep=value;return 0;}	/* fail! */
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b3a      	cmp	r3, #58	; 0x3a
 8001660:	d004      	beq.n	800166c <parse_object+0x98>
 8001662:	4a3a      	ldr	r2, [pc, #232]	; (800174c <parse_object+0x178>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	2300      	movs	r3, #0
 800166a:	e06a      	b.n	8001742 <parse_object+0x16e>
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe55 	bl	8001320 <skip>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff febc 	bl	80013f8 <parse_value>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe4c 	bl	8001320 <skip>
 8001688:	6038      	str	r0, [r7, #0]
	if (!value) return 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d149      	bne.n	8001724 <parse_object+0x150>
 8001690:	2300      	movs	r3, #0
 8001692:	e056      	b.n	8001742 <parse_object+0x16e>
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
 8001694:	f7ff fa70 	bl	8000b78 <cJSON_New_Item>
 8001698:	60b8      	str	r0, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <parse_object+0xd0>
 80016a0:	2300      	movs	r3, #0
 80016a2:	e04e      	b.n	8001742 <parse_object+0x16e>
		child->next=new_item;new_item->prev=child;child=new_item;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60fb      	str	r3, [r7, #12]
		value=skip(parse_string(child,skip(value+1)));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe31 	bl	8001320 <skip>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fcac 	bl	8001020 <parse_string>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe28 	bl	8001320 <skip>
 80016d0:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <parse_object+0x108>
 80016d8:	2300      	movs	r3, #0
 80016da:	e032      	b.n	8001742 <parse_object+0x16e>
		child->string=child->valuestring;child->valuestring=0;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	621a      	str	r2, [r3, #32]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
		if (*value!=':') {ep=value;return 0;}	/* fail! */
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b3a      	cmp	r3, #58	; 0x3a
 80016f0:	d004      	beq.n	80016fc <parse_object+0x128>
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <parse_object+0x178>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	e022      	b.n	8001742 <parse_object+0x16e>
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe0d 	bl	8001320 <skip>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fe74 	bl	80013f8 <parse_value>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe04 	bl	8001320 <skip>
 8001718:	6038      	str	r0, [r7, #0]
		if (!value) return 0;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <parse_object+0x150>
 8001720:	2300      	movs	r3, #0
 8001722:	e00e      	b.n	8001742 <parse_object+0x16e>
	while (*value==',')
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b2c      	cmp	r3, #44	; 0x2c
 800172a:	d0b3      	beq.n	8001694 <parse_object+0xc0>
	}
	
	if (*value=='}') return value+1;	/* end of array */
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b7d      	cmp	r3, #125	; 0x7d
 8001732:	d102      	bne.n	800173a <parse_object+0x166>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	e003      	b.n	8001742 <parse_object+0x16e>
	ep=value;return 0;	/* malformed. */
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <parse_object+0x178>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000214 	.word	0x20000214

08001750 <cJSON_GetObjectItem>:
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child; int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child; while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e002      	b.n	8001768 <cJSON_GetObjectItem+0x18>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <cJSON_GetObjectItem+0x30>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f991 	bl	8000a9c <cJSON_strcasecmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <cJSON_GetObjectItem+0x12>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <json_input>:
int Time_Server = 0;	//Переменная системного времени сервера
int Time_Client = 0;	//Переменная системного времени клиента

//Функция разбора полученной строки JSON
void json_input(char *text)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	; 0x38
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	cJSON *json = cJSON_Parse(text);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe21 	bl	80013dc <cJSON_Parse>
 800179a:	6378      	str	r0, [r7, #52]	; 0x34

	cJSON *stime = cJSON_GetObjectItem(json, "TIME");
 800179c:	499e      	ldr	r1, [pc, #632]	; (8001a18 <json_input+0x28c>)
 800179e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017a0:	f7ff ffd6 	bl	8001750 <cJSON_GetObjectItem>
 80017a4:	6338      	str	r0, [r7, #48]	; 0x30
	TIME = stime->valuestring;
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4a9c      	ldr	r2, [pc, #624]	; (8001a1c <json_input+0x290>)
 80017ac:	6013      	str	r3, [r2, #0]
	Time_Server = atoi(TIME);
 80017ae:	4b9b      	ldr	r3, [pc, #620]	; (8001a1c <json_input+0x290>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f009 ff88 	bl	800b6c8 <atoi>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a99      	ldr	r2, [pc, #612]	; (8001a20 <json_input+0x294>)
 80017bc:	6013      	str	r3, [r2, #0]
	if(Time_Server > Time_Client)
 80017be:	4b98      	ldr	r3, [pc, #608]	; (8001a20 <json_input+0x294>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <json_input+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	f340 811b 	ble.w	8001a02 <json_input+0x276>
	{
		cJSON *sInstruction = cJSON_GetObjectItem(json, "INSTRUCTION");
 80017cc:	4996      	ldr	r1, [pc, #600]	; (8001a28 <json_input+0x29c>)
 80017ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017d0:	f7ff ffbe 	bl	8001750 <cJSON_GetObjectItem>
 80017d4:	62f8      	str	r0, [r7, #44]	; 0x2c
		INSTRUCTION = sInstruction->valuestring;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	4a94      	ldr	r2, [pc, #592]	; (8001a2c <json_input+0x2a0>)
 80017dc:	6013      	str	r3, [r2, #0]

		if(strcmp(INSTRUCTION, "SET_PROGRAMM") == 0)
 80017de:	4b93      	ldr	r3, [pc, #588]	; (8001a2c <json_input+0x2a0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4993      	ldr	r1, [pc, #588]	; (8001a30 <json_input+0x2a4>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcb3 	bl	8000150 <strcmp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d168      	bne.n	80018c2 <json_input+0x136>
		{
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80017f0:	4990      	ldr	r1, [pc, #576]	; (8001a34 <json_input+0x2a8>)
 80017f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f4:	f7ff ffac 	bl	8001750 <cJSON_GetObjectItem>
 80017f8:	4603      	mov	r3, r0
 80017fa:	498f      	ldr	r1, [pc, #572]	; (8001a38 <json_input+0x2ac>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffa7 	bl	8001750 <cJSON_GetObjectItem>
 8001802:	61b8      	str	r0, [r7, #24]
			TYPE = sType->valuestring;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a8c      	ldr	r2, [pc, #560]	; (8001a3c <json_input+0x2b0>)
 800180a:	6013      	str	r3, [r2, #0]

			if(strcmp(TYPE, "SET_DIDO") == 0)	//Включить/выключить цифровой выход если цифровой вход = значение(уровень)
 800180c:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <json_input+0x2b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	498b      	ldr	r1, [pc, #556]	; (8001a40 <json_input+0x2b4>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fc9c 	bl	8000150 <strcmp>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 80f7 	bne.w	8001a0e <json_input+0x282>
			{
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_IN");
 8001820:	4984      	ldr	r1, [pc, #528]	; (8001a34 <json_input+0x2a8>)
 8001822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001824:	f7ff ff94 	bl	8001750 <cJSON_GetObjectItem>
 8001828:	4603      	mov	r3, r0
 800182a:	4986      	ldr	r1, [pc, #536]	; (8001a44 <json_input+0x2b8>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff8f 	bl	8001750 <cJSON_GetObjectItem>
 8001832:	6178      	str	r0, [r7, #20]
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_IN");
 8001834:	497f      	ldr	r1, [pc, #508]	; (8001a34 <json_input+0x2a8>)
 8001836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001838:	f7ff ff8a 	bl	8001750 <cJSON_GetObjectItem>
 800183c:	4603      	mov	r3, r0
 800183e:	4982      	ldr	r1, [pc, #520]	; (8001a48 <json_input+0x2bc>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff85 	bl	8001750 <cJSON_GetObjectItem>
 8001846:	6138      	str	r0, [r7, #16]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "D_OUT");
 8001848:	497a      	ldr	r1, [pc, #488]	; (8001a34 <json_input+0x2a8>)
 800184a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800184c:	f7ff ff80 	bl	8001750 <cJSON_GetObjectItem>
 8001850:	4603      	mov	r3, r0
 8001852:	497e      	ldr	r1, [pc, #504]	; (8001a4c <json_input+0x2c0>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff7b 	bl	8001750 <cJSON_GetObjectItem>
 800185a:	60f8      	str	r0, [r7, #12]
				cJSON *s4 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VAR_OUT");
 800185c:	4975      	ldr	r1, [pc, #468]	; (8001a34 <json_input+0x2a8>)
 800185e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001860:	f7ff ff76 	bl	8001750 <cJSON_GetObjectItem>
 8001864:	4603      	mov	r3, r0
 8001866:	497a      	ldr	r1, [pc, #488]	; (8001a50 <json_input+0x2c4>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff71 	bl	8001750 <cJSON_GetObjectItem>
 800186e:	60b8      	str	r0, [r7, #8]

				D_IN = s1->valuestring;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a77      	ldr	r2, [pc, #476]	; (8001a54 <json_input+0x2c8>)
 8001876:	6013      	str	r3, [r2, #0]
				VAR_IN = s2->valuestring;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	4a76      	ldr	r2, [pc, #472]	; (8001a58 <json_input+0x2cc>)
 800187e:	6013      	str	r3, [r2, #0]
				D_OUT = s3->valuestring;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a75      	ldr	r2, [pc, #468]	; (8001a5c <json_input+0x2d0>)
 8001886:	6013      	str	r3, [r2, #0]
				VAR_OUT = s4->valuestring;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	4a74      	ldr	r2, [pc, #464]	; (8001a60 <json_input+0x2d4>)
 800188e:	6013      	str	r3, [r2, #0]

				cJSON_Delete(json);
 8001890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001892:	f7ff f989 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 8001896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001898:	f009 ff4c 	bl	800b734 <free>
				free(sInstruction);
 800189c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189e:	f009 ff49 	bl	800b734 <free>
				free(sType);
 80018a2:	69b8      	ldr	r0, [r7, #24]
 80018a4:	f009 ff46 	bl	800b734 <free>
				free(s1);
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f009 ff43 	bl	800b734 <free>
				free(s2);
 80018ae:	6938      	ldr	r0, [r7, #16]
 80018b0:	f009 ff40 	bl	800b734 <free>
				free(s3);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f009 ff3d 	bl	800b734 <free>
				free(s4);
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f009 ff3a 	bl	800b734 <free>
	else
	{
		cJSON_Delete(json);
		free(stime);
	}
}
 80018c0:	e0a5      	b.n	8001a0e <json_input+0x282>
		else if(strcmp(INSTRUCTION, "UPDATE_FIRMWARE") == 0)
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <json_input+0x2a0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4967      	ldr	r1, [pc, #412]	; (8001a64 <json_input+0x2d8>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fc41 	bl	8000150 <strcmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 808f 	bne.w	80019f4 <json_input+0x268>
			cJSON *sType = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "TYPE");
 80018d6:	4957      	ldr	r1, [pc, #348]	; (8001a34 <json_input+0x2a8>)
 80018d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018da:	f7ff ff39 	bl	8001750 <cJSON_GetObjectItem>
 80018de:	4603      	mov	r3, r0
 80018e0:	4955      	ldr	r1, [pc, #340]	; (8001a38 <json_input+0x2ac>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff34 	bl	8001750 <cJSON_GetObjectItem>
 80018e8:	62b8      	str	r0, [r7, #40]	; 0x28
			TYPE = sType->valuestring;
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4a53      	ldr	r2, [pc, #332]	; (8001a3c <json_input+0x2b0>)
 80018f0:	6013      	str	r3, [r2, #0]
			if(strcmp(TYPE, "FILE_DOWNLOAD") == 0)
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <json_input+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	495c      	ldr	r1, [pc, #368]	; (8001a68 <json_input+0x2dc>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fc29 	bl	8000150 <strcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d152      	bne.n	80019aa <json_input+0x21e>
				cJSON *s1 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "NAME");
 8001904:	494b      	ldr	r1, [pc, #300]	; (8001a34 <json_input+0x2a8>)
 8001906:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001908:	f7ff ff22 	bl	8001750 <cJSON_GetObjectItem>
 800190c:	4603      	mov	r3, r0
 800190e:	4957      	ldr	r1, [pc, #348]	; (8001a6c <json_input+0x2e0>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff1d 	bl	8001750 <cJSON_GetObjectItem>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24
				cJSON *s2 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "VERSION");
 8001918:	4946      	ldr	r1, [pc, #280]	; (8001a34 <json_input+0x2a8>)
 800191a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800191c:	f7ff ff18 	bl	8001750 <cJSON_GetObjectItem>
 8001920:	4603      	mov	r3, r0
 8001922:	4953      	ldr	r1, [pc, #332]	; (8001a70 <json_input+0x2e4>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff13 	bl	8001750 <cJSON_GetObjectItem>
 800192a:	6238      	str	r0, [r7, #32]
				cJSON *s3 = cJSON_GetObjectItem(cJSON_GetObjectItem(json, "COMMAND"), "SIZE");
 800192c:	4941      	ldr	r1, [pc, #260]	; (8001a34 <json_input+0x2a8>)
 800192e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001930:	f7ff ff0e 	bl	8001750 <cJSON_GetObjectItem>
 8001934:	4603      	mov	r3, r0
 8001936:	494f      	ldr	r1, [pc, #316]	; (8001a74 <json_input+0x2e8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff09 	bl	8001750 <cJSON_GetObjectItem>
 800193e:	61f8      	str	r0, [r7, #28]
				NAME_FW = s1->valuestring;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <json_input+0x2ec>)
 8001946:	6013      	str	r3, [r2, #0]
				VERSION_FW = s2->valuestring;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <json_input+0x2f0>)
 800194e:	6013      	str	r3, [r2, #0]
				SIZE_FW = s3->valuestring;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <json_input+0x2f4>)
 8001956:	6013      	str	r3, [r2, #0]
				firmware.NAME = NAME_FW;
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <json_input+0x2ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <json_input+0x2f8>)
 800195e:	6013      	str	r3, [r2, #0]
				firmware.VERSION = VERSION_FW;
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <json_input+0x2f0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <json_input+0x2f8>)
 8001966:	6053      	str	r3, [r2, #4]
				firmware.SIZE = atoi(SIZE_FW);
 8001968:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <json_input+0x2f4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f009 feab 	bl	800b6c8 <atoi>
 8001972:	4603      	mov	r3, r0
 8001974:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <json_input+0x2f8>)
 8001976:	6093      	str	r3, [r2, #8]
				firmware.check_UPD = true;
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <json_input+0x2f8>)
 800197a:	2201      	movs	r2, #1
 800197c:	731a      	strb	r2, [r3, #12]
				cJSON_Delete(json);
 800197e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001980:	f7ff f912 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 8001984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001986:	f009 fed5 	bl	800b734 <free>
				free(sInstruction);
 800198a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800198c:	f009 fed2 	bl	800b734 <free>
				free(sType);
 8001990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001992:	f009 fecf 	bl	800b734 <free>
				free(s1);
 8001996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001998:	f009 fecc 	bl	800b734 <free>
				free(s2);
 800199c:	6a38      	ldr	r0, [r7, #32]
 800199e:	f009 fec9 	bl	800b734 <free>
				free(s3);
 80019a2:	69f8      	ldr	r0, [r7, #28]
 80019a4:	f009 fec6 	bl	800b734 <free>
}
 80019a8:	e031      	b.n	8001a0e <json_input+0x282>
			else if(strcmp(TYPE, "RESET_MCU") == 0)
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <json_input+0x2b0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <json_input+0x2fc>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fbcd 	bl	8000150 <strcmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10e      	bne.n	80019da <json_input+0x24e>
				cJSON_Delete(json);
 80019bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019be:	f7ff f8f3 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 80019c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019c4:	f009 feb6 	bl	800b734 <free>
				free(sInstruction);
 80019c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ca:	f009 feb3 	bl	800b734 <free>
				free(sType);
 80019ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019d0:	f009 feb0 	bl	800b734 <free>
				HAL_NVIC_SystemReset();		//Перезапускаем контроллер
 80019d4:	f006 fc01 	bl	80081da <HAL_NVIC_SystemReset>
}
 80019d8:	e019      	b.n	8001a0e <json_input+0x282>
				cJSON_Delete(json);
 80019da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019dc:	f7ff f8e4 	bl	8000ba8 <cJSON_Delete>
				free(stime);
 80019e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019e2:	f009 fea7 	bl	800b734 <free>
				free(sInstruction);
 80019e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019e8:	f009 fea4 	bl	800b734 <free>
				free(sType);
 80019ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ee:	f009 fea1 	bl	800b734 <free>
}
 80019f2:	e00c      	b.n	8001a0e <json_input+0x282>
			free(stime);
 80019f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019f6:	f009 fe9d 	bl	800b734 <free>
			free(sInstruction);
 80019fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019fc:	f009 fe9a 	bl	800b734 <free>
}
 8001a00:	e005      	b.n	8001a0e <json_input+0x282>
		cJSON_Delete(json);
 8001a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a04:	f7ff f8d0 	bl	8000ba8 <cJSON_Delete>
		free(stime);
 8001a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a0a:	f009 fe93 	bl	800b734 <free>
}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	; 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800f4e8 	.word	0x0800f4e8
 8001a1c:	2000024c 	.word	0x2000024c
 8001a20:	20000250 	.word	0x20000250
 8001a24:	20000254 	.word	0x20000254
 8001a28:	0800f4f0 	.word	0x0800f4f0
 8001a2c:	20000228 	.word	0x20000228
 8001a30:	0800f4fc 	.word	0x0800f4fc
 8001a34:	0800f50c 	.word	0x0800f50c
 8001a38:	0800f514 	.word	0x0800f514
 8001a3c:	2000022c 	.word	0x2000022c
 8001a40:	0800f51c 	.word	0x0800f51c
 8001a44:	0800f528 	.word	0x0800f528
 8001a48:	0800f530 	.word	0x0800f530
 8001a4c:	0800f538 	.word	0x0800f538
 8001a50:	0800f540 	.word	0x0800f540
 8001a54:	20000230 	.word	0x20000230
 8001a58:	20000238 	.word	0x20000238
 8001a5c:	20000234 	.word	0x20000234
 8001a60:	2000023c 	.word	0x2000023c
 8001a64:	0800f548 	.word	0x0800f548
 8001a68:	0800f558 	.word	0x0800f558
 8001a6c:	0800f568 	.word	0x0800f568
 8001a70:	0800f570 	.word	0x0800f570
 8001a74:	0800f578 	.word	0x0800f578
 8001a78:	20000240 	.word	0x20000240
 8001a7c:	20000244 	.word	0x20000244
 8001a80:	20000248 	.word	0x20000248
 8001a84:	20000218 	.word	0x20000218
 8001a88:	0800f580 	.word	0x0800f580

08001a8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001a9e:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <MX_ADC1_Init+0xb0>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac8:	481b      	ldr	r0, [pc, #108]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aca:	f005 fead 	bl	8007828 <HAL_ADC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ad4:	f000 ff8e 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001aea:	f006 f865 	bl	8007bb8 <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001af4:	f000 ff7e 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001b06:	f006 f857 	bl	8007bb8 <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001b10:	f000 ff70 	bl	80029f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_ADC1_Init+0xac>)
 8001b22:	f006 f849 	bl	8007bb8 <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001b2c:	f000 ff62 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000258 	.word	0x20000258
 8001b3c:	40012400 	.word	0x40012400

08001b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_ADC_MspInit+0xbc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d149      	bne.n	8001bf4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_ADC_MspInit+0xc0>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = A_Current_Pin|B_Current_Pin|C_Current_Pin;
 8001b90:	2307      	movs	r3, #7
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b94:	2303      	movs	r3, #3
 8001b96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4819      	ldr	r0, [pc, #100]	; (8001c04 <HAL_ADC_MspInit+0xc4>)
 8001ba0:	f006 fd1a 	bl	80085d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_ADC_MspInit+0xcc>)
 8001ba8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bce:	2220      	movs	r2, #32
 8001bd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bda:	f006 fb0f 	bl	80081fc <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001be4:	f000 ff06 	bl	80029f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bec:	621a      	str	r2, [r3, #32]
 8001bee:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_ADC_MspInit+0xc8>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012400 	.word	0x40012400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	20000288 	.word	0x20000288
 8001c0c:	40020008 	.word	0x40020008

08001c10 <clear_string>:
char DBG_str[DBG_RX_BUFFER_SIZE] = {0,};


//Функция удаления символов \r и \n из строки
void clear_string(char *src)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02f      	beq.n	8001c82 <clear_string+0x72>
	uint8_t i = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e022      	b.n	8001c72 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d80b      	bhi.n	8001c4a <clear_string+0x3a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d003      	beq.n	8001c42 <clear_string+0x32>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b0d      	cmp	r3, #13
 8001c40:	d103      	bne.n	8001c4a <clear_string+0x3a>
		{
			i++;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	3301      	adds	r3, #1
 8001c46:	72fb      	strb	r3, [r7, #11]
			continue;
 8001c48:	e010      	b.n	8001c6c <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d003      	beq.n	8001c5a <clear_string+0x4a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b0d      	cmp	r3, #13
 8001c58:	d102      	bne.n	8001c60 <clear_string+0x50>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60fa      	str	r2, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1d8      	bne.n	8001c2c <clear_string+0x1c>
	}

	*dst = 0;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e000      	b.n	8001c84 <clear_string+0x74>
	if(!src) return;
 8001c82:	bf00      	nop
}
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <USART_Tx>:
//Функция передачи байта по USART3
//Принимает байт
void USART_Tx(unsigned char Data)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TC));
 8001c96:	bf00      	nop
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <USART_Tx+0x28>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f9      	beq.n	8001c98 <USART_Tx+0xc>
	USART1->DR = Data;
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <USART_Tx+0x28>)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	6053      	str	r3, [r2, #4]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40013800 	.word	0x40013800

08001cb8 <SEND_str>:
//Функция отправки сткроки
//Принимает строку для отправки
void SEND_str(char * string)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001cc4:	e009      	b.n	8001cda <SEND_str+0x22>
	{
		USART_Tx(string[i]);
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffdc 	bl	8001c8c <USART_Tx>
		i++;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
	while(string[i])
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <SEND_str+0xe>
	}
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <DEBUG_main>:
//Функция для отладки через COM порт
void DEBUG_main(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
	if(dbg_available())
 8001cf6:	f001 fd7f 	bl	80037f8 <dbg_available>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d078      	beq.n	8001df2 <DEBUG_main+0x102>
	{
		uint16_t i = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	80fb      	strh	r3, [r7, #6]
		uint8_t fdbg = 1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	717b      	strb	r3, [r7, #5]
		memset(DBG_buf, 0, DBG_RX_BUFFER_SIZE);
 8001d08:	f240 4206 	movw	r2, #1030	; 0x406
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	483b      	ldr	r0, [pc, #236]	; (8001dfc <DEBUG_main+0x10c>)
 8001d10:	f009 fd26 	bl	800b760 <memset>
		HAL_Delay(50);
 8001d14:	2032      	movs	r0, #50	; 0x32
 8001d16:	f005 fd63 	bl	80077e0 <HAL_Delay>

		while(dbg_available())
 8001d1a:	e012      	b.n	8001d42 <DEBUG_main+0x52>
		{
			DBG_buf[i++] = dbg_read();
 8001d1c:	f001 fd8e 	bl	800383c <dbg_read>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	80fa      	strh	r2, [r7, #6]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	b2c9      	uxtb	r1, r1
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <DEBUG_main+0x10c>)
 8001d30:	5499      	strb	r1, [r3, r2]
			if(i > DBG_RX_BUFFER_SIZE - 1)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f240 4205 	movw	r2, #1029	; 0x405
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d808      	bhi.n	8001d4e <DEBUG_main+0x5e>
				break;
			HAL_Delay(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f005 fd4f 	bl	80077e0 <HAL_Delay>
		while(dbg_available())
 8001d42:	f001 fd59 	bl	80037f8 <dbg_available>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e7      	bne.n	8001d1c <DEBUG_main+0x2c>
 8001d4c:	e000      	b.n	8001d50 <DEBUG_main+0x60>
				break;
 8001d4e:	bf00      	nop
		}
		clear_string(DBG_buf);
 8001d50:	482a      	ldr	r0, [pc, #168]	; (8001dfc <DEBUG_main+0x10c>)
 8001d52:	f7ff ff5d 	bl	8001c10 <clear_string>
		//---------------------------------------------Old function---------------------------------------------
		if(strstr(DBG_buf, "TEST") != NULL)
 8001d56:	492a      	ldr	r1, [pc, #168]	; (8001e00 <DEBUG_main+0x110>)
 8001d58:	4828      	ldr	r0, [pc, #160]	; (8001dfc <DEBUG_main+0x10c>)
 8001d5a:	f00a fabd 	bl	800c2d8 <strstr>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <DEBUG_main+0x7c>
		{
			SEND_str("THE DEVICE IS WORKING\n");
 8001d64:	4827      	ldr	r0, [pc, #156]	; (8001e04 <DEBUG_main+0x114>)
 8001d66:	f7ff ffa7 	bl	8001cb8 <SEND_str>
 8001d6a:	e038      	b.n	8001dde <DEBUG_main+0xee>
		}
		//-------------------------------------------End Old function-------------------------------------------
		//------------------------------------------------SD_CARD-----------------------------------------------
		else if(strstr(DBG_buf, "READ_SD") != NULL)
 8001d6c:	4926      	ldr	r1, [pc, #152]	; (8001e08 <DEBUG_main+0x118>)
 8001d6e:	4823      	ldr	r0, [pc, #140]	; (8001dfc <DEBUG_main+0x10c>)
 8001d70:	f00a fab2 	bl	800c2d8 <strstr>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <DEBUG_main+0x90>
		{
			my_read_file();
 8001d7a:	f004 f843 	bl	8005e04 <my_read_file>
 8001d7e:	e02e      	b.n	8001dde <DEBUG_main+0xee>
		}
		else if(strstr(DBG_buf, "WRITE_SD") != NULL)
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <DEBUG_main+0x11c>)
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <DEBUG_main+0x10c>)
 8001d84:	f00a faa8 	bl	800c2d8 <strstr>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <DEBUG_main+0xa8>
		{
//			test_create_json();
			my_write_file_json("TestFile.txt", "text_testing");
 8001d8e:	4920      	ldr	r1, [pc, #128]	; (8001e10 <DEBUG_main+0x120>)
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <DEBUG_main+0x124>)
 8001d92:	f004 f8d5 	bl	8005f40 <my_write_file_json>
 8001d96:	e022      	b.n	8001dde <DEBUG_main+0xee>
		}
		//------------------------------------------------------------------------------------------------------
		//--------------------------------------------UPDATE_FIRMWARE-------------------------------------------
		else if(strstr(DBG_buf, "UPDATE_FIRMWARE") != NULL)
 8001d98:	491f      	ldr	r1, [pc, #124]	; (8001e18 <DEBUG_main+0x128>)
 8001d9a:	4818      	ldr	r0, [pc, #96]	; (8001dfc <DEBUG_main+0x10c>)
 8001d9c:	f00a fa9c 	bl	800c2d8 <strstr>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <DEBUG_main+0xbe>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"FILE_DOWNLOAD\",\"NAME\":\"blink_gpio\",\"VERSION\":\"v.0.0.1\",\"SIZE\":\"248\"},\"TIME\":\"1122334455\"}");
 8001da6:	481d      	ldr	r0, [pc, #116]	; (8001e1c <DEBUG_main+0x12c>)
 8001da8:	f7ff fcf0 	bl	800178c <json_input>
 8001dac:	e017      	b.n	8001dde <DEBUG_main+0xee>
		}
		else if(strstr(DBG_buf, "RESET_MCU") != NULL)
 8001dae:	491c      	ldr	r1, [pc, #112]	; (8001e20 <DEBUG_main+0x130>)
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <DEBUG_main+0x10c>)
 8001db2:	f00a fa91 	bl	800c2d8 <strstr>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <DEBUG_main+0xd4>
		{
			json_input("{\"INSTRUCTION\":\"UPDATE_FIRMWARE\",\"COMMAND\":{\"TYPE\":\"RESET_MCU\"},\"TIME\":\"1122334455\"}");
 8001dbc:	4819      	ldr	r0, [pc, #100]	; (8001e24 <DEBUG_main+0x134>)
 8001dbe:	f7ff fce5 	bl	800178c <json_input>
 8001dc2:	e00c      	b.n	8001dde <DEBUG_main+0xee>
		}
		//------------------------------------------------------------------------------------------------------
		else	//тест для посылки строки через терминал
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s", DBG_buf);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <DEBUG_main+0x10c>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <DEBUG_main+0x138>)
 8001dc8:	f240 4106 	movw	r1, #1030	; 0x406
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <DEBUG_main+0x13c>)
 8001dce:	f00a fa1b 	bl	800c208 <sniprintf>
			SEND_str(DBG_str);
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <DEBUG_main+0x13c>)
 8001dd4:	f7ff ff70 	bl	8001cb8 <SEND_str>
			json_input(DBG_str);
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <DEBUG_main+0x13c>)
 8001dda:	f7ff fcd7 	bl	800178c <json_input>
		}
		if(fdbg)
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <DEBUG_main+0x102>
		{
			snprintf(DBG_str, DBG_RX_BUFFER_SIZE, "%s\n", DBG_buf);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <DEBUG_main+0x10c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <DEBUG_main+0x140>)
 8001de8:	f240 4106 	movw	r1, #1030	; 0x406
 8001dec:	480f      	ldr	r0, [pc, #60]	; (8001e2c <DEBUG_main+0x13c>)
 8001dee:	f00a fa0b 	bl	800c208 <sniprintf>
		}
	}
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002cc 	.word	0x200002cc
 8001e00:	0800f58c 	.word	0x0800f58c
 8001e04:	0800f594 	.word	0x0800f594
 8001e08:	0800f5ac 	.word	0x0800f5ac
 8001e0c:	0800f5b4 	.word	0x0800f5b4
 8001e10:	0800f5c0 	.word	0x0800f5c0
 8001e14:	0800f5d0 	.word	0x0800f5d0
 8001e18:	0800f5e0 	.word	0x0800f5e0
 8001e1c:	0800f5f0 	.word	0x0800f5f0
 8001e20:	0800f680 	.word	0x0800f680
 8001e24:	0800f68c 	.word	0x0800f68c
 8001e28:	0800f6e4 	.word	0x0800f6e4
 8001e2c:	200006d4 	.word	0x200006d4
 8001e30:	0800f6e8 	.word	0x0800f6e8

08001e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200b      	movs	r0, #11
 8001e58:	f006 f995 	bl	8008186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e5c:	200b      	movs	r0, #11
 8001e5e:	f006 f9ae 	bl	80081be <HAL_NVIC_EnableIRQ>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <MX_GPIO_Init+0x190>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <MX_GPIO_Init+0x190>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <MX_GPIO_Init+0x190>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9c:	4b58      	ldr	r3, [pc, #352]	; (8002000 <MX_GPIO_Init+0x190>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a57      	ldr	r2, [pc, #348]	; (8002000 <MX_GPIO_Init+0x190>)
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b55      	ldr	r3, [pc, #340]	; (8002000 <MX_GPIO_Init+0x190>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <MX_GPIO_Init+0x190>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <MX_GPIO_Init+0x190>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <MX_GPIO_Init+0x190>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <MX_GPIO_Init+0x190>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <MX_GPIO_Init+0x190>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <MX_GPIO_Init+0x190>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|mcuFAIL_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001eea:	4846      	ldr	r0, [pc, #280]	; (8002004 <MX_GPIO_Init+0x194>)
 8001eec:	f006 fd0f 	bl	800890e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001ef6:	4844      	ldr	r0, [pc, #272]	; (8002008 <MX_GPIO_Init+0x198>)
 8001ef8:	f006 fd09 	bl	800890e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = distCLOSE_Pin|distSTOP_Pin|distINT_Pin|distHIGHP_Pin
 8001efc:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001f00:	613b      	str	r3, [r7, #16]
                          |handOPEN_Pin|handCLOSE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f02:	4b42      	ldr	r3, [pc, #264]	; (800200c <MX_GPIO_Init+0x19c>)
 8001f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	483d      	ldr	r0, [pc, #244]	; (8002008 <MX_GPIO_Init+0x198>)
 8001f12:	f006 fb61 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = handCTRL_Pin|CD_Pin;
 8001f16:	2318      	movs	r3, #24
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	4619      	mov	r1, r3
 8001f28:	4837      	ldr	r0, [pc, #220]	; (8002008 <MX_GPIO_Init+0x198>)
 8001f2a:	f006 fb55 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|mcuFAIL_Pin;
 8001f2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	482f      	ldr	r0, [pc, #188]	; (8002004 <MX_GPIO_Init+0x194>)
 8001f48:	f006 fb46 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BT1_Pin|BT2_Pin|BT3_Pin|SELFP_CLOSEmcu_Pin
 8001f4c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001f50:	613b      	str	r3, [r7, #16]
                          |SELFP_OPENmcu_Pin|HIGHP_CLOSEmcu_Pin|HIGHP_OPENmcu_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4619      	mov	r1, r3
 8001f60:	482b      	ldr	r0, [pc, #172]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001f62:	f006 fb39 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = mcuINT_Pin|mcuCLOSE_Pin|mcuOPEN_Pin|mcuREADY_Pin;
 8001f66:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4822      	ldr	r0, [pc, #136]	; (8002008 <MX_GPIO_Init+0x198>)
 8001f80:	f006 fb2a 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CLOSEmcu_Pin|OPENmcu_Pin;
 8001f84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <MX_GPIO_Init+0x19c>)
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	481a      	ldr	r0, [pc, #104]	; (8002004 <MX_GPIO_Init+0x194>)
 8001f9a:	f006 fb1d 	bl	80085d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = distOPEN_Pin;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <MX_GPIO_Init+0x19c>)
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(distOPEN_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4817      	ldr	r0, [pc, #92]	; (8002010 <MX_GPIO_Init+0x1a0>)
 8001fb4:	f006 fb10 	bl	80085d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2006      	movs	r0, #6
 8001fbe:	f006 f8e2 	bl	8008186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fc2:	2006      	movs	r0, #6
 8001fc4:	f006 f8fb 	bl	80081be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f006 f8da 	bl	8008186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f006 f8f3 	bl	80081be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2008      	movs	r0, #8
 8001fde:	f006 f8d2 	bl	8008186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f006 f8eb 	bl	80081be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2028      	movs	r0, #40	; 0x28
 8001fee:	f006 f8ca 	bl	8008186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ff2:	2028      	movs	r0, #40	; 0x28
 8001ff4:	f006 f8e3 	bl	80081be <HAL_NVIC_EnableIRQ>

}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40010800 	.word	0x40010800
 8002008:	40011000 	.word	0x40011000
 800200c:	10110000 	.word	0x10110000
 8002010:	40010c00 	.word	0x40010c00

08002014 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_I2C2_Init+0x50>)
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <MX_I2C2_Init+0x54>)
 800201c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_I2C2_Init+0x50>)
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <MX_I2C2_Init+0x58>)
 8002022:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_I2C2_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_I2C2_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_I2C2_Init+0x50>)
 8002032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002036:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <MX_I2C2_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_I2C2_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_I2C2_Init+0x50>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_I2C2_Init+0x50>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_I2C2_Init+0x50>)
 8002052:	f006 fc8d 	bl	8008970 <HAL_I2C_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800205c:	f000 fcca 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000adc 	.word	0x20000adc
 8002068:	40005800 	.word	0x40005800
 800206c:	000186a0 	.word	0x000186a0

08002070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_I2C_MspInit+0x74>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d124      	bne.n	80020da <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80020a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	4619      	mov	r1, r3
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <HAL_I2C_MspInit+0x7c>)
 80020be:	f006 fa8b 	bl	80085d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_I2C_MspInit+0x78>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40005800 	.word	0x40005800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010c00 	.word	0x40010c00

080020f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f6:	f005 fb11 	bl	800771c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020fa:	f000 fa89 	bl	8002610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020fe:	f7ff feb7 	bl	8001e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002102:	f7ff fe97 	bl	8001e34 <MX_DMA_Init>
  MX_ADC1_Init();
 8002106:	f7ff fcc1 	bl	8001a8c <MX_ADC1_Init>
  MX_TIM1_Init();
 800210a:	f000 fe93 	bl	8002e34 <MX_TIM1_Init>
  MX_TIM2_Init();
 800210e:	f000 ff2f 	bl	8002f70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002112:	f000 ffd1 	bl	80030b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002116:	f001 f869 	bl	80031ec <MX_TIM4_Init>
  MX_I2C2_Init();
 800211a:	f7ff ff7b 	bl	8002014 <MX_I2C2_Init>
  MX_SPI1_Init();
 800211e:	f000 fc6f 	bl	8002a00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002122:	f001 fa71 	bl	8003608 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002126:	f001 fa99 	bl	800365c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	time = 200;
 800212a:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <main+0x234>)
 800212c:	22c8      	movs	r2, #200	; 0xc8
 800212e:	701a      	strb	r2, [r3, #0]

	EN_Interrupt();		//Для дебага/Конфигурации по USART1
 8002130:	f001 fbba 	bl	80038a8 <EN_Interrupt>

  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c2) != 0)
 8002134:	487c      	ldr	r0, [pc, #496]	; (8002328 <main+0x238>)
 8002136:	f004 ff4f 	bl	8006fd8 <ssd1306_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <main+0x54>
  {
	  Error_Handler();
 8002140:	f000 fc58 	bl	80029f4 <Error_Handler>
  }
	//----------------ADC-----------------------
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);		//Стартуем АЦП
 8002144:	2203      	movs	r2, #3
 8002146:	4979      	ldr	r1, [pc, #484]	; (800232c <main+0x23c>)
 8002148:	4879      	ldr	r0, [pc, #484]	; (8002330 <main+0x240>)
 800214a:	f005 fc45 	bl	80079d8 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800214e:	2100      	movs	r1, #0
 8002150:	4878      	ldr	r0, [pc, #480]	; (8002334 <main+0x244>)
 8002152:	f008 f8ab 	bl	800a2ac <HAL_TIM_OC_Start>
	//------------------------------------------
	//---------------FATfs----------------------
	my_init_card();
 8002156:	f003 fe4f 	bl	8005df8 <my_init_card>
	SEND_str("Init sd card -> success\n");
 800215a:	4877      	ldr	r0, [pc, #476]	; (8002338 <main+0x248>)
 800215c:	f7ff fdac 	bl	8001cb8 <SEND_str>
	//------------------------------------------


	uint8_t short_state1 = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
	uint8_t short_state2 = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	77bb      	strb	r3, [r7, #30]
	uint8_t short_state3 = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	777b      	strb	r3, [r7, #29]
	uint8_t long_state1 = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	773b      	strb	r3, [r7, #28]
	uint8_t long_state2 = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	76fb      	strb	r3, [r7, #27]
	uint8_t long_state3 = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	76bb      	strb	r3, [r7, #26]
	uint32_t time_key1 = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
	uint32_t time_key2 = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
	uint32_t time_key3 = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t ms = HAL_GetTick();
 8002184:	f005 fb22 	bl	80077cc <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
	  uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800218a:	2101      	movs	r1, #1
 800218c:	486b      	ldr	r0, [pc, #428]	; (800233c <main+0x24c>)
 800218e:	f006 fba7 	bl	80088e0 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	  uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002196:	2102      	movs	r1, #2
 8002198:	4868      	ldr	r0, [pc, #416]	; (800233c <main+0x24c>)
 800219a:	f006 fba1 	bl	80088e0 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	71bb      	strb	r3, [r7, #6]
	  uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80021a2:	2104      	movs	r1, #4
 80021a4:	4865      	ldr	r0, [pc, #404]	; (800233c <main+0x24c>)
 80021a6:	f006 fb9b 	bl	80088e0 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	717b      	strb	r3, [r7, #5]

	  if(key1_state == 0 && !short_state1 && (ms - time_key1) > 100)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <main+0xe0>
 80021b4:	7ffb      	ldrb	r3, [r7, #31]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <main+0xe0>
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d905      	bls.n	80021d0 <main+0xe0>
	  {
	    short_state1 = 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
	    long_state1 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	773b      	strb	r3, [r7, #28]
	    time_key1 = ms;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	617b      	str	r3, [r7, #20]
	  }
	  if(key2_state == 0 && !short_state2 && (ms - time_key2) > 100)
 80021d0:	79bb      	ldrb	r3, [r7, #6]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <main+0x102>
 80021d6:	7fbb      	ldrb	r3, [r7, #30]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <main+0x102>
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d905      	bls.n	80021f2 <main+0x102>
	  {
	    short_state2 = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	77bb      	strb	r3, [r7, #30]
	    long_state2 = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	76fb      	strb	r3, [r7, #27]
	    time_key2 = ms;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	613b      	str	r3, [r7, #16]
	  }
	  if(key3_state == 0 && !short_state3 && (ms - time_key3) > 100)
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10e      	bne.n	8002216 <main+0x126>
 80021f8:	7f7b      	ldrb	r3, [r7, #29]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <main+0x126>
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d906      	bls.n	8002216 <main+0x126>
	  {
	    short_state3 = 1;
 8002208:	2301      	movs	r3, #1
 800220a:	777b      	strb	r3, [r7, #29]
	    long_state3 = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	76bb      	strb	r3, [r7, #26]
	    time_key3 = ms;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e1d5      	b.n	80025c2 <main+0x4d2>
	  }
	  else if(key1_state == 0 && !long_state1 && (ms - time_key1) > 2000)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10e      	bne.n	800223a <main+0x14a>
 800221c:	7f3b      	ldrb	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <main+0x14a>
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800222c:	d905      	bls.n	800223a <main+0x14a>
	  {
	    long_state1 = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	773b      	strb	r3, [r7, #28]
	    // действие на длинное нажатие
	    SEND_str("LONG_PRESS_BT1\n");
 8002232:	4843      	ldr	r0, [pc, #268]	; (8002340 <main+0x250>)
 8002234:	f7ff fd40 	bl	8001cb8 <SEND_str>
 8002238:	e1c3      	b.n	80025c2 <main+0x4d2>
	  }
	  else if(key2_state == 0 && !long_state2 && (ms - time_key2) > 2000)
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d117      	bne.n	8002270 <main+0x180>
 8002240:	7efb      	ldrb	r3, [r7, #27]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <main+0x180>
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002250:	d90e      	bls.n	8002270 <main+0x180>
	  {
	    long_state2 = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	76fb      	strb	r3, [r7, #27]

		info = true;
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <main+0x254>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
		display_Sleep = false;
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <main+0x258>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
	  	What_Time = 0;
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <main+0x25c>)
 8002264:	2200      	movs	r2, #0
 8002266:	801a      	strh	r2, [r3, #0]

	    SEND_str("LONG_PRESS_BT2\n");
 8002268:	4839      	ldr	r0, [pc, #228]	; (8002350 <main+0x260>)
 800226a:	f7ff fd25 	bl	8001cb8 <SEND_str>
 800226e:	e1a8      	b.n	80025c2 <main+0x4d2>
	  }
	  else if(key3_state == 0 && !long_state3 && (ms - time_key3) > 2000)
 8002270:	797b      	ldrb	r3, [r7, #5]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 8086 	bne.w	8002384 <main+0x294>
 8002278:	7ebb      	ldrb	r3, [r7, #26]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8082 	bne.w	8002384 <main+0x294>
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800228a:	d97b      	bls.n	8002384 <main+0x294>
	  {
	    long_state3 = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	76bb      	strb	r3, [r7, #26]

	  	ssd1306_Fill(Black);
 8002290:	2000      	movs	r0, #0
 8002292:	f004 ffc1 	bl	8007218 <ssd1306_Fill>
	  	ssd1306_UpdateScreen(&hi2c2);
 8002296:	4824      	ldr	r0, [pc, #144]	; (8002328 <main+0x238>)
 8002298:	f004 ffe0 	bl	800725c <ssd1306_UpdateScreen>

	  	reserve_Current = Current * 1.25;	//Уставка по току плюс 25%
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <main+0x264>)
 800229e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <main+0x268>)
 80022a8:	f7fe f920 	bl	80004ec <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	492a      	ldr	r1, [pc, #168]	; (800235c <main+0x26c>)
 80022b2:	e9c1 2300 	strd	r2, r3, [r1]
	  	//Вызвать функцию сохранения уставки по току!!!

	  	SEND_str("-------------------------\n");
 80022b6:	482a      	ldr	r0, [pc, #168]	; (8002360 <main+0x270>)
 80022b8:	f7ff fcfe 	bl	8001cb8 <SEND_str>
	  	SEND_str("| ");
 80022bc:	4829      	ldr	r0, [pc, #164]	; (8002364 <main+0x274>)
 80022be:	f7ff fcfb 	bl	8001cb8 <SEND_str>
	  	 SEND_str("SETPOINT: ");
 80022c2:	4829      	ldr	r0, [pc, #164]	; (8002368 <main+0x278>)
 80022c4:	f7ff fcf8 	bl	8001cb8 <SEND_str>
    	snprintf(trans_str, 63, "%.2fA", reserve_Current);
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <main+0x26c>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	e9cd 2300 	strd	r2, r3, [sp]
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <main+0x27c>)
 80022d4:	213f      	movs	r1, #63	; 0x3f
 80022d6:	4826      	ldr	r0, [pc, #152]	; (8002370 <main+0x280>)
 80022d8:	f009 ff96 	bl	800c208 <sniprintf>
    	SEND_str(trans_str);
 80022dc:	4824      	ldr	r0, [pc, #144]	; (8002370 <main+0x280>)
 80022de:	f7ff fceb 	bl	8001cb8 <SEND_str>
    	SEND_str(" |\n");
 80022e2:	4824      	ldr	r0, [pc, #144]	; (8002374 <main+0x284>)
 80022e4:	f7ff fce8 	bl	8001cb8 <SEND_str>
    	SEND_str("-------------------------\n");
 80022e8:	481d      	ldr	r0, [pc, #116]	; (8002360 <main+0x270>)
 80022ea:	f7ff fce5 	bl	8001cb8 <SEND_str>

	  	ssd1306_SetCursor(42, 23);
 80022ee:	2117      	movs	r1, #23
 80022f0:	202a      	movs	r0, #42	; 0x2a
 80022f2:	f005 f8eb 	bl	80074cc <ssd1306_SetCursor>
	  	ssd1306_WriteString("SAVE", Font_11x18, White);
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <main+0x288>)
 80022f8:	2301      	movs	r3, #1
 80022fa:	ca06      	ldmia	r2, {r1, r2}
 80022fc:	481f      	ldr	r0, [pc, #124]	; (800237c <main+0x28c>)
 80022fe:	f005 f8bf 	bl	8007480 <ssd1306_WriteString>
	  	ssd1306_UpdateScreen(&hi2c2);
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <main+0x238>)
 8002304:	f004 ffaa 	bl	800725c <ssd1306_UpdateScreen>
	  	HAL_Delay(1500);
 8002308:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800230c:	f005 fa68 	bl	80077e0 <HAL_Delay>

		info = true;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <main+0x254>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]

	  	What_Time = 0;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <main+0x25c>)
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]

	    SEND_str("LONG_PRESS_BT3\n");
 800231c:	4818      	ldr	r0, [pc, #96]	; (8002380 <main+0x290>)
 800231e:	f7ff fccb 	bl	8001cb8 <SEND_str>
 8002322:	e14e      	b.n	80025c2 <main+0x4d2>
 8002324:	20000b77 	.word	0x20000b77
 8002328:	20000adc 	.word	0x20000adc
 800232c:	20000ba0 	.word	0x20000ba0
 8002330:	20000258 	.word	0x20000258
 8002334:	20001090 	.word	0x20001090
 8002338:	0800f6ec 	.word	0x0800f6ec
 800233c:	40010c00 	.word	0x40010c00
 8002340:	0800f708 	.word	0x0800f708
 8002344:	20000008 	.word	0x20000008
 8002348:	20000b7b 	.word	0x20000b7b
 800234c:	20000b78 	.word	0x20000b78
 8002350:	0800f718 	.word	0x0800f718
 8002354:	20000b80 	.word	0x20000b80
 8002358:	3ff40000 	.word	0x3ff40000
 800235c:	20000bc8 	.word	0x20000bc8
 8002360:	0800f728 	.word	0x0800f728
 8002364:	0800f744 	.word	0x0800f744
 8002368:	0800f748 	.word	0x0800f748
 800236c:	0800f754 	.word	0x0800f754
 8002370:	20000b30 	.word	0x20000b30
 8002374:	0800f75c 	.word	0x0800f75c
 8002378:	20000014 	.word	0x20000014
 800237c:	0800f760 	.word	0x0800f760
 8002380:	0800f768 	.word	0x0800f768
	  }
	  else if(key1_state == 1 && short_state1 && (ms - time_key1) > 100)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	2b01      	cmp	r3, #1
 8002388:	f040 8094 	bne.w	80024b4 <main+0x3c4>
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8090 	beq.w	80024b4 <main+0x3c4>
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	f240 808a 	bls.w	80024b4 <main+0x3c4>
	  {
	    short_state1 = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
	    time_key1 = ms;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	617b      	str	r3, [r7, #20]

	    if(!long_state1)
 80023a8:	7f3b      	ldrb	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8109 	bne.w	80025c2 <main+0x4d2>
	    {
		  	if(Current >= 1 && !display_Sleep)
 80023b0:	4b89      	ldr	r3, [pc, #548]	; (80025d8 <main+0x4e8>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b88      	ldr	r3, [pc, #544]	; (80025dc <main+0x4ec>)
 80023bc:	f7fe fb1c 	bl	80009f8 <__aeabi_dcmpge>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06f      	beq.n	80024a6 <main+0x3b6>
 80023c6:	4b86      	ldr	r3, [pc, #536]	; (80025e0 <main+0x4f0>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d068      	beq.n	80024a6 <main+0x3b6>
		  	{
			  	if(Current >= 10 && Current < 11)
 80023d4:	4b80      	ldr	r3, [pc, #512]	; (80025d8 <main+0x4e8>)
 80023d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <main+0x4f4>)
 80023e0:	f7fe fb0a 	bl	80009f8 <__aeabi_dcmpge>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d039      	beq.n	800245e <main+0x36e>
 80023ea:	4b7b      	ldr	r3, [pc, #492]	; (80025d8 <main+0x4e8>)
 80023ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <main+0x4f8>)
 80023f6:	f7fe faeb 	bl	80009d0 <__aeabi_dcmplt>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02e      	beq.n	800245e <main+0x36e>
			  	{
			  		ssd1306_SetCursor(60, 23);
 8002400:	2117      	movs	r1, #23
 8002402:	203c      	movs	r0, #60	; 0x3c
 8002404:	f005 f862 	bl	80074cc <ssd1306_SetCursor>
				    ssd1306_WriteString("      ", Font_11x18, White);
 8002408:	4a78      	ldr	r2, [pc, #480]	; (80025ec <main+0x4fc>)
 800240a:	2301      	movs	r3, #1
 800240c:	ca06      	ldmia	r2, {r1, r2}
 800240e:	4878      	ldr	r0, [pc, #480]	; (80025f0 <main+0x500>)
 8002410:	f005 f836 	bl	8007480 <ssd1306_WriteString>
				  	ssd1306_SetCursor(60, 23);
 8002414:	2117      	movs	r1, #23
 8002416:	203c      	movs	r0, #60	; 0x3c
 8002418:	f005 f858 	bl	80074cc <ssd1306_SetCursor>
				  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 800241c:	4b6e      	ldr	r3, [pc, #440]	; (80025d8 <main+0x4e8>)
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <main+0x4ec>)
 8002428:	f7fd fea8 	bl	800017c <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4969      	ldr	r1, [pc, #420]	; (80025d8 <main+0x4e8>)
 8002432:	e9c1 2300 	strd	r2, r3, [r1]
 8002436:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <main+0x4e8>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	e9cd 2300 	strd	r2, r3, [sp]
 8002440:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <main+0x504>)
 8002442:	213f      	movs	r1, #63	; 0x3f
 8002444:	486c      	ldr	r0, [pc, #432]	; (80025f8 <main+0x508>)
 8002446:	f009 fedf 	bl	800c208 <sniprintf>
				  	ssd1306_WriteString(trans_str, Font_11x18, White);
 800244a:	4a68      	ldr	r2, [pc, #416]	; (80025ec <main+0x4fc>)
 800244c:	2301      	movs	r3, #1
 800244e:	ca06      	ldmia	r2, {r1, r2}
 8002450:	4869      	ldr	r0, [pc, #420]	; (80025f8 <main+0x508>)
 8002452:	f005 f815 	bl	8007480 <ssd1306_WriteString>
				  	ssd1306_UpdateScreen(&hi2c2);
 8002456:	4869      	ldr	r0, [pc, #420]	; (80025fc <main+0x50c>)
 8002458:	f004 ff00 	bl	800725c <ssd1306_UpdateScreen>
 800245c:	e023      	b.n	80024a6 <main+0x3b6>
			  	}
			  	else
			  	{
				  	ssd1306_SetCursor(60, 23);
 800245e:	2117      	movs	r1, #23
 8002460:	203c      	movs	r0, #60	; 0x3c
 8002462:	f005 f833 	bl	80074cc <ssd1306_SetCursor>
				  	snprintf(trans_str, 63, "%.2fA", Current -= 1);
 8002466:	4b5c      	ldr	r3, [pc, #368]	; (80025d8 <main+0x4e8>)
 8002468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <main+0x4ec>)
 8002472:	f7fd fe83 	bl	800017c <__aeabi_dsub>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4957      	ldr	r1, [pc, #348]	; (80025d8 <main+0x4e8>)
 800247c:	e9c1 2300 	strd	r2, r3, [r1]
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <main+0x4e8>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	e9cd 2300 	strd	r2, r3, [sp]
 800248a:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <main+0x504>)
 800248c:	213f      	movs	r1, #63	; 0x3f
 800248e:	485a      	ldr	r0, [pc, #360]	; (80025f8 <main+0x508>)
 8002490:	f009 feba 	bl	800c208 <sniprintf>
				  	ssd1306_WriteString(trans_str, Font_11x18, White);
 8002494:	4a55      	ldr	r2, [pc, #340]	; (80025ec <main+0x4fc>)
 8002496:	2301      	movs	r3, #1
 8002498:	ca06      	ldmia	r2, {r1, r2}
 800249a:	4857      	ldr	r0, [pc, #348]	; (80025f8 <main+0x508>)
 800249c:	f004 fff0 	bl	8007480 <ssd1306_WriteString>
				  	ssd1306_UpdateScreen(&hi2c2);
 80024a0:	4856      	ldr	r0, [pc, #344]	; (80025fc <main+0x50c>)
 80024a2:	f004 fedb 	bl	800725c <ssd1306_UpdateScreen>
			  	}
		  	}
		  	What_Time = 0;
 80024a6:	4b56      	ldr	r3, [pc, #344]	; (8002600 <main+0x510>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	801a      	strh	r2, [r3, #0]
	    	SEND_str("SHORT_PRESS_BT1\n");
 80024ac:	4855      	ldr	r0, [pc, #340]	; (8002604 <main+0x514>)
 80024ae:	f7ff fc03 	bl	8001cb8 <SEND_str>
	    if(!long_state1)
 80024b2:	e086      	b.n	80025c2 <main+0x4d2>
	    }
	  }
	  else if(key2_state == 1 && short_state2 && (ms - time_key2) > 100)
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d140      	bne.n	800253c <main+0x44c>
 80024ba:	7fbb      	ldrb	r3, [r7, #30]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03d      	beq.n	800253c <main+0x44c>
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d938      	bls.n	800253c <main+0x44c>
	  {
	    short_state2 = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	77bb      	strb	r3, [r7, #30]
	    time_key2 = ms;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	613b      	str	r3, [r7, #16]

	    if(!long_state2)
 80024d2:	7efb      	ldrb	r3, [r7, #27]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d174      	bne.n	80025c2 <main+0x4d2>
	    {
		  	if(!display_Sleep)
 80024d8:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <main+0x4f0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d023      	beq.n	800252e <main+0x43e>
		  	{
		  		ssd1306_SetCursor(60, 23);
 80024e6:	2117      	movs	r1, #23
 80024e8:	203c      	movs	r0, #60	; 0x3c
 80024ea:	f004 ffef 	bl	80074cc <ssd1306_SetCursor>
		  		snprintf(trans_str, 63, "%.2fA", Current += 1);
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <main+0x4e8>)
 80024f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	4b38      	ldr	r3, [pc, #224]	; (80025dc <main+0x4ec>)
 80024fa:	f7fd fe41 	bl	8000180 <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4935      	ldr	r1, [pc, #212]	; (80025d8 <main+0x4e8>)
 8002504:	e9c1 2300 	strd	r2, r3, [r1]
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <main+0x4e8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	e9cd 2300 	strd	r2, r3, [sp]
 8002512:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <main+0x504>)
 8002514:	213f      	movs	r1, #63	; 0x3f
 8002516:	4838      	ldr	r0, [pc, #224]	; (80025f8 <main+0x508>)
 8002518:	f009 fe76 	bl	800c208 <sniprintf>
		  		ssd1306_WriteString(trans_str, Font_11x18, White);
 800251c:	4a33      	ldr	r2, [pc, #204]	; (80025ec <main+0x4fc>)
 800251e:	2301      	movs	r3, #1
 8002520:	ca06      	ldmia	r2, {r1, r2}
 8002522:	4835      	ldr	r0, [pc, #212]	; (80025f8 <main+0x508>)
 8002524:	f004 ffac 	bl	8007480 <ssd1306_WriteString>
		  		ssd1306_UpdateScreen(&hi2c2);
 8002528:	4834      	ldr	r0, [pc, #208]	; (80025fc <main+0x50c>)
 800252a:	f004 fe97 	bl	800725c <ssd1306_UpdateScreen>
		  	}
		  	What_Time = 0;
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <main+0x510>)
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
	    	SEND_str("SHORT_PRESS_BT2\n");
 8002534:	4834      	ldr	r0, [pc, #208]	; (8002608 <main+0x518>)
 8002536:	f7ff fbbf 	bl	8001cb8 <SEND_str>
	    if(!long_state2)
 800253a:	e042      	b.n	80025c2 <main+0x4d2>
	    }
	  }
	  else if(key3_state == 1 && short_state3 && (ms - time_key3) > 100)
 800253c:	797b      	ldrb	r3, [r7, #5]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d13f      	bne.n	80025c2 <main+0x4d2>
 8002542:	7f7b      	ldrb	r3, [r7, #29]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03c      	beq.n	80025c2 <main+0x4d2>
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d937      	bls.n	80025c2 <main+0x4d2>
	  {
	    short_state3 = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	777b      	strb	r3, [r7, #29]
	    time_key3 = ms;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	60fb      	str	r3, [r7, #12]

	    if(!long_state3)
 800255a:	7ebb      	ldrb	r3, [r7, #26]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d130      	bne.n	80025c2 <main+0x4d2>
	    {
		  	if(!display_Sleep)
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <main+0x4f0>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <main+0x4c6>
		  	{
			  	ssd1306_SetCursor(60, 23);
 800256e:	2117      	movs	r1, #23
 8002570:	203c      	movs	r0, #60	; 0x3c
 8002572:	f004 ffab 	bl	80074cc <ssd1306_SetCursor>
			  	snprintf(trans_str, 63, "%.2fA", Current += 0.1);
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <main+0x4e8>)
 8002578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257c:	a314      	add	r3, pc, #80	; (adr r3, 80025d0 <main+0x4e0>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fd fdfd 	bl	8000180 <__adddf3>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4913      	ldr	r1, [pc, #76]	; (80025d8 <main+0x4e8>)
 800258c:	e9c1 2300 	strd	r2, r3, [r1]
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <main+0x4e8>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	e9cd 2300 	strd	r2, r3, [sp]
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <main+0x504>)
 800259c:	213f      	movs	r1, #63	; 0x3f
 800259e:	4816      	ldr	r0, [pc, #88]	; (80025f8 <main+0x508>)
 80025a0:	f009 fe32 	bl	800c208 <sniprintf>
			  	ssd1306_WriteString(trans_str, Font_11x18, White);
 80025a4:	4a11      	ldr	r2, [pc, #68]	; (80025ec <main+0x4fc>)
 80025a6:	2301      	movs	r3, #1
 80025a8:	ca06      	ldmia	r2, {r1, r2}
 80025aa:	4813      	ldr	r0, [pc, #76]	; (80025f8 <main+0x508>)
 80025ac:	f004 ff68 	bl	8007480 <ssd1306_WriteString>
			  	ssd1306_UpdateScreen(&hi2c2);
 80025b0:	4812      	ldr	r0, [pc, #72]	; (80025fc <main+0x50c>)
 80025b2:	f004 fe53 	bl	800725c <ssd1306_UpdateScreen>
		  	}
		  	What_Time = 0;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <main+0x510>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
	    	SEND_str("SHORT_PRESS_BT3\n");
 80025bc:	4813      	ldr	r0, [pc, #76]	; (800260c <main+0x51c>)
 80025be:	f7ff fb7b 	bl	8001cb8 <SEND_str>
	    }
	  }


	  Display_info();
 80025c2:	f004 fc93 	bl	8006eec <Display_info>
	  Сurrent_Сomparison();
 80025c6:	f005 f825 	bl	8007614 <Сurrent_Сomparison>
	  DEBUG_main();
 80025ca:	f7ff fb91 	bl	8001cf0 <DEBUG_main>
  {
 80025ce:	e5d9      	b.n	8002184 <main+0x94>
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	3fb99999 	.word	0x3fb99999
 80025d8:	20000b80 	.word	0x20000b80
 80025dc:	3ff00000 	.word	0x3ff00000
 80025e0:	20000b7b 	.word	0x20000b7b
 80025e4:	40240000 	.word	0x40240000
 80025e8:	40260000 	.word	0x40260000
 80025ec:	20000014 	.word	0x20000014
 80025f0:	0800f778 	.word	0x0800f778
 80025f4:	0800f754 	.word	0x0800f754
 80025f8:	20000b30 	.word	0x20000b30
 80025fc:	20000adc 	.word	0x20000adc
 8002600:	20000b78 	.word	0x20000b78
 8002604:	0800f780 	.word	0x0800f780
 8002608:	0800f794 	.word	0x0800f794
 800260c:	0800f7a8 	.word	0x0800f7a8

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b094      	sub	sp, #80	; 0x50
 8002614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	2228      	movs	r2, #40	; 0x28
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f009 f89e 	bl	800b760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002640:	2301      	movs	r3, #1
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800264e:	2301      	movs	r3, #1
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002652:	2302      	movs	r3, #2
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800265c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002666:	4618      	mov	r0, r3
 8002668:	f006 fddc 	bl	8009224 <HAL_RCC_OscConfig>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002672:	f000 f9bf 	bl	80029f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002676:	230f      	movs	r3, #15
 8002678:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f007 f848 	bl	8009728 <HAL_RCC_ClockConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800269e:	f000 f9a9 	bl	80029f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026a2:	2302      	movs	r3, #2
 80026a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f007 f9d2 	bl	8009a58 <HAL_RCCEx_PeriphCLKConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80026ba:	f000 f99b 	bl	80029f4 <Error_Handler>
  }
}
 80026be:	bf00      	nop
 80026c0:	3750      	adds	r7, #80	; 0x50
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)	//Пришла команда "Высшего приоритета" с дистанционного пульта управления (distHIGHP)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d128      	bne.n	800272a <HAL_GPIO_EXTI_Callback+0x62>
		/*
		 * handCTRL(GPIOC3): 	Management:
		 *     	 High			  Local
		 *     	 Low			  Remote
		 */
		if((GPIOC->IDR & GPIO_PIN_3) < 1)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 80026d8:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11e      	bne.n	8002722 <HAL_GPIO_EXTI_Callback+0x5a>
		{
			if(((GPIOB->IDR & GPIO_PIN_15) > 0) && ((GPIOB->IDR & GPIO_PIN_14) < 1))	//HIGHP_OPENmcu = 1; HIGHP_CLOSEmcu = 0;
 80026e4:	4b87      	ldr	r3, [pc, #540]	; (8002904 <HAL_GPIO_EXTI_Callback+0x23c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_GPIO_EXTI_Callback+0x3c>
 80026f0:	4b84      	ldr	r3, [pc, #528]	; (8002904 <HAL_GPIO_EXTI_Callback+0x23c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_GPIO_EXTI_Callback+0x3c>
			{
				Forward = true;
 80026fc:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_GPIO_EXTI_Callback+0x240>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e00e      	b.n	8002722 <HAL_GPIO_EXTI_Callback+0x5a>
			}
			else if(((GPIOB->IDR & GPIO_PIN_15) < 1) && ((GPIOB->IDR & GPIO_PIN_14) > 0))	//HIGHP_OPENmcu = 0; HIGHP_CLOSEmcu = 1;
 8002704:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <HAL_GPIO_EXTI_Callback+0x5a>
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_GPIO_EXTI_Callback+0x5a>
			{
				Reverse = true;
 800271c:	4b7b      	ldr	r3, [pc, #492]	; (800290c <HAL_GPIO_EXTI_Callback+0x244>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
			}
		}
		HighPriority = true;
 8002722:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <HAL_GPIO_EXTI_Callback+0x248>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP();
	}
}
 8002728:	e0e5      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_1)	//Пришла команда "Открыть" с местного пульта управления (handOPEN)
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d115      	bne.n	800275c <HAL_GPIO_EXTI_Callback+0x94>
		if((GPIOC->IDR & GPIO_PIN_3) > 0)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 8002730:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80dc 	beq.w	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Forward = true;
 800273e:	4b72      	ldr	r3, [pc, #456]	; (8002908 <HAL_GPIO_EXTI_Callback+0x240>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);	//Убираем флаг "mcuCLOSE"
 8002744:	2200      	movs	r2, #0
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	486d      	ldr	r0, [pc, #436]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 800274a:	f006 f8e0 	bl	800890e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);		//Выставляем флаг "mcuOPEN"
 800274e:	2201      	movs	r2, #1
 8002750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002754:	486a      	ldr	r0, [pc, #424]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 8002756:	f006 f8da 	bl	800890e <HAL_GPIO_WritePin>
}
 800275a:	e0cc      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_2)	//Пришла команда "Закрыть" с местного пульта управления (handCLOSE)
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d115      	bne.n	800278e <HAL_GPIO_EXTI_Callback+0xc6>
		if((GPIOC->IDR & GPIO_PIN_3) > 0)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80c3 	beq.w	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Reverse = true;
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_GPIO_EXTI_Callback+0x244>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);	//Убираем флаг "mcuOPEN"
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277c:	4860      	ldr	r0, [pc, #384]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 800277e:	f006 f8c6 	bl	800890e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);		//Выставляем флаг "mcuCLOSE"
 8002782:	2201      	movs	r2, #1
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	485e      	ldr	r0, [pc, #376]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 8002788:	f006 f8c1 	bl	800890e <HAL_GPIO_WritePin>
}
 800278c:	e0b3      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_3) //Phase A ZeroCrossing
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d11a      	bne.n	80027ca <HAL_GPIO_EXTI_Callback+0x102>
		if(DirMove_OPENmcu)
 8002794:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_GPIO_EXTI_Callback+0x24c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_GPIO_EXTI_Callback+0xe6>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);	//Stop timer two channel one	(AFWD)
 800279c:	2100      	movs	r1, #0
 800279e:	485e      	ldr	r0, [pc, #376]	; (8002918 <HAL_GPIO_EXTI_Callback+0x250>)
 80027a0:	f007 ff20 	bl	800a5e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//Run timer two channel one		(AFWD)
 80027a4:	2100      	movs	r1, #0
 80027a6:	485c      	ldr	r0, [pc, #368]	; (8002918 <HAL_GPIO_EXTI_Callback+0x250>)
 80027a8:	f007 fe7a 	bl	800a4a0 <HAL_TIM_PWM_Start>
}
 80027ac:	e0a3      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
		else if(DirMove_CLOSEmcu)
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_GPIO_EXTI_Callback+0x254>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 809f 	beq.w	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);	//Stop timer two channel four	(AREV)
 80027b8:	210c      	movs	r1, #12
 80027ba:	4857      	ldr	r0, [pc, #348]	; (8002918 <HAL_GPIO_EXTI_Callback+0x250>)
 80027bc:	f007 ff12 	bl	800a5e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	//Run timer two channel four	(AREV)
 80027c0:	210c      	movs	r1, #12
 80027c2:	4855      	ldr	r0, [pc, #340]	; (8002918 <HAL_GPIO_EXTI_Callback+0x250>)
 80027c4:	f007 fe6c 	bl	800a4a0 <HAL_TIM_PWM_Start>
}
 80027c8:	e095      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_5) //Phase B ZeroCrossing
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d111      	bne.n	80027f4 <HAL_GPIO_EXTI_Callback+0x12c>
		if(DirMove_OPENmcu || DirMove_CLOSEmcu)
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_GPIO_EXTI_Callback+0x24c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <HAL_GPIO_EXTI_Callback+0x11a>
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_GPIO_EXTI_Callback+0x254>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 808a 	beq.w	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);	//Stop timer three channel one	(BFWD)
 80027e2:	2100      	movs	r1, #0
 80027e4:	484e      	ldr	r0, [pc, #312]	; (8002920 <HAL_GPIO_EXTI_Callback+0x258>)
 80027e6:	f007 fefd 	bl	800a5e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//Run timer three channel one	(BFWD)
 80027ea:	2100      	movs	r1, #0
 80027ec:	484c      	ldr	r0, [pc, #304]	; (8002920 <HAL_GPIO_EXTI_Callback+0x258>)
 80027ee:	f007 fe57 	bl	800a4a0 <HAL_TIM_PWM_Start>
}
 80027f2:	e080      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_7) //Phase C ZeroCrossing
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d119      	bne.n	800282e <HAL_GPIO_EXTI_Callback+0x166>
		if(DirMove_OPENmcu)
 80027fa:	4b46      	ldr	r3, [pc, #280]	; (8002914 <HAL_GPIO_EXTI_Callback+0x24c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_GPIO_EXTI_Callback+0x14c>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);	//Stop timer Four channel one	(CFWD)
 8002802:	2100      	movs	r1, #0
 8002804:	4847      	ldr	r0, [pc, #284]	; (8002924 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002806:	f007 feed 	bl	800a5e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	//Run timer four channel one	(CFWD)
 800280a:	2100      	movs	r1, #0
 800280c:	4845      	ldr	r0, [pc, #276]	; (8002924 <HAL_GPIO_EXTI_Callback+0x25c>)
 800280e:	f007 fe47 	bl	800a4a0 <HAL_TIM_PWM_Start>
}
 8002812:	e070      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
		else if(DirMove_CLOSEmcu)
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_GPIO_EXTI_Callback+0x254>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d06c      	beq.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);	//Stop timer four channel four	(CREV)
 800281c:	210c      	movs	r1, #12
 800281e:	4841      	ldr	r0, [pc, #260]	; (8002924 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002820:	f007 fee0 	bl	800a5e4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);	//Run timer four channel four	(CREV)
 8002824:	210c      	movs	r1, #12
 8002826:	483f      	ldr	r0, [pc, #252]	; (8002924 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002828:	f007 fe3a 	bl	800a4a0 <HAL_TIM_PWM_Start>
}
 800282c:	e063      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_8)	//Пришла команда "Открыть" с дистанционного пульта управления (distOPEN)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d114      	bne.n	8002860 <HAL_GPIO_EXTI_Callback+0x198>
		if((GPIOC->IDR & GPIO_PIN_3) < 1)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d159      	bne.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Forward = true;
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_GPIO_EXTI_Callback+0x240>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);	//Убираем флаг "mcuCLOSE"
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	482c      	ldr	r0, [pc, #176]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 800284e:	f006 f85e 	bl	800890e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);		//Выставляем флаг "mcuOPEN"
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002858:	4829      	ldr	r0, [pc, #164]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 800285a:	f006 f858 	bl	800890e <HAL_GPIO_WritePin>
}
 800285e:	e04a      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_11)	//Флаг того что привод дошел до конца "CLOSEmcu"
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002866:	d103      	bne.n	8002870 <HAL_GPIO_EXTI_Callback+0x1a8>
		Stop = true;
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_GPIO_EXTI_Callback+0x260>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
}
 800286e:	e042      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_12)	//Флаг того что привод дошел до начала "OPENmcu"
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d103      	bne.n	8002880 <HAL_GPIO_EXTI_Callback+0x1b8>
		Stop = true;
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_GPIO_EXTI_Callback+0x260>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
}
 800287e:	e03a      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_13)	//Пришла команда "Закрыть" с дистанционного пульта управления (distCLOSE)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	d114      	bne.n	80028b2 <HAL_GPIO_EXTI_Callback+0x1ea>
		if((GPIOC->IDR & GPIO_PIN_3) < 1)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d130      	bne.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Reverse = true;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_GPIO_EXTI_Callback+0x244>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);	//Убираем флаг "mcuOPEN"
 800289a:	2200      	movs	r2, #0
 800289c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a0:	4817      	ldr	r0, [pc, #92]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80028a2:	f006 f834 	bl	800890e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);		//Выставляем флаг "mcuCLOSE"
 80028a6:	2201      	movs	r2, #1
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80028ac:	f006 f82f 	bl	800890e <HAL_GPIO_WritePin>
}
 80028b0:	e021      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_14) 	//Пришла команда "Остановить" с дистанционного пульта управления (distSTOP)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b8:	d109      	bne.n	80028ce <HAL_GPIO_EXTI_Callback+0x206>
		if((GPIOC->IDR & GPIO_PIN_3) < 1)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d117      	bne.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Stop = true;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_GPIO_EXTI_Callback+0x260>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
}
 80028cc:	e013      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
	else if (GPIO_Pin == GPIO_PIN_15)	//Пришла команда "Передать управление плате расширения" с дистанционного пульта управления (distINT)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	d10e      	bne.n	80028f4 <HAL_GPIO_EXTI_Callback+0x22c>
		if((GPIOC->IDR & GPIO_PIN_3) < 1)	//Проверяем статус, с какого пульта идет управление (handCTRL)
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
			Interface = true;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_GPIO_EXTI_Callback+0x264>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);	//Выставляем флаг "mcuINT", управление передано внешним интерфейсам
 80028e8:	2201      	movs	r2, #1
 80028ea:	2140      	movs	r1, #64	; 0x40
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <HAL_GPIO_EXTI_Callback+0x238>)
 80028ee:	f006 f80e 	bl	800890e <HAL_GPIO_WritePin>
}
 80028f2:	e000      	b.n	80028f6 <HAL_GPIO_EXTI_Callback+0x22e>
		__NOP();
 80028f4:	bf00      	nop
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40011000 	.word	0x40011000
 8002904:	40010c00 	.word	0x40010c00
 8002908:	20000b71 	.word	0x20000b71
 800290c:	20000b72 	.word	0x20000b72
 8002910:	20000b74 	.word	0x20000b74
 8002914:	20000b75 	.word	0x20000b75
 8002918:	200010d8 	.word	0x200010d8
 800291c:	20000b76 	.word	0x20000b76
 8002920:	20001120 	.word	0x20001120
 8002924:	20001168 	.word	0x20001168
 8002928:	20000b70 	.word	0x20000b70
 800292c:	20000b73 	.word	0x20000b73

08002930 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)	//Убрать все из колбека
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_ADC_ConvCpltCallback+0xac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d147      	bne.n	80029d2 <HAL_ADC_ConvCpltCallback+0xa2>
    {
    	What_Time++;
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800294c:	801a      	strh	r2, [r3, #0]
    	cnt++;
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8002958:	701a      	strb	r2, [r3, #0]
    	adcValue[0] += Conversion_ADC1((uint16_t)adc[0]);
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f004 fdcd 	bl	8007500 <Conversion_ADC1>
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fc08 	bl	8000180 <__adddf3>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	491d      	ldr	r1, [pc, #116]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8002976:	e9c1 2300 	strd	r2, r3, [r1]
        adcValue[1] += Conversion_ADC1((uint16_t)adc[1]);
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f004 fdbd 	bl	8007500 <Conversion_ADC1>
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8002988:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800298c:	f7fd fbf8 	bl	8000180 <__adddf3>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4915      	ldr	r1, [pc, #84]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8002996:	e9c1 2302 	strd	r2, r3, [r1, #8]
        adcValue[2] += Conversion_ADC1((uint16_t)adc[2]);
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fdad 	bl	8007500 <Conversion_ADC1>
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 80029a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ac:	f7fd fbe8 	bl	8000180 <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	490d      	ldr	r1, [pc, #52]	; (80029ec <HAL_ADC_ConvCpltCallback+0xbc>)
 80029b6:	e9c1 2304 	strd	r2, r3, [r1, #16]

        if(What_Time == 12000)	//Через 2 минуты отключаем дисплей
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_ConvCpltCallback+0xa2>
        {
        	display_Off = true;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_ADC_ConvCpltCallback+0xc0>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
        	What_Time = 0;
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40012400 	.word	0x40012400
 80029e0:	20000b78 	.word	0x20000b78
 80029e4:	20000bd0 	.word	0x20000bd0
 80029e8:	20000ba0 	.word	0x20000ba0
 80029ec:	20000bb0 	.word	0x20000bb0
 80029f0:	20000b7a 	.word	0x20000b7a

080029f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f8:	b672      	cpsid	i
}
 80029fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029fc:	e7fe      	b.n	80029fc <Error_Handler+0x8>
	...

08002a00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <MX_SPI1_Init+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a34:	2208      	movs	r2, #8
 8002a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a4c:	220a      	movs	r2, #10
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <MX_SPI1_Init+0x64>)
 8002a52:	f007 f8b7 	bl	8009bc4 <HAL_SPI_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a5c:	f7ff ffca 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20001034 	.word	0x20001034
 8002a68:	40013000 	.word	0x40013000

08002a6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_SPI_MspInit+0x88>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d12f      	bne.n	8002aec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_SPI_MspInit+0x8c>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8002abc:	23a0      	movs	r3, #160	; 0xa0
 8002abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 0310 	add.w	r3, r7, #16
 8002acc:	4619      	mov	r1, r3
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <HAL_SPI_MspInit+0x90>)
 8002ad0:	f005 fd82 	bl	80085d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <HAL_SPI_MspInit+0x90>)
 8002ae8:	f005 fd76 	bl	80085d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40013000 	.word	0x40013000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800

08002b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6193      	str	r3, [r2, #24]
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	61d3      	str	r3, [r2, #28]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_MspInit+0x5c>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_MspInit+0x60>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_MspInit+0x60>)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <NMI_Handler+0x4>

08002b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <HardFault_Handler+0x4>

08002b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <MemManage_Handler+0x4>

08002b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <BusFault_Handler+0x4>

08002b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <UsageFault_Handler+0x4>

08002b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002baa:	f004 fdfd 	bl	80077a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(distHIGHP_Pin);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f005 fec2 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(handOPEN_Pin);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f005 febb 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(handCLOSE_Pin);
 8002bd2:	2004      	movs	r0, #4
 8002bd4:	f005 feb4 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <DMA1_Channel1_IRQHandler+0x10>)
 8002be2:	f005 fbc5 	bl	8008370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000288 	.word	0x20000288

08002bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <USART1_IRQHandler+0x74>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d029      	beq.n	8002c58 <USART1_IRQHandler+0x68>
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <USART1_IRQHandler+0x74>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d022      	beq.n	8002c58 <USART1_IRQHandler+0x68>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <USART1_IRQHandler+0x74>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <USART1_IRQHandler+0x78>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <USART1_IRQHandler+0x7c>)
 8002c26:	fba2 1203 	umull	r1, r2, r2, r3
 8002c2a:	0a52      	lsrs	r2, r2, #9
 8002c2c:	f240 4106 	movw	r1, #1030	; 0x406
 8002c30:	fb01 f202 	mul.w	r2, r1, r2
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	80bb      	strh	r3, [r7, #4]

		if(i != dbg_rx_buffer_tail)
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <USART1_IRQHandler+0x80>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	88ba      	ldrh	r2, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d009      	beq.n	8002c58 <USART1_IRQHandler+0x68>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <USART1_IRQHandler+0x78>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <USART1_IRQHandler+0x84>)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <USART1_IRQHandler+0x78>)
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	8013      	strh	r3, [r2, #0]
		}
	}

	return;
 8002c58:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	200011b0 	.word	0x200011b0
 8002c68:	20001238 	.word	0x20001238
 8002c6c:	7f411e53 	.word	0x7f411e53
 8002c70:	2000123a 	.word	0x2000123a
 8002c74:	2000123c 	.word	0x2000123c

08002c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLOSEmcu_Pin);
 8002c7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c80:	f005 fe5e 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPENmcu_Pin);
 8002c84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c88:	f005 fe5a 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distCLOSE_Pin);
 8002c8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c90:	f005 fe56 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distSTOP_Pin);
 8002c94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c98:	f005 fe52 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(distINT_Pin);
 8002c9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ca0:	f005 fe4e 	bl	8008940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	return 1;
 8002cac:	2301      	movs	r3, #1
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <_kill>:

int _kill(int pid, int sig)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cc0:	f008 fd06 	bl	800b6d0 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2216      	movs	r2, #22
 8002cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <_exit>:

void _exit (int status)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cde:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ffe7 	bl	8002cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ce8:	e7fe      	b.n	8002ce8 <_exit+0x12>

08002cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e00a      	b.n	8002d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cfc:	f3af 8000 	nop.w
 8002d00:	4601      	mov	r1, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	60ba      	str	r2, [r7, #8]
 8002d08:	b2ca      	uxtb	r2, r1
 8002d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	dbf0      	blt.n	8002cfc <_read+0x12>
	}

return len;
 8002d1a:	687b      	ldr	r3, [r7, #4]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e009      	b.n	8002d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	60ba      	str	r2, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	dbf1      	blt.n	8002d36 <_write+0x12>
	}
	return len;
 8002d52:	687b      	ldr	r3, [r7, #4]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_close>:

int _close(int file)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	return -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d82:	605a      	str	r2, [r3, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <_isatty>:

int _isatty(int file)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	return 1;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
	return 0;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <_sbrk+0x5c>)
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <_sbrk+0x60>)
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <_sbrk+0x64>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <_sbrk+0x68>)
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d207      	bcs.n	8002dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dec:	f008 fc70 	bl	800b6d0 <__errno>
 8002df0:	4603      	mov	r3, r0
 8002df2:	220c      	movs	r2, #12
 8002df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	e009      	b.n	8002e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <_sbrk+0x64>)
 8002e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20005000 	.word	0x20005000
 8002e1c:	00000400 	.word	0x00000400
 8002e20:	2000108c 	.word	0x2000108c
 8002e24:	20001d08 	.word	0x20001d08

08002e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b096      	sub	sp, #88	; 0x58
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	615a      	str	r2, [r3, #20]
 8002e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2220      	movs	r2, #32
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f008 fc77 	bl	800b760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e74:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <MX_TIM1_Init+0x138>)
 8002e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8002e78:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e7a:	2223      	movs	r2, #35	; 0x23
 8002e7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002e84:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e98:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e9e:	4832      	ldr	r0, [pc, #200]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002ea0:	f007 f95c 	bl	800a15c <HAL_TIM_Base_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002eaa:	f7ff fda3 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eb8:	4619      	mov	r1, r3
 8002eba:	482b      	ldr	r0, [pc, #172]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002ebc:	f007 fd66 	bl	800a98c <HAL_TIM_ConfigClockSource>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002ec6:	f7ff fd95 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002eca:	4827      	ldr	r0, [pc, #156]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002ecc:	f007 f995 	bl	800a1fa <HAL_TIM_OC_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002ed6:	f7ff fd8d 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ee2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002eea:	f008 f987 	bl	800b1fc <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ef4:	f7ff fd7e 	bl	80029f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002ef8:	2330      	movs	r3, #48	; 0x30
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f04:	2300      	movs	r3, #0
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4812      	ldr	r0, [pc, #72]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002f1e:	f007 fc1f 	bl	800a760 <HAL_TIM_OC_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f28:	f7ff fd64 	bl	80029f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4806      	ldr	r0, [pc, #24]	; (8002f68 <MX_TIM1_Init+0x134>)
 8002f50:	f008 f9b2 	bl	800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002f5a:	f7ff fd4b 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	3758      	adds	r7, #88	; 0x58
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20001090 	.word	0x20001090
 8002f6c:	40012c00 	.word	0x40012c00

08002f70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b092      	sub	sp, #72	; 0x48
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
 8002fac:	615a      	str	r2, [r3, #20]
 8002fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb0:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002fb8:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fba:	2247      	movs	r2, #71	; 0x47
 8002fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9000;
 8002fc4:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fc6:	f242 3228 	movw	r2, #9000	; 0x2328
 8002fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fd8:	4836      	ldr	r0, [pc, #216]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002fda:	f007 f8bf 	bl	800a15c <HAL_TIM_Base_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002fe4:	f7ff fd06 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	482f      	ldr	r0, [pc, #188]	; (80030b4 <MX_TIM2_Init+0x144>)
 8002ff6:	f007 fcc9 	bl	800a98c <HAL_TIM_ConfigClockSource>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003000:	f7ff fcf8 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003004:	482b      	ldr	r0, [pc, #172]	; (80030b4 <MX_TIM2_Init+0x144>)
 8003006:	f007 f9f3 	bl	800a3f0 <HAL_TIM_PWM_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8003010:	f7ff fcf0 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8003014:	2108      	movs	r1, #8
 8003016:	4827      	ldr	r0, [pc, #156]	; (80030b4 <MX_TIM2_Init+0x144>)
 8003018:	f007 fb48 	bl	800a6ac <HAL_TIM_OnePulse_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003022:	f7ff fce7 	bl	80029f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003026:	2306      	movs	r3, #6
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800302a:	2360      	movs	r3, #96	; 0x60
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 800302e:	2302      	movs	r3, #2
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	4619      	mov	r1, r3
 800303c:	481d      	ldr	r0, [pc, #116]	; (80030b4 <MX_TIM2_Init+0x144>)
 800303e:	f007 fd69 	bl	800ab14 <HAL_TIM_SlaveConfigSynchro>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003048:	f7ff fcd4 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	4816      	ldr	r0, [pc, #88]	; (80030b4 <MX_TIM2_Init+0x144>)
 800305c:	f008 f8ce 	bl	800b1fc <HAL_TIMEx_MasterConfigSynchronization>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8003066:	f7ff fcc5 	bl	80029f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800306a:	2370      	movs	r3, #112	; 0x70
 800306c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307a:	463b      	mov	r3, r7
 800307c:	2200      	movs	r2, #0
 800307e:	4619      	mov	r1, r3
 8003080:	480c      	ldr	r0, [pc, #48]	; (80030b4 <MX_TIM2_Init+0x144>)
 8003082:	f007 fbc5 	bl	800a810 <HAL_TIM_PWM_ConfigChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800308c:	f7ff fcb2 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003090:	463b      	mov	r3, r7
 8003092:	220c      	movs	r2, #12
 8003094:	4619      	mov	r1, r3
 8003096:	4807      	ldr	r0, [pc, #28]	; (80030b4 <MX_TIM2_Init+0x144>)
 8003098:	f007 fbba 	bl	800a810 <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 80030a2:	f7ff fca7 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030a6:	4803      	ldr	r0, [pc, #12]	; (80030b4 <MX_TIM2_Init+0x144>)
 80030a8:	f000 fa14 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 80030ac:	bf00      	nop
 80030ae:	3748      	adds	r7, #72	; 0x48
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200010d8 	.word	0x200010d8

080030b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b092      	sub	sp, #72	; 0x48
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030e6:	463b      	mov	r3, r7
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
 80030f4:	615a      	str	r2, [r3, #20]
 80030f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030f8:	4b3a      	ldr	r3, [pc, #232]	; (80031e4 <MX_TIM3_Init+0x12c>)
 80030fa:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <MX_TIM3_Init+0x130>)
 80030fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <MX_TIM3_Init+0x12c>)
 8003100:	2247      	movs	r2, #71	; 0x47
 8003102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003104:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <MX_TIM3_Init+0x12c>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <MX_TIM3_Init+0x12c>)
 800310c:	f242 3228 	movw	r2, #9000	; 0x2328
 8003110:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <MX_TIM3_Init+0x12c>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <MX_TIM3_Init+0x12c>)
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800311e:	4831      	ldr	r0, [pc, #196]	; (80031e4 <MX_TIM3_Init+0x12c>)
 8003120:	f007 f81c 	bl	800a15c <HAL_TIM_Base_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800312a:	f7ff fc63 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800312e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003138:	4619      	mov	r1, r3
 800313a:	482a      	ldr	r0, [pc, #168]	; (80031e4 <MX_TIM3_Init+0x12c>)
 800313c:	f007 fc26 	bl	800a98c <HAL_TIM_ConfigClockSource>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003146:	f7ff fc55 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800314a:	4826      	ldr	r0, [pc, #152]	; (80031e4 <MX_TIM3_Init+0x12c>)
 800314c:	f007 f950 	bl	800a3f0 <HAL_TIM_PWM_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8003156:	f7ff fc4d 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800315a:	2108      	movs	r1, #8
 800315c:	4821      	ldr	r0, [pc, #132]	; (80031e4 <MX_TIM3_Init+0x12c>)
 800315e:	f007 faa5 	bl	800a6ac <HAL_TIM_OnePulse_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003168:	f7ff fc44 	bl	80029f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800316c:	2306      	movs	r3, #6
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003170:	2360      	movs	r3, #96	; 0x60
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8003174:	2302      	movs	r3, #2
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	4818      	ldr	r0, [pc, #96]	; (80031e4 <MX_TIM3_Init+0x12c>)
 8003184:	f007 fcc6 	bl	800ab14 <HAL_TIM_SlaveConfigSynchro>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800318e:	f7ff fc31 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4810      	ldr	r0, [pc, #64]	; (80031e4 <MX_TIM3_Init+0x12c>)
 80031a2:	f008 f82b 	bl	800b1fc <HAL_TIMEx_MasterConfigSynchronization>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80031ac:	f7ff fc22 	bl	80029f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80031b0:	2370      	movs	r3, #112	; 0x70
 80031b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031c0:	463b      	mov	r3, r7
 80031c2:	2200      	movs	r2, #0
 80031c4:	4619      	mov	r1, r3
 80031c6:	4807      	ldr	r0, [pc, #28]	; (80031e4 <MX_TIM3_Init+0x12c>)
 80031c8:	f007 fb22 	bl	800a810 <HAL_TIM_PWM_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80031d2:	f7ff fc0f 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <MX_TIM3_Init+0x12c>)
 80031d8:	f000 f97c 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 80031dc:	bf00      	nop
 80031de:	3748      	adds	r7, #72	; 0x48
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20001120 	.word	0x20001120
 80031e8:	40000400 	.word	0x40000400

080031ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800321a:	463b      	mov	r3, r7
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	615a      	str	r2, [r3, #20]
 800322a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800322c:	4b40      	ldr	r3, [pc, #256]	; (8003330 <MX_TIM4_Init+0x144>)
 800322e:	4a41      	ldr	r2, [pc, #260]	; (8003334 <MX_TIM4_Init+0x148>)
 8003230:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <MX_TIM4_Init+0x144>)
 8003234:	2247      	movs	r2, #71	; 0x47
 8003236:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <MX_TIM4_Init+0x144>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 800323e:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <MX_TIM4_Init+0x144>)
 8003240:	f242 3228 	movw	r2, #9000	; 0x2328
 8003244:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003246:	4b3a      	ldr	r3, [pc, #232]	; (8003330 <MX_TIM4_Init+0x144>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <MX_TIM4_Init+0x144>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003252:	4837      	ldr	r0, [pc, #220]	; (8003330 <MX_TIM4_Init+0x144>)
 8003254:	f006 ff82 	bl	800a15c <HAL_TIM_Base_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800325e:	f7ff fbc9 	bl	80029f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800326c:	4619      	mov	r1, r3
 800326e:	4830      	ldr	r0, [pc, #192]	; (8003330 <MX_TIM4_Init+0x144>)
 8003270:	f007 fb8c 	bl	800a98c <HAL_TIM_ConfigClockSource>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800327a:	f7ff fbbb 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800327e:	482c      	ldr	r0, [pc, #176]	; (8003330 <MX_TIM4_Init+0x144>)
 8003280:	f007 f8b6 	bl	800a3f0 <HAL_TIM_PWM_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800328a:	f7ff fbb3 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 800328e:	2108      	movs	r1, #8
 8003290:	4827      	ldr	r0, [pc, #156]	; (8003330 <MX_TIM4_Init+0x144>)
 8003292:	f007 fa0b 	bl	800a6ac <HAL_TIM_OnePulse_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800329c:	f7ff fbaa 	bl	80029f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80032a0:	2306      	movs	r3, #6
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80032a4:	2360      	movs	r3, #96	; 0x60
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80032a8:	2302      	movs	r3, #2
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80032b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b4:	4619      	mov	r1, r3
 80032b6:	481e      	ldr	r0, [pc, #120]	; (8003330 <MX_TIM4_Init+0x144>)
 80032b8:	f007 fc2c 	bl	800ab14 <HAL_TIM_SlaveConfigSynchro>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80032c2:	f7ff fb97 	bl	80029f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	4816      	ldr	r0, [pc, #88]	; (8003330 <MX_TIM4_Init+0x144>)
 80032d6:	f007 ff91 	bl	800b1fc <HAL_TIMEx_MasterConfigSynchronization>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 80032e0:	f7ff fb88 	bl	80029f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80032e4:	2370      	movs	r3, #112	; 0x70
 80032e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f4:	463b      	mov	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	4619      	mov	r1, r3
 80032fa:	480d      	ldr	r0, [pc, #52]	; (8003330 <MX_TIM4_Init+0x144>)
 80032fc:	f007 fa88 	bl	800a810 <HAL_TIM_PWM_ConfigChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM4_Init+0x11e>
  {
    Error_Handler();
 8003306:	f7ff fb75 	bl	80029f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800330a:	463b      	mov	r3, r7
 800330c:	220c      	movs	r2, #12
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <MX_TIM4_Init+0x144>)
 8003312:	f007 fa7d 	bl	800a810 <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM4_Init+0x134>
  {
    Error_Handler();
 800331c:	f7ff fb6a 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003320:	4803      	ldr	r0, [pc, #12]	; (8003330 <MX_TIM4_Init+0x144>)
 8003322:	f000 f8d7 	bl	80034d4 <HAL_TIM_MspPostInit>

}
 8003326:	bf00      	nop
 8003328:	3748      	adds	r7, #72	; 0x48
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20001168 	.word	0x20001168
 8003334:	40000800 	.word	0x40000800

08003338 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b090      	sub	sp, #64	; 0x40
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_TIM_Base_MspInit+0x184>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10c      	bne.n	8003372 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003358:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800335e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003370:	e0a0      	b.n	80034b4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d136      	bne.n	80033ea <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800337c:	4b50      	ldr	r3, [pc, #320]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a4f      	ldr	r2, [pc, #316]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	61d3      	str	r3, [r2, #28]
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003394:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a49      	ldr	r2, [pc, #292]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = A_ZeroCross_Pin;
 80033ac:	2308      	movs	r3, #8
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(A_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 80033b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033bc:	4619      	mov	r1, r3
 80033be:	4841      	ldr	r0, [pc, #260]	; (80034c4 <HAL_TIM_Base_MspInit+0x18c>)
 80033c0:	f005 f90a 	bl	80085d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_TIM_Base_MspInit+0x190>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033e2:	4a39      	ldr	r2, [pc, #228]	; (80034c8 <HAL_TIM_Base_MspInit+0x190>)
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	6053      	str	r3, [r2, #4]
}
 80033e8:	e064      	b.n	80034b4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a37      	ldr	r2, [pc, #220]	; (80034cc <HAL_TIM_Base_MspInit+0x194>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d136      	bne.n	8003462 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	61d3      	str	r3, [r2, #28]
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a2b      	ldr	r2, [pc, #172]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = B_ZeroCross_Pin;
 8003424:	2320      	movs	r3, #32
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(B_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8003430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003434:	4619      	mov	r1, r3
 8003436:	4823      	ldr	r0, [pc, #140]	; (80034c4 <HAL_TIM_Base_MspInit+0x18c>)
 8003438:	f005 f8ce 	bl	80085d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_TIM_Base_MspInit+0x190>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345a:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_TIM_Base_MspInit+0x190>)
 800345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345e:	6053      	str	r3, [r2, #4]
}
 8003460:	e028      	b.n	80034b4 <HAL_TIM_Base_MspInit+0x17c>
  else if(tim_baseHandle->Instance==TIM4)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_TIM_Base_MspInit+0x198>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d123      	bne.n	80034b4 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	61d3      	str	r3, [r2, #28]
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	6193      	str	r3, [r2, #24]
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_TIM_Base_MspInit+0x188>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = C_ZeroCross_Pin;
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(C_ZeroCross_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_TIM_Base_MspInit+0x18c>)
 80034b0:	f005 f892 	bl	80085d8 <HAL_GPIO_Init>
}
 80034b4:	bf00      	nop
 80034b6:	3740      	adds	r7, #64	; 0x40
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800

080034d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0318 	add.w	r3, r7, #24
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d12b      	bne.n	800354c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f4:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6193      	str	r3, [r2, #24]
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = AREV_Pin|AFWD_Pin;
 800350c:	f248 0308 	movw	r3, #32776	; 0x8008
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2302      	movs	r3, #2
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	4619      	mov	r1, r3
 8003520:	4834      	ldr	r0, [pc, #208]	; (80035f4 <HAL_TIM_MspPostInit+0x120>)
 8003522:	f005 f859 	bl	80085d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003526:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_TIM_MspPostInit+0x124>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <HAL_TIM_MspPostInit+0x124>)
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800354a:	e04d      	b.n	80035e8 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM3)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_TIM_MspPostInit+0x128>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12a      	bne.n	80035ac <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	6193      	str	r3, [r2, #24]
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BFWD_Pin;
 800356e:	2310      	movs	r3, #16
 8003570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003576:	2302      	movs	r3, #2
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BFWD_GPIO_Port, &GPIO_InitStruct);
 800357a:	f107 0318 	add.w	r3, r7, #24
 800357e:	4619      	mov	r1, r3
 8003580:	481f      	ldr	r0, [pc, #124]	; (8003600 <HAL_TIM_MspPostInit+0x12c>)
 8003582:	f005 f829 	bl	80085d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <HAL_TIM_MspPostInit+0x124>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <HAL_TIM_MspPostInit+0x124>)
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	6053      	str	r3, [r2, #4]
}
 80035aa:	e01d      	b.n	80035e8 <HAL_TIM_MspPostInit+0x114>
  else if(timHandle->Instance==TIM4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_TIM_MspPostInit+0x130>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d118      	bne.n	80035e8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	6193      	str	r3, [r2, #24]
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_TIM_MspPostInit+0x11c>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CFWD_Pin|CREV_Pin;
 80035ce:	f44f 7310 	mov.w	r3, #576	; 0x240
 80035d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2302      	movs	r3, #2
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	f107 0318 	add.w	r3, r7, #24
 80035e0:	4619      	mov	r1, r3
 80035e2:	4807      	ldr	r0, [pc, #28]	; (8003600 <HAL_TIM_MspPostInit+0x12c>)
 80035e4:	f004 fff8 	bl	80085d8 <HAL_GPIO_Init>
}
 80035e8:	bf00      	nop
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40010800 	.word	0x40010800
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40010c00 	.word	0x40010c00
 8003604:	40000800 	.word	0x40000800

08003608 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <MX_USART1_UART_Init+0x50>)
 8003610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 8003614:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 800362e:	220c      	movs	r2, #12
 8003630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800363e:	4805      	ldr	r0, [pc, #20]	; (8003654 <MX_USART1_UART_Init+0x4c>)
 8003640:	f007 fe8b 	bl	800b35a <HAL_UART_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800364a:	f7ff f9d3 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200011b0 	.word	0x200011b0
 8003658:	40013800 	.word	0x40013800

0800365c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <MX_USART3_UART_Init+0x50>)
 8003664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003668:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800366c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003682:	220c      	movs	r2, #12
 8003684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_USART3_UART_Init+0x4c>)
 8003694:	f007 fe61 	bl	800b35a <HAL_UART_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800369e:	f7ff f9a9 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200011f4 	.word	0x200011f4
 80036ac:	40004800 	.word	0x40004800

080036b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a45      	ldr	r2, [pc, #276]	; (80037e0 <HAL_UART_MspInit+0x130>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d13a      	bne.n	8003746 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036d0:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4a43      	ldr	r2, [pc, #268]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036da:	6193      	str	r3, [r2, #24]
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6193      	str	r3, [r2, #24]
 80036f4:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_UART_MspInit+0x134>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TxD_Pin;
 8003700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800370a:	2303      	movs	r3, #3
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TxD_GPIO_Port, &GPIO_InitStruct);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4619      	mov	r1, r3
 8003714:	4834      	ldr	r0, [pc, #208]	; (80037e8 <HAL_UART_MspInit+0x138>)
 8003716:	f004 ff5f 	bl	80085d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RxD_Pin;
 800371a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003720:	2300      	movs	r3, #0
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RxD_GPIO_Port, &GPIO_InitStruct);
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	4619      	mov	r1, r3
 800372e:	482e      	ldr	r0, [pc, #184]	; (80037e8 <HAL_UART_MspInit+0x138>)
 8003730:	f004 ff52 	bl	80085d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	2025      	movs	r0, #37	; 0x25
 800373a:	f004 fd24 	bl	8008186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800373e:	2025      	movs	r0, #37	; 0x25
 8003740:	f004 fd3d 	bl	80081be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003744:	e048      	b.n	80037d8 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a28      	ldr	r2, [pc, #160]	; (80037ec <HAL_UART_MspInit+0x13c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d143      	bne.n	80037d8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_UART_MspInit+0x134>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	4a23      	ldr	r2, [pc, #140]	; (80037e4 <HAL_UART_MspInit+0x134>)
 8003756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375a:	61d3      	str	r3, [r2, #28]
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_UART_MspInit+0x134>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_UART_MspInit+0x134>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_UART_MspInit+0x134>)
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	6193      	str	r3, [r2, #24]
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_UART_MspInit+0x134>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIRE_TxD_Pin;
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(WIRE_TxD_GPIO_Port, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	4816      	ldr	r0, [pc, #88]	; (80037f0 <HAL_UART_MspInit+0x140>)
 8003796:	f004 ff1f 	bl	80085d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = WIRE_RxD_Pin;
 800379a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a0:	2300      	movs	r3, #0
 80037a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIRE_RxD_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f107 031c 	add.w	r3, r7, #28
 80037ac:	4619      	mov	r1, r3
 80037ae:	4810      	ldr	r0, [pc, #64]	; (80037f0 <HAL_UART_MspInit+0x140>)
 80037b0:	f004 ff12 	bl	80085d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_UART_MspInit+0x144>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	f043 0310 	orr.w	r3, r3, #16
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_UART_MspInit+0x144>)
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	6053      	str	r3, [r2, #4]
}
 80037d8:	bf00      	nop
 80037da:	3730      	adds	r7, #48	; 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40004800 	.word	0x40004800
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40010000 	.word	0x40010000

080037f8 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <dbg_available+0x38>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <dbg_available+0x3c>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003810:	b29b      	uxth	r3, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <dbg_available+0x40>)
 8003814:	fba2 1203 	umull	r1, r2, r2, r3
 8003818:	0a52      	lsrs	r2, r2, #9
 800381a:	f240 4106 	movw	r1, #1030	; 0x406
 800381e:	fb01 f202 	mul.w	r2, r1, r2
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	b21b      	sxth	r3, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	20001238 	.word	0x20001238
 8003834:	2000123a 	.word	0x2000123a
 8003838:	7f411e53 	.word	0x7f411e53

0800383c <dbg_read>:

int16_t dbg_read(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <dbg_read+0x5c>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <dbg_read+0x60>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	429a      	cmp	r2, r3
 8003850:	d102      	bne.n	8003858 <dbg_read+0x1c>
	{
		return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e019      	b.n	800388c <dbg_read+0x50>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <dbg_read+0x60>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <dbg_read+0x64>)
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <dbg_read+0x60>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	b29b      	uxth	r3, r3
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <dbg_read+0x68>)
 8003872:	fba2 1203 	umull	r1, r2, r2, r3
 8003876:	0a52      	lsrs	r2, r2, #9
 8003878:	f240 4106 	movw	r1, #1030	; 0x406
 800387c:	fb01 f202 	mul.w	r2, r1, r2
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <dbg_read+0x60>)
 8003886:	801a      	strh	r2, [r3, #0]
		return c;
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	b21b      	sxth	r3, r3
	}
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20001238 	.word	0x20001238
 800389c:	2000123a 	.word	0x2000123a
 80038a0:	2000123c 	.word	0x2000123c
 80038a4:	7f411e53 	.word	0x7f411e53

080038a8 <EN_Interrupt>:
//-----------------------------------------------------------------------------------------------------------------
void EN_Interrupt(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <EN_Interrupt+0x1c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <EN_Interrupt+0x1c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0220 	orr.w	r2, r2, #32
 80038ba:	60da      	str	r2, [r3, #12]
	//__HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_RXNE);
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	200011b0 	.word	0x200011b0

080038c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d0:	e002      	b.n	80038d8 <LoopCopyDataInit>

080038d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038d6:	3304      	adds	r3, #4

080038d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038dc:	d3f9      	bcc.n	80038d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038e0:	4c0a      	ldr	r4, [pc, #40]	; (800390c <LoopFillZerobss+0x22>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e4:	e001      	b.n	80038ea <LoopFillZerobss>

080038e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038e8:	3204      	adds	r2, #4

080038ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ec:	d3fb      	bcc.n	80038e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038ee:	f7ff fa9b 	bl	8002e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038f2:	f007 fef3 	bl	800b6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038f6:	f7fe fbfb 	bl	80020f0 <main>
  bx lr
 80038fa:	4770      	bx	lr
  ldr r0, =_sdata
 80038fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003900:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003904:	08010ff0 	.word	0x08010ff0
  ldr r2, =_sbss
 8003908:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800390c:	20001d04 	.word	0x20001d04

08003910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003910:	e7fe      	b.n	8003910 <ADC1_2_IRQHandler>
	...

08003914 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b7f      	cmp	r3, #127	; 0x7f
 8003924:	d802      	bhi.n	800392c <ff_convert+0x18>
		c = src;
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	81fb      	strh	r3, [r7, #14]
 800392a:	e025      	b.n	8003978 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d805      	bhi.n	8003944 <ff_convert+0x30>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	3b80      	subs	r3, #128	; 0x80
 800393c:	4a11      	ldr	r2, [pc, #68]	; (8003984 <ff_convert+0x70>)
 800393e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003942:	e000      	b.n	8003946 <ff_convert+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	81fb      	strh	r3, [r7, #14]
 8003948:	e016      	b.n	8003978 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800394a:	2300      	movs	r3, #0
 800394c:	81fb      	strh	r3, [r7, #14]
 800394e:	e009      	b.n	8003964 <ff_convert+0x50>
				if (src == Tbl[c]) break;
 8003950:	89fb      	ldrh	r3, [r7, #14]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <ff_convert+0x70>)
 8003954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	429a      	cmp	r2, r3
 800395c:	d006      	beq.n	800396c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	3301      	adds	r3, #1
 8003962:	81fb      	strh	r3, [r7, #14]
 8003964:	89fb      	ldrh	r3, [r7, #14]
 8003966:	2b7f      	cmp	r3, #127	; 0x7f
 8003968:	d9f2      	bls.n	8003950 <ff_convert+0x3c>
 800396a:	e000      	b.n	800396e <ff_convert+0x5a>
				if (src == Tbl[c]) break;
 800396c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800396e:	89fb      	ldrh	r3, [r7, #14]
 8003970:	3380      	adds	r3, #128	; 0x80
 8003972:	b29b      	uxth	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8003978:	89fb      	ldrh	r3, [r7, #14]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	0800f92c 	.word	0x0800f92c

08003988 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	e002      	b.n	800399e <ff_wtoupper+0x16>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <ff_wtoupper+0x54>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d006      	beq.n	80039b8 <ff_wtoupper+0x30>
 80039aa:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <ff_wtoupper+0x54>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1ef      	bne.n	8003998 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <ff_wtoupper+0x54>)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <ff_wtoupper+0x46>
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <ff_wtoupper+0x58>)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039cc:	e000      	b.n	80039d0 <ff_wtoupper+0x48>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	0800fa2c 	.word	0x0800fa2c
 80039e0:	0800fc0c 	.word	0x0800fc0c

080039e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80039f8:	e00c      	b.n	8003a14 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3304      	adds	r3, #4
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d8ef      	bhi.n	80039fa <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 8003a1a:	e007      	b.n	8003a2c <mem_cpy+0x48>
		*d++ = *s++;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	1c53      	adds	r3, r2, #1
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1c59      	adds	r1, r3, #1
 8003a26:	6179      	str	r1, [r7, #20]
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f2      	bne.n	8003a1c <mem_cpy+0x38>
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003a52:	e005      	b.n	8003a60 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	617a      	str	r2, [r7, #20]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f4      	bne.n	8003a54 <mem_set+0x12>
}
 8003a6a:	bf00      	nop
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003a76:	b480      	push	{r7}
 8003a78:	b089      	sub	sp, #36	; 0x24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003a8e:	bf00      	nop
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1e5a      	subs	r2, r3, #1
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <mem_cmp+0x40>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	61fa      	str	r2, [r7, #28]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	61ba      	str	r2, [r7, #24]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	1acb      	subs	r3, r1, r3
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ec      	beq.n	8003a90 <mem_cmp+0x1a>
	return r;
 8003ab6:	697b      	ldr	r3, [r7, #20]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3724      	adds	r7, #36	; 0x24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003acc:	e002      	b.n	8003ad4 <chk_chr+0x12>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <chk_chr+0x26>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d1f2      	bne.n	8003ace <chk_chr+0xc>
	return *str;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	781b      	ldrb	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS *fs		/* File system object */
)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;

	
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	791b      	ldrb	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d038      	beq.n	8003b78 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0a:	60fb      	str	r3, [r7, #12]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7858      	ldrb	r0, [r3, #1]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b16:	2301      	movs	r3, #1
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	f002 ff4f 	bl	80069bc <disk_write>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <sync_window+0x32>
			return FR_DISK_ERR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e028      	b.n	8003b7a <sync_window+0x84>
		fs->wflag = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	711a      	strb	r2, [r3, #4]
		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d31f      	bcc.n	8003b78 <sync_window+0x82>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4413      	add	r3, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d217      	bcs.n	8003b78 <sync_window+0x82>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	78db      	ldrb	r3, [r3, #3]
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	e010      	b.n	8003b72 <sync_window+0x7c>
				wsect += fs->fsize;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
				disk_write(fs->drv, fs->win, wsect, 1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7858      	ldrb	r0, [r3, #1]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b64:	2301      	movs	r3, #1
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	f002 ff28 	bl	80069bc <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d8eb      	bhi.n	8003b50 <sync_window+0x5a>
			}
		}
	}
	return FR_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
	if (sector != fs->winsect) {	/* Changed current window */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d018      	beq.n	8003bc8 <move_window+0x46>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffad 	bl	8003af6 <sync_window>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <move_window+0x24>
			return FR_DISK_ERR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e011      	b.n	8003bca <move_window+0x48>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7858      	ldrb	r0, [r3, #1]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	f002 fe9a 	bl	80068ec <disk_read>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <move_window+0x40>
			return FR_DISK_ERR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e003      	b.n	8003bca <move_window+0x48>
		fs->winsect = sector;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return FR_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs		/* File system object */
)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff8a 	bl	8003af6 <sync_window>
 8003be2:	4603      	mov	r3, r0
 8003be4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d14a      	bne.n	8003c82 <sync_fs+0xae>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d13a      	bne.n	8003c6a <sync_fs+0x96>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	795b      	ldrb	r3, [r3, #5]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d036      	beq.n	8003c6a <sync_fs+0x96>
			fs->winsect = 0;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	635a      	str	r2, [r3, #52]	; 0x34
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3338      	adds	r3, #56	; 0x38
 8003c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff18 	bl	8003a42 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3338      	adds	r3, #56	; 0x38
 8003c16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003c1a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003c1e:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3338      	adds	r3, #56	; 0x38
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <sync_fs+0xb8>)
 8003c26:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3338      	adds	r3, #56	; 0x38
 8003c2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <sync_fs+0xbc>)
 8003c32:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6912      	ldr	r2, [r2, #16]
 8003c40:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3338      	adds	r3, #56	; 0x38
 8003c46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68d2      	ldr	r2, [r2, #12]
 8003c4e:	601a      	str	r2, [r3, #0]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7858      	ldrb	r0, [r3, #1]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f002 feac 	bl	80069bc <disk_write>
			fs->fsi_flag = 0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 ff22 	bl	8006abc <disk_ioctl>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <sync_fs+0xae>
			res = FR_DISK_ERR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	41615252 	.word	0x41615252
 8003c90:	61417272 	.word	0x61417272

08003c94 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3b02      	subs	r3, #2
 8003ca2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	3b02      	subs	r3, #2
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d301      	bcc.n	8003cb4 <clust2sect+0x20>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e008      	b.n	8003cc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	789b      	ldrb	r3, [r3, #2]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	fb03 f202 	mul.w	r2, r3, r2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4413      	add	r3, r2
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d904      	bls.n	8003cea <get_fat+0x1a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d301      	bcc.n	8003cee <get_fat+0x1e>
		return 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e085      	b.n	8003dfa <get_fat+0x12a>

	switch (fs->fs_type) {
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d05f      	beq.n	8003db6 <get_fat+0xe6>
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	dc7d      	bgt.n	8003df6 <get_fat+0x126>
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d002      	beq.n	8003d04 <get_fat+0x34>
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d042      	beq.n	8003d88 <get_fat+0xb8>
 8003d02:	e078      	b.n	8003df6 <get_fat+0x126>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	0a5b      	lsrs	r3, r3, #9
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff2f 	bl	8003b82 <move_window>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d15e      	bne.n	8003de8 <get_fat+0x118>
		wc = fs->win[bc % SS(fs)]; bc++;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	0a5b      	lsrs	r3, r3, #9
 8003d48:	4413      	add	r3, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff18 	bl	8003b82 <move_window>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d149      	bne.n	8003dec <get_fat+0x11c>
		wc |= fs->win[bc % SS(fs)] << 8;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <get_fat+0xb0>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	e03c      	b.n	8003dfa <get_fat+0x12a>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d86:	e038      	b.n	8003dfa <get_fat+0x12a>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	4413      	add	r3, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fef4 	bl	8003b82 <move_window>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d127      	bne.n	8003df0 <get_fat+0x120>
		p = &fs->win[clst * 2 % SS(fs)];
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003da8:	3338      	adds	r3, #56	; 0x38
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
		return LD_WORD(p);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	e021      	b.n	8003dfa <get_fat+0x12a>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	09db      	lsrs	r3, r3, #7
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fedd 	bl	8003b82 <move_window>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d112      	bne.n	8003df4 <get_fat+0x124>
		p = &fs->win[clst * 4 % SS(fs)];
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003dd6:	3338      	adds	r3, #56	; 0x38
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003de6:	e008      	b.n	8003dfa <get_fat+0x12a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003de8:	bf00      	nop
 8003dea:	e004      	b.n	8003df6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8003dec:	bf00      	nop
 8003dee:	e002      	b.n	8003df6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8003df0:	bf00      	nop
 8003df2:	e000      	b.n	8003df6 <get_fat+0x126>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8003df4:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b088      	sub	sp, #32
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d904      	bls.n	8003e1e <put_fat+0x1c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <put_fat+0x22>
		res = FR_INT_ERR;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e0bf      	b.n	8003fa4 <put_fat+0x1a2>

	} else {
		switch (fs->fs_type) {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	f000 808d 	beq.w	8003f48 <put_fat+0x146>
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	f300 80ab 	bgt.w	8003f8a <put_fat+0x188>
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d002      	beq.n	8003e3e <put_fat+0x3c>
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d06a      	beq.n	8003f12 <put_fat+0x110>
 8003e3c:	e0a5      	b.n	8003f8a <put_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	0a5b      	lsrs	r3, r3, #9
 8003e54:	4413      	add	r3, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff fe92 	bl	8003b82 <move_window>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e62:	7ffb      	ldrb	r3, [r7, #31]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f040 8093 	bne.w	8003f90 <put_fat+0x18e>
			p = &fs->win[bc % SS(fs)];
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <put_fat+0x9c>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b25a      	sxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	4313      	orrs	r3, r2
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e001      	b.n	8003ea2 <put_fat+0xa0>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	7013      	strb	r3, [r2, #0]
			bc++;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
			fs->wflag = 1;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	0a5b      	lsrs	r3, r3, #9
 8003eba:	4413      	add	r3, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fe5f 	bl	8003b82 <move_window>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d162      	bne.n	8003f94 <put_fat+0x192>
			p = &fs->win[bc % SS(fs)];
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	3338      	adds	r3, #56	; 0x38
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <put_fat+0xec>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e00e      	b.n	8003f0c <put_fat+0x10a>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	f023 030f 	bic.w	r3, r3, #15
 8003ef8:	b25a      	sxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	b25b      	sxtb	r3, r3
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b25b      	sxtb	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	7013      	strb	r3, [r2, #0]
			break;
 8003f10:	e045      	b.n	8003f9e <put_fat+0x19c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe2f 	bl	8003b82 <move_window>
 8003f24:	4603      	mov	r3, r0
 8003f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d134      	bne.n	8003f98 <put_fat+0x196>
			p = &fs->win[clst * 2 % SS(fs)];
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003f36:	3338      	adds	r3, #56	; 0x38
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	801a      	strh	r2, [r3, #0]
			break;
 8003f46:	e02a      	b.n	8003f9e <put_fat+0x19c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	4413      	add	r3, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff fe14 	bl	8003b82 <move_window>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11b      	bne.n	8003f9c <put_fat+0x19a>
			p = &fs->win[clst * 4 % SS(fs)];
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f6c:	3338      	adds	r3, #56	; 0x38
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
			break;
 8003f88:	e009      	b.n	8003f9e <put_fat+0x19c>

		default :
			res = FR_INT_ERR;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e006      	b.n	8003f9e <put_fat+0x19c>
			if (res != FR_OK) break;
 8003f90:	bf00      	nop
 8003f92:	e004      	b.n	8003f9e <put_fat+0x19c>
			if (res != FR_OK) break;
 8003f94:	bf00      	nop
 8003f96:	e002      	b.n	8003f9e <put_fat+0x19c>
			if (res != FR_OK) break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <put_fat+0x19c>
			if (res != FR_OK) break;
 8003f9c:	bf00      	nop
		}
		fs->wflag = 1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d904      	bls.n	8003fc8 <remove_chain+0x1a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <remove_chain+0x20>
		res = FR_INT_ERR;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e039      	b.n	8004042 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003fd2:	e02d      	b.n	8004030 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003fd4:	6839      	ldr	r1, [r7, #0]
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe7a 	bl	8003cd0 <get_fat>
 8003fdc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d02b      	beq.n	800403c <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <remove_chain+0x42>
 8003fea:	2302      	movs	r3, #2
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e028      	b.n	8004042 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d102      	bne.n	8003ffe <remove_chain+0x50>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e021      	b.n	8004042 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003ffe:	2200      	movs	r2, #0
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fefd 	bl	8003e02 <put_fat>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d007      	beq.n	800402c <remove_chain+0x7e>
				fs->free_clust++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d3cc      	bcc.n	8003fd4 <remove_chain+0x26>
 800403a:	e002      	b.n	8004042 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <remove_chain+0x94>
			if (res != FR_OK) break;
 8004040:	bf00      	nop
		}
	}

	return res;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <create_chain+0x26>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d315      	bcc.n	800409e <create_chain+0x52>
 8004072:	2301      	movs	r3, #1
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e012      	b.n	800409e <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe28 	bl	8003cd0 <get_fat>
 8004080:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d801      	bhi.n	800408c <create_chain+0x40>
 8004088:	2301      	movs	r3, #1
 800408a:	e064      	b.n	8004156 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d201      	bcs.n	800409a <create_chain+0x4e>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	e05d      	b.n	8004156 <create_chain+0x10a>
		scl = clst;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3301      	adds	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d307      	bcc.n	80040c2 <create_chain+0x76>
			ncl = 2;
 80040b2:	2302      	movs	r3, #2
 80040b4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d901      	bls.n	80040c2 <create_chain+0x76>
 80040be:	2300      	movs	r3, #0
 80040c0:	e049      	b.n	8004156 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe03 	bl	8003cd0 <get_fat>
 80040ca:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d002      	beq.n	80040e0 <create_chain+0x94>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <create_chain+0x98>
			return cs;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	e038      	b.n	8004156 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1da      	bne.n	80040a2 <create_chain+0x56>
 80040ec:	2300      	movs	r3, #0
 80040ee:	e032      	b.n	8004156 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 80040f0:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80040f2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fe82 	bl	8003e02 <put_fat>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <create_chain+0xd0>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fe75 	bl	8003e02 <put_fat>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d110      	bne.n	8004144 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d010      	beq.n	8004154 <create_chain+0x108>
			fs->free_clust--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	715a      	strb	r2, [r3, #5]
 8004142:	e007      	b.n	8004154 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <create_chain+0x104>
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	e000      	b.n	8004152 <create_chain+0x106>
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004154:	697b      	ldr	r3, [r7, #20]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	887a      	ldrh	r2, [r7, #2]
 800416e:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d005      	beq.n	8004188 <dir_sdi+0x2a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d301      	bcc.n	800418c <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004188:	2302      	movs	r3, #2
 800418a:	e066      	b.n	800425a <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <dir_sdi+0x46>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d103      	bne.n	80041a4 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d114      	bne.n	80041d4 <dir_sdi+0x76>
		dj->clust = clst;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	891b      	ldrh	r3, [r3, #8]
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d301      	bcc.n	80041c0 <dir_sdi+0x62>
			return FR_INT_ERR;
 80041bc:	2302      	movs	r3, #2
 80041be:	e04c      	b.n	800425a <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	0912      	lsrs	r2, r2, #4
 80041ca:	b292      	uxth	r2, r2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	611a      	str	r2, [r3, #16]
 80041d2:	e036      	b.n	8004242 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	789b      	ldrb	r3, [r3, #2]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 80041e0:	e01b      	b.n	800421a <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fd71 	bl	8003cd0 <get_fat>
 80041ee:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d101      	bne.n	80041fc <dir_sdi+0x9e>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e02e      	b.n	800425a <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d905      	bls.n	800420e <dir_sdi+0xb0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d301      	bcc.n	8004212 <dir_sdi+0xb4>
				return FR_INT_ERR;
 800420e:	2302      	movs	r3, #2
 8004210:	e023      	b.n	800425a <dir_sdi+0xfc>
			idx -= ic;
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	429a      	cmp	r2, r3
 8004220:	d2df      	bcs.n	80041e2 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fd30 	bl	8003c94 <clust2sect>
 8004234:	4602      	mov	r2, r0
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	b29b      	uxth	r3, r3
 800423c:	441a      	add	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	441a      	add	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR *dj,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	3301      	adds	r3, #1
 8004272:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <dir_next+0x20>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <dir_next+0x24>
		return FR_NO_FILE;
 8004282:	2304      	movs	r3, #4
 8004284:	e0bb      	b.n	80043fe <dir_next+0x19c>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 8004286:	893b      	ldrh	r3, [r7, #8]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 80a6 	bne.w	80043e0 <dir_next+0x17e>
		dj->sect++;					/* Next sector */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	891b      	ldrh	r3, [r3, #8]
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	f0c0 8096 	bcc.w	80043e0 <dir_next+0x17e>
				return FR_NO_FILE;
 80042b4:	2304      	movs	r3, #4
 80042b6:	e0a2      	b.n	80043fe <dir_next+0x19c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80042b8:	893b      	ldrh	r3, [r7, #8]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	b29b      	uxth	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	789b      	ldrb	r3, [r3, #2]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 8088 	bne.w	80043e0 <dir_next+0x17e>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7ff fcf8 	bl	8003cd0 <get_fat>
 80042e0:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d801      	bhi.n	80042ec <dir_next+0x8a>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e088      	b.n	80043fe <dir_next+0x19c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d101      	bne.n	80042f8 <dir_next+0x96>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e082      	b.n	80043fe <dir_next+0x19c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	429a      	cmp	r2, r3
 8004302:	d361      	bcc.n	80043c8 <dir_next+0x166>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <dir_next+0xac>
 800430a:	2304      	movs	r3, #4
 800430c:	e077      	b.n	80043fe <dir_next+0x19c>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f7ff fe97 	bl	800404c <create_chain>
 800431e:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <dir_next+0xc8>
 8004326:	2307      	movs	r3, #7
 8004328:	e069      	b.n	80043fe <dir_next+0x19c>
					if (clst == 1) return FR_INT_ERR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <dir_next+0xd2>
 8004330:	2302      	movs	r3, #2
 8004332:	e064      	b.n	80043fe <dir_next+0x19c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d101      	bne.n	8004340 <dir_next+0xde>
 800433c:	2301      	movs	r3, #1
 800433e:	e05e      	b.n	80043fe <dir_next+0x19c>
					/* Clean-up stretched table */
					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fbd6 	bl	8003af6 <sync_window>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <dir_next+0xf2>
 8004350:	2301      	movs	r3, #1
 8004352:	e054      	b.n	80043fe <dir_next+0x19c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fb6e 	bl	8003a42 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681c      	ldr	r4, [r3, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	4610      	mov	r0, r2
 8004372:	f7ff fc8f 	bl	8003c94 <clust2sect>
 8004376:	4603      	mov	r3, r0
 8004378:	6363      	str	r3, [r4, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800437a:	2300      	movs	r3, #0
 800437c:	72fb      	strb	r3, [r7, #11]
 800437e:	e015      	b.n	80043ac <dir_next+0x14a>
						dj->fs->wflag = 1;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	711a      	strb	r2, [r3, #4]
						if (sync_window(dj->fs)) return FR_DISK_ERR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fbb2 	bl	8003af6 <sync_window>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <dir_next+0x13a>
 8004398:	2301      	movs	r3, #1
 800439a:	e030      	b.n	80043fe <dir_next+0x19c>
						dj->fs->winsect++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a2:	3201      	adds	r2, #1
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80043a6:	7afb      	ldrb	r3, [r7, #11]
 80043a8:	3301      	adds	r3, #1
 80043aa:	72fb      	strb	r3, [r7, #11]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	7afa      	ldrb	r2, [r7, #11]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3e3      	bcc.n	8004380 <dir_next+0x11e>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043be:	7afa      	ldrb	r2, [r7, #11]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1a8a      	subs	r2, r1, r2
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fc5d 	bl	8003c94 <clust2sect>
 80043da:	4602      	mov	r2, r0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	893a      	ldrh	r2, [r7, #8]
 80043e4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	015b      	lsls	r3, r3, #5
 80043f6:	441a      	add	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bd90      	pop	{r4, r7, pc}

08004406 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dj,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dj, 0);
 8004410:	2100      	movs	r1, #0
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fea3 	bl	800415e <dir_sdi>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12d      	bne.n	800447e <dir_alloc+0x78>
		n = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dj->fs, dj->sect);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7ff fba6 	bl	8003b82 <move_window>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <dir_alloc+0x76>
			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2be5      	cmp	r3, #229	; 0xe5
 8004448:	d004      	beq.n	8004454 <dir_alloc+0x4e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous entry is found */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d102      	bne.n	8004468 <dir_alloc+0x62>
 8004462:	e00c      	b.n	800447e <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
 8004468:	2101      	movs	r1, #1
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fef9 	bl	8004262 <dir_next>
 8004470:	4603      	mov	r3, r0
 8004472:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0d5      	beq.n	8004426 <dir_alloc+0x20>
 800447a:	e000      	b.n	800447e <dir_alloc+0x78>
			if (res != FR_OK) break;
 800447c:	bf00      	nop
	}
	return res;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	331a      	adds	r3, #26
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d106      	bne.n	80044b0 <ld_clust+0x28>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

	return cl;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir+DIR_FstClusLO, cl);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	331a      	adds	r3, #26
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	b292      	uxth	r2, r2
 80044ce:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	0c1a      	lsrs	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3314      	adds	r3, #20
 80044d8:	b292      	uxth	r2, r2
 80044da:	801a      	strh	r2, [r3, #0]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
	...

080044e8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	2301      	movs	r3, #1
 800450e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <cmp_lfn+0xbc>)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
 8004522:	89fb      	ldrh	r3, [r7, #14]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d019      	beq.n	800455c <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004528:	89bb      	ldrh	r3, [r7, #12]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fa2c 	bl	8003988 <ff_wtoupper>
 8004530:	4603      	mov	r3, r0
 8004532:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b13      	cmp	r3, #19
 8004538:	d80e      	bhi.n	8004558 <cmp_lfn+0x70>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	617a      	str	r2, [r7, #20]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fa1d 	bl	8003988 <ff_wtoupper>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	4293      	cmp	r3, r2
 8004556:	d008      	beq.n	800456a <cmp_lfn+0x82>
				return 0;				/* Not matched */
 8004558:	2300      	movs	r3, #0
 800455a:	e01f      	b.n	800459c <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800455c:	89bb      	ldrh	r3, [r7, #12]
 800455e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004562:	4293      	cmp	r3, r2
 8004564:	d001      	beq.n	800456a <cmp_lfn+0x82>
 8004566:	2300      	movs	r3, #0
 8004568:	e018      	b.n	800459c <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d9cc      	bls.n	8004510 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <cmp_lfn+0xb2>
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <cmp_lfn+0xb2>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <cmp_lfn+0xb2>
		return 0;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	0800fe6c 	.word	0x0800fe6c

080045a8 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	460b      	mov	r3, r1
 80045b8:	71fb      	strb	r3, [r7, #7]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	330d      	adds	r3, #13
 80045c2:	79ba      	ldrb	r2, [r7, #6]
 80045c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	330b      	adds	r3, #11
 80045ca:	220f      	movs	r2, #15
 80045cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	330c      	adds	r3, #12
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	331a      	adds	r3, #26
 80045da:	2200      	movs	r2, #0
 80045dc:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	82fb      	strh	r3, [r7, #22]
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <fit_lfn+0x68>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	61fa      	str	r2, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004610:	4a16      	ldr	r2, [pc, #88]	; (800466c <fit_lfn+0xc4>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	8afa      	ldrh	r2, [r7, #22]
 8004620:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <fit_lfn+0x86>
 8004628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800462c:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	3301      	adds	r3, #1
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d9dd      	bls.n	80045f6 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
 800463a:	8afb      	ldrh	r3, [r7, #22]
 800463c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004640:	4293      	cmp	r3, r2
 8004642:	d006      	beq.n	8004652 <fit_lfn+0xaa>
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <fit_lfn+0xb2>
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004658:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	79fa      	ldrb	r2, [r7, #7]
 800465e:	701a      	strb	r2, [r3, #0]
}
 8004660:	bf00      	nop
 8004662:	3724      	adds	r7, #36	; 0x24
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	0800fe6c 	.word	0x0800fe6c

08004670 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
 800467e:	220b      	movs	r2, #11
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff f9ae 	bl	80039e4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d90f      	bls.n	80046ae <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	b29a      	uxth	r2, r3
 8004692:	0852      	lsrs	r2, r2, #1
 8004694:	03db      	lsls	r3, r3, #15
 8004696:	4313      	orrs	r3, r2
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	1c99      	adds	r1, r3, #2
 800469e:	6079      	str	r1, [r7, #4]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	807b      	strh	r3, [r7, #2]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ef      	bne.n	800468e <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
 80046ae:	2307      	movs	r3, #7
 80046b0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3330      	adds	r3, #48	; 0x30
 80046be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c6:	2b39      	cmp	r3, #57	; 0x39
 80046c8:	d904      	bls.n	80046d4 <gen_numname+0x64>
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	3307      	adds	r3, #7
 80046d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	1e5a      	subs	r2, r3, #1
 80046d8:	623a      	str	r2, [r7, #32]
 80046da:	3328      	adds	r3, #40	; 0x28
 80046dc:	443b      	add	r3, r7
 80046de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80046e2:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	807b      	strh	r3, [r7, #2]
	} while (seq);
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1df      	bne.n	80046b2 <gen_numname+0x42>
	ns[i] = '~';
 80046f2:	f107 0214 	add.w	r2, r7, #20
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	4413      	add	r3, r2
 80046fa:	227e      	movs	r2, #126	; 0x7e
 80046fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e002      	b.n	800470a <gen_numname+0x9a>
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	429a      	cmp	r2, r3
 8004710:	d205      	bcs.n	800471e <gen_numname+0xae>
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b20      	cmp	r3, #32
 800471c:	d1f2      	bne.n	8004704 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b07      	cmp	r3, #7
 8004722:	d807      	bhi.n	8004734 <gen_numname+0xc4>
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	623a      	str	r2, [r7, #32]
 800472a:	3328      	adds	r3, #40	; 0x28
 800472c:	443b      	add	r3, r7
 800472e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8004732:	e000      	b.n	8004736 <gen_numname+0xc6>
 8004734:	2120      	movs	r1, #32
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	61fa      	str	r2, [r7, #28]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	460a      	mov	r2, r1
 8004742:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b07      	cmp	r3, #7
 8004748:	d9e9      	bls.n	800471e <gen_numname+0xae>
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004760:	230b      	movs	r3, #11
 8004762:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4313      	orrs	r3, r2
 800476e:	b2da      	uxtb	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	6079      	str	r1, [r7, #4]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	4413      	add	r3, r2
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ed      	bne.n	8004764 <sum_sfn+0x10>
	return sum;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 800479c:	2100      	movs	r1, #0
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fcdd 	bl	800415e <dir_sdi>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <dir_find+0x1e>
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	e098      	b.n	80048e4 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
 80047b2:	23ff      	movs	r3, #255	; 0xff
 80047b4:	753b      	strb	r3, [r7, #20]
 80047b6:	7d3b      	ldrb	r3, [r7, #20]
 80047b8:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7ff f9dc 	bl	8003b82 <move_window>
 80047ca:	4603      	mov	r3, r0
 80047cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 8081 	bne.w	80048d8 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80047e2:	7dbb      	ldrb	r3, [r7, #22]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <dir_find+0x5a>
 80047e8:	2304      	movs	r3, #4
 80047ea:	75fb      	strb	r3, [r7, #23]
 80047ec:	e079      	b.n	80048e2 <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	330b      	adds	r3, #11
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f8:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80047fa:	7dbb      	ldrb	r3, [r7, #22]
 80047fc:	2be5      	cmp	r3, #229	; 0xe5
 80047fe:	d007      	beq.n	8004810 <dir_find+0x7c>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <dir_find+0x82>
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d002      	beq.n	8004816 <dir_find+0x82>
			ord = 0xFF;
 8004810:	23ff      	movs	r3, #255	; 0xff
 8004812:	757b      	strb	r3, [r7, #21]
 8004814:	e055      	b.n	80048c2 <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d12f      	bne.n	800487c <dir_find+0xe8>
				if (dj->lfn) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d04e      	beq.n	80048c2 <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
 8004824:	7dbb      	ldrb	r3, [r7, #22]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	7b5b      	ldrb	r3, [r3, #13]
 8004832:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
 8004834:	7dbb      	ldrb	r3, [r7, #22]
 8004836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483a:	75bb      	strb	r3, [r7, #22]
 800483c:	7dbb      	ldrb	r3, [r7, #22]
 800483e:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	88da      	ldrh	r2, [r3, #6]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 8004848:	7dba      	ldrb	r2, [r7, #22]
 800484a:	7d7b      	ldrb	r3, [r7, #21]
 800484c:	429a      	cmp	r2, r3
 800484e:	d112      	bne.n	8004876 <dir_find+0xe2>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	330d      	adds	r3, #13
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	7d3a      	ldrb	r2, [r7, #20]
 8004858:	429a      	cmp	r2, r3
 800485a:	d10c      	bne.n	8004876 <dir_find+0xe2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fe40 	bl	80044e8 <cmp_lfn>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <dir_find+0xe2>
 800486e:	7d7b      	ldrb	r3, [r7, #21]
 8004870:	3b01      	subs	r3, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e000      	b.n	8004878 <dir_find+0xe4>
 8004876:	23ff      	movs	r3, #255	; 0xff
 8004878:	757b      	strb	r3, [r7, #21]
 800487a:	e022      	b.n	80048c2 <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800487c:	7d7b      	ldrb	r3, [r7, #21]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <dir_find+0xfe>
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f7ff ff66 	bl	8004754 <sum_sfn>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	7d3b      	ldrb	r3, [r7, #20]
 800488e:	4293      	cmp	r3, r2
 8004890:	d024      	beq.n	80048dc <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004892:	23ff      	movs	r3, #255	; 0xff
 8004894:	757b      	strb	r3, [r7, #21]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489c:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	330b      	adds	r3, #11
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <dir_find+0x12e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	220b      	movs	r2, #11
 80048b4:	4619      	mov	r1, r3
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f7ff f8dd 	bl	8003a76 <mem_cmp>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 80048c2:	2100      	movs	r1, #0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fccc 	bl	8004262 <dir_next>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f43f af72 	beq.w	80047ba <dir_find+0x26>
 80048d6:	e004      	b.n	80048e2 <dir_find+0x14e>
		if (res != FR_OK) break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 80048e0:	bf00      	nop

	return res;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	WORD n, ne;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
	mem_cpy(sn, fn, 12);
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	220c      	movs	r2, #12
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f86b 	bl	80039e4 <mem_cpy>

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <dir_register+0x30>
		return FR_INVALID_NAME;
 8004918:	2306      	movs	r3, #6
 800491a:	e0e3      	b.n	8004ae4 <dir_register+0x1f8>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d035      	beq.n	8004992 <dir_register+0xa6>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	330b      	adds	r3, #11
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
 8004934:	2301      	movs	r3, #1
 8004936:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004938:	e013      	b.n	8004962 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800493a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800493c:	f107 0108 	add.w	r1, r7, #8
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	69f8      	ldr	r0, [r7, #28]
 8004944:	f7ff fe94 	bl	8004670 <gen_numname>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff23 	bl	8004794 <dir_find>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) break;
 8004954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800495c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800495e:	3301      	adds	r3, #1
 8004960:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004964:	2b63      	cmp	r3, #99	; 0x63
 8004966:	d9e8      	bls.n	800493a <dir_register+0x4e>
 8004968:	e000      	b.n	800496c <dir_register+0x80>
			if (res != FR_OK) break;
 800496a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800496c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d101      	bne.n	8004976 <dir_register+0x8a>
 8004972:	2307      	movs	r3, #7
 8004974:	e0b6      	b.n	8004ae4 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800497a:	2b04      	cmp	r3, #4
 800497c:	d002      	beq.n	8004984 <dir_register+0x98>
 800497e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004982:	e0af      	b.n	8004ae4 <dir_register+0x1f8>
		fn[NS] = sn[NS]; dj->lfn = lfn;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	330b      	adds	r3, #11
 8004988:	7cfa      	ldrb	r2, [r7, #19]
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800499c:	2300      	movs	r3, #0
 800499e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049a0:	e002      	b.n	80049a8 <dir_register+0xbc>
 80049a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a4:	3301      	adds	r3, #1
 80049a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f5      	bne.n	80049a2 <dir_register+0xb6>
		ne = (n + 25) / 13;
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b8:	3319      	adds	r3, #25
 80049ba:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <dir_register+0x200>)
 80049bc:	fb82 1203 	smull	r1, r2, r2, r3
 80049c0:	1092      	asrs	r2, r2, #2
 80049c2:	17db      	asrs	r3, r3, #31
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80049c8:	e001      	b.n	80049ce <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		ne = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	847b      	strh	r3, [r7, #34]	; 0x22
	}
	res = dir_alloc(dj, ne);		/* Allocate entries */
 80049ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fd17 	bl	8004406 <dir_alloc>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
 80049de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d14b      	bne.n	8004a7e <dir_register+0x192>
 80049e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049e8:	3b01      	subs	r3, #1
 80049ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80049ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d045      	beq.n	8004a7e <dir_register+0x192>
		res = dir_sdi(dj, (WORD)(dj->index - ne));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	88da      	ldrh	r2, [r3, #6]
 80049f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fbad 	bl	800415e <dir_sdi>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8004a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d135      	bne.n	8004a7e <dir_register+0x192>
			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fe9c 	bl	8004754 <sum_sfn>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7ff f8a9 	bl	8003b82 <move_window>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (res != FR_OK) break;
 8004a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11e      	bne.n	8004a7c <dir_register+0x190>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69d8      	ldr	r0, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6959      	ldr	r1, [r3, #20]
 8004a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	f7ff fdac 	bl	80045a8 <fit_lfn>
				dj->fs->wflag = 1;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
 8004a58:	2100      	movs	r1, #0
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fc01 	bl	8004262 <dir_next>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			} while (res == FR_OK && --ne);
 8004a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <dir_register+0x192>
 8004a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a70:	3b01      	subs	r3, #1
 8004a72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1d2      	bne.n	8004a20 <dir_register+0x134>
 8004a7a:	e000      	b.n	8004a7e <dir_register+0x192>
				if (res != FR_OK) break;
 8004a7c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d12c      	bne.n	8004ae0 <dir_register+0x1f4>
		res = move_window(dj->fs, dj->sect);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7ff f876 	bl	8003b82 <move_window>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res == FR_OK) {
 8004a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11d      	bne.n	8004ae0 <dir_register+0x1f4>
			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe ffc8 	bl	8003a42 <mem_set>
			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6958      	ldr	r0, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	220b      	movs	r2, #11
 8004abc:	4619      	mov	r1, r3
 8004abe:	f7fe ff91 	bl	80039e4 <mem_cpy>
#if _USE_LFN
			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	330b      	adds	r3, #11
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	f002 0218 	and.w	r2, r2, #24
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	4ec4ec4f 	.word	0x4ec4ec4f

08004af0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e002      	b.n	8004b08 <create_name+0x18>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	3301      	adds	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b0e:	d0f8      	beq.n	8004b02 <create_name+0x12>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b5c      	cmp	r3, #92	; 0x5c
 8004b16:	d0f4      	beq.n	8004b02 <create_name+0x12>
	lfn = dj->lfn;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	61ba      	str	r2, [r7, #24]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b36:	2b1f      	cmp	r3, #31
 8004b38:	d92f      	bls.n	8004b9a <create_name+0xaa>
 8004b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b3e:	d02c      	beq.n	8004b9a <create_name+0xaa>
 8004b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b42:	2b5c      	cmp	r3, #92	; 0x5c
 8004b44:	d029      	beq.n	8004b9a <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b13      	cmp	r3, #19
 8004b4a:	d901      	bls.n	8004b50 <create_name+0x60>
			return FR_INVALID_NAME;
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	e1c8      	b.n	8004ee2 <create_name+0x3f2>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe feda 	bl	8003914 <ff_convert>
 8004b60:	4603      	mov	r3, r0
 8004b62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <create_name+0x7e>
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	e1b9      	b.n	8004ee2 <create_name+0x3f2>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
 8004b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b70:	2b7f      	cmp	r3, #127	; 0x7f
 8004b72:	d809      	bhi.n	8004b88 <create_name+0x98>
 8004b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b76:	4619      	mov	r1, r3
 8004b78:	489e      	ldr	r0, [pc, #632]	; (8004df4 <create_name+0x304>)
 8004b7a:	f7fe ffa2 	bl	8003ac2 <chk_chr>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <create_name+0x98>
			return FR_INVALID_NAME;
 8004b84:	2306      	movs	r3, #6
 8004b86:	e1ac      	b.n	8004ee2 <create_name+0x3f2>
		lfn[di++] = w;					/* Store the Unicode char */
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	617a      	str	r2, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b96:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004b98:	e7c5      	b.n	8004b26 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	441a      	add	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ba6:	2b1f      	cmp	r3, #31
 8004ba8:	d801      	bhi.n	8004bae <create_name+0xbe>
 8004baa:	2304      	movs	r3, #4
 8004bac:	e000      	b.n	8004bb0 <create_name+0xc0>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d109      	bne.n	8004bce <create_name+0xde>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b2e      	cmp	r3, #46	; 0x2e
 8004bcc:	d016      	beq.n	8004bfc <create_name+0x10c>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d14d      	bne.n	8004c70 <create_name+0x180>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	2b2e      	cmp	r3, #46	; 0x2e
 8004be6:	d143      	bne.n	8004c70 <create_name+0x180>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bee:	3b02      	subs	r3, #2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bfa:	d139      	bne.n	8004c70 <create_name+0x180>
		lfn[di] = 0;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	2200      	movs	r2, #0
 8004c06:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	e00f      	b.n	8004c2e <create_name+0x13e>
			dj->fn[i] = (i < di) ? '.' : ' ';
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d201      	bcs.n	8004c1a <create_name+0x12a>
 8004c16:	212e      	movs	r1, #46	; 0x2e
 8004c18:	e000      	b.n	8004c1c <create_name+0x12c>
 8004c1a:	2120      	movs	r1, #32
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	4413      	add	r3, r2
 8004c24:	460a      	mov	r2, r1
 8004c26:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b0a      	cmp	r3, #10
 8004c32:	d9ec      	bls.n	8004c0e <create_name+0x11e>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004c40:	f042 0220 	orr.w	r2, r2, #32
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e14a      	b.n	8004ee2 <create_name+0x3f2>
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	3b01      	subs	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d002      	beq.n	8004c6a <create_name+0x17a>
 8004c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c66:	2b2e      	cmp	r3, #46	; 0x2e
 8004c68:	d106      	bne.n	8004c78 <create_name+0x188>
		di--;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1ea      	bne.n	8004c4c <create_name+0x15c>
 8004c76:	e000      	b.n	8004c7a <create_name+0x18a>
		if (w != ' ' && w != '.') break;
 8004c78:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <create_name+0x194>
 8004c80:	2306      	movs	r3, #6
 8004c82:	e12e      	b.n	8004ee2 <create_name+0x3f2>

	lfn[di] = 0;						/* LFN is created */
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	220b      	movs	r2, #11
 8004c96:	2120      	movs	r1, #32
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fed2 	bl	8003a42 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e002      	b.n	8004caa <create_name+0x1ba>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d0f5      	beq.n	8004ca4 <create_name+0x1b4>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cc4:	d0ee      	beq.n	8004ca4 <create_name+0x1b4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <create_name+0x1f0>
 8004ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd0:	f043 0303 	orr.w	r3, r3, #3
 8004cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004cd8:	e002      	b.n	8004ce0 <create_name+0x1f0>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <create_name+0x20a>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cec:	3b01      	subs	r3, #1
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf8:	d1ef      	bne.n	8004cda <create_name+0x1ea>

	b = i = 0; ni = 8;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d04:	2308      	movs	r3, #8
 8004d06:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8096 	beq.w	8004e4c <create_name+0x35c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d006      	beq.n	8004d34 <create_name+0x244>
 8004d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d28:	2b2e      	cmp	r3, #46	; 0x2e
 8004d2a:	d10a      	bne.n	8004d42 <create_name+0x252>
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d006      	beq.n	8004d42 <create_name+0x252>
			cf |= NS_LOSS | NS_LFN; continue;
 8004d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d38:	f043 0303 	orr.w	r3, r3, #3
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d40:	e083      	b.n	8004e4a <create_name+0x35a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <create_name+0x262>
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d123      	bne.n	8004d9a <create_name+0x2aa>
			if (ni == 11) {				/* Long extension */
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b0b      	cmp	r3, #11
 8004d56:	d106      	bne.n	8004d66 <create_name+0x276>
				cf |= NS_LOSS | NS_LFN; break;
 8004d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d5c:	f043 0303 	orr.w	r3, r3, #3
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d64:	e075      	b.n	8004e52 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d005      	beq.n	8004d7a <create_name+0x28a>
 8004d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d72:	f043 0303 	orr.w	r3, r3, #3
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d866      	bhi.n	8004e50 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	2308      	movs	r3, #8
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	230b      	movs	r3, #11
 8004d8c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d98:	e057      	b.n	8004e4a <create_name+0x35a>
		}

		if (w >= 0x80) {				/* Non ASCII char */
 8004d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	d914      	bls.n	8004dca <create_name+0x2da>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fdb5 	bl	8003914 <ff_convert>
 8004daa:	4603      	mov	r3, r0
 8004dac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
 8004dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <create_name+0x2ce>
 8004db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db6:	3b80      	subs	r3, #128	; 0x80
 8004db8:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <create_name+0x308>)
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc2:	f043 0302 	orr.w	r3, r3, #2
 8004dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <create_name+0x2f0>
 8004dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4809      	ldr	r0, [pc, #36]	; (8004dfc <create_name+0x30c>)
 8004dd6:	f7fe fe74 	bl	8003ac2 <chk_chr>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00f      	beq.n	8004e00 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004de0:	235f      	movs	r3, #95	; 0x5f
 8004de2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de8:	f043 0303 	orr.w	r3, r3, #3
 8004dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004df0:	e022      	b.n	8004e38 <create_name+0x348>
 8004df2:	bf00      	nop
 8004df4:	0800f7bc 	.word	0x0800f7bc
 8004df8:	0800fdec 	.word	0x0800fdec
 8004dfc:	0800f7c8 	.word	0x0800f7c8
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d909      	bls.n	8004e1a <create_name+0x32a>
 8004e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e08:	2b5a      	cmp	r3, #90	; 0x5a
 8004e0a:	d806      	bhi.n	8004e1a <create_name+0x32a>
					b |= 2;
 8004e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e18:	e00e      	b.n	8004e38 <create_name+0x348>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e1c:	2b60      	cmp	r3, #96	; 0x60
 8004e1e:	d90b      	bls.n	8004e38 <create_name+0x348>
 8004e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e22:	2b7a      	cmp	r3, #122	; 0x7a
 8004e24:	d808      	bhi.n	8004e38 <create_name+0x348>
						b |= 1; w -= 0x20;
 8004e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e34:	3b20      	subs	r3, #32
 8004e36:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	1c59      	adds	r1, r3, #1
 8004e40:	6239      	str	r1, [r7, #32]
 8004e42:	4413      	add	r3, r2
 8004e44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
 8004e4a:	e75d      	b.n	8004d08 <create_name+0x218>
		if (!w) break;					/* Break on end of the LFN */
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <create_name+0x362>
			if (si > di) break;			/* No extension */
 8004e50:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2be5      	cmp	r3, #229	; 0xe5
 8004e5a:	d103      	bne.n	8004e64 <create_name+0x374>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2205      	movs	r2, #5
 8004e62:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d104      	bne.n	8004e74 <create_name+0x384>
 8004e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d005      	beq.n	8004e8c <create_name+0x39c>
 8004e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d105      	bne.n	8004e98 <create_name+0x3a8>
		cf |= NS_LFN;
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
 8004e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d117      	bne.n	8004ed4 <create_name+0x3e4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <create_name+0x3cc>
 8004eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb4:	f043 0310 	orr.w	r3, r3, #16
 8004eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d105      	bne.n	8004ed4 <create_name+0x3e4>
 8004ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dj->fn[NS] = cf;	/* SFN is created */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	330b      	adds	r3, #11
 8004eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ede:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ee0:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3728      	adds	r7, #40	; 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b2f      	cmp	r3, #47	; 0x2f
 8004efc:	d003      	beq.n	8004f06 <follow_path+0x1a>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b5c      	cmp	r3, #92	; 0x5c
 8004f04:	d106      	bne.n	8004f14 <follow_path+0x28>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
 8004f12:	e004      	b.n	8004f1e <follow_path+0x32>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b1f      	cmp	r3, #31
 8004f24:	d809      	bhi.n	8004f3a <follow_path+0x4e>
		res = dir_sdi(dj, 0);
 8004f26:	2100      	movs	r1, #0
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff f918 	bl	800415e <dir_sdi>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
 8004f38:	e056      	b.n	8004fe8 <follow_path+0xfc>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fdd6 	bl	8004af0 <create_name>
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d145      	bne.n	8004fda <follow_path+0xee>
			res = dir_find(dj);				/* Find it */
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fc20 	bl	8004794 <dir_find>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	7adb      	ldrb	r3, [r3, #11]
 8004f5e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01d      	beq.n	8004fa2 <follow_path+0xb6>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d138      	bne.n	8004fde <follow_path+0xf2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <follow_path+0xa6>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	615a      	str	r2, [r3, #20]
					res = FR_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
					if (!(ns & NS_LAST)) continue;
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d128      	bne.n	8004fe2 <follow_path+0xf6>
 8004f90:	e022      	b.n	8004fd8 <follow_path+0xec>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d122      	bne.n	8004fe2 <follow_path+0xf6>
 8004f9c:	2305      	movs	r3, #5
 8004f9e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8004fa0:	e01f      	b.n	8004fe2 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8004fa2:	7bbb      	ldrb	r3, [r7, #14]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11c      	bne.n	8004fe6 <follow_path+0xfa>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	330b      	adds	r3, #11
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8004fc0:	2305      	movs	r3, #5
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e010      	b.n	8004fe8 <follow_path+0xfc>
			}
			dj->sclust = ld_clust(dj->fs, dir);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fa5b 	bl	8004488 <ld_clust>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8004fd8:	e7af      	b.n	8004f3a <follow_path+0x4e>
			if (res != FR_OK) break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <follow_path+0xfc>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <follow_path+0xfc>
				break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8004fe6:	bf00      	nop
		}
	}

	return res;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7858      	ldrb	r0, [r3, #1]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005008:	2301      	movs	r3, #1
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	f001 fc6e 	bl	80068ec <disk_read>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <check_fs+0x26>
		return 3;
 8005016:	2303      	movs	r3, #3
 8005018:	e01e      	b.n	8005058 <check_fs+0x64>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f203 2336 	addw	r3, r3, #566	; 0x236
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005026:	4293      	cmp	r3, r2
 8005028:	d001      	beq.n	800502e <check_fs+0x3a>
		return 2;
 800502a:	2302      	movs	r3, #2
 800502c:	e014      	b.n	8005058 <check_fs+0x64>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	336e      	adds	r3, #110	; 0x6e
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <check_fs+0x6c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <check_fs+0x4e>
		return 0;
 800503e:	2300      	movs	r3, #0
 8005040:	e00a      	b.n	8005058 <check_fs+0x64>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	338a      	adds	r3, #138	; 0x8a
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800504c:	4a04      	ldr	r2, [pc, #16]	; (8005060 <check_fs+0x6c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <check_fs+0x62>
		return 0;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <check_fs+0x64>

	return 1;
 8005056:	2301      	movs	r3, #1
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	00544146 	.word	0x00544146

08005064 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b092      	sub	sp, #72	; 0x48
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	3b30      	subs	r3, #48	; 0x30
 800507e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	2b09      	cmp	r3, #9
 8005084:	d80b      	bhi.n	800509e <chk_mounted+0x3a>
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	3301      	adds	r3, #1
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b3a      	cmp	r3, #58	; 0x3a
 800508e:	d106      	bne.n	800509e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	3302      	adds	r3, #2
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e002      	b.n	80050a4 <chk_mounted+0x40>
	} else {							/* No drive number, use default drive */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
 800509e:	4b8c      	ldr	r3, [pc, #560]	; (80052d0 <chk_mounted+0x26c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 80050aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <chk_mounted+0x50>
		return FR_INVALID_DRIVE;
 80050b0:	230b      	movs	r3, #11
 80050b2:	e1d5      	b.n	8005460 <chk_mounted+0x3fc>
	fs = FatFs[vol];					/* Get corresponding file system object */
 80050b4:	4a87      	ldr	r2, [pc, #540]	; (80052d4 <chk_mounted+0x270>)
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <chk_mounted+0x64>
 80050c4:	230c      	movs	r3, #12
 80050c6:	e1cb      	b.n	8005460 <chk_mounted+0x3fc>

	ENTER_FF(fs);						/* Lock volume */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050cc:	601a      	str	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01a      	beq.n	800510c <chk_mounted+0xa8>
		stat = disk_status(fs->drv);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fbf2 	bl	80068c4 <disk_status>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 80050e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <chk_mounted+0xa8>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <chk_mounted+0xa4>
 80050f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <chk_mounted+0xa4>
				return FR_WRITE_PROTECTED;
 8005104:	230a      	movs	r3, #10
 8005106:	e1ab      	b.n	8005460 <chk_mounted+0x3fc>
			return FR_OK;				/* The file system object is valid */
 8005108:	2300      	movs	r3, #0
 800510a:	e1a9      	b.n	8005460 <chk_mounted+0x3fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	4618      	mov	r0, r3
 8005120:	f001 faf0 	bl	8006704 <disk_initialize>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800512a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <chk_mounted+0xd6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005136:	2303      	movs	r3, #3
 8005138:	e192      	b.n	8005460 <chk_mounted+0x3fc>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <chk_mounted+0xec>
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
 800514c:	230a      	movs	r3, #10
 800514e:	e187      	b.n	8005460 <chk_mounted+0x3fc>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 8005150:	2300      	movs	r3, #0
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005158:	f7ff ff4c 	bl	8004ff4 <check_fs>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 8005162:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005166:	2b01      	cmp	r3, #1
 8005168:	d124      	bne.n	80051b4 <chk_mounted+0x150>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
 8005170:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <chk_mounted+0x11e>
 8005178:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800517c:	3b01      	subs	r3, #1
 800517e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
 8005182:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800518c:	3338      	adds	r3, #56	; 0x38
 800518e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005190:	4413      	add	r3, r2
 8005192:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	3304      	adds	r3, #4
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <chk_mounted+0x150>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	3308      	adds	r3, #8
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
 80051a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051aa:	f7ff ff23 	bl	8004ff4 <check_fs>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 80051b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d101      	bne.n	80051c0 <chk_mounted+0x15c>
 80051bc:	2301      	movs	r3, #1
 80051be:	e14f      	b.n	8005460 <chk_mounted+0x3fc>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80051c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <chk_mounted+0x168>
 80051c8:	230d      	movs	r3, #13
 80051ca:	e149      	b.n	8005460 <chk_mounted+0x3fc>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	3338      	adds	r3, #56	; 0x38
 80051d0:	330b      	adds	r3, #11
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d001      	beq.n	80051de <chk_mounted+0x17a>
		return FR_NO_FILESYSTEM;
 80051da:	230d      	movs	r3, #13
 80051dc:	e140      	b.n	8005460 <chk_mounted+0x3fc>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	3338      	adds	r3, #56	; 0x38
 80051e2:	3316      	adds	r3, #22
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <chk_mounted+0x194>
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	3338      	adds	r3, #56	; 0x38
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	621a      	str	r2, [r3, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	7ffa      	ldrb	r2, [r7, #31]
 800520a:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 800520c:	7ffb      	ldrb	r3, [r7, #31]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d004      	beq.n	800521c <chk_mounted+0x1b8>
 8005212:	7ffb      	ldrb	r3, [r7, #31]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d001      	beq.n	800521c <chk_mounted+0x1b8>
 8005218:	230d      	movs	r3, #13
 800521a:	e121      	b.n	8005460 <chk_mounted+0x3fc>
	fasize *= b;										/* Number of sectors for FAT area */
 800521c:	7ffa      	ldrb	r2, [r7, #31]
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	fb02 f303 	mul.w	r3, r2, r3
 8005224:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	7ffa      	ldrb	r2, [r7, #31]
 8005232:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <chk_mounted+0x1e2>
 800523a:	7ffa      	ldrb	r2, [r7, #31]
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	3b01      	subs	r3, #1
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <chk_mounted+0x1e6>
 8005246:	230d      	movs	r3, #13
 8005248:	e10a      	b.n	8005460 <chk_mounted+0x3fc>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	3338      	adds	r3, #56	; 0x38
 800524e:	3311      	adds	r3, #17
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	891b      	ldrh	r3, [r3, #8]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <chk_mounted+0x204>
 8005264:	230d      	movs	r3, #13
 8005266:	e0fb      	b.n	8005460 <chk_mounted+0x3fc>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	3338      	adds	r3, #56	; 0x38
 800526c:	3313      	adds	r3, #19
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <chk_mounted+0x21e>
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	3338      	adds	r3, #56	; 0x38
 800527c:	3320      	adds	r3, #32
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	3338      	adds	r3, #56	; 0x38
 8005286:	330e      	adds	r3, #14
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 800528c:	8bbb      	ldrh	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <chk_mounted+0x232>
 8005292:	230d      	movs	r3, #13
 8005294:	e0e4      	b.n	8005460 <chk_mounted+0x3fc>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 8005296:	8bba      	ldrh	r2, [r7, #28]
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	4413      	add	r3, r2
 800529c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529e:	8912      	ldrh	r2, [r2, #8]
 80052a0:	0912      	lsrs	r2, r2, #4
 80052a2:	b292      	uxth	r2, r2
 80052a4:	4413      	add	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d201      	bcs.n	80052b4 <chk_mounted+0x250>
 80052b0:	230d      	movs	r3, #13
 80052b2:	e0d5      	b.n	8005460 <chk_mounted+0x3fc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80052b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052bc:	7892      	ldrb	r2, [r2, #2]
 80052be:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <chk_mounted+0x274>
 80052ca:	230d      	movs	r3, #13
 80052cc:	e0c8      	b.n	8005460 <chk_mounted+0x3fc>
 80052ce:	bf00      	nop
 80052d0:	2000164a 	.word	0x2000164a
 80052d4:	20001644 	.word	0x20001644
	fmt = FS_FAT12;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d902      	bls.n	80052ee <chk_mounted+0x28a>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d902      	bls.n	80052fe <chk_mounted+0x29a>
 80052f8:	2303      	movs	r3, #3
 80052fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	61da      	str	r2, [r3, #28]
	fs->volbase = bsect;								/* Volume start sector */
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800530a:	625a      	str	r2, [r3, #36]	; 0x24
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800530c:	8bba      	ldrh	r2, [r7, #28]
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	441a      	add	r2, r3
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
	fs->database = bsect + sysect;						/* Data start sector */
 8005316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	441a      	add	r2, r3
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
	if (fmt == FS_FAT32) {
 8005320:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005324:	2b03      	cmp	r3, #3
 8005326:	d110      	bne.n	800534a <chk_mounted+0x2e6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	891b      	ldrh	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <chk_mounted+0x2d0>
 8005330:	230d      	movs	r3, #13
 8005332:	e095      	b.n	8005460 <chk_mounted+0x3fc>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	3338      	adds	r3, #56	; 0x38
 8005338:	332c      	adds	r3, #44	; 0x2c
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
 8005348:	e01f      	b.n	800538a <chk_mounted+0x326>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	891b      	ldrh	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <chk_mounted+0x2f2>
 8005352:	230d      	movs	r3, #13
 8005354:	e084      	b.n	8005460 <chk_mounted+0x3fc>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	441a      	add	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005366:	2b02      	cmp	r3, #2
 8005368:	d103      	bne.n	8005372 <chk_mounted+0x30e>
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	e00a      	b.n	8005388 <chk_mounted+0x324>
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	085a      	lsrs	r2, r3, #1
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8005388:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005394:	0a5b      	lsrs	r3, r3, #9
 8005396:	429a      	cmp	r2, r3
 8005398:	d201      	bcs.n	800539e <chk_mounted+0x33a>
		return FR_NO_FILESYSTEM;
 800539a:	230d      	movs	r3, #13
 800539c:	e060      	b.n	8005460 <chk_mounted+0x3fc>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	2200      	movs	r2, #0
 80053aa:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80053ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d13d      	bne.n	8005430 <chk_mounted+0x3cc>
	 	fs->fsi_flag = 0;
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2200      	movs	r2, #0
 80053b8:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	3338      	adds	r3, #56	; 0x38
 80053be:	3330      	adds	r3, #48	; 0x30
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	441a      	add	r2, r3
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	7858      	ldrb	r0, [r3, #1]
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	2301      	movs	r3, #1
 80053dc:	f001 fa86 	bl	80068ec <disk_read>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d124      	bne.n	8005430 <chk_mounted+0x3cc>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	3338      	adds	r3, #56	; 0x38
 80053ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80053ee:	881b      	ldrh	r3, [r3, #0]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80053f0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d11b      	bne.n	8005430 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	3338      	adds	r3, #56	; 0x38
 80053fc:	681b      	ldr	r3, [r3, #0]
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <chk_mounted+0x404>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d115      	bne.n	8005430 <chk_mounted+0x3cc>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	3338      	adds	r3, #56	; 0x38
 8005408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800540c:	681b      	ldr	r3, [r3, #0]
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800540e:	4a17      	ldr	r2, [pc, #92]	; (800546c <chk_mounted+0x408>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10d      	bne.n	8005430 <chk_mounted+0x3cc>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	3338      	adds	r3, #56	; 0x38
 8005418:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	3338      	adds	r3, #56	; 0x38
 8005426:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005436:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005438:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <chk_mounted+0x40c>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <chk_mounted+0x40c>)
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <chk_mounted+0x40c>)
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2200      	movs	r2, #0
 8005450:	635a      	str	r2, [r3, #52]	; 0x34
	fs->wflag = 0;
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2200      	movs	r2, #0
 8005456:	711a      	strb	r2, [r3, #4]
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	2200      	movs	r2, #0
 800545c:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3748      	adds	r7, #72	; 0x48
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	41615252 	.word	0x41615252
 800546c:	61417272 	.word	0x61417272
 8005470:	20001648 	.word	0x20001648

08005474 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <validate+0x32>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <validate+0x32>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <validate+0x32>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	88da      	ldrh	r2, [r3, #6]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	889b      	ldrh	r3, [r3, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d001      	beq.n	80054aa <validate+0x36>
		return FR_INVALID_OBJECT;
 80054a6:	2309      	movs	r3, #9
 80054a8:	e00d      	b.n	80054c6 <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fa07 	bl	80068c4 <disk_status>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <validate+0x50>
		return FR_NOT_READY;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e000      	b.n	80054c6 <validate+0x52>

	return FR_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80054e2:	230b      	movs	r3, #11
 80054e4:	e016      	b.n	8005514 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <f_mount+0x50>)
 80054ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ee:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	4905      	ldr	r1, [pc, #20]	; (8005520 <f_mount+0x50>)
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20001644 	.word	0x20001644

08005524 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b094      	sub	sp, #80	; 0x50
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <f_open+0x18>
 8005538:	2309      	movs	r3, #9
 800553a:	e0fc      	b.n	8005736 <f_open+0x212>
	fp->fs = 0;			/* Clear file object */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	f107 011c 	add.w	r1, r7, #28
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fd82 	bl	8005064 <chk_mounted>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
 8005566:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800556a:	2b00      	cmp	r3, #0
 800556c:	f040 80e1 	bne.w	8005732 <f_open+0x20e>
		INIT_BUF(dj);
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
 8005576:	4b72      	ldr	r3, [pc, #456]	; (8005740 <f_open+0x21c>)
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	f107 031c 	add.w	r3, r7, #28
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fcb2 	bl	8004eec <follow_path>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005592:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <f_open+0x82>
			if (!dir)	/* Current dir itself */
 800559a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <f_open+0x82>
				res = FR_INVALID_NAME;
 80055a0:	2306      	movs	r3, #6
 80055a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 031c 	and.w	r3, r3, #28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d06d      	beq.n	800568c <f_open+0x168>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
 80055b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <f_open+0xba>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80055b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d107      	bne.n	80055d0 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80055c0:	f107 031c 	add.w	r3, r7, #28
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff f991 	bl	80048ec <dir_register>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	f043 0308 	orr.w	r3, r3, #8
 80055d6:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
 80055dc:	e012      	b.n	8005604 <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80055de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e0:	330b      	adds	r3, #11
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 0311 	and.w	r3, r3, #17
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <f_open+0xd0>
					res = FR_DENIED;
 80055ec:	2307      	movs	r3, #7
 80055ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055f2:	e007      	b.n	8005604 <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <f_open+0xe0>
						res = FR_EXIST;
 80055fe:	2308      	movs	r3, #8
 8005600:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005608:	2b00      	cmp	r3, #0
 800560a:	d15d      	bne.n	80056c8 <f_open+0x1a4>
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d058      	beq.n	80056c8 <f_open+0x1a4>
				dw = get_fattime();					/* Created time */
 8005616:	f001 fc5f 	bl	8006ed8 <get_fattime>
 800561a:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir+DIR_CrtTime, dw);
 800561c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561e:	330e      	adds	r3, #14
 8005620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005622:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;					/* Reset attribute */
 8005624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005626:	330b      	adds	r3, #11
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	331c      	adds	r3, #28
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe ff25 	bl	8004488 <ld_clust>
 800563e:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);					/* cluster = 0 */
 8005640:	2100      	movs	r1, #0
 8005642:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005644:	f7fe ff3a 	bl	80044bc <st_clust>
				dj.fs->wflag = 1;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2201      	movs	r2, #1
 800564c:	711a      	strb	r2, [r3, #4]
				if (cl) {							/* Remove the cluster chain if exist */
 800564e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d039      	beq.n	80056c8 <f_open+0x1a4>
					dw = dj.fs->winsect;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fca5 	bl	8003fae <remove_chain>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 800566a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800566e:	2b00      	cmp	r3, #0
 8005670:	d12a      	bne.n	80056c8 <f_open+0x1a4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005676:	3a01      	subs	r2, #1
 8005678:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fa7f 	bl	8003b82 <move_window>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800568a:	e01d      	b.n	80056c8 <f_open+0x1a4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
 800568c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d119      	bne.n	80056c8 <f_open+0x1a4>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005696:	330b      	adds	r3, #11
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <f_open+0x186>
					res = FR_NO_FILE;
 80056a2:	2304      	movs	r3, #4
 80056a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80056a8:	e00e      	b.n	80056c8 <f_open+0x1a4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d009      	beq.n	80056c8 <f_open+0x1a4>
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	330b      	adds	r3, #11
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <f_open+0x1a4>
						res = FR_DENIED;
 80056c2:	2307      	movs	r3, #7
 80056c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 80056c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10f      	bne.n	80056f0 <f_open+0x1cc>
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <f_open+0x1be>
				mode |= FA__WRITTEN;
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	f043 0320 	orr.w	r3, r3, #32
 80056e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ee:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80056f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11c      	bne.n	8005732 <f_open+0x20e>
			fp->flag = mode;					/* File access mode */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	79fa      	ldrb	r2, [r7, #7]
 80056fc:	719a      	strb	r2, [r3, #6]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fec0 	bl	8004488 <ld_clust>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 800570e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005710:	331c      	adds	r3, #28
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	88da      	ldrh	r2, [r3, #6]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005732:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005736:	4618      	mov	r0, r3
 8005738:	3750      	adds	r7, #80	; 0x50
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000164c 	.word	0x2000164c

08005744 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08c      	sub	sp, #48	; 0x30
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff fe89 	bl	8005474 <validate>
 8005762:	4603      	mov	r3, r0
 8005764:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <f_read+0x2c>
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	e135      	b.n	80059dc <f_read+0x298>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	799b      	ldrb	r3, [r3, #6]
 8005774:	b25b      	sxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	da01      	bge.n	800577e <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800577a:	2302      	movs	r3, #2
 800577c:	e12e      	b.n	80059dc <f_read+0x298>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	799b      	ldrb	r3, [r3, #6]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800578a:	2307      	movs	r3, #7
 800578c:	e126      	b.n	80059dc <f_read+0x298>
	remain = fp->fsize - fp->fptr;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	429a      	cmp	r2, r3
 80057a0:	f240 8117 	bls.w	80059d2 <f_read+0x28e>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80057a8:	e113      	b.n	80059d2 <f_read+0x28e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 80df 	bne.w	8005976 <f_read+0x232>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	0a5b      	lsrs	r3, r3, #9
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	789b      	ldrb	r3, [r3, #2]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	4013      	ands	r3, r2
 80057cc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d12c      	bne.n	800582e <f_read+0xea>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e2:	e008      	b.n	80057f6 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fa6e 	bl	8003cd0 <get_fat>
 80057f4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d808      	bhi.n	800580e <f_read+0xca>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	799b      	ldrb	r3, [r3, #6]
 8005800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	719a      	strb	r2, [r3, #6]
 800580a:	2302      	movs	r3, #2
 800580c:	e0e6      	b.n	80059dc <f_read+0x298>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d108      	bne.n	8005828 <f_read+0xe4>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	799b      	ldrb	r3, [r3, #6]
 800581a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	719a      	strb	r2, [r3, #6]
 8005824:	2301      	movs	r3, #1
 8005826:	e0d9      	b.n	80059dc <f_read+0x298>
				fp->clust = clst;				/* Update current cluster */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7fe fa2b 	bl	8003c94 <clust2sect>
 800583e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <f_read+0x114>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	799b      	ldrb	r3, [r3, #6]
 800584a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	719a      	strb	r2, [r3, #6]
 8005854:	2302      	movs	r3, #2
 8005856:	e0c1      	b.n	80059dc <f_read+0x298>
			sect += csect;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0a5b      	lsrs	r3, r3, #9
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d042      	beq.n	80058f2 <f_read+0x1ae>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800586c:	7dfa      	ldrb	r2, [r7, #23]
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	4413      	add	r3, r2
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	7892      	ldrb	r2, [r2, #2]
 8005878:	4293      	cmp	r3, r2
 800587a:	d906      	bls.n	800588a <f_read+0x146>
					cc = fp->fs->csize - csect;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	789b      	ldrb	r3, [r3, #2]
 8005882:	461a      	mov	r2, r3
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	7858      	ldrb	r0, [r3, #1]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	b2db      	uxtb	r3, r3
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	f001 f828 	bl	80068ec <disk_read>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <f_read+0x170>
					ABORT(fp->fs, FR_DISK_ERR);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	799b      	ldrb	r3, [r3, #6]
 80058a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	719a      	strb	r2, [r3, #6]
 80058b0:	2301      	movs	r3, #1
 80058b2:	e093      	b.n	80059dc <f_read+0x298>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	799b      	ldrb	r3, [r3, #6]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d014      	beq.n	80058ea <f_read+0x1a6>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90d      	bls.n	80058ea <f_read+0x1a6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	025b      	lsls	r3, r3, #9
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	18d0      	adds	r0, r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3324      	adds	r3, #36	; 0x24
 80058e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7fe f87d 	bl	80039e4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80058f0:	e05b      	b.n	80059aa <f_read+0x266>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d039      	beq.n	8005970 <f_read+0x22c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	799b      	ldrb	r3, [r3, #6]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01d      	beq.n	8005944 <f_read+0x200>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	7858      	ldrb	r0, [r3, #1]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	2301      	movs	r3, #1
 800591a:	f001 f84f 	bl	80069bc <disk_write>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <f_read+0x1f2>
						ABORT(fp->fs, FR_DISK_ERR);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	799b      	ldrb	r3, [r3, #6]
 8005928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800592c:	b2da      	uxtb	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	719a      	strb	r2, [r3, #6]
 8005932:	2301      	movs	r3, #1
 8005934:	e052      	b.n	80059dc <f_read+0x298>
					fp->flag &= ~FA__DIRTY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	799b      	ldrb	r3, [r3, #6]
 800593a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	7858      	ldrb	r0, [r3, #1]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005950:	2301      	movs	r3, #1
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	f000 ffca 	bl	80068ec <disk_read>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <f_read+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	799b      	ldrb	r3, [r3, #6]
 8005962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	719a      	strb	r2, [r3, #6]
 800596c:	2301      	movs	r3, #1
 800596e:	e035      	b.n	80059dc <f_read+0x298>
			}
#endif
			fp->dsect = sect;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	d901      	bls.n	8005990 <f_read+0x24c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	3320      	adds	r3, #32
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	3304      	adds	r3, #4
 80059a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a2:	4619      	mov	r1, r3
 80059a4:	6a38      	ldr	r0, [r7, #32]
 80059a6:	f7fe f81d 	bl	80039e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	4413      	add	r3, r2
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	441a      	add	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	441a      	add	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f47f aee8 	bne.w	80057aa <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3730      	adds	r7, #48	; 0x30
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fd39 	bl	8005474 <validate>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <f_write+0x2c>
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	e166      	b.n	8005cde <f_write+0x2fa>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	799b      	ldrb	r3, [r3, #6]
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da01      	bge.n	8005a1e <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e15f      	b.n	8005cde <f_write+0x2fa>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	799b      	ldrb	r3, [r3, #6]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005a2a:	2307      	movs	r3, #7
 8005a2c:	e157      	b.n	8005cde <f_write+0x2fa>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	441a      	add	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f080 8137 	bcs.w	8005cae <f_write+0x2ca>
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005a44:	e133      	b.n	8005cae <f_write+0x2ca>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 80f8 	bne.w	8005c44 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	0a5b      	lsrs	r3, r3, #9
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	789b      	ldrb	r3, [r3, #2]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	4013      	ands	r3, r2
 8005a68:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005a6a:	7dbb      	ldrb	r3, [r7, #22]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d13d      	bne.n	8005aec <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d110      	bne.n	8005a9a <f_write+0xb6>
					clst = fp->sclust;		/* Follow from the origin */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <f_write+0xc8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fade 	bl	800404c <create_chain>
 8005a90:	6278      	str	r0, [r7, #36]	; 0x24
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	611a      	str	r2, [r3, #16]
 8005a98:	e008      	b.n	8005aac <f_write+0xc8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe fad1 	bl	800404c <create_chain>
 8005aaa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8102 	beq.w	8005cb8 <f_write+0x2d4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d108      	bne.n	8005acc <f_write+0xe8>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	799b      	ldrb	r3, [r3, #6]
 8005abe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	719a      	strb	r2, [r3, #6]
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e108      	b.n	8005cde <f_write+0x2fa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d108      	bne.n	8005ae6 <f_write+0x102>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	799b      	ldrb	r3, [r3, #6]
 8005ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	719a      	strb	r2, [r3, #6]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0fb      	b.n	8005cde <f_write+0x2fa>
				fp->clust = clst;			/* Update current cluster */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	799b      	ldrb	r3, [r3, #6]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01d      	beq.n	8005b34 <f_write+0x150>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	7858      	ldrb	r0, [r3, #1]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f000 ff57 	bl	80069bc <disk_write>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <f_write+0x142>
					ABORT(fp->fs, FR_DISK_ERR);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	799b      	ldrb	r3, [r3, #6]
 8005b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	719a      	strb	r2, [r3, #6]
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0db      	b.n	8005cde <f_write+0x2fa>
				fp->flag &= ~FA__DIRTY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	799b      	ldrb	r3, [r3, #6]
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7fe f8a8 	bl	8003c94 <clust2sect>
 8005b44:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <f_write+0x17a>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	799b      	ldrb	r3, [r3, #6]
 8005b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	719a      	strb	r2, [r3, #6]
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0bf      	b.n	8005cde <f_write+0x2fa>
			sect += csect;
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	0a5b      	lsrs	r3, r3, #9
 8005b6a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d044      	beq.n	8005bfc <f_write+0x218>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005b72:	7dba      	ldrb	r2, [r7, #22]
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	7892      	ldrb	r2, [r2, #2]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d906      	bls.n	8005b90 <f_write+0x1ac>
					cc = fp->fs->csize - csect;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	789b      	ldrb	r3, [r3, #2]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	7dbb      	ldrb	r3, [r7, #22]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	7858      	ldrb	r0, [r3, #1]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	f000 ff0d 	bl	80069bc <disk_write>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	799b      	ldrb	r3, [r3, #6]
 8005bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	719a      	strb	r2, [r3, #6]
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e091      	b.n	8005cde <f_write+0x2fa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d915      	bls.n	8005bf4 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	025b      	lsls	r3, r3, #9
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fd feff 	bl	80039e4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	799b      	ldrb	r3, [r3, #6]
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	025b      	lsls	r3, r3, #9
 8005bf8:	623b      	str	r3, [r7, #32]
				continue;
 8005bfa:	e044      	b.n	8005c86 <f_write+0x2a2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d01b      	beq.n	8005c3e <f_write+0x25a>
				if (fp->fptr < fp->fsize &&
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d215      	bcs.n	8005c3e <f_write+0x25a>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	7858      	ldrb	r0, [r3, #1]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005c1e:	2301      	movs	r3, #1
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	f000 fe63 	bl	80068ec <disk_read>
 8005c26:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <f_write+0x25a>
						ABORT(fp->fs, FR_DISK_ERR);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	799b      	ldrb	r3, [r3, #6]
 8005c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	719a      	strb	r2, [r3, #6]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e04f      	b.n	8005cde <f_write+0x2fa>
			}
#endif
			fp->dsect = sect;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c50:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d901      	bls.n	8005c5e <f_write+0x27a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	3320      	adds	r3, #32
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	69b9      	ldr	r1, [r7, #24]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fd feb6 	bl	80039e4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	799b      	ldrb	r3, [r3, #6]
 8005c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f aec8 	bne.w	8005a46 <f_write+0x62>
 8005cb6:	e000      	b.n	8005cba <f_write+0x2d6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005cb8:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d903      	bls.n	8005cce <f_write+0x2ea>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	799b      	ldrb	r3, [r3, #6]
 8005cd2:	f043 0320 	orr.w	r3, r3, #32
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fbc0 	bl	8005474 <validate>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d163      	bne.n	8005dc6 <f_sync+0xe0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	799b      	ldrb	r3, [r3, #6]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d05d      	beq.n	8005dc6 <f_sync+0xe0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	799b      	ldrb	r3, [r3, #6]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <f_sync+0x5e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	7858      	ldrb	r0, [r3, #1]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	2301      	movs	r3, #1
 8005d28:	f000 fe48 	bl	80069bc <disk_write>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005d32:	2301      	movs	r3, #1
 8005d34:	e048      	b.n	8005dc8 <f_sync+0xe2>
				fp->flag &= ~FA__DIRTY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fd ff17 	bl	8003b82 <move_window>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d133      	bne.n	8005dc6 <f_sync+0xe0>
				dir = fp->dir_ptr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	330b      	adds	r3, #11
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	330b      	adds	r3, #11
 8005d6e:	f042 0220 	orr.w	r2, r2, #32
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	331c      	adds	r3, #28
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68d2      	ldr	r2, [r2, #12]
 8005d7e:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	4619      	mov	r1, r3
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f7fe fb98 	bl	80044bc <st_clust>
				tm = get_fattime();							/* Update updated time */
 8005d8c:	f001 f8a4 	bl	8006ed8 <get_fattime>
 8005d90:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tm);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	3316      	adds	r3, #22
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]
				ST_WORD(dir+DIR_LstAccDate, 0);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3312      	adds	r3, #18
 8005d9e:	2200      	movs	r2, #0
 8005da0:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	799b      	ldrb	r3, [r3, #6]
 8005da6:	f023 0320 	bic.w	r3, r3, #32
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2201      	movs	r2, #1
 8005db6:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd ff09 	bl	8003bd4 <sync_fs>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ff84 	bl	8005ce6 <f_sync>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <f_close+0x1e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
	return res;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <my_init_card>:
UINT readBytes = 0;			//Счетчик кол-ва прочитанных данных
UINT WriteBytes = 0;		//Счетчик кол-ва записанных данных

//Функция инициализации карты памяти
void my_init_card(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
//	SD_PowerOn();
	sd_ini();
 8005dfc:	f000 f9ae 	bl	800615c <sd_ini>
}
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <my_read_file>:
//Функция чтения файла с карты памяти
void my_read_file(void)
{
 8005e04:	b5b0      	push	{r4, r5, r7, lr}
 8005e06:	b094      	sub	sp, #80	; 0x50
 8005e08:	af00      	add	r7, sp, #0
	if (f_mount(0, &FATFS_Obj) == FR_OK)	//Монтируем модуль FatFs
 8005e0a:	4941      	ldr	r1, [pc, #260]	; (8005f10 <my_read_file+0x10c>)
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7ff fb5f 	bl	80054d0 <f_mount>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d177      	bne.n	8005f08 <my_read_file+0x104>
	{
		SEND_str("f_mount -> success\n");
 8005e18:	483e      	ldr	r0, [pc, #248]	; (8005f14 <my_read_file+0x110>)
 8005e1a:	f7fb ff4d 	bl	8001cb8 <SEND_str>

		uint8_t path[18]="JSON_voltage.json";
 8005e1e:	4b3e      	ldr	r3, [pc, #248]	; (8005f18 <my_read_file+0x114>)
 8005e20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005e24:	461d      	mov	r5, r3
 8005e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	8023      	strh	r3, [r4, #0]
		path[17] = '\0';
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		result = f_open(&MyFile, (char*)path, FA_READ);
 8005e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4837      	ldr	r0, [pc, #220]	; (8005f1c <my_read_file+0x118>)
 8005e3e:	f7ff fb71 	bl	8005524 <f_open>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <my_read_file+0x11c>)
 8005e48:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8005e4a:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <my_read_file+0x11c>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d15a      	bne.n	8005f08 <my_read_file+0x104>
		{
			SEND_str("f_open -> success\n");
 8005e52:	4834      	ldr	r0, [pc, #208]	; (8005f24 <my_read_file+0x120>)
 8005e54:	f7fb ff30 	bl	8001cb8 <SEND_str>

			BytesToRead = MyFile.fsize;
 8005e58:	4b30      	ldr	r3, [pc, #192]	; (8005f1c <my_read_file+0x118>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a32      	ldr	r2, [pc, #200]	; (8005f28 <my_read_file+0x124>)
 8005e5e:	6013      	str	r3, [r2, #0]

			char str1[60];
			sprintf(str1, "file_Size: %d Byte\n", BytesToRead);
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <my_read_file+0x124>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	463b      	mov	r3, r7
 8005e66:	4931      	ldr	r1, [pc, #196]	; (8005f2c <my_read_file+0x128>)
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f006 fa01 	bl	800c270 <siprintf>
			SEND_str(str1);
 8005e6e:	463b      	mov	r3, r7
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fb ff21 	bl	8001cb8 <SEND_str>

			BytesCounter = 0;
 8005e76:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <my_read_file+0x12c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
			while ((BytesToRead - BytesCounter) >= 512)
 8005e7c:	e017      	b.n	8005eae <my_read_file+0xaa>
		    {
		       	f_read(&MyFile, readBuffer, 512, &readBytes);
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <my_read_file+0x130>)
 8005e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e84:	492c      	ldr	r1, [pc, #176]	; (8005f38 <my_read_file+0x134>)
 8005e86:	4825      	ldr	r0, [pc, #148]	; (8005f1c <my_read_file+0x118>)
 8005e88:	f7ff fc5c 	bl	8005744 <f_read>
		       	BytesCounter += 512;
 8005e8c:	4b28      	ldr	r3, [pc, #160]	; (8005f30 <my_read_file+0x12c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005e94:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <my_read_file+0x12c>)
 8005e96:	6013      	str	r3, [r2, #0]

		       	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, strlen(readBuffer), 0x1000);
 8005e98:	4827      	ldr	r0, [pc, #156]	; (8005f38 <my_read_file+0x134>)
 8005e9a:	f7fa f963 	bl	8000164 <strlen>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea6:	4924      	ldr	r1, [pc, #144]	; (8005f38 <my_read_file+0x134>)
 8005ea8:	4824      	ldr	r0, [pc, #144]	; (8005f3c <my_read_file+0x138>)
 8005eaa:	f005 faa3 	bl	800b3f4 <HAL_UART_Transmit>
			while ((BytesToRead - BytesCounter) >= 512)
 8005eae:	4b1e      	ldr	r3, [pc, #120]	; (8005f28 <my_read_file+0x124>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <my_read_file+0x12c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d2df      	bcs.n	8005e7e <my_read_file+0x7a>
		    }
		    if (BytesToRead != BytesCounter)
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <my_read_file+0x124>)
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <my_read_file+0x12c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d01b      	beq.n	8005f02 <my_read_file+0xfe>
		    {
	        	f_read(&MyFile, readBuffer, (BytesToRead - BytesCounter), &readBytes);
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <my_read_file+0x124>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b18      	ldr	r3, [pc, #96]	; (8005f30 <my_read_file+0x12c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <my_read_file+0x130>)
 8005ed6:	4918      	ldr	r1, [pc, #96]	; (8005f38 <my_read_file+0x134>)
 8005ed8:	4810      	ldr	r0, [pc, #64]	; (8005f1c <my_read_file+0x118>)
 8005eda:	f7ff fc33 	bl	8005744 <f_read>

	        	HAL_UART_Transmit(&huart3, (uint8_t*)readBuffer, BytesToRead - BytesCounter, 0x1000);
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <my_read_file+0x124>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <my_read_file+0x12c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef2:	4911      	ldr	r1, [pc, #68]	; (8005f38 <my_read_file+0x134>)
 8005ef4:	4811      	ldr	r0, [pc, #68]	; (8005f3c <my_read_file+0x138>)
 8005ef6:	f005 fa7d 	bl	800b3f4 <HAL_UART_Transmit>

	        	BytesCounter = BytesToRead;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <my_read_file+0x124>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <my_read_file+0x12c>)
 8005f00:	6013      	str	r3, [r2, #0]
//				SEND_str(readBuffer);
//				SEND_str("\n");
//				sprintf(str1,"BytesToRead: %d\n",readBytes);
//				SEND_str(str1);
//			}
		    f_close(&MyFile);
 8005f02:	4806      	ldr	r0, [pc, #24]	; (8005f1c <my_read_file+0x118>)
 8005f04:	f7ff ff64 	bl	8005dd0 <f_close>
//		    f_unlink((char*)path);
		}
	}
}
 8005f08:	bf00      	nop
 8005f0a:	3750      	adds	r7, #80	; 0x50
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f10:	20000bd4 	.word	0x20000bd4
 8005f14:	0800f804 	.word	0x0800f804
 8005f18:	0800f840 	.word	0x0800f840
 8005f1c:	20000e10 	.word	0x20000e10
 8005f20:	20000e0c 	.word	0x20000e0c
 8005f24:	0800f818 	.word	0x0800f818
 8005f28:	20001878 	.word	0x20001878
 8005f2c:	0800f82c 	.word	0x0800f82c
 8005f30:	2000187c 	.word	0x2000187c
 8005f34:	20001880 	.word	0x20001880
 8005f38:	20001678 	.word	0x20001678
 8005f3c:	200011f4 	.word	0x200011f4

08005f40 <my_write_file_json>:
//Функция записи файла на карту памяти
//Принимает "path" - указатель на имя файла
//Принимает "text" - указатель на строку JSON, которую нужно сохранить
void my_write_file_json(char *path, char *text)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b092      	sub	sp, #72	; 0x48
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	if (f_mount(0, &FATFS_Obj) == FR_OK)
 8005f4a:	4921      	ldr	r1, [pc, #132]	; (8005fd0 <my_write_file_json+0x90>)
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7ff fabf 	bl	80054d0 <f_mount>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d136      	bne.n	8005fc6 <my_write_file_json+0x86>
	{
		SEND_str("f_mount -> success\n");
 8005f58:	481e      	ldr	r0, [pc, #120]	; (8005fd4 <my_write_file_json+0x94>)
 8005f5a:	f7fb fead 	bl	8001cb8 <SEND_str>

		result = f_open(&MyFile, path + '\0', FA_CREATE_ALWAYS|FA_WRITE);
 8005f5e:	220a      	movs	r2, #10
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	481d      	ldr	r0, [pc, #116]	; (8005fd8 <my_write_file_json+0x98>)
 8005f64:	f7ff fade 	bl	8005524 <f_open>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <my_write_file_json+0x9c>)
 8005f6e:	701a      	strb	r2, [r3, #0]

		if(result == FR_OK)
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <my_write_file_json+0x9c>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d126      	bne.n	8005fc6 <my_write_file_json+0x86>
		{
			SEND_str("f_open -> success\n");
 8005f78:	4819      	ldr	r0, [pc, #100]	; (8005fe0 <my_write_file_json+0xa0>)
 8005f7a:	f7fb fe9d 	bl	8001cb8 <SEND_str>

			result = f_write(&MyFile, text, strlen(text), &WriteBytes);
 8005f7e:	6838      	ldr	r0, [r7, #0]
 8005f80:	f7fa f8f0 	bl	8000164 <strlen>
 8005f84:	4602      	mov	r2, r0
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <my_write_file_json+0xa4>)
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	4813      	ldr	r0, [pc, #76]	; (8005fd8 <my_write_file_json+0x98>)
 8005f8c:	f7ff fd2a 	bl	80059e4 <f_write>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <my_write_file_json+0x9c>)
 8005f96:	701a      	strb	r2, [r3, #0]
			if(result == FR_OK)
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <my_write_file_json+0x9c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <my_write_file_json+0x80>
			{
				SEND_str("f_write -> success\n");
 8005fa0:	4811      	ldr	r0, [pc, #68]	; (8005fe8 <my_write_file_json+0xa8>)
 8005fa2:	f7fb fe89 	bl	8001cb8 <SEND_str>

				char str1[60];
				sprintf(str1, "write_bytes: %d Byte\n", WriteBytes);
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <my_write_file_json+0xa4>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	490f      	ldr	r1, [pc, #60]	; (8005fec <my_write_file_json+0xac>)
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f006 f95d 	bl	800c270 <siprintf>
				SEND_str(str1);
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fb fe7c 	bl	8001cb8 <SEND_str>
			}
		    f_close(&MyFile);
 8005fc0:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <my_write_file_json+0x98>)
 8005fc2:	f7ff ff05 	bl	8005dd0 <f_close>
		}
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3748      	adds	r7, #72	; 0x48
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000bd4 	.word	0x20000bd4
 8005fd4:	0800f804 	.word	0x0800f804
 8005fd8:	20000e10 	.word	0x20000e10
 8005fdc:	20000e0c 	.word	0x20000e0c
 8005fe0:	0800f818 	.word	0x0800f818
 8005fe4:	20001884 	.word	0x20001884
 8005fe8:	0800f854 	.word	0x0800f854
 8005fec:	0800f868 	.word	0x0800f868

08005ff0 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//--------------------------------------------------
static void Error (void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
	LD_ON;
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4802      	ldr	r0, [pc, #8]	; (8006004 <Error+0x14>)
 8005ffa:	f002 fc88 	bl	800890e <HAL_GPIO_WritePin>
}
 8005ffe:	bf00      	nop
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40010800 	.word	0x40010800

08006008 <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8006016:	f107 020f 	add.w	r2, r7, #15
 800601a:	1df9      	adds	r1, r7, #7
 800601c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2301      	movs	r3, #1
 8006024:	4806      	ldr	r0, [pc, #24]	; (8006040 <SPIx_WriteRead+0x38>)
 8006026:	f003 fe51 	bl	8009ccc <HAL_SPI_TransmitReceive>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <SPIx_WriteRead+0x2c>
	{
		Error();
 8006030:	f7ff ffde 	bl	8005ff0 <Error>
  	}
  	return receivedbyte;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20001034 	.word	0x20001034

08006044 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ffd9 	bl	8006008 <SPIx_WriteRead>
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b082      	sub	sp, #8
 8006062:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8006064:	20ff      	movs	r0, #255	; 0xff
 8006066:	f7ff ffcf 	bl	8006008 <SPIx_WriteRead>
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
	return bt;
 800606e:	79fb      	ldrb	r3, [r7, #7]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 800607c:	20ff      	movs	r0, #255	; 0xff
 800607e:	f7ff ffc3 	bl	8006008 <SPIx_WriteRead>
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SD_cmd>:
//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	//ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da0e      	bge.n	80060ba <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a2:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 80060a4:	2100      	movs	r1, #0
 80060a6:	2077      	movs	r0, #119	; 0x77
 80060a8:	f7ff ffee 	bl	8006088 <SD_cmd>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d901      	bls.n	80060ba <SD_cmd+0x32>
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	e049      	b.n	800614e <SD_cmd+0xc6>
	}
	//Select the card
	SS_SD_DESELECT();
 80060ba:	2201      	movs	r2, #1
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	4826      	ldr	r0, [pc, #152]	; (8006158 <SD_cmd+0xd0>)
 80060c0:	f002 fc25 	bl	800890e <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80060c4:	f7ff ffcb 	bl	800605e <SPI_ReceiveByte>
	SS_SD_SELECT();
 80060c8:	2200      	movs	r2, #0
 80060ca:	2140      	movs	r1, #64	; 0x40
 80060cc:	4822      	ldr	r0, [pc, #136]	; (8006158 <SD_cmd+0xd0>)
 80060ce:	f002 fc1e 	bl	800890e <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80060d2:	f7ff ffc4 	bl	800605e <SPI_ReceiveByte>
	//Send a command packet
	SPI_SendByte(cmd); 						//Start + Command index
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ffb3 	bl	8006044 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); 	//Argument[31..24]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	0e1b      	lsrs	r3, r3, #24
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ffad 	bl	8006044 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); 	//Argument[23..16]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff ffa7 	bl	8006044 <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); 		//Argument[15..8]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff ffa1 	bl	8006044 <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); 			//Argument[7..0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ff9c 	bl	8006044 <SPI_SendByte>
	n = 0x01; 								//Dummy CRC + Stop
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} 			//Valid CRC for CMD0(0)
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d101      	bne.n	800611a <SD_cmd+0x92>
 8006116:	2395      	movs	r3, #149	; 0x95
 8006118:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} 			//Valid CRC for CMD8(0x1AA)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b48      	cmp	r3, #72	; 0x48
 800611e:	d101      	bne.n	8006124 <SD_cmd+0x9c>
 8006120:	2387      	movs	r3, #135	; 0x87
 8006122:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff ff8c 	bl	8006044 <SPI_SendByte>
	//Receive a command response
	n = 10; //Wait for a valid response in timeout of 10 attempts
 800612c:	230a      	movs	r3, #10
 800612e:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SPI_ReceiveByte();
 8006130:	f7ff ff95 	bl	800605e <SPI_ReceiveByte>
 8006134:	4603      	mov	r3, r0
 8006136:	73bb      	strb	r3, [r7, #14]
	}
	while ((res & 0x80) && --n);
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da05      	bge.n	800614c <SD_cmd+0xc4>
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	3b01      	subs	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f1      	bne.n	8006130 <SD_cmd+0xa8>

	return res;
 800614c:	7bbb      	ldrb	r3, [r7, #14]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	40010c00 	.word	0x40010c00

0800615c <sd_ini>:
	Timer1 = 0;
	while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
}
//-----------------------------------------------
uint8_t sd_ini(void)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af02      	add	r7, sp, #8
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8006162:	2201      	movs	r2, #1
 8006164:	2101      	movs	r1, #1
 8006166:	4881      	ldr	r0, [pc, #516]	; (800636c <sd_ini+0x210>)
 8006168:	f002 fbd1 	bl	800890e <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 800616c:	4b80      	ldr	r3, [pc, #512]	; (8006370 <sd_ini+0x214>)
 800616e:	2200      	movs	r2, #0
 8006170:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8006172:	4b80      	ldr	r3, [pc, #512]	; (8006374 <sd_ini+0x218>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	60bb      	str	r3, [r7, #8]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8006178:	4b7e      	ldr	r3, [pc, #504]	; (8006374 <sd_ini+0x218>)
 800617a:	2238      	movs	r2, #56	; 0x38
 800617c:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 800617e:	487d      	ldr	r0, [pc, #500]	; (8006374 <sd_ini+0x218>)
 8006180:	f003 fd20 	bl	8009bc4 <HAL_SPI_Init>
	SS_SD_DESELECT();
 8006184:	2201      	movs	r2, #1
 8006186:	2140      	movs	r1, #64	; 0x40
 8006188:	487b      	ldr	r0, [pc, #492]	; (8006378 <sd_ini+0x21c>)
 800618a:	f002 fbc0 	bl	800890e <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
 8006192:	e004      	b.n	800619e <sd_ini+0x42>
		SPI_Release();
 8006194:	f7ff ff70 	bl	8006078 <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	3301      	adds	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d9f7      	bls.n	8006194 <sd_ini+0x38>
	hspi1.Init.BaudRatePrescaler = temp;
 80061a4:	4a73      	ldr	r2, [pc, #460]	; (8006374 <sd_ini+0x218>)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 80061aa:	4872      	ldr	r0, [pc, #456]	; (8006374 <sd_ini+0x218>)
 80061ac:	f003 fd0a 	bl	8009bc4 <HAL_SPI_Init>
	SS_SD_SELECT();
 80061b0:	2200      	movs	r2, #0
 80061b2:	2140      	movs	r1, #64	; 0x40
 80061b4:	4870      	ldr	r0, [pc, #448]	; (8006378 <sd_ini+0x21c>)
 80061b6:	f002 fbaa 	bl	800890e <HAL_GPIO_WritePin>
	if(SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80061ba:	2100      	movs	r1, #0
 80061bc:	2040      	movs	r0, #64	; 0x40
 80061be:	f7ff ff63 	bl	8006088 <SD_cmd>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f040 80be 	bne.w	8006346 <sd_ini+0x1ea>
	{
		SPI_Release();
 80061ca:	f7ff ff55 	bl	8006078 <SPI_Release>
		if(SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 80061ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061d2:	2048      	movs	r0, #72	; 0x48
 80061d4:	f7ff ff58 	bl	8006088 <SD_cmd>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d17b      	bne.n	80062d6 <sd_ini+0x17a>
		{
			for(i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e00c      	b.n	80061fe <sd_ini+0xa2>
 80061e4:	7bfc      	ldrb	r4, [r7, #15]
 80061e6:	f7ff ff3a 	bl	800605e <SPI_ReceiveByte>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	f104 0310 	add.w	r3, r4, #16
 80061f2:	443b      	add	r3, r7
 80061f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	3301      	adds	r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d9ef      	bls.n	80061e4 <sd_ini+0x88>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8006204:	793b      	ldrb	r3, [r7, #4]
 8006206:	4619      	mov	r1, r3
 8006208:	797b      	ldrb	r3, [r7, #5]
 800620a:	4618      	mov	r0, r3
 800620c:	79bb      	ldrb	r3, [r7, #6]
 800620e:	79fa      	ldrb	r2, [r7, #7]
 8006210:	9201      	str	r2, [sp, #4]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	4603      	mov	r3, r0
 8006216:	460a      	mov	r2, r1
 8006218:	4958      	ldr	r1, [pc, #352]	; (800637c <sd_ini+0x220>)
 800621a:	4859      	ldr	r0, [pc, #356]	; (8006380 <sd_ini+0x224>)
 800621c:	f006 f828 	bl	800c270 <siprintf>
			SEND_str(str1);
 8006220:	4857      	ldr	r0, [pc, #348]	; (8006380 <sd_ini+0x224>)
 8006222:	f7fb fd49 	bl	8001cb8 <SEND_str>
			// Get trailing return value of R7 resp
			if(ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8006226:	79bb      	ldrb	r3, [r7, #6]
 8006228:	2b01      	cmp	r3, #1
 800622a:	f040 808e 	bne.w	800634a <sd_ini+0x1ee>
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	2baa      	cmp	r3, #170	; 0xaa
 8006232:	f040 808a 	bne.w	800634a <sd_ini+0x1ee>
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--); // Wait for leaving idle state (ACMD41 with HCS bit)
 8006236:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800623a:	81bb      	strh	r3, [r7, #12]
 800623c:	e005      	b.n	800624a <sd_ini+0xee>
 800623e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	81bb      	strh	r3, [r7, #12]
 800624a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <sd_ini+0x106>
 8006252:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006256:	20e9      	movs	r0, #233	; 0xe9
 8006258:	f7ff ff16 	bl	8006088 <SD_cmd>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ed      	bne.n	800623e <sd_ini+0xe2>
				if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8006262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d06f      	beq.n	800634a <sd_ini+0x1ee>
 800626a:	2100      	movs	r1, #0
 800626c:	207a      	movs	r0, #122	; 0x7a
 800626e:	f7ff ff0b 	bl	8006088 <SD_cmd>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d168      	bne.n	800634a <sd_ini+0x1ee>
				for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e00c      	b.n	8006298 <sd_ini+0x13c>
 800627e:	7bfc      	ldrb	r4, [r7, #15]
 8006280:	f7ff feed 	bl	800605e <SPI_ReceiveByte>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	f104 0310 	add.w	r3, r4, #16
 800628c:	443b      	add	r3, r7
 800628e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	3301      	adds	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b03      	cmp	r3, #3
 800629c:	d9ef      	bls.n	800627e <sd_ini+0x122>
				sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 800629e:	793b      	ldrb	r3, [r7, #4]
 80062a0:	4619      	mov	r1, r3
 80062a2:	797b      	ldrb	r3, [r7, #5]
 80062a4:	4618      	mov	r0, r3
 80062a6:	79bb      	ldrb	r3, [r7, #6]
 80062a8:	79fa      	ldrb	r2, [r7, #7]
 80062aa:	9201      	str	r2, [sp, #4]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4603      	mov	r3, r0
 80062b0:	460a      	mov	r2, r1
 80062b2:	4932      	ldr	r1, [pc, #200]	; (800637c <sd_ini+0x220>)
 80062b4:	4832      	ldr	r0, [pc, #200]	; (8006380 <sd_ini+0x224>)
 80062b6:	f005 ffdb 	bl	800c270 <siprintf>
				SEND_str(str1);
 80062ba:	4831      	ldr	r0, [pc, #196]	; (8006380 <sd_ini+0x224>)
 80062bc:	f7fb fcfc 	bl	8001cb8 <SEND_str>
				sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80062c0:	793b      	ldrb	r3, [r7, #4]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <sd_ini+0x172>
 80062ca:	220c      	movs	r2, #12
 80062cc:	e000      	b.n	80062d0 <sd_ini+0x174>
 80062ce:	2204      	movs	r2, #4
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <sd_ini+0x214>)
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e039      	b.n	800634a <sd_ini+0x1ee>
				}
			}
		}
		else //SDv1 or MMCv3
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 80062d6:	2100      	movs	r1, #0
 80062d8:	20e9      	movs	r0, #233	; 0xe9
 80062da:	f7ff fed5 	bl	8006088 <SD_cmd>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d805      	bhi.n	80062f0 <sd_ini+0x194>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41;		//SDv1
 80062e4:	4b22      	ldr	r3, [pc, #136]	; (8006370 <sd_ini+0x214>)
 80062e6:	2202      	movs	r2, #2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	23e9      	movs	r3, #233	; 0xe9
 80062ec:	73bb      	strb	r3, [r7, #14]
 80062ee:	e004      	b.n	80062fa <sd_ini+0x19e>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; 		//MMCv3
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <sd_ini+0x214>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	2341      	movs	r3, #65	; 0x41
 80062f8:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; 	//Wait for leaving idle state
 80062fa:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80062fe:	81bb      	strh	r3, [r7, #12]
 8006300:	e005      	b.n	800630e <sd_ini+0x1b2>
 8006302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	81bb      	strh	r3, [r7, #12]
 800630e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <sd_ini+0x1ca>
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff feb4 	bl	8006088 <SD_cmd>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ed      	bne.n	8006302 <sd_ini+0x1a6>
			if (!tmr || SD_cmd(CMD16, 512) != 0) 				//Set R/W block length to 512
 8006326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <sd_ini+0x1e2>
 800632e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006332:	2050      	movs	r0, #80	; 0x50
 8006334:	f7ff fea8 	bl	8006088 <SD_cmd>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <sd_ini+0x1ee>
				sdinfo.type = 0;
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <sd_ini+0x214>)
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e001      	b.n	800634a <sd_ini+0x1ee>
		}
	}
	else
	{
		return 1;
 8006346:	2301      	movs	r3, #1
 8006348:	e00b      	b.n	8006362 <sd_ini+0x206>
	}
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <sd_ini+0x214>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	490c      	ldr	r1, [pc, #48]	; (8006384 <sd_ini+0x228>)
 8006354:	480a      	ldr	r0, [pc, #40]	; (8006380 <sd_ini+0x224>)
 8006356:	f005 ff8b 	bl	800c270 <siprintf>
	SEND_str(str1);
 800635a:	4809      	ldr	r0, [pc, #36]	; (8006380 <sd_ini+0x224>)
 800635c:	f7fb fcac 	bl	8001cb8 <SEND_str>
	return 0;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	40010800 	.word	0x40010800
 8006370:	20001888 	.word	0x20001888
 8006374:	20001034 	.word	0x20001034
 8006378:	40010c00 	.word	0x40010c00
 800637c:	0800f8b4 	.word	0x0800f8b4
 8006380:	2000188c 	.word	0x2000188c
 8006384:	0800f8d8 	.word	0x0800f8d8

08006388 <FCLK_SLOW>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_SLOW(void)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <FCLK_SLOW+0x24>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	607b      	str	r3, [r7, #4]
	tmp = ( tmp | SPI_BAUDRATEPRESCALER_256 );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800639a:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 800639c:	4a03      	ldr	r2, [pc, #12]	; (80063ac <FCLK_SLOW+0x24>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6013      	str	r3, [r2, #0]
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr
 80063ac:	40013000 	.word	0x40013000

080063b0 <FCLK_FAST>:
	@param  None
    @retval : None
*/
/**************************************************************************/
static void FCLK_FAST(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
	uint32_t tmp;

	tmp = SPI1->CR1;
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <FCLK_FAST+0x28>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	607b      	str	r3, [r7, #4]
//	tmp = ( tmp & ~SPI_BaudRatePrescaler_256 ) | SPI_BaudRatePrescaler_2;
	tmp = ( tmp & ~SPI_BAUDRATEPRESCALER_256 ) | SPI_BAUDRATEPRESCALER_8;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80063c2:	f043 0310 	orr.w	r3, r3, #16
 80063c6:	607b      	str	r3, [r7, #4]
	SPI1->CR1 = tmp;
 80063c8:	4a03      	ldr	r2, [pc, #12]	; (80063d8 <FCLK_FAST+0x28>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr
 80063d8:	40013000 	.word	0x40013000

080063dc <xmit_spi>:
	@param  uint8_t out
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t xmit_spi(uint8_t out)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
/* Loop while DR register in not empty */
	while(!(SPI1->SR & SPI_FLAG_TXE));	//SPI_I2S_FLAG_TXE
 80063e6:	bf00      	nop
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <xmit_spi+0x3c>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f9      	beq.n	80063e8 <xmit_spi+0xc>

/* Send byte through the SPIMMC peripheral */
	SPI1->DR = out;
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <xmit_spi+0x3c>)
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	60d3      	str	r3, [r2, #12]
/* Wait to receive a byte */
	while(!(SPI1->SR & SPI_FLAG_RXNE));	//SPI_I2S_FLAG_RXNE
 80063fa:	bf00      	nop
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <xmit_spi+0x3c>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f9      	beq.n	80063fc <xmit_spi+0x20>

/* Return the byte read from the SPI bus */
	return (SPI1->DR);
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <xmit_spi+0x3c>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	b2db      	uxtb	r3, r3
}
 800640e:	4618      	mov	r0, r3
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	40013000 	.word	0x40013000

0800641c <rcvr_spi>:
	@param  none
    @retval : uint8_t
*/
/**************************************************************************/
static inline uint8_t rcvr_spi(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	return xmit_spi(0xFF);
 8006420:	20ff      	movs	r0, #255	; 0xff
 8006422:	f7ff ffdb 	bl	80063dc <xmit_spi>
 8006426:	4603      	mov	r3, r0
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}

0800642c <wait_ready>:
*/
/**************************************************************************/
static int wait_ready (	/* 1:Ready, 0:Timeout */
	unsigned int wt		/* Timeout [ms/10] */
)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	Timer2 = wt;
 8006434:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <wait_ready+0x34>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6013      	str	r3, [r2, #0]
	rcvr_spi();
 800643a:	f7ff ffef 	bl	800641c <rcvr_spi>
	do
		if (rcvr_spi() == 0xFF) return 1;
 800643e:	f7ff ffed 	bl	800641c <rcvr_spi>
 8006442:	4603      	mov	r3, r0
 8006444:	2bff      	cmp	r3, #255	; 0xff
 8006446:	d101      	bne.n	800644c <wait_ready+0x20>
 8006448:	2301      	movs	r3, #1
 800644a:	e004      	b.n	8006456 <wait_ready+0x2a>
	while (Timer2);
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <wait_ready+0x34>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f4      	bne.n	800643e <wait_ready+0x12>

	return 0;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200018d0 	.word	0x200018d0

08006464 <deselect>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static inline void deselect(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	CS_HIGH();
 8006468:	2201      	movs	r2, #1
 800646a:	2110      	movs	r1, #16
 800646c:	4803      	ldr	r0, [pc, #12]	; (800647c <deselect+0x18>)
 800646e:	f002 fa4e 	bl	800890e <HAL_GPIO_WritePin>
	rcvr_spi();
 8006472:	f7ff ffd3 	bl	800641c <rcvr_spi>
}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40010800 	.word	0x40010800

08006480 <selecting>:
	@param  none
    @retval : 1:Successful, 0:Timeout
*/
/**************************************************************************/
static inline int selecting(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	CS_LOW();
 8006484:	2200      	movs	r2, #0
 8006486:	2110      	movs	r1, #16
 8006488:	4807      	ldr	r0, [pc, #28]	; (80064a8 <selecting+0x28>)
 800648a:	f002 fa40 	bl	800890e <HAL_GPIO_WritePin>
	if (!wait_ready(50)) {
 800648e:	2032      	movs	r0, #50	; 0x32
 8006490:	f7ff ffcc 	bl	800642c <wait_ready>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <selecting+0x22>
		deselect();
 800649a:	f7ff ffe3 	bl	8006464 <deselect>
		return 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <selecting+0x24>
	}
	return 1;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40010800 	.word	0x40010800

080064ac <power_status>:
	@param  none
    @retval : Socket power state: 0=off, 1=on
*/
/**************************************************************************/
static int power_status(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
	return PowerFlag;
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <power_status+0x10>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr
 80064bc:	200018c8 	.word	0x200018c8

080064c0 <power_on>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_on (void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
	//u8 i;
	uint8_t i;

	CS_HIGH();      // CS = 1
 80064c6:	2201      	movs	r2, #1
 80064c8:	2110      	movs	r1, #16
 80064ca:	480b      	ldr	r0, [pc, #44]	; (80064f8 <power_on+0x38>)
 80064cc:	f002 fa1f 	bl	800890e <HAL_GPIO_WritePin>

	for (i = 0; i < 10; i++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	e005      	b.n	80064e2 <power_on+0x22>
		xmit_spi(0xFF);
 80064d6:	20ff      	movs	r0, #255	; 0xff
 80064d8:	f7ff ff80 	bl	80063dc <xmit_spi>
	for (i = 0; i < 10; i++)
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	3301      	adds	r3, #1
 80064e0:	71fb      	strb	r3, [r7, #7]
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	2b09      	cmp	r3, #9
 80064e6:	d9f6      	bls.n	80064d6 <power_on+0x16>

	PowerFlag = 1;
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <power_on+0x3c>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]

}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40010800 	.word	0x40010800
 80064fc:	200018c8 	.word	0x200018c8

08006500 <power_off>:
	@param  none
    @retval : none
*/
/**************************************************************************/
static void power_off (void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <power_off+0x14>)
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
}
 800650a:	bf00      	nop
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200018c8 	.word	0x200018c8

08006518 <rcvr_datablock>:
/**************************************************************************/
static int rcvr_datablock (
	uint8_t 		*buff,			/* Data buffer to store received data */
	unsigned int 	 btr			/* Byte count (must be multiple of 4) */
)
{
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	uint8_t token;


	Timer1 = 20;
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <rcvr_datablock+0x90>)
 8006524:	2214      	movs	r2, #20
 8006526:	601a      	str	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
 8006528:	f7ff ff78 	bl	800641c <rcvr_spi>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2bff      	cmp	r3, #255	; 0xff
 8006534:	d103      	bne.n	800653e <rcvr_datablock+0x26>
 8006536:	4b1c      	ldr	r3, [pc, #112]	; (80065a8 <rcvr_datablock+0x90>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f4      	bne.n	8006528 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2bfe      	cmp	r3, #254	; 0xfe
 8006542:	d001      	beq.n	8006548 <rcvr_datablock+0x30>
 8006544:	2300      	movs	r3, #0
 8006546:	e02a      	b.n	800659e <rcvr_datablock+0x86>


	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8006548:	687c      	ldr	r4, [r7, #4]
 800654a:	1c63      	adds	r3, r4, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	20ff      	movs	r0, #255	; 0xff
 8006550:	f7ff ff44 	bl	80063dc <xmit_spi>
 8006554:	4603      	mov	r3, r0
 8006556:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8006558:	687c      	ldr	r4, [r7, #4]
 800655a:	1c63      	adds	r3, r4, #1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	20ff      	movs	r0, #255	; 0xff
 8006560:	f7ff ff3c 	bl	80063dc <xmit_spi>
 8006564:	4603      	mov	r3, r0
 8006566:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8006568:	687c      	ldr	r4, [r7, #4]
 800656a:	1c63      	adds	r3, r4, #1
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	20ff      	movs	r0, #255	; 0xff
 8006570:	f7ff ff34 	bl	80063dc <xmit_spi>
 8006574:	4603      	mov	r3, r0
 8006576:	7023      	strb	r3, [r4, #0]
		rcvr_spi_m(buff++);
 8006578:	687c      	ldr	r4, [r7, #4]
 800657a:	1c63      	adds	r3, r4, #1
 800657c:	607b      	str	r3, [r7, #4]
 800657e:	20ff      	movs	r0, #255	; 0xff
 8006580:	f7ff ff2c 	bl	80063dc <xmit_spi>
 8006584:	4603      	mov	r3, r0
 8006586:	7023      	strb	r3, [r4, #0]
	} while (btr -= 4);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	3b04      	subs	r3, #4
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1d9      	bne.n	8006548 <rcvr_datablock+0x30>
	rcvr_spi();						/* Discard CRC */
 8006594:	f7ff ff42 	bl	800641c <rcvr_spi>
	rcvr_spi();
 8006598:	f7ff ff40 	bl	800641c <rcvr_spi>

	return 1;						/* Return with success */
 800659c:	2301      	movs	r3, #1
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200018cc 	.word	0x200018cc

080065ac <xmit_datablock>:
#if _READONLY == 0
static int xmit_datablock (
	const uint8_t *buff,	/* 512 byte data block to be transmitted */
	uint8_t       token		/* Data/Stop token */
)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t wc;

	if (!wait_ready(50)) return 0;
 80065b8:	2032      	movs	r0, #50	; 0x32
 80065ba:	f7ff ff37 	bl	800642c <wait_ready>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <xmit_datablock+0x1c>
 80065c4:	2300      	movs	r3, #0
 80065c6:	e02e      	b.n	8006626 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff06 	bl	80063dc <xmit_spi>
	if (token != 0xFD) {				/* Is data token */
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	2bfd      	cmp	r3, #253	; 0xfd
 80065d4:	d026      	beq.n	8006624 <xmit_datablock+0x78>
		wc = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff fefa 	bl	80063dc <xmit_spi>
			xmit_spi(*buff++);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fef3 	bl	80063dc <xmit_spi>
		} while (--wc);
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1eb      	bne.n	80065da <xmit_datablock+0x2e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
 8006602:	20ff      	movs	r0, #255	; 0xff
 8006604:	f7ff feea 	bl	80063dc <xmit_spi>
		xmit_spi(0xFF);
 8006608:	20ff      	movs	r0, #255	; 0xff
 800660a:	f7ff fee7 	bl	80063dc <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
 800660e:	f7ff ff05 	bl	800641c <rcvr_spi>
 8006612:	4603      	mov	r3, r0
 8006614:	73bb      	strb	r3, [r7, #14]
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	2b05      	cmp	r3, #5
 800661e:	d001      	beq.n	8006624 <xmit_datablock+0x78>
			return 0;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <xmit_datablock+0x7a>
	}

	return 1;
 8006624:	2301      	movs	r3, #1
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <send_cmd>:
/**************************************************************************/
static uint8_t send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	uint8_t  cmd,				/* Command index */
	uint32_t arg				/* Argument */
)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	6039      	str	r1, [r7, #0]
 8006638:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	da0e      	bge.n	8006660 <send_cmd+0x32>
		cmd &= 0x7F;
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800664a:	2100      	movs	r1, #0
 800664c:	2037      	movs	r0, #55	; 0x37
 800664e:	f7ff ffee 	bl	800662e <send_cmd>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d901      	bls.n	8006660 <send_cmd+0x32>
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	e04c      	b.n	80066fa <send_cmd+0xcc>
	}

	/* Select the card and wait for ready */
	deselect();
 8006660:	f7ff ff00 	bl	8006464 <deselect>
	if (!selecting()) return 0xFF;
 8006664:	f7ff ff0c 	bl	8006480 <selecting>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <send_cmd+0x44>
 800666e:	23ff      	movs	r3, #255	; 0xff
 8006670:	e043      	b.n	80066fa <send_cmd+0xcc>

	/* Send command packet */
	xmit_spi(0x40 | cmd);				/* Start + Command index */
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff feae 	bl	80063dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	0e1b      	lsrs	r3, r3, #24
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fea8 	bl	80063dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fea2 	bl	80063dc <xmit_spi>
	xmit_spi((uint8_t)(arg >> 8));		/* Argument[15..8] */
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b2db      	uxtb	r3, r3
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fe9c 	bl	80063dc <xmit_spi>
	xmit_spi((uint8_t)arg);				/* Argument[7..0] */
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fe97 	bl	80063dc <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <send_cmd+0x8e>
 80066b8:	2395      	movs	r3, #149	; 0x95
 80066ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d101      	bne.n	80066c6 <send_cmd+0x98>
 80066c2:	2387      	movs	r3, #135	; 0x87
 80066c4:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fe87 	bl	80063dc <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d101      	bne.n	80066d8 <send_cmd+0xaa>
 80066d4:	f7ff fea2 	bl	800641c <rcvr_spi>
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
 80066d8:	230a      	movs	r3, #10
 80066da:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80066dc:	f7ff fe9e 	bl	800641c <rcvr_spi>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80066e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da05      	bge.n	80066f8 <send_cmd+0xca>
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f1      	bne.n	80066dc <send_cmd+0xae>

	return res;			/* Return with the response value */
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <disk_initialize>:
*/
/**************************************************************************/
DSTATUS disk_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <disk_initialize+0x14>
 8006714:	2301      	movs	r3, #1
 8006716:	e0c9      	b.n	80068ac <disk_initialize+0x1a8>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 8006718:	4b66      	ldr	r3, [pc, #408]	; (80068b4 <disk_initialize+0x1b0>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <disk_initialize+0x2a>
 8006726:	4b63      	ldr	r3, [pc, #396]	; (80068b4 <disk_initialize+0x1b0>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e0be      	b.n	80068ac <disk_initialize+0x1a8>

//	spi_init();
	CS_HIGH();
 800672e:	2201      	movs	r2, #1
 8006730:	2110      	movs	r1, #16
 8006732:	4861      	ldr	r0, [pc, #388]	; (80068b8 <disk_initialize+0x1b4>)
 8006734:	f002 f8eb 	bl	800890e <HAL_GPIO_WritePin>
	power_on();							/* Force socket power on */
 8006738:	f7ff fec2 	bl	80064c0 <power_on>
	FCLK_SLOW();
 800673c:	f7ff fe24 	bl	8006388 <FCLK_SLOW>
	CS_LOW();
 8006740:	2200      	movs	r2, #0
 8006742:	2110      	movs	r1, #16
 8006744:	485c      	ldr	r0, [pc, #368]	; (80068b8 <disk_initialize+0x1b4>)
 8006746:	f002 f8e2 	bl	800890e <HAL_GPIO_WritePin>
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
 800674a:	230a      	movs	r3, #10
 800674c:	73fb      	strb	r3, [r7, #15]
 800674e:	e004      	b.n	800675a <disk_initialize+0x56>
 8006750:	f7ff fe64 	bl	800641c <rcvr_spi>
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	3b01      	subs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f7      	bne.n	8006750 <disk_initialize+0x4c>

	ty = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8006764:	2100      	movs	r1, #0
 8006766:	2000      	movs	r0, #0
 8006768:	f7ff ff61 	bl	800662e <send_cmd>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	f040 8084 	bne.w	800687c <disk_initialize+0x178>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
 8006774:	4b51      	ldr	r3, [pc, #324]	; (80068bc <disk_initialize+0x1b8>)
 8006776:	2264      	movs	r2, #100	; 0x64
 8006778:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800677a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800677e:	2008      	movs	r0, #8
 8006780:	f7ff ff55 	bl	800662e <send_cmd>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d14d      	bne.n	8006826 <disk_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
 800678e:	e00c      	b.n	80067aa <disk_initialize+0xa6>
 8006790:	7bfc      	ldrb	r4, [r7, #15]
 8006792:	f7ff fe43 	bl	800641c <rcvr_spi>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	f104 0310 	add.w	r3, r4, #16
 800679e:	443b      	add	r3, r7
 80067a0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	3301      	adds	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d9ef      	bls.n	8006790 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
 80067b0:	7abb      	ldrb	r3, [r7, #10]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d162      	bne.n	800687c <disk_initialize+0x178>
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	2baa      	cmp	r3, #170	; 0xaa
 80067ba:	d15f      	bne.n	800687c <disk_initialize+0x178>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
 80067bc:	bf00      	nop
 80067be:	4b3f      	ldr	r3, [pc, #252]	; (80068bc <disk_initialize+0x1b8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <disk_initialize+0xd2>
 80067c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80067ca:	20a9      	movs	r0, #169	; 0xa9
 80067cc:	f7ff ff2f 	bl	800662e <send_cmd>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f3      	bne.n	80067be <disk_initialize+0xba>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <disk_initialize+0x1b8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d04e      	beq.n	800687c <disk_initialize+0x178>
 80067de:	2100      	movs	r1, #0
 80067e0:	203a      	movs	r0, #58	; 0x3a
 80067e2:	f7ff ff24 	bl	800662e <send_cmd>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d147      	bne.n	800687c <disk_initialize+0x178>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	e00c      	b.n	800680c <disk_initialize+0x108>
 80067f2:	7bfc      	ldrb	r4, [r7, #15]
 80067f4:	f7ff fe12 	bl	800641c <rcvr_spi>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	f104 0310 	add.w	r3, r4, #16
 8006800:	443b      	add	r3, r7
 8006802:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	3301      	adds	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b03      	cmp	r3, #3
 8006810:	d9ef      	bls.n	80067f2 <disk_initialize+0xee>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8006812:	7a3b      	ldrb	r3, [r7, #8]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <disk_initialize+0x11c>
 800681c:	230c      	movs	r3, #12
 800681e:	e000      	b.n	8006822 <disk_initialize+0x11e>
 8006820:	2304      	movs	r3, #4
 8006822:	737b      	strb	r3, [r7, #13]
 8006824:	e02a      	b.n	800687c <disk_initialize+0x178>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8006826:	2100      	movs	r1, #0
 8006828:	20a9      	movs	r0, #169	; 0xa9
 800682a:	f7ff ff00 	bl	800662e <send_cmd>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d804      	bhi.n	800683e <disk_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8006834:	2302      	movs	r3, #2
 8006836:	737b      	strb	r3, [r7, #13]
 8006838:	23a9      	movs	r3, #169	; 0xa9
 800683a:	73bb      	strb	r3, [r7, #14]
 800683c:	e003      	b.n	8006846 <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 800683e:	2301      	movs	r3, #1
 8006840:	737b      	strb	r3, [r7, #13]
 8006842:	2301      	movs	r3, #1
 8006844:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
 8006846:	bf00      	nop
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <disk_initialize+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <disk_initialize+0x15c>
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff feea 	bl	800662e <send_cmd>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f3      	bne.n	8006848 <disk_initialize+0x144>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <disk_initialize+0x1b8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <disk_initialize+0x174>
 8006868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800686c:	2010      	movs	r0, #16
 800686e:	f7ff fede 	bl	800662e <send_cmd>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <disk_initialize+0x178>
				ty = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;
 800687c:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <disk_initialize+0x1bc>)
 800687e:	7b7b      	ldrb	r3, [r7, #13]
 8006880:	7013      	strb	r3, [r2, #0]
	deselect();
 8006882:	f7ff fdef 	bl	8006464 <deselect>

	if (ty) {						/* Initialization succeded */
 8006886:	7b7b      	ldrb	r3, [r7, #13]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <disk_initialize+0x19e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <disk_initialize+0x1b0>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <disk_initialize+0x1b0>)
 800689a:	701a      	strb	r2, [r3, #0]

		FCLK_FAST();
 800689c:	f7ff fd88 	bl	80063b0 <FCLK_FAST>
 80068a0:	e001      	b.n	80068a6 <disk_initialize+0x1a2>

	} else {						/* Initialization failed */
		power_off();
 80068a2:	f7ff fe2d 	bl	8006500 <power_off>
	}

	return Stat;
 80068a6:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <disk_initialize+0x1b0>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b2db      	uxtb	r3, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}
 80068b4:	20000010 	.word	0x20000010
 80068b8:	40010800 	.word	0x40010800
 80068bc:	200018cc 	.word	0x200018cc
 80068c0:	200018d4 	.word	0x200018d4

080068c4 <disk_status>:
*/
/**************************************************************************/
DSTATUS disk_status (
	uint8_t drv		/* Physical drive number (0) */
)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only single drive */
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <disk_status+0x14>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e002      	b.n	80068de <disk_status+0x1a>
	return Stat;
 80068d8:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <disk_status+0x24>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr
 80068e8:	20000010 	.word	0x20000010

080068ec <disk_read>:
	uint8_t drv,			/* Physical drive number (0) */
	uint8_t *buff,			/* Pointer to the data buffer to store read data */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t count			/* Sector count (1..255) */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	461a      	mov	r2, r3
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]
 80068fc:	4613      	mov	r3, r2
 80068fe:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <disk_read+0x20>
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <disk_read+0x24>
 800690c:	2304      	movs	r3, #4
 800690e:	e04d      	b.n	80069ac <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <disk_read+0xc8>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <disk_read+0x36>
 800691e:	2303      	movs	r3, #3
 8006920:	e044      	b.n	80069ac <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006922:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <disk_read+0xcc>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <disk_read+0x48>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	025b      	lsls	r3, r3, #9
 8006932:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block read */
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d111      	bne.n	800695e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	2011      	movs	r0, #17
 800693e:	f7ff fe76 	bl	800662e <send_cmd>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d129      	bne.n	800699c <disk_read+0xb0>
			&& rcvr_datablock(buff, 512))
 8006948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f7ff fde3 	bl	8006518 <rcvr_datablock>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d021      	beq.n	800699c <disk_read+0xb0>
			count = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	73bb      	strb	r3, [r7, #14]
 800695c:	e01e      	b.n	800699c <disk_read+0xb0>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	2012      	movs	r0, #18
 8006962:	f7ff fe64 	bl	800662e <send_cmd>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d117      	bne.n	800699c <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800696c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006970:	68b8      	ldr	r0, [r7, #8]
 8006972:	f7ff fdd1 	bl	8006518 <rcvr_datablock>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <disk_read+0xa6>
				buff += 512;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006982:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	3b01      	subs	r3, #1
 8006988:	73bb      	strb	r3, [r7, #14]
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ed      	bne.n	800696c <disk_read+0x80>
 8006990:	e000      	b.n	8006994 <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 8006992:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006994:	2100      	movs	r1, #0
 8006996:	200c      	movs	r0, #12
 8006998:	f7ff fe49 	bl	800662e <send_cmd>
		}
	}
	deselect();
 800699c:	f7ff fd62 	bl	8006464 <deselect>

	return count ? RES_ERROR : RES_OK;
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000010 	.word	0x20000010
 80069b8:	200018d4 	.word	0x200018d4

080069bc <disk_write>:
	uint8_t  drv,			/* Physical drive number (0) */
	const    uint8_t *buff,	/* Pointer to the data to be written */
	uint32_t sector,		/* Start sector number (LBA) */
	uint8_t  count			/* Sector count (1..255) */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	461a      	mov	r2, r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	4613      	mov	r3, r2
 80069ce:	73bb      	strb	r3, [r7, #14]
	if (drv || !count) return RES_PARERR;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <disk_write+0x20>
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <disk_write+0x24>
 80069dc:	2304      	movs	r3, #4
 80069de:	e064      	b.n	8006aaa <disk_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <disk_write+0xf8>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <disk_write+0x36>
 80069ee:	2303      	movs	r3, #3
 80069f0:	e05b      	b.n	8006aaa <disk_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <disk_write+0xf8>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <disk_write+0x48>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e052      	b.n	8006aaa <disk_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8006a04:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <disk_write+0xfc>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <disk_write+0x5a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	025b      	lsls	r3, r3, #9
 8006a14:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single block write */
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d110      	bne.n	8006a3e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	2018      	movs	r0, #24
 8006a20:	f7ff fe05 	bl	800662e <send_cmd>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d137      	bne.n	8006a9a <disk_write+0xde>
			&& xmit_datablock(buff, 0xFE))
 8006a2a:	21fe      	movs	r1, #254	; 0xfe
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f7ff fdbd 	bl	80065ac <xmit_datablock>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d030      	beq.n	8006a9a <disk_write+0xde>
			count = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73bb      	strb	r3, [r7, #14]
 8006a3c:	e02d      	b.n	8006a9a <disk_write+0xde>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <disk_write+0xfc>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <disk_write+0x98>
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	2097      	movs	r0, #151	; 0x97
 8006a50:	f7ff fded 	bl	800662e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	2019      	movs	r0, #25
 8006a58:	f7ff fde9 	bl	800662e <send_cmd>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11b      	bne.n	8006a9a <disk_write+0xde>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a62:	21fc      	movs	r1, #252	; 0xfc
 8006a64:	68b8      	ldr	r0, [r7, #8]
 8006a66:	f7ff fda1 	bl	80065ac <xmit_datablock>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <disk_write+0xca>
				buff += 512;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	73bb      	strb	r3, [r7, #14]
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1ee      	bne.n	8006a62 <disk_write+0xa6>
 8006a84:	e000      	b.n	8006a88 <disk_write+0xcc>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a86:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8006a88:	21fd      	movs	r1, #253	; 0xfd
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7ff fd8e 	bl	80065ac <xmit_datablock>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <disk_write+0xde>
				count = 1;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73bb      	strb	r3, [r7, #14]
		}
	}
	deselect();
 8006a9a:	f7ff fce3 	bl	8006464 <deselect>

	return count ? RES_ERROR : RES_OK;
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000010 	.word	0x20000010
 8006ab8:	200018d4 	.word	0x200018d4

08006abc <disk_ioctl>:
DRESULT disk_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t ctrl,		/* Control code */
	void    *buff		/* Buffer to send/receive control data */
)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	603a      	str	r2, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, *ptr = buff;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	61bb      	str	r3, [r7, #24]
	/*uint8_t csd[16];*/ /* local variable(CCRAM region) cannot DMA! */
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <disk_ioctl+0x1e>
 8006ad6:	2304      	movs	r3, #4
 8006ad8:	e1f6      	b.n	8006ec8 <disk_ioctl+0x40c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ada:	4b97      	ldr	r3, [pc, #604]	; (8006d38 <disk_ioctl+0x27c>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <disk_ioctl+0x30>
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e1ed      	b.n	8006ec8 <disk_ioctl+0x40c>

	res = RES_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	77fb      	strb	r3, [r7, #31]

	switch (ctrl) {
 8006af0:	79bb      	ldrb	r3, [r7, #6]
 8006af2:	2b0e      	cmp	r3, #14
 8006af4:	f200 81cd 	bhi.w	8006e92 <disk_ioctl+0x3d6>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <disk_ioctl+0x44>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b71 	.word	0x08006b71
 8006b04:	08006b87 	.word	0x08006b87
 8006b08:	08006c3d 	.word	0x08006c3d
 8006b0c:	08006c4b 	.word	0x08006c4b
 8006b10:	08006d45 	.word	0x08006d45
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006e93 	.word	0x08006e93
 8006b1c:	08006e93 	.word	0x08006e93
 8006b20:	08006e93 	.word	0x08006e93
 8006b24:	08006e93 	.word	0x08006e93
 8006b28:	08006de7 	.word	0x08006de7
 8006b2c:	08006df5 	.word	0x08006df5
 8006b30:	08006e17 	.word	0x08006e17
 8006b34:	08006e39 	.word	0x08006e39
 8006b38:	08006e6d 	.word	0x08006e6d

	case CTRL_POWER :
		switch (ptr[0]) {
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <disk_ioctl+0x8e>
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d005      	beq.n	8006b54 <disk_ioctl+0x98>
 8006b48:	e00e      	b.n	8006b68 <disk_ioctl+0xac>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
 8006b4a:	f7ff fcd9 	bl	8006500 <power_off>
			res = RES_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	77fb      	strb	r3, [r7, #31]
			break;
 8006b52:	e00c      	b.n	8006b6e <disk_ioctl+0xb2>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (uint8_t)power_status();
 8006b54:	f7ff fcaa 	bl	80064ac <power_status>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	77fb      	strb	r3, [r7, #31]
			break;
 8006b66:	e002      	b.n	8006b6e <disk_ioctl+0xb2>
		default :
			res = RES_PARERR;
 8006b68:	2304      	movs	r3, #4
 8006b6a:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006b6c:	e1a9      	b.n	8006ec2 <disk_ioctl+0x406>
 8006b6e:	e1a8      	b.n	8006ec2 <disk_ioctl+0x406>

	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (selecting()) {
 8006b70:	f7ff fc86 	bl	8006480 <selecting>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 818e 	beq.w	8006e98 <disk_ioctl+0x3dc>
			deselect();
 8006b7c:	f7ff fc72 	bl	8006464 <deselect>
			res = RES_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006b84:	e188      	b.n	8006e98 <disk_ioctl+0x3dc>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006b86:	2100      	movs	r1, #0
 8006b88:	2009      	movs	r0, #9
 8006b8a:	f7ff fd50 	bl	800662e <send_cmd>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 8183 	bne.w	8006e9c <disk_ioctl+0x3e0>
 8006b96:	2110      	movs	r1, #16
 8006b98:	4868      	ldr	r0, [pc, #416]	; (8006d3c <disk_ioctl+0x280>)
 8006b9a:	f7ff fcbd 	bl	8006518 <rcvr_datablock>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 817b 	beq.w	8006e9c <disk_ioctl+0x3e0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006ba6:	4b65      	ldr	r3, [pc, #404]	; (8006d3c <disk_ioctl+0x280>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	099b      	lsrs	r3, r3, #6
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d114      	bne.n	8006bdc <disk_ioctl+0x120>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 8006bb2:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <disk_ioctl+0x280>)
 8006bb4:	7a5b      	ldrb	r3, [r3, #9]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4b60      	ldr	r3, [pc, #384]	; (8006d3c <disk_ioctl+0x280>)
 8006bba:	7a1b      	ldrb	r3, [r3, #8]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	4413      	add	r3, r2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4b5e      	ldr	r3, [pc, #376]	; (8006d3c <disk_ioctl+0x280>)
 8006bc4:	79db      	ldrb	r3, [r3, #7]
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006bcc:	4413      	add	r3, r2
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << 10;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	029a      	lsls	r2, r3, #10
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e02c      	b.n	8006c36 <disk_ioctl+0x17a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006bdc:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <disk_ioctl+0x280>)
 8006bde:	795b      	ldrb	r3, [r3, #5]
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <disk_ioctl+0x280>)
 8006be8:	7a9b      	ldrb	r3, [r3, #10]
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <disk_ioctl+0x280>)
 8006bf4:	7a5b      	ldrb	r3, [r3, #9]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	3302      	adds	r3, #2
 8006c06:	77bb      	strb	r3, [r7, #30]
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 8006c08:	4b4c      	ldr	r3, [pc, #304]	; (8006d3c <disk_ioctl+0x280>)
 8006c0a:	7a1b      	ldrb	r3, [r3, #8]
 8006c0c:	099b      	lsrs	r3, r3, #6
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b4a      	ldr	r3, [pc, #296]	; (8006d3c <disk_ioctl+0x280>)
 8006c14:	79db      	ldrb	r3, [r3, #7]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	441a      	add	r2, r3
 8006c1a:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <disk_ioctl+0x280>)
 8006c1c:	799b      	ldrb	r3, [r3, #6]
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c24:	4413      	add	r3, r2
 8006c26:	3301      	adds	r3, #1
 8006c28:	60bb      	str	r3, [r7, #8]
				*(uint32_t*)buff = csize << (n - 9);
 8006c2a:	7fbb      	ldrb	r3, [r7, #30]
 8006c2c:	3b09      	subs	r3, #9
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	409a      	lsls	r2, r3
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006c3a:	e12f      	b.n	8006e9c <disk_ioctl+0x3e0>

	case GET_SECTOR_SIZE :	/* Get sector size in unit of byte (uint16_t) */
		*(uint16_t*)buff = 512;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c42:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	77fb      	strb	r3, [r7, #31]
		break;
 8006c48:	e13b      	b.n	8006ec2 <disk_ioctl+0x406>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <disk_ioctl+0x284>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d029      	beq.n	8006caa <disk_ioctl+0x1ee>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006c56:	2100      	movs	r1, #0
 8006c58:	208d      	movs	r0, #141	; 0x8d
 8006c5a:	f7ff fce8 	bl	800662e <send_cmd>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f040 811d 	bne.w	8006ea0 <disk_ioctl+0x3e4>
				rcvr_spi();
 8006c66:	f7ff fbd9 	bl	800641c <rcvr_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	4833      	ldr	r0, [pc, #204]	; (8006d3c <disk_ioctl+0x280>)
 8006c6e:	f7ff fc53 	bl	8006518 <rcvr_datablock>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8113 	beq.w	8006ea0 <disk_ioctl+0x3e4>
					for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
 8006c7a:	2330      	movs	r3, #48	; 0x30
 8006c7c:	77bb      	strb	r3, [r7, #30]
 8006c7e:	e004      	b.n	8006c8a <disk_ioctl+0x1ce>
 8006c80:	f7ff fbcc 	bl	800641c <rcvr_spi>
 8006c84:	7fbb      	ldrb	r3, [r7, #30]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	77bb      	strb	r3, [r7, #30]
 8006c8a:	7fbb      	ldrb	r3, [r7, #30]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f7      	bne.n	8006c80 <disk_ioctl+0x1c4>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 8006c90:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <disk_ioctl+0x280>)
 8006c92:	7a9b      	ldrb	r3, [r3, #10]
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	fa03 f202 	lsl.w	r2, r3, r2
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	77fb      	strb	r3, [r7, #31]
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006ca8:	e0fa      	b.n	8006ea0 <disk_ioctl+0x3e4>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006caa:	2100      	movs	r1, #0
 8006cac:	2009      	movs	r0, #9
 8006cae:	f7ff fcbe 	bl	800662e <send_cmd>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f040 80f3 	bne.w	8006ea0 <disk_ioctl+0x3e4>
 8006cba:	2110      	movs	r1, #16
 8006cbc:	481f      	ldr	r0, [pc, #124]	; (8006d3c <disk_ioctl+0x280>)
 8006cbe:	f7ff fc2b 	bl	8006518 <rcvr_datablock>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80eb 	beq.w	8006ea0 <disk_ioctl+0x3e4>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <disk_ioctl+0x284>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d015      	beq.n	8006d02 <disk_ioctl+0x246>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006cd6:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <disk_ioctl+0x280>)
 8006cd8:	7a9b      	ldrb	r3, [r3, #10]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006ce0:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <disk_ioctl+0x280>)
 8006ce2:	7ad2      	ldrb	r2, [r2, #11]
 8006ce4:	09d2      	lsrs	r2, r2, #7
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	4413      	add	r3, r2
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <disk_ioctl+0x280>)
 8006cee:	7b5b      	ldrb	r3, [r3, #13]
 8006cf0:	099b      	lsrs	r3, r3, #6
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e016      	b.n	8006d30 <disk_ioctl+0x274>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <disk_ioctl+0x280>)
 8006d04:	7a9b      	ldrb	r3, [r3, #10]
 8006d06:	109b      	asrs	r3, r3, #2
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	3301      	adds	r3, #1
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <disk_ioctl+0x280>)
 8006d12:	7ad2      	ldrb	r2, [r2, #11]
 8006d14:	00d2      	lsls	r2, r2, #3
 8006d16:	f002 0218 	and.w	r2, r2, #24
 8006d1a:	4908      	ldr	r1, [pc, #32]	; (8006d3c <disk_ioctl+0x280>)
 8006d1c:	7ac9      	ldrb	r1, [r1, #11]
 8006d1e:	0949      	lsrs	r1, r1, #5
 8006d20:	b2c9      	uxtb	r1, r1
 8006d22:	440a      	add	r2, r1
 8006d24:	3201      	adds	r2, #1
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	77fb      	strb	r3, [r7, #31]
		break;
 8006d34:	e0b4      	b.n	8006ea0 <disk_ioctl+0x3e4>
 8006d36:	bf00      	nop
 8006d38:	20000010 	.word	0x20000010
 8006d3c:	200018d8 	.word	0x200018d8
 8006d40:	200018d4 	.word	0x200018d4

	case CTRL_ERASE_SECTOR :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006d44:	4b62      	ldr	r3, [pc, #392]	; (8006ed0 <disk_ioctl+0x414>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 0306 	and.w	r3, r3, #6
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80a9 	beq.w	8006ea4 <disk_ioctl+0x3e8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	4a5f      	ldr	r2, [pc, #380]	; (8006ed4 <disk_ioctl+0x418>)
 8006d56:	210b      	movs	r1, #11
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff feaf 	bl	8006abc <disk_ioctl>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 80a1 	bne.w	8006ea8 <disk_ioctl+0x3ec>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006d66:	4b5b      	ldr	r3, [pc, #364]	; (8006ed4 <disk_ioctl+0x418>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <disk_ioctl+0x2c4>
 8006d72:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <disk_ioctl+0x418>)
 8006d74:	7a9b      	ldrb	r3, [r3, #10]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8096 	beq.w	8006eac <disk_ioctl+0x3f0>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	613b      	str	r3, [r7, #16]
		if (!(CardType & CT_BLOCK)) {
 8006d90:	4b4f      	ldr	r3, [pc, #316]	; (8006ed0 <disk_ioctl+0x414>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d105      	bne.n	8006da8 <disk_ioctl+0x2ec>
			st *= 512; ed *= 512;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	025b      	lsls	r3, r3, #9
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	025b      	lsls	r3, r3, #9
 8006da6:	613b      	str	r3, [r7, #16]
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(3000))	/* Erase sector block */
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	2020      	movs	r0, #32
 8006dac:	f7ff fc3f 	bl	800662e <send_cmd>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d17c      	bne.n	8006eb0 <disk_ioctl+0x3f4>
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	2021      	movs	r0, #33	; 0x21
 8006dba:	f7ff fc38 	bl	800662e <send_cmd>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d175      	bne.n	8006eb0 <disk_ioctl+0x3f4>
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2026      	movs	r0, #38	; 0x26
 8006dc8:	f7ff fc31 	bl	800662e <send_cmd>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d16e      	bne.n	8006eb0 <disk_ioctl+0x3f4>
 8006dd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006dd6:	f7ff fb29 	bl	800642c <wait_ready>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d067      	beq.n	8006eb0 <disk_ioctl+0x3f4>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]
		break;
 8006de4:	e064      	b.n	8006eb0 <disk_ioctl+0x3f4>

	/* Following command are not used by FatFs module */

	case MMC_GET_TYPE :		/* Get MMC/SDC type (uint8_t) */
		*ptr = CardType;
 8006de6:	4b3a      	ldr	r3, [pc, #232]	; (8006ed0 <disk_ioctl+0x414>)
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	701a      	strb	r2, [r3, #0]
		res = RES_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	77fb      	strb	r3, [r7, #31]
		break;
 8006df2:	e066      	b.n	8006ec2 <disk_ioctl+0x406>

	case MMC_GET_CSD :		/* Read CSD (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8006df4:	2100      	movs	r1, #0
 8006df6:	2009      	movs	r0, #9
 8006df8:	f7ff fc19 	bl	800662e <send_cmd>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d158      	bne.n	8006eb4 <disk_ioctl+0x3f8>
			&& rcvr_datablock(ptr, 16))
 8006e02:	2110      	movs	r1, #16
 8006e04:	69b8      	ldr	r0, [r7, #24]
 8006e06:	f7ff fb87 	bl	8006518 <rcvr_datablock>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d051      	beq.n	8006eb4 <disk_ioctl+0x3f8>
			res = RES_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	77fb      	strb	r3, [r7, #31]
		break;
 8006e14:	e04e      	b.n	8006eb4 <disk_ioctl+0x3f8>

	case MMC_GET_CID :		/* Read CID (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8006e16:	2100      	movs	r1, #0
 8006e18:	200a      	movs	r0, #10
 8006e1a:	f7ff fc08 	bl	800662e <send_cmd>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d149      	bne.n	8006eb8 <disk_ioctl+0x3fc>
			&& rcvr_datablock(ptr, 16))
 8006e24:	2110      	movs	r1, #16
 8006e26:	69b8      	ldr	r0, [r7, #24]
 8006e28:	f7ff fb76 	bl	8006518 <rcvr_datablock>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d042      	beq.n	8006eb8 <disk_ioctl+0x3fc>
			res = RES_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	77fb      	strb	r3, [r7, #31]
		break;
 8006e36:	e03f      	b.n	8006eb8 <disk_ioctl+0x3fc>

	case MMC_GET_OCR :		/* Read OCR (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8006e38:	2100      	movs	r1, #0
 8006e3a:	203a      	movs	r0, #58	; 0x3a
 8006e3c:	f7ff fbf7 	bl	800662e <send_cmd>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d13a      	bne.n	8006ebc <disk_ioctl+0x400>
			for (n = 4; n; n--) *ptr++ = rcvr_spi();
 8006e46:	2304      	movs	r3, #4
 8006e48:	77bb      	strb	r3, [r7, #30]
 8006e4a:	e009      	b.n	8006e60 <disk_ioctl+0x3a4>
 8006e4c:	69bc      	ldr	r4, [r7, #24]
 8006e4e:	1c63      	adds	r3, r4, #1
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	f7ff fae3 	bl	800641c <rcvr_spi>
 8006e56:	4603      	mov	r3, r0
 8006e58:	7023      	strb	r3, [r4, #0]
 8006e5a:	7fbb      	ldrb	r3, [r7, #30]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	77bb      	strb	r3, [r7, #30]
 8006e60:	7fbb      	ldrb	r3, [r7, #30]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f2      	bne.n	8006e4c <disk_ioctl+0x390>
			res = RES_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006e6a:	e027      	b.n	8006ebc <disk_ioctl+0x400>

	case MMC_GET_SDSTAT :	/* Read SD status (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	208d      	movs	r0, #141	; 0x8d
 8006e70:	f7ff fbdd 	bl	800662e <send_cmd>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d122      	bne.n	8006ec0 <disk_ioctl+0x404>
			rcvr_spi();
 8006e7a:	f7ff facf 	bl	800641c <rcvr_spi>
			if (rcvr_datablock(ptr, 64))
 8006e7e:	2140      	movs	r1, #64	; 0x40
 8006e80:	69b8      	ldr	r0, [r7, #24]
 8006e82:	f7ff fb49 	bl	8006518 <rcvr_datablock>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d019      	beq.n	8006ec0 <disk_ioctl+0x404>
				res = RES_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	77fb      	strb	r3, [r7, #31]
		}
		break;
 8006e90:	e016      	b.n	8006ec0 <disk_ioctl+0x404>

	default:
		res = RES_PARERR;
 8006e92:	2304      	movs	r3, #4
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e014      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006e98:	bf00      	nop
 8006e9a:	e012      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006e9c:	bf00      	nop
 8006e9e:	e010      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006ea0:	bf00      	nop
 8006ea2:	e00e      	b.n	8006ec2 <disk_ioctl+0x406>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006ea4:	bf00      	nop
 8006ea6:	e00c      	b.n	8006ec2 <disk_ioctl+0x406>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006ea8:	bf00      	nop
 8006eaa:	e00a      	b.n	8006ec2 <disk_ioctl+0x406>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006eac:	bf00      	nop
 8006eae:	e008      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006eb0:	bf00      	nop
 8006eb2:	e006      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006eb4:	bf00      	nop
 8006eb6:	e004      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <disk_ioctl+0x406>
		break;
 8006ec0:	bf00      	nop
	}

	deselect();
 8006ec2:	f7ff facf 	bl	8006464 <deselect>

	return res;
 8006ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3724      	adds	r7, #36	; 0x24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd90      	pop	{r4, r7, pc}
 8006ed0:	200018d4 	.word	0x200018d4
 8006ed4:	200018d8 	.word	0x200018d8

08006ed8 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

uint32_t get_fattime (void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	3e216000 	.word	0x3e216000

08006eec <Display_info>:
extern bool display_Off;

extern bool display_Sleep;

void Display_info(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af02      	add	r7, sp, #8
	if(info || display_Off)
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <Display_info+0x98>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d103      	bne.n	8006f02 <Display_info+0x16>
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <Display_info+0x9c>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d03d      	beq.n	8006f7e <Display_info+0x92>
	{
		if(display_Off)	//Выключаем дисплей
 8006f02:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <Display_info+0x9c>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <Display_info+0x36>
		{
			ssd1306_Fill(Black);
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f000 f984 	bl	8007218 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8006f10:	481e      	ldr	r0, [pc, #120]	; (8006f8c <Display_info+0xa0>)
 8006f12:	f000 f9a3 	bl	800725c <ssd1306_UpdateScreen>
			display_Sleep = true;
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <Display_info+0xa4>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
			display_Off = false;
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <Display_info+0x9c>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
		}
		if(info)
 8006f22:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <Display_info+0x98>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d029      	beq.n	8006f7e <Display_info+0x92>
		{
			ssd1306_Fill(Black);
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f000 f974 	bl	8007218 <ssd1306_Fill>
			ssd1306_UpdateScreen(&hi2c2);
 8006f30:	4816      	ldr	r0, [pc, #88]	; (8006f8c <Display_info+0xa0>)
 8006f32:	f000 f993 	bl	800725c <ssd1306_UpdateScreen>

			ssd1306_SetCursor(1, 23);
 8006f36:	2117      	movs	r1, #23
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f000 fac7 	bl	80074cc <ssd1306_SetCursor>
			ssd1306_WriteString("ISet:", Font_11x18, White);
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <Display_info+0xa8>)
 8006f40:	2301      	movs	r3, #1
 8006f42:	ca06      	ldmia	r2, {r1, r2}
 8006f44:	4814      	ldr	r0, [pc, #80]	; (8006f98 <Display_info+0xac>)
 8006f46:	f000 fa9b 	bl	8007480 <ssd1306_WriteString>

			ssd1306_SetCursor(60, 23);
 8006f4a:	2117      	movs	r1, #23
 8006f4c:	203c      	movs	r0, #60	; 0x3c
 8006f4e:	f000 fabd 	bl	80074cc <ssd1306_SetCursor>
			snprintf(trans_str, 63, "%.2fA", Current);
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <Display_info+0xb0>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	e9cd 2300 	strd	r2, r3, [sp]
 8006f5c:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <Display_info+0xb4>)
 8006f5e:	213f      	movs	r1, #63	; 0x3f
 8006f60:	4810      	ldr	r0, [pc, #64]	; (8006fa4 <Display_info+0xb8>)
 8006f62:	f005 f951 	bl	800c208 <sniprintf>
			ssd1306_WriteString(trans_str, Font_11x18, White);
 8006f66:	4a0b      	ldr	r2, [pc, #44]	; (8006f94 <Display_info+0xa8>)
 8006f68:	2301      	movs	r3, #1
 8006f6a:	ca06      	ldmia	r2, {r1, r2}
 8006f6c:	480d      	ldr	r0, [pc, #52]	; (8006fa4 <Display_info+0xb8>)
 8006f6e:	f000 fa87 	bl	8007480 <ssd1306_WriteString>
			ssd1306_UpdateScreen(&hi2c2);
 8006f72:	4806      	ldr	r0, [pc, #24]	; (8006f8c <Display_info+0xa0>)
 8006f74:	f000 f972 	bl	800725c <ssd1306_UpdateScreen>
			info = false;
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <Display_info+0x98>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
//		  	ssd1306_UpdateScreen(&hi2c2);
//	  	}
//	  	What_Time = 0;
//	  	RIGHT_NUM = false;
//	}
}
 8006f7e:	bf00      	nop
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20000008 	.word	0x20000008
 8006f88:	20000b7a 	.word	0x20000b7a
 8006f8c:	20000adc 	.word	0x20000adc
 8006f90:	20000b7b 	.word	0x20000b7b
 8006f94:	20000014 	.word	0x20000014
 8006f98:	0800f8ec 	.word	0x0800f8ec
 8006f9c:	20000b80 	.word	0x20000b80
 8006fa0:	0800f8f4 	.word	0x0800f8f4
 8006fa4:	20000b30 	.word	0x20000b30

08006fa8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8006fb4:	230a      	movs	r3, #10
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	1cfb      	adds	r3, r7, #3
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2178      	movs	r1, #120	; 0x78
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fe16 	bl	8008bf8 <HAL_I2C_Mem_Write>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8006fe0:	2064      	movs	r0, #100	; 0x64
 8006fe2:	f000 fbfd 	bl	80077e0 <HAL_Delay>
    int status = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8006fea:	21ae      	movs	r1, #174	; 0xae
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff ffdb 	bl	8006fa8 <ssd1306_WriteCommand>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8006ffc:	2120      	movs	r1, #32
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ffd2 	bl	8006fa8 <ssd1306_WriteCommand>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800700e:	2110      	movs	r1, #16
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ffc9 	bl	8006fa8 <ssd1306_WriteCommand>
 8007016:	4603      	mov	r3, r0
 8007018:	461a      	mov	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8007020:	21b0      	movs	r1, #176	; 0xb0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ffc0 	bl	8006fa8 <ssd1306_WriteCommand>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8007032:	21c8      	movs	r1, #200	; 0xc8
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ffb7 	bl	8006fa8 <ssd1306_WriteCommand>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8007044:	2100      	movs	r1, #0
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff ffae 	bl	8006fa8 <ssd1306_WriteCommand>
 800704c:	4603      	mov	r3, r0
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8007056:	2110      	movs	r1, #16
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ffa5 	bl	8006fa8 <ssd1306_WriteCommand>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8007068:	2140      	movs	r1, #64	; 0x40
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff9c 	bl	8006fa8 <ssd1306_WriteCommand>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800707a:	2181      	movs	r1, #129	; 0x81
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ff93 	bl	8006fa8 <ssd1306_WriteCommand>
 8007082:	4603      	mov	r3, r0
 8007084:	461a      	mov	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800708c:	21ff      	movs	r1, #255	; 0xff
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff ff8a 	bl	8006fa8 <ssd1306_WriteCommand>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800709e:	21a1      	movs	r1, #161	; 0xa1
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff81 	bl	8006fa8 <ssd1306_WriteCommand>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461a      	mov	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80070b0:	21a6      	movs	r1, #166	; 0xa6
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff ff78 	bl	8006fa8 <ssd1306_WriteCommand>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80070c2:	21a8      	movs	r1, #168	; 0xa8
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff ff6f 	bl	8006fa8 <ssd1306_WriteCommand>
 80070ca:	4603      	mov	r3, r0
 80070cc:	461a      	mov	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80070d4:	213f      	movs	r1, #63	; 0x3f
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff ff66 	bl	8006fa8 <ssd1306_WriteCommand>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80070e6:	21a4      	movs	r1, #164	; 0xa4
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff5d 	bl	8006fa8 <ssd1306_WriteCommand>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80070f8:	21d3      	movs	r1, #211	; 0xd3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff54 	bl	8006fa8 <ssd1306_WriteCommand>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800710a:	2100      	movs	r1, #0
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff ff4b 	bl	8006fa8 <ssd1306_WriteCommand>
 8007112:	4603      	mov	r3, r0
 8007114:	461a      	mov	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800711c:	21d5      	movs	r1, #213	; 0xd5
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff42 	bl	8006fa8 <ssd1306_WriteCommand>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800712e:	21f0      	movs	r1, #240	; 0xf0
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff39 	bl	8006fa8 <ssd1306_WriteCommand>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8007140:	21d9      	movs	r1, #217	; 0xd9
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff ff30 	bl	8006fa8 <ssd1306_WriteCommand>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8007152:	2122      	movs	r1, #34	; 0x22
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff27 	bl	8006fa8 <ssd1306_WriteCommand>
 800715a:	4603      	mov	r3, r0
 800715c:	461a      	mov	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8007164:	21da      	movs	r1, #218	; 0xda
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff ff1e 	bl	8006fa8 <ssd1306_WriteCommand>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8007176:	2112      	movs	r1, #18
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff15 	bl	8006fa8 <ssd1306_WriteCommand>
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8007188:	21db      	movs	r1, #219	; 0xdb
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff ff0c 	bl	8006fa8 <ssd1306_WriteCommand>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800719a:	2120      	movs	r1, #32
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff03 	bl	8006fa8 <ssd1306_WriteCommand>
 80071a2:	4603      	mov	r3, r0
 80071a4:	461a      	mov	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80071ac:	218d      	movs	r1, #141	; 0x8d
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fefa 	bl	8006fa8 <ssd1306_WriteCommand>
 80071b4:	4603      	mov	r3, r0
 80071b6:	461a      	mov	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80071be:	2114      	movs	r1, #20
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fef1 	bl	8006fa8 <ssd1306_WriteCommand>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80071d0:	21af      	movs	r1, #175	; 0xaf
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fee8 	bl	8006fa8 <ssd1306_WriteCommand>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <ssd1306_Init+0x214>
        return 1;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e00f      	b.n	800720c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80071ec:	2000      	movs	r0, #0
 80071ee:	f000 f813 	bl	8007218 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f832 	bl	800725c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80071f8:	4b06      	ldr	r3, [pc, #24]	; (8007214 <ssd1306_Init+0x23c>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <ssd1306_Init+0x23c>)
 8007200:	2200      	movs	r2, #0
 8007202:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <ssd1306_Init+0x23c>)
 8007206:	2201      	movs	r2, #1
 8007208:	715a      	strb	r2, [r3, #5]

    return 0;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20001ce8 	.word	0x20001ce8

08007218 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	e00d      	b.n	8007244 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <ssd1306_Fill+0x1a>
 800722e:	2100      	movs	r1, #0
 8007230:	e000      	b.n	8007234 <ssd1306_Fill+0x1c>
 8007232:	21ff      	movs	r1, #255	; 0xff
 8007234:	4a08      	ldr	r2, [pc, #32]	; (8007258 <ssd1306_Fill+0x40>)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	460a      	mov	r2, r1
 800723c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724a:	d3ed      	bcc.n	8007228 <ssd1306_Fill+0x10>
    }
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	200018e8 	.word	0x200018e8

0800725c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af04      	add	r7, sp, #16
 8007262:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e020      	b.n	80072ac <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	3b50      	subs	r3, #80	; 0x50
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fe98 	bl	8006fa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fe94 	bl	8006fa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8007280:	2110      	movs	r1, #16
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fe90 	bl	8006fa8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <ssd1306_UpdateScreen+0x60>)
 800728e:	4413      	add	r3, r2
 8007290:	2264      	movs	r2, #100	; 0x64
 8007292:	9202      	str	r2, [sp, #8]
 8007294:	2280      	movs	r2, #128	; 0x80
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	2301      	movs	r3, #1
 800729c:	2240      	movs	r2, #64	; 0x40
 800729e:	2178      	movs	r1, #120	; 0x78
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fca9 	bl	8008bf8 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	3301      	adds	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b07      	cmp	r3, #7
 80072b0:	d9db      	bls.n	800726a <ssd1306_UpdateScreen+0xe>
    }
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200018e8 	.word	0x200018e8

080072c0 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
 80072ca:	460b      	mov	r3, r1
 80072cc:	71bb      	strb	r3, [r7, #6]
 80072ce:	4613      	mov	r3, r2
 80072d0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80072d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	db48      	blt.n	800736c <ssd1306_DrawPixel+0xac>
 80072da:	79bb      	ldrb	r3, [r7, #6]
 80072dc:	2b3f      	cmp	r3, #63	; 0x3f
 80072de:	d845      	bhi.n	800736c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80072e0:	4b25      	ldr	r3, [pc, #148]	; (8007378 <ssd1306_DrawPixel+0xb8>)
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d006      	beq.n	80072f6 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80072e8:	797b      	ldrb	r3, [r7, #5]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80072f6:	797b      	ldrb	r3, [r7, #5]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d11a      	bne.n	8007332 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80072fc:	79fa      	ldrb	r2, [r7, #7]
 80072fe:	79bb      	ldrb	r3, [r7, #6]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	b2d8      	uxtb	r0, r3
 8007304:	4603      	mov	r3, r0
 8007306:	01db      	lsls	r3, r3, #7
 8007308:	4413      	add	r3, r2
 800730a:	4a1c      	ldr	r2, [pc, #112]	; (800737c <ssd1306_DrawPixel+0xbc>)
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	b25a      	sxtb	r2, r3
 8007310:	79bb      	ldrb	r3, [r7, #6]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2101      	movs	r1, #1
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	b25b      	sxtb	r3, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	b259      	sxtb	r1, r3
 8007322:	79fa      	ldrb	r2, [r7, #7]
 8007324:	4603      	mov	r3, r0
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	4413      	add	r3, r2
 800732a:	b2c9      	uxtb	r1, r1
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <ssd1306_DrawPixel+0xbc>)
 800732e:	54d1      	strb	r1, [r2, r3]
 8007330:	e01d      	b.n	800736e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007332:	79fa      	ldrb	r2, [r7, #7]
 8007334:	79bb      	ldrb	r3, [r7, #6]
 8007336:	08db      	lsrs	r3, r3, #3
 8007338:	b2d8      	uxtb	r0, r3
 800733a:	4603      	mov	r3, r0
 800733c:	01db      	lsls	r3, r3, #7
 800733e:	4413      	add	r3, r2
 8007340:	4a0e      	ldr	r2, [pc, #56]	; (800737c <ssd1306_DrawPixel+0xbc>)
 8007342:	5cd3      	ldrb	r3, [r2, r3]
 8007344:	b25a      	sxtb	r2, r3
 8007346:	79bb      	ldrb	r3, [r7, #6]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	2101      	movs	r1, #1
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	b25b      	sxtb	r3, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	b25b      	sxtb	r3, r3
 8007358:	4013      	ands	r3, r2
 800735a:	b259      	sxtb	r1, r3
 800735c:	79fa      	ldrb	r2, [r7, #7]
 800735e:	4603      	mov	r3, r0
 8007360:	01db      	lsls	r3, r3, #7
 8007362:	4413      	add	r3, r2
 8007364:	b2c9      	uxtb	r1, r1
 8007366:	4a05      	ldr	r2, [pc, #20]	; (800737c <ssd1306_DrawPixel+0xbc>)
 8007368:	54d1      	strb	r1, [r2, r3]
 800736a:	e000      	b.n	800736e <ssd1306_DrawPixel+0xae>
        return;
 800736c:	bf00      	nop
    }
}
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20001ce8 	.word	0x20001ce8
 800737c:	200018e8 	.word	0x200018e8

08007380 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	4604      	mov	r4, r0
 8007388:	1d38      	adds	r0, r7, #4
 800738a:	e880 0006 	stmia.w	r0, {r1, r2}
 800738e:	461a      	mov	r2, r3
 8007390:	4623      	mov	r3, r4
 8007392:	73fb      	strb	r3, [r7, #15]
 8007394:	4613      	mov	r3, r2
 8007396:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8007398:	4b38      	ldr	r3, [pc, #224]	; (800747c <ssd1306_WriteChar+0xfc>)
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	793b      	ldrb	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	2b7f      	cmp	r3, #127	; 0x7f
 80073a4:	dc06      	bgt.n	80073b4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80073a6:	4b35      	ldr	r3, [pc, #212]	; (800747c <ssd1306_WriteChar+0xfc>)
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	461a      	mov	r2, r3
 80073ac:	797b      	ldrb	r3, [r7, #5]
 80073ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80073b0:	2b3f      	cmp	r3, #63	; 0x3f
 80073b2:	dd01      	ble.n	80073b8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e05d      	b.n	8007474 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e04c      	b.n	8007458 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	3b20      	subs	r3, #32
 80073c4:	7979      	ldrb	r1, [r7, #5]
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4619      	mov	r1, r3
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	440b      	add	r3, r1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e034      	b.n	8007448 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d012      	beq.n	8007414 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80073ee:	4b23      	ldr	r3, [pc, #140]	; (800747c <ssd1306_WriteChar+0xfc>)
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	4413      	add	r3, r2
 80073fa:	b2d8      	uxtb	r0, r3
 80073fc:	4b1f      	ldr	r3, [pc, #124]	; (800747c <ssd1306_WriteChar+0xfc>)
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	4413      	add	r3, r2
 8007408:	b2db      	uxtb	r3, r3
 800740a:	7bba      	ldrb	r2, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	f7ff ff57 	bl	80072c0 <ssd1306_DrawPixel>
 8007412:	e016      	b.n	8007442 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <ssd1306_WriteChar+0xfc>)
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	4413      	add	r3, r2
 8007420:	b2d8      	uxtb	r0, r3
 8007422:	4b16      	ldr	r3, [pc, #88]	; (800747c <ssd1306_WriteChar+0xfc>)
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4413      	add	r3, r2
 800742e:	b2d9      	uxtb	r1, r3
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	f7ff ff3f 	bl	80072c0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	3301      	adds	r3, #1
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	793b      	ldrb	r3, [r7, #4]
 800744a:	461a      	mov	r2, r3
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4293      	cmp	r3, r2
 8007450:	d3c5      	bcc.n	80073de <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	3301      	adds	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	797b      	ldrb	r3, [r7, #5]
 800745a:	461a      	mov	r2, r3
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4293      	cmp	r3, r2
 8007460:	d3ad      	bcc.n	80073be <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007462:	4b06      	ldr	r3, [pc, #24]	; (800747c <ssd1306_WriteChar+0xfc>)
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	793b      	ldrb	r3, [r7, #4]
 8007468:	b29b      	uxth	r3, r3
 800746a:	4413      	add	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	4b03      	ldr	r3, [pc, #12]	; (800747c <ssd1306_WriteChar+0xfc>)
 8007470:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3724      	adds	r7, #36	; 0x24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}
 800747c:	20001ce8 	.word	0x20001ce8

08007480 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	1d38      	adds	r0, r7, #4
 800748a:	e880 0006 	stmia.w	r0, {r1, r2}
 800748e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8007490:	e012      	b.n	80074b8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	7818      	ldrb	r0, [r3, #0]
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	1d3a      	adds	r2, r7, #4
 800749a:	ca06      	ldmia	r2, {r1, r2}
 800749c:	f7ff ff70 	bl	8007380 <ssd1306_WriteChar>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d002      	beq.n	80074b2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	e008      	b.n	80074c4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
    while (*str)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e8      	bne.n	8007492 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	460a      	mov	r2, r1
 80074d6:	71fb      	strb	r3, [r7, #7]
 80074d8:	4613      	mov	r3, r2
 80074da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <ssd1306_SetCursor+0x2c>)
 80074e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80074e4:	79bb      	ldrb	r3, [r7, #6]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <ssd1306_SetCursor+0x2c>)
 80074ea:	805a      	strh	r2, [r3, #2]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	20001ce8 	.word	0x20001ce8
 80074fc:	00000000 	.word	0x00000000

08007500 <Conversion_ADC1>:

//Функция преобразования данных АЦП
//Принимает "ADC_value" - значение АЦП
//Возвращает преобразованное значение в амперах
double Conversion_ADC1(uint16_t ADC_value)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	80fb      	strh	r3, [r7, #6]
	//The average point is 1605mV
	//Sensitivity 66mV
	//Gain 1.56

	double Amps = 0;
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Voltage = 0;
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	const double Resolution = 0.8056640625;
 8007522:	a335      	add	r3, pc, #212	; (adr r3, 80075f8 <Conversion_ADC1+0xf8>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Voltage = ADC_value * Resolution;
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	4618      	mov	r0, r3
 8007530:	f7f8 ff72 	bl	8000418 <__aeabi_i2d>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800753c:	f7f8 ffd6 	bl	80004ec <__aeabi_dmul>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	e9c7 2304 	strd	r2, r3, [r7, #16]

	(Voltage >= 1605) ? (Amps += ((Voltage - 1605)/66)*1.56) : (Amps += ((1605 - Voltage)/66)*1.56);
 8007548:	a32d      	add	r3, pc, #180	; (adr r3, 8007600 <Conversion_ADC1+0x100>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007552:	f7f9 fa51 	bl	80009f8 <__aeabi_dcmpge>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d023      	beq.n	80075a4 <Conversion_ADC1+0xa4>
 800755c:	a328      	add	r3, pc, #160	; (adr r3, 8007600 <Conversion_ADC1+0x100>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007566:	f7f8 fe09 	bl	800017c <__aeabi_dsub>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	4b26      	ldr	r3, [pc, #152]	; (8007610 <Conversion_ADC1+0x110>)
 8007578:	f7f9 f8e2 	bl	8000740 <__aeabi_ddiv>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4610      	mov	r0, r2
 8007582:	4619      	mov	r1, r3
 8007584:	a320      	add	r3, pc, #128	; (adr r3, 8007608 <Conversion_ADC1+0x108>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f8 ffaf 	bl	80004ec <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007596:	f7f8 fdf3 	bl	8000180 <__adddf3>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80075a2:	e022      	b.n	80075ea <Conversion_ADC1+0xea>
 80075a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075a8:	a115      	add	r1, pc, #84	; (adr r1, 8007600 <Conversion_ADC1+0x100>)
 80075aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ae:	f7f8 fde5 	bl	800017c <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	4b14      	ldr	r3, [pc, #80]	; (8007610 <Conversion_ADC1+0x110>)
 80075c0:	f7f9 f8be 	bl	8000740 <__aeabi_ddiv>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4610      	mov	r0, r2
 80075ca:	4619      	mov	r1, r3
 80075cc:	a30e      	add	r3, pc, #56	; (adr r3, 8007608 <Conversion_ADC1+0x108>)
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f7f8 ff8b 	bl	80004ec <__aeabi_dmul>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80075de:	f7f8 fdcf 	bl	8000180 <__adddf3>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return Amps;
 80075ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80075ee:	4610      	mov	r0, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	00000000 	.word	0x00000000
 80075fc:	3fe9c800 	.word	0x3fe9c800
 8007600:	00000000 	.word	0x00000000
 8007604:	40991400 	.word	0x40991400
 8007608:	8f5c28f6 	.word	0x8f5c28f6
 800760c:	3ff8f5c2 	.word	0x3ff8f5c2
 8007610:	40508000 	.word	0x40508000

08007614 <Сurrent_Сomparison>:
//Функция сравнения значения тока уставки с действующими значениями тока на фазах
void Сurrent_Сomparison(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
    if(cnt == 10)
 8007618:	4b39      	ldr	r3, [pc, #228]	; (8007700 <Сurrent_Сomparison+0xec>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b0a      	cmp	r3, #10
 800761e:	d141      	bne.n	80076a4 <Сurrent_Сomparison+0x90>
    {
    	run_Сomparison = true;
 8007620:	4b38      	ldr	r3, [pc, #224]	; (8007704 <Сurrent_Сomparison+0xf0>)
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]

    	Amps[0] = adcValue[0]/10;
 8007626:	4b38      	ldr	r3, [pc, #224]	; (8007708 <Сurrent_Сomparison+0xf4>)
 8007628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	4b36      	ldr	r3, [pc, #216]	; (800770c <Сurrent_Сomparison+0xf8>)
 8007632:	f7f9 f885 	bl	8000740 <__aeabi_ddiv>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4935      	ldr	r1, [pc, #212]	; (8007710 <Сurrent_Сomparison+0xfc>)
 800763c:	e9c1 2300 	strd	r2, r3, [r1]
    	Amps[1] = adcValue[1]/10;
 8007640:	4b31      	ldr	r3, [pc, #196]	; (8007708 <Сurrent_Сomparison+0xf4>)
 8007642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	4b30      	ldr	r3, [pc, #192]	; (800770c <Сurrent_Сomparison+0xf8>)
 800764c:	f7f9 f878 	bl	8000740 <__aeabi_ddiv>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	492e      	ldr	r1, [pc, #184]	; (8007710 <Сurrent_Сomparison+0xfc>)
 8007656:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	Amps[2] = adcValue[2]/10;
 800765a:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <Сurrent_Сomparison+0xf4>)
 800765c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	4b29      	ldr	r3, [pc, #164]	; (800770c <Сurrent_Сomparison+0xf8>)
 8007666:	f7f9 f86b 	bl	8000740 <__aeabi_ddiv>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4928      	ldr	r1, [pc, #160]	; (8007710 <Сurrent_Сomparison+0xfc>)
 8007670:	e9c1 2304 	strd	r2, r3, [r1, #16]

      	adcValue[0] = 0.0;
 8007674:	4924      	ldr	r1, [pc, #144]	; (8007708 <Сurrent_Сomparison+0xf4>)
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	e9c1 2300 	strd	r2, r3, [r1]
      	adcValue[1] = 0.0;
 8007682:	4921      	ldr	r1, [pc, #132]	; (8007708 <Сurrent_Сomparison+0xf4>)
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      	adcValue[2] = 0.0;
 8007690:	491d      	ldr	r1, [pc, #116]	; (8007708 <Сurrent_Сomparison+0xf4>)
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	e9c1 2304 	strd	r2, r3, [r1, #16]
//    	snprintf(trans_str, 63, "%.2fA\n", Amps[0]);
//    	SEND_str(trans_str);

    	cnt = 0;
 800769e:	4b18      	ldr	r3, [pc, #96]	; (8007700 <Сurrent_Сomparison+0xec>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
    }

    if(run_Сomparison)
 80076a4:	4b17      	ldr	r3, [pc, #92]	; (8007704 <Сurrent_Сomparison+0xf0>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d027      	beq.n	80076fc <Сurrent_Сomparison+0xe8>
    	(Amps[0] > reserve_Current || Amps[1] > reserve_Current || Amps[2] > reserve_Current) ? (Stop = true) : (Stop = false);
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <Сurrent_Сomparison+0xfc>)
 80076ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b2:	4b18      	ldr	r3, [pc, #96]	; (8007714 <Сurrent_Сomparison+0x100>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f7f9 f9a8 	bl	8000a0c <__aeabi_dcmpgt>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d115      	bne.n	80076ee <Сurrent_Сomparison+0xda>
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <Сurrent_Сomparison+0xfc>)
 80076c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80076c8:	4b12      	ldr	r3, [pc, #72]	; (8007714 <Сurrent_Сomparison+0x100>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f9 f99d 	bl	8000a0c <__aeabi_dcmpgt>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <Сurrent_Сomparison+0xda>
 80076d8:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <Сurrent_Сomparison+0xfc>)
 80076da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076de:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <Сurrent_Сomparison+0x100>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f9 f992 	bl	8000a0c <__aeabi_dcmpgt>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <Сurrent_Сomparison+0xe2>
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <Сurrent_Сomparison+0x104>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
}
 80076f4:	e002      	b.n	80076fc <Сurrent_Сomparison+0xe8>
    	(Amps[0] > reserve_Current || Amps[1] > reserve_Current || Amps[2] > reserve_Current) ? (Stop = true) : (Stop = false);
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <Сurrent_Сomparison+0x104>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000bd0 	.word	0x20000bd0
 8007704:	20000bd1 	.word	0x20000bd1
 8007708:	20000bb0 	.word	0x20000bb0
 800770c:	40240000 	.word	0x40240000
 8007710:	20000b88 	.word	0x20000b88
 8007714:	20000bc8 	.word	0x20000bc8
 8007718:	20000b70 	.word	0x20000b70

0800771c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <HAL_Init+0x28>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a07      	ldr	r2, [pc, #28]	; (8007744 <HAL_Init+0x28>)
 8007726:	f043 0310 	orr.w	r3, r3, #16
 800772a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800772c:	2003      	movs	r0, #3
 800772e:	f000 fd1f 	bl	8008170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007732:	200f      	movs	r0, #15
 8007734:	f000 f808 	bl	8007748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007738:	f7fb f9e2 	bl	8002b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40022000 	.word	0x40022000

08007748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_InitTick+0x54>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <HAL_InitTick+0x58>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	4619      	mov	r1, r3
 800775a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800775e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007762:	fbb2 f3f3 	udiv	r3, r2, r3
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fd3b 	bl	80081e2 <HAL_SYSTICK_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e00e      	b.n	8007794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d80a      	bhi.n	8007792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800777c:	2200      	movs	r2, #0
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	f04f 30ff 	mov.w	r0, #4294967295
 8007784:	f000 fcff 	bl	8008186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007788:	4a06      	ldr	r2, [pc, #24]	; (80077a4 <HAL_InitTick+0x5c>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	2000000c 	.word	0x2000000c
 80077a0:	20000020 	.word	0x20000020
 80077a4:	2000001c 	.word	0x2000001c

080077a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_IncTick+0x1c>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <HAL_IncTick+0x20>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4413      	add	r3, r2
 80077b8:	4a03      	ldr	r2, [pc, #12]	; (80077c8 <HAL_IncTick+0x20>)
 80077ba:	6013      	str	r3, [r2, #0]
}
 80077bc:	bf00      	nop
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr
 80077c4:	20000020 	.word	0x20000020
 80077c8:	20001cf0 	.word	0x20001cf0

080077cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return uwTick;
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <HAL_GetTick+0x10>)
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr
 80077dc:	20001cf0 	.word	0x20001cf0

080077e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077e8:	f7ff fff0 	bl	80077cc <HAL_GetTick>
 80077ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d005      	beq.n	8007806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <HAL_Delay+0x44>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007806:	bf00      	nop
 8007808:	f7ff ffe0 	bl	80077cc <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	429a      	cmp	r2, r3
 8007816:	d8f7      	bhi.n	8007808 <HAL_Delay+0x28>
  {
  }
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000020 	.word	0x20000020

08007828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e0be      	b.n	80079c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa f96a 	bl	8001b40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 faf5 	bl	8007e5c <ADC_ConversionStop_Disable>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	f040 8099 	bne.w	80079b6 <HAL_ADC_Init+0x18e>
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 8095 	bne.w	80079b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007894:	f023 0302 	bic.w	r3, r3, #2
 8007898:	f043 0202 	orr.w	r2, r3, #2
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80078a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7b1b      	ldrb	r3, [r3, #12]
 80078ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80078b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c0:	d003      	beq.n	80078ca <HAL_ADC_Init+0xa2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d102      	bne.n	80078d0 <HAL_ADC_Init+0xa8>
 80078ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ce:	e000      	b.n	80078d2 <HAL_ADC_Init+0xaa>
 80078d0:	2300      	movs	r3, #0
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	7d1b      	ldrb	r3, [r3, #20]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d119      	bne.n	8007914 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7b1b      	ldrb	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	035a      	lsls	r2, r3, #13
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	e00b      	b.n	8007914 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	4b28      	ldr	r3, [pc, #160]	; (80079d0 <HAL_ADC_Init+0x1a8>)
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	430b      	orrs	r3, r1
 800793a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d003      	beq.n	800794e <HAL_ADC_Init+0x126>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d104      	bne.n	8007958 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	3b01      	subs	r3, #1
 8007954:	051b      	lsls	r3, r3, #20
 8007956:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	430a      	orrs	r2, r1
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <HAL_ADC_Init+0x1ac>)
 8007974:	4013      	ands	r3, r2
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	d10b      	bne.n	8007994 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	f043 0201 	orr.w	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007992:	e018      	b.n	80079c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f023 0312 	bic.w	r3, r3, #18
 800799c:	f043 0210 	orr.w	r2, r3, #16
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	f043 0201 	orr.w	r2, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80079b4:	e007      	b.n	80079c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	f043 0210 	orr.w	r2, r3, #16
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	ffe1f7fd 	.word	0xffe1f7fd
 80079d4:	ff1f0efe 	.word	0xff1f0efe

080079d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a64      	ldr	r2, [pc, #400]	; (8007b80 <HAL_ADC_Start_DMA+0x1a8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d004      	beq.n	80079fc <HAL_ADC_Start_DMA+0x24>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a63      	ldr	r2, [pc, #396]	; (8007b84 <HAL_ADC_Start_DMA+0x1ac>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d106      	bne.n	8007a0a <HAL_ADC_Start_DMA+0x32>
 80079fc:	4b60      	ldr	r3, [pc, #384]	; (8007b80 <HAL_ADC_Start_DMA+0x1a8>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 80b3 	bne.w	8007b70 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_ADC_Start_DMA+0x40>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0ae      	b.n	8007b76 <HAL_ADC_Start_DMA+0x19e>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f9c1 	bl	8007da8 <ADC_Enable>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 809a 	bne.w	8007b66 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4e      	ldr	r2, [pc, #312]	; (8007b84 <HAL_ADC_Start_DMA+0x1ac>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d105      	bne.n	8007a5c <HAL_ADC_Start_DMA+0x84>
 8007a50:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <HAL_ADC_Start_DMA+0x1a8>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d115      	bne.n	8007a88 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d026      	beq.n	8007ac4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007a86:	e01d      	b.n	8007ac4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a39      	ldr	r2, [pc, #228]	; (8007b80 <HAL_ADC_Start_DMA+0x1a8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d004      	beq.n	8007aa8 <HAL_ADC_Start_DMA+0xd0>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a38      	ldr	r2, [pc, #224]	; (8007b84 <HAL_ADC_Start_DMA+0x1ac>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d10d      	bne.n	8007ac4 <HAL_ADC_Start_DMA+0xec>
 8007aa8:	4b35      	ldr	r3, [pc, #212]	; (8007b80 <HAL_ADC_Start_DMA+0x1a8>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007abc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d006      	beq.n	8007ade <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	f023 0206 	bic.w	r2, r3, #6
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8007adc:	e002      	b.n	8007ae4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	4a25      	ldr	r2, [pc, #148]	; (8007b88 <HAL_ADC_Start_DMA+0x1b0>)
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	4a24      	ldr	r2, [pc, #144]	; (8007b8c <HAL_ADC_Start_DMA+0x1b4>)
 8007afa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <HAL_ADC_Start_DMA+0x1b8>)
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0202 	mvn.w	r2, #2
 8007b0c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b1c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a18      	ldr	r0, [r3, #32]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	334c      	adds	r3, #76	; 0x4c
 8007b28:	4619      	mov	r1, r3
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f000 fbbf 	bl	80082b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007b3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007b40:	d108      	bne.n	8007b54 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007b50:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007b52:	e00f      	b.n	8007b74 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b62:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007b64:	e006      	b.n	8007b74 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8007b6e:	e001      	b.n	8007b74 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40012400 	.word	0x40012400
 8007b84:	40012800 	.word	0x40012800
 8007b88:	08007edf 	.word	0x08007edf
 8007b8c:	08007f5b 	.word	0x08007f5b
 8007b90:	08007f77 	.word	0x08007f77

08007b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_ADC_ConfigChannel+0x20>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e0dc      	b.n	8007d92 <HAL_ADC_ConfigChannel+0x1da>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b06      	cmp	r3, #6
 8007be6:	d81c      	bhi.n	8007c22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3b05      	subs	r3, #5
 8007bfa:	221f      	movs	r2, #31
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	43db      	mvns	r3, r3
 8007c02:	4019      	ands	r1, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	3b05      	subs	r3, #5
 8007c14:	fa00 f203 	lsl.w	r2, r0, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8007c20:	e03c      	b.n	8007c9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b0c      	cmp	r3, #12
 8007c28:	d81c      	bhi.n	8007c64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	3b23      	subs	r3, #35	; 0x23
 8007c3c:	221f      	movs	r2, #31
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	4019      	ands	r1, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	3b23      	subs	r3, #35	; 0x23
 8007c56:	fa00 f203 	lsl.w	r2, r0, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
 8007c62:	e01b      	b.n	8007c9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	3b41      	subs	r3, #65	; 0x41
 8007c76:	221f      	movs	r2, #31
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	4019      	ands	r1, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3b41      	subs	r3, #65	; 0x41
 8007c90:	fa00 f203 	lsl.w	r2, r0, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d91c      	bls.n	8007cde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68d9      	ldr	r1, [r3, #12]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	3b1e      	subs	r3, #30
 8007cb6:	2207      	movs	r2, #7
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	4019      	ands	r1, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	6898      	ldr	r0, [r3, #8]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	4413      	add	r3, r2
 8007cce:	3b1e      	subs	r3, #30
 8007cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	60da      	str	r2, [r3, #12]
 8007cdc:	e019      	b.n	8007d12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6919      	ldr	r1, [r3, #16]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	4413      	add	r3, r2
 8007cee:	2207      	movs	r2, #7
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	4019      	ands	r1, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6898      	ldr	r0, [r3, #8]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	4413      	add	r3, r2
 8007d06:	fa00 f203 	lsl.w	r2, r0, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b10      	cmp	r3, #16
 8007d18:	d003      	beq.n	8007d22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007d1e:	2b11      	cmp	r3, #17
 8007d20:	d132      	bne.n	8007d88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_ADC_ConfigChannel+0x1e4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d125      	bne.n	8007d78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d126      	bne.n	8007d88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007d48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d11a      	bne.n	8007d88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <HAL_ADC_ConfigChannel+0x1e8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <HAL_ADC_ConfigChannel+0x1ec>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	0c9a      	lsrs	r2, r3, #18
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007d68:	e002      	b.n	8007d70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f9      	bne.n	8007d6a <HAL_ADC_ConfigChannel+0x1b2>
 8007d76:	e007      	b.n	8007d88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	40012400 	.word	0x40012400
 8007da0:	2000000c 	.word	0x2000000c
 8007da4:	431bde83 	.word	0x431bde83

08007da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d040      	beq.n	8007e48 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007dd6:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <ADC_Enable+0xac>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <ADC_Enable+0xb0>)
 8007ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8007de0:	0c9b      	lsrs	r3, r3, #18
 8007de2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007de4:	e002      	b.n	8007dec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f9      	bne.n	8007de6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007df2:	f7ff fceb 	bl	80077cc <HAL_GetTick>
 8007df6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007df8:	e01f      	b.n	8007e3a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007dfa:	f7ff fce7 	bl	80077cc <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d918      	bls.n	8007e3a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d011      	beq.n	8007e3a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	f043 0210 	orr.w	r2, r3, #16
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	f043 0201 	orr.w	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e007      	b.n	8007e4a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d1d8      	bne.n	8007dfa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	2000000c 	.word	0x2000000c
 8007e58:	431bde83 	.word	0x431bde83

08007e5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d12e      	bne.n	8007ed4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e86:	f7ff fca1 	bl	80077cc <HAL_GetTick>
 8007e8a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007e8c:	e01b      	b.n	8007ec6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007e8e:	f7ff fc9d 	bl	80077cc <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d914      	bls.n	8007ec6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10d      	bne.n	8007ec6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	f043 0210 	orr.w	r2, r3, #16
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f043 0201 	orr.w	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e007      	b.n	8007ed6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d0dc      	beq.n	8007e8e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d127      	bne.n	8007f48 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007f0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007f12:	d115      	bne.n	8007f40 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d111      	bne.n	8007f40 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	f043 0201 	orr.w	r2, r3, #1
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7fa fcf5 	bl	8002930 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007f46:	e004      	b.n	8007f52 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fe13 	bl	8007b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	f043 0204 	orr.w	r2, r3, #4
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fe02 	bl	8007ba6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fde:	4a04      	ldr	r2, [pc, #16]	; (8007ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	60d3      	str	r3, [r2, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	e000ed00 	.word	0xe000ed00

08007ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <__NVIC_GetPriorityGrouping+0x18>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	f003 0307 	and.w	r3, r3, #7
}
 8008002:	4618      	mov	r0, r3
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	e000ed00 	.word	0xe000ed00

08008010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	db0b      	blt.n	800803a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	f003 021f 	and.w	r2, r3, #31
 8008028:	4906      	ldr	r1, [pc, #24]	; (8008044 <__NVIC_EnableIRQ+0x34>)
 800802a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	2001      	movs	r0, #1
 8008032:	fa00 f202 	lsl.w	r2, r0, r2
 8008036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr
 8008044:	e000e100 	.word	0xe000e100

08008048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	6039      	str	r1, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008058:	2b00      	cmp	r3, #0
 800805a:	db0a      	blt.n	8008072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	490c      	ldr	r1, [pc, #48]	; (8008094 <__NVIC_SetPriority+0x4c>)
 8008062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008066:	0112      	lsls	r2, r2, #4
 8008068:	b2d2      	uxtb	r2, r2
 800806a:	440b      	add	r3, r1
 800806c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008070:	e00a      	b.n	8008088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4908      	ldr	r1, [pc, #32]	; (8008098 <__NVIC_SetPriority+0x50>)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	3b04      	subs	r3, #4
 8008080:	0112      	lsls	r2, r2, #4
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	440b      	add	r3, r1
 8008086:	761a      	strb	r2, [r3, #24]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	e000e100 	.word	0xe000e100
 8008098:	e000ed00 	.word	0xe000ed00

0800809c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800809c:	b480      	push	{r7}
 800809e:	b089      	sub	sp, #36	; 0x24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f1c3 0307 	rsb	r3, r3, #7
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	bf28      	it	cs
 80080ba:	2304      	movcs	r3, #4
 80080bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2b06      	cmp	r3, #6
 80080c4:	d902      	bls.n	80080cc <NVIC_EncodePriority+0x30>
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	3b03      	subs	r3, #3
 80080ca:	e000      	b.n	80080ce <NVIC_EncodePriority+0x32>
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	43da      	mvns	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	401a      	ands	r2, r3
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080e4:	f04f 31ff 	mov.w	r1, #4294967295
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	43d9      	mvns	r1, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080f4:	4313      	orrs	r3, r2
         );
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3724      	adds	r7, #36	; 0x24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008104:	f3bf 8f4f 	dsb	sy
}
 8008108:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <__NVIC_SystemReset+0x24>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008112:	4904      	ldr	r1, [pc, #16]	; (8008124 <__NVIC_SystemReset+0x24>)
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__NVIC_SystemReset+0x28>)
 8008116:	4313      	orrs	r3, r2
 8008118:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800811a:	f3bf 8f4f 	dsb	sy
}
 800811e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <__NVIC_SystemReset+0x20>
 8008124:	e000ed00 	.word	0xe000ed00
 8008128:	05fa0004 	.word	0x05fa0004

0800812c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3b01      	subs	r3, #1
 8008138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800813c:	d301      	bcc.n	8008142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800813e:	2301      	movs	r3, #1
 8008140:	e00f      	b.n	8008162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008142:	4a0a      	ldr	r2, [pc, #40]	; (800816c <SysTick_Config+0x40>)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3b01      	subs	r3, #1
 8008148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800814a:	210f      	movs	r1, #15
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	f7ff ff7a 	bl	8008048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <SysTick_Config+0x40>)
 8008156:	2200      	movs	r2, #0
 8008158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800815a:	4b04      	ldr	r3, [pc, #16]	; (800816c <SysTick_Config+0x40>)
 800815c:	2207      	movs	r2, #7
 800815e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	e000e010 	.word	0xe000e010

08008170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff ff17 	bl	8007fac <__NVIC_SetPriorityGrouping>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	4603      	mov	r3, r0
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008198:	f7ff ff2c 	bl	8007ff4 <__NVIC_GetPriorityGrouping>
 800819c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	6978      	ldr	r0, [r7, #20]
 80081a4:	f7ff ff7a 	bl	800809c <NVIC_EncodePriority>
 80081a8:	4602      	mov	r2, r0
 80081aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff ff49 	bl	8008048 <__NVIC_SetPriority>
}
 80081b6:	bf00      	nop
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	4603      	mov	r3, r0
 80081c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff ff1f 	bl	8008010 <__NVIC_EnableIRQ>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80081de:	f7ff ff8f 	bl	8008100 <__NVIC_SystemReset>

080081e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff ff9e 	bl	800812c <SysTick_Config>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e043      	b.n	800829a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	4b22      	ldr	r3, [pc, #136]	; (80082a4 <HAL_DMA_Init+0xa8>)
 800821a:	4413      	add	r3, r2
 800821c:	4a22      	ldr	r2, [pc, #136]	; (80082a8 <HAL_DMA_Init+0xac>)
 800821e:	fba2 2303 	umull	r2, r3, r2, r3
 8008222:	091b      	lsrs	r3, r3, #4
 8008224:	009a      	lsls	r2, r3, #2
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a1f      	ldr	r2, [pc, #124]	; (80082ac <HAL_DMA_Init+0xb0>)
 800822e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008246:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800824a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800826c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr
 80082a4:	bffdfff8 	.word	0xbffdfff8
 80082a8:	cccccccd 	.word	0xcccccccd
 80082ac:	40020000 	.word	0x40020000

080082b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_DMA_Start_IT+0x20>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e04a      	b.n	8008366 <HAL_DMA_Start_IT+0xb6>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d13a      	bne.n	8008358 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	68b9      	ldr	r1, [r7, #8]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f938 	bl	800857c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 020e 	orr.w	r2, r2, #14
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e00f      	b.n	8008346 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0204 	bic.w	r2, r2, #4
 8008334:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 020a 	orr.w	r2, r2, #10
 8008344:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e005      	b.n	8008364 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008360:	2302      	movs	r3, #2
 8008362:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	2204      	movs	r2, #4
 800838e:	409a      	lsls	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4013      	ands	r3, r2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d04f      	beq.n	8008438 <HAL_DMA_IRQHandler+0xc8>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d04a      	beq.n	8008438 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d107      	bne.n	80083c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a66      	ldr	r2, [pc, #408]	; (8008560 <HAL_DMA_IRQHandler+0x1f0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d029      	beq.n	800841e <HAL_DMA_IRQHandler+0xae>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a65      	ldr	r2, [pc, #404]	; (8008564 <HAL_DMA_IRQHandler+0x1f4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_DMA_IRQHandler+0xaa>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a63      	ldr	r2, [pc, #396]	; (8008568 <HAL_DMA_IRQHandler+0x1f8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01a      	beq.n	8008414 <HAL_DMA_IRQHandler+0xa4>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a62      	ldr	r2, [pc, #392]	; (800856c <HAL_DMA_IRQHandler+0x1fc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d012      	beq.n	800840e <HAL_DMA_IRQHandler+0x9e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a60      	ldr	r2, [pc, #384]	; (8008570 <HAL_DMA_IRQHandler+0x200>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00a      	beq.n	8008408 <HAL_DMA_IRQHandler+0x98>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a5f      	ldr	r2, [pc, #380]	; (8008574 <HAL_DMA_IRQHandler+0x204>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d102      	bne.n	8008402 <HAL_DMA_IRQHandler+0x92>
 80083fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008400:	e00e      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 8008402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008406:	e00b      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 8008408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800840c:	e008      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 800840e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008412:	e005      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 8008414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008418:	e002      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	e000      	b.n	8008420 <HAL_DMA_IRQHandler+0xb0>
 800841e:	2304      	movs	r3, #4
 8008420:	4a55      	ldr	r2, [pc, #340]	; (8008578 <HAL_DMA_IRQHandler+0x208>)
 8008422:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8094 	beq.w	8008556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008436:	e08e      	b.n	8008556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	2202      	movs	r2, #2
 800843e:	409a      	lsls	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d056      	beq.n	80084f6 <HAL_DMA_IRQHandler+0x186>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d051      	beq.n	80084f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0320 	and.w	r3, r3, #32
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10b      	bne.n	8008478 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 020a 	bic.w	r2, r2, #10
 800846e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a38      	ldr	r2, [pc, #224]	; (8008560 <HAL_DMA_IRQHandler+0x1f0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d029      	beq.n	80084d6 <HAL_DMA_IRQHandler+0x166>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a37      	ldr	r2, [pc, #220]	; (8008564 <HAL_DMA_IRQHandler+0x1f4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d022      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x162>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a35      	ldr	r2, [pc, #212]	; (8008568 <HAL_DMA_IRQHandler+0x1f8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01a      	beq.n	80084cc <HAL_DMA_IRQHandler+0x15c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a34      	ldr	r2, [pc, #208]	; (800856c <HAL_DMA_IRQHandler+0x1fc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d012      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x156>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a32      	ldr	r2, [pc, #200]	; (8008570 <HAL_DMA_IRQHandler+0x200>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00a      	beq.n	80084c0 <HAL_DMA_IRQHandler+0x150>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a31      	ldr	r2, [pc, #196]	; (8008574 <HAL_DMA_IRQHandler+0x204>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d102      	bne.n	80084ba <HAL_DMA_IRQHandler+0x14a>
 80084b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084b8:	e00e      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084be:	e00b      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084c4:	e008      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ca:	e005      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d0:	e002      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084d2:	2320      	movs	r3, #32
 80084d4:	e000      	b.n	80084d8 <HAL_DMA_IRQHandler+0x168>
 80084d6:	2302      	movs	r3, #2
 80084d8:	4a27      	ldr	r2, [pc, #156]	; (8008578 <HAL_DMA_IRQHandler+0x208>)
 80084da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d034      	beq.n	8008556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80084f4:	e02f      	b.n	8008556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2208      	movs	r2, #8
 80084fc:	409a      	lsls	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d028      	beq.n	8008558 <HAL_DMA_IRQHandler+0x1e8>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d023      	beq.n	8008558 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 020e 	bic.w	r2, r2, #14
 800851e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008528:	2101      	movs	r1, #1
 800852a:	fa01 f202 	lsl.w	r2, r1, r2
 800852e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
    }
  }
  return;
 8008556:	bf00      	nop
 8008558:	bf00      	nop
}
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	40020008 	.word	0x40020008
 8008564:	4002001c 	.word	0x4002001c
 8008568:	40020030 	.word	0x40020030
 800856c:	40020044 	.word	0x40020044
 8008570:	40020058 	.word	0x40020058
 8008574:	4002006c 	.word	0x4002006c
 8008578:	40020000 	.word	0x40020000

0800857c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	2101      	movs	r1, #1
 8008594:	fa01 f202 	lsl.w	r2, r1, r2
 8008598:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d108      	bne.n	80085bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085ba:	e007      	b.n	80085cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	60da      	str	r2, [r3, #12]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr
	...

080085d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085d8:	b480      	push	{r7}
 80085da:	b08b      	sub	sp, #44	; 0x2c
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085e2:	2300      	movs	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80085e6:	2300      	movs	r3, #0
 80085e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085ea:	e169      	b.n	80088c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80085ec:	2201      	movs	r2, #1
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	429a      	cmp	r2, r3
 8008606:	f040 8158 	bne.w	80088ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	4a9a      	ldr	r2, [pc, #616]	; (8008878 <HAL_GPIO_Init+0x2a0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d05e      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
 8008614:	4a98      	ldr	r2, [pc, #608]	; (8008878 <HAL_GPIO_Init+0x2a0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d875      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 800861a:	4a98      	ldr	r2, [pc, #608]	; (800887c <HAL_GPIO_Init+0x2a4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d058      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
 8008620:	4a96      	ldr	r2, [pc, #600]	; (800887c <HAL_GPIO_Init+0x2a4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d86f      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 8008626:	4a96      	ldr	r2, [pc, #600]	; (8008880 <HAL_GPIO_Init+0x2a8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d052      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
 800862c:	4a94      	ldr	r2, [pc, #592]	; (8008880 <HAL_GPIO_Init+0x2a8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d869      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 8008632:	4a94      	ldr	r2, [pc, #592]	; (8008884 <HAL_GPIO_Init+0x2ac>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d04c      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
 8008638:	4a92      	ldr	r2, [pc, #584]	; (8008884 <HAL_GPIO_Init+0x2ac>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d863      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 800863e:	4a92      	ldr	r2, [pc, #584]	; (8008888 <HAL_GPIO_Init+0x2b0>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d046      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
 8008644:	4a90      	ldr	r2, [pc, #576]	; (8008888 <HAL_GPIO_Init+0x2b0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d85d      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 800864a:	2b12      	cmp	r3, #18
 800864c:	d82a      	bhi.n	80086a4 <HAL_GPIO_Init+0xcc>
 800864e:	2b12      	cmp	r3, #18
 8008650:	d859      	bhi.n	8008706 <HAL_GPIO_Init+0x12e>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <HAL_GPIO_Init+0x80>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	080086d3 	.word	0x080086d3
 800865c:	080086ad 	.word	0x080086ad
 8008660:	080086bf 	.word	0x080086bf
 8008664:	08008701 	.word	0x08008701
 8008668:	08008707 	.word	0x08008707
 800866c:	08008707 	.word	0x08008707
 8008670:	08008707 	.word	0x08008707
 8008674:	08008707 	.word	0x08008707
 8008678:	08008707 	.word	0x08008707
 800867c:	08008707 	.word	0x08008707
 8008680:	08008707 	.word	0x08008707
 8008684:	08008707 	.word	0x08008707
 8008688:	08008707 	.word	0x08008707
 800868c:	08008707 	.word	0x08008707
 8008690:	08008707 	.word	0x08008707
 8008694:	08008707 	.word	0x08008707
 8008698:	08008707 	.word	0x08008707
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	4a79      	ldr	r2, [pc, #484]	; (800888c <HAL_GPIO_Init+0x2b4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80086aa:	e02c      	b.n	8008706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	623b      	str	r3, [r7, #32]
          break;
 80086b2:	e029      	b.n	8008708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	3304      	adds	r3, #4
 80086ba:	623b      	str	r3, [r7, #32]
          break;
 80086bc:	e024      	b.n	8008708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	3308      	adds	r3, #8
 80086c4:	623b      	str	r3, [r7, #32]
          break;
 80086c6:	e01f      	b.n	8008708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	330c      	adds	r3, #12
 80086ce:	623b      	str	r3, [r7, #32]
          break;
 80086d0:	e01a      	b.n	8008708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80086da:	2304      	movs	r3, #4
 80086dc:	623b      	str	r3, [r7, #32]
          break;
 80086de:	e013      	b.n	8008708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086e8:	2308      	movs	r3, #8
 80086ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	611a      	str	r2, [r3, #16]
          break;
 80086f2:	e009      	b.n	8008708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086f4:	2308      	movs	r3, #8
 80086f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	615a      	str	r2, [r3, #20]
          break;
 80086fe:	e003      	b.n	8008708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008700:	2300      	movs	r3, #0
 8008702:	623b      	str	r3, [r7, #32]
          break;
 8008704:	e000      	b.n	8008708 <HAL_GPIO_Init+0x130>
          break;
 8008706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d801      	bhi.n	8008712 <HAL_GPIO_Init+0x13a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	e001      	b.n	8008716 <HAL_GPIO_Init+0x13e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2bff      	cmp	r3, #255	; 0xff
 800871c:	d802      	bhi.n	8008724 <HAL_GPIO_Init+0x14c>
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	e002      	b.n	800872a <HAL_GPIO_Init+0x152>
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	3b08      	subs	r3, #8
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	210f      	movs	r1, #15
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	fa01 f303 	lsl.w	r3, r1, r3
 8008738:	43db      	mvns	r3, r3
 800873a:	401a      	ands	r2, r3
 800873c:	6a39      	ldr	r1, [r7, #32]
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	fa01 f303 	lsl.w	r3, r1, r3
 8008744:	431a      	orrs	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 80b1 	beq.w	80088ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008758:	4b4d      	ldr	r3, [pc, #308]	; (8008890 <HAL_GPIO_Init+0x2b8>)
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	4a4c      	ldr	r2, [pc, #304]	; (8008890 <HAL_GPIO_Init+0x2b8>)
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	6193      	str	r3, [r2, #24]
 8008764:	4b4a      	ldr	r3, [pc, #296]	; (8008890 <HAL_GPIO_Init+0x2b8>)
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008770:	4a48      	ldr	r2, [pc, #288]	; (8008894 <HAL_GPIO_Init+0x2bc>)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	089b      	lsrs	r3, r3, #2
 8008776:	3302      	adds	r3, #2
 8008778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800877c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	220f      	movs	r2, #15
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	43db      	mvns	r3, r3
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4013      	ands	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a40      	ldr	r2, [pc, #256]	; (8008898 <HAL_GPIO_Init+0x2c0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_GPIO_Init+0x1ec>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a3f      	ldr	r2, [pc, #252]	; (800889c <HAL_GPIO_Init+0x2c4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00d      	beq.n	80087c0 <HAL_GPIO_Init+0x1e8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3e      	ldr	r2, [pc, #248]	; (80088a0 <HAL_GPIO_Init+0x2c8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <HAL_GPIO_Init+0x1e4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3d      	ldr	r2, [pc, #244]	; (80088a4 <HAL_GPIO_Init+0x2cc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d101      	bne.n	80087b8 <HAL_GPIO_Init+0x1e0>
 80087b4:	2303      	movs	r3, #3
 80087b6:	e006      	b.n	80087c6 <HAL_GPIO_Init+0x1ee>
 80087b8:	2304      	movs	r3, #4
 80087ba:	e004      	b.n	80087c6 <HAL_GPIO_Init+0x1ee>
 80087bc:	2302      	movs	r3, #2
 80087be:	e002      	b.n	80087c6 <HAL_GPIO_Init+0x1ee>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <HAL_GPIO_Init+0x1ee>
 80087c4:	2300      	movs	r3, #0
 80087c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c8:	f002 0203 	and.w	r2, r2, #3
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	4093      	lsls	r3, r2
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80087d6:	492f      	ldr	r1, [pc, #188]	; (8008894 <HAL_GPIO_Init+0x2bc>)
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	089b      	lsrs	r3, r3, #2
 80087dc:	3302      	adds	r3, #2
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80087f0:	4b2d      	ldr	r3, [pc, #180]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	492c      	ldr	r1, [pc, #176]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	600b      	str	r3, [r1, #0]
 80087fc:	e006      	b.n	800880c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80087fe:	4b2a      	ldr	r3, [pc, #168]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	43db      	mvns	r3, r3
 8008806:	4928      	ldr	r1, [pc, #160]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008808:	4013      	ands	r3, r2
 800880a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008818:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4922      	ldr	r1, [pc, #136]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	4313      	orrs	r3, r2
 8008822:	604b      	str	r3, [r1, #4]
 8008824:	e006      	b.n	8008834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008826:	4b20      	ldr	r3, [pc, #128]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	43db      	mvns	r3, r3
 800882e:	491e      	ldr	r1, [pc, #120]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008830:	4013      	ands	r3, r2
 8008832:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008840:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	4918      	ldr	r1, [pc, #96]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	4313      	orrs	r3, r2
 800884a:	608b      	str	r3, [r1, #8]
 800884c:	e006      	b.n	800885c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800884e:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	43db      	mvns	r3, r3
 8008856:	4914      	ldr	r1, [pc, #80]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 8008858:	4013      	ands	r3, r2
 800885a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d021      	beq.n	80088ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008868:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	490e      	ldr	r1, [pc, #56]	; (80088a8 <HAL_GPIO_Init+0x2d0>)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	4313      	orrs	r3, r2
 8008872:	60cb      	str	r3, [r1, #12]
 8008874:	e021      	b.n	80088ba <HAL_GPIO_Init+0x2e2>
 8008876:	bf00      	nop
 8008878:	10320000 	.word	0x10320000
 800887c:	10310000 	.word	0x10310000
 8008880:	10220000 	.word	0x10220000
 8008884:	10210000 	.word	0x10210000
 8008888:	10120000 	.word	0x10120000
 800888c:	10110000 	.word	0x10110000
 8008890:	40021000 	.word	0x40021000
 8008894:	40010000 	.word	0x40010000
 8008898:	40010800 	.word	0x40010800
 800889c:	40010c00 	.word	0x40010c00
 80088a0:	40011000 	.word	0x40011000
 80088a4:	40011400 	.word	0x40011400
 80088a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <HAL_GPIO_Init+0x304>)
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	43db      	mvns	r3, r3
 80088b4:	4909      	ldr	r1, [pc, #36]	; (80088dc <HAL_GPIO_Init+0x304>)
 80088b6:	4013      	ands	r3, r2
 80088b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	3301      	adds	r3, #1
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f47f ae8e 	bne.w	80085ec <HAL_GPIO_Init+0x14>
  }
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	372c      	adds	r7, #44	; 0x2c
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	40010400 	.word	0x40010400

080088e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	887b      	ldrh	r3, [r7, #2]
 80088f2:	4013      	ands	r3, r2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
 80088fc:	e001      	b.n	8008902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr

0800890e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	460b      	mov	r3, r1
 8008918:	807b      	strh	r3, [r7, #2]
 800891a:	4613      	mov	r3, r2
 800891c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800891e:	787b      	ldrb	r3, [r7, #1]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008924:	887a      	ldrh	r2, [r7, #2]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800892a:	e003      	b.n	8008934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800892c:	887b      	ldrh	r3, [r7, #2]
 800892e:	041a      	lsls	r2, r3, #16
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	611a      	str	r2, [r3, #16]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr
	...

08008940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800894c:	695a      	ldr	r2, [r3, #20]
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	4013      	ands	r3, r2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d006      	beq.n	8008964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008956:	4a05      	ldr	r2, [pc, #20]	; (800896c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	4618      	mov	r0, r3
 8008960:	f7f9 feb2 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	40010400 	.word	0x40010400

08008970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e12b      	b.n	8008bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7f9 fb6a 	bl	8002070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2224      	movs	r2, #36	; 0x24
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80089d4:	f000 fffa 	bl	80099cc <HAL_RCC_GetPCLK1Freq>
 80089d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	4a81      	ldr	r2, [pc, #516]	; (8008be4 <HAL_I2C_Init+0x274>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d807      	bhi.n	80089f4 <HAL_I2C_Init+0x84>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a80      	ldr	r2, [pc, #512]	; (8008be8 <HAL_I2C_Init+0x278>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bf94      	ite	ls
 80089ec:	2301      	movls	r3, #1
 80089ee:	2300      	movhi	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	e006      	b.n	8008a02 <HAL_I2C_Init+0x92>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a7d      	ldr	r2, [pc, #500]	; (8008bec <HAL_I2C_Init+0x27c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bf94      	ite	ls
 80089fc:	2301      	movls	r3, #1
 80089fe:	2300      	movhi	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0e7      	b.n	8008bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4a78      	ldr	r2, [pc, #480]	; (8008bf0 <HAL_I2C_Init+0x280>)
 8008a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a12:	0c9b      	lsrs	r3, r3, #18
 8008a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4a6a      	ldr	r2, [pc, #424]	; (8008be4 <HAL_I2C_Init+0x274>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d802      	bhi.n	8008a44 <HAL_I2C_Init+0xd4>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	3301      	adds	r3, #1
 8008a42:	e009      	b.n	8008a58 <HAL_I2C_Init+0xe8>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
 8008a4e:	4a69      	ldr	r2, [pc, #420]	; (8008bf4 <HAL_I2C_Init+0x284>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	099b      	lsrs	r3, r3, #6
 8008a56:	3301      	adds	r3, #1
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	495c      	ldr	r1, [pc, #368]	; (8008be4 <HAL_I2C_Init+0x274>)
 8008a74:	428b      	cmp	r3, r1
 8008a76:	d819      	bhi.n	8008aac <HAL_I2C_Init+0x13c>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	1e59      	subs	r1, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a86:	1c59      	adds	r1, r3, #1
 8008a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a8c:	400b      	ands	r3, r1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_I2C_Init+0x138>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1e59      	subs	r1, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa6:	e051      	b.n	8008b4c <HAL_I2C_Init+0x1dc>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	e04f      	b.n	8008b4c <HAL_I2C_Init+0x1dc>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d111      	bne.n	8008ad8 <HAL_I2C_Init+0x168>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1e58      	subs	r0, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6859      	ldr	r1, [r3, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	440b      	add	r3, r1
 8008ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bf0c      	ite	eq
 8008ad0:	2301      	moveq	r3, #1
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	e012      	b.n	8008afe <HAL_I2C_Init+0x18e>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	1e58      	subs	r0, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6859      	ldr	r1, [r3, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	0099      	lsls	r1, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aee:	3301      	adds	r3, #1
 8008af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_I2C_Init+0x196>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e022      	b.n	8008b4c <HAL_I2C_Init+0x1dc>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10e      	bne.n	8008b2c <HAL_I2C_Init+0x1bc>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1e58      	subs	r0, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6859      	ldr	r1, [r3, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	440b      	add	r3, r1
 8008b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b20:	3301      	adds	r3, #1
 8008b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b2a:	e00f      	b.n	8008b4c <HAL_I2C_Init+0x1dc>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	1e58      	subs	r0, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6859      	ldr	r1, [r3, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	0099      	lsls	r1, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b42:	3301      	adds	r3, #1
 8008b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	6809      	ldr	r1, [r1, #0]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69da      	ldr	r2, [r3, #28]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6911      	ldr	r1, [r2, #16]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	68d2      	ldr	r2, [r2, #12]
 8008b86:	4311      	orrs	r1, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	000186a0 	.word	0x000186a0
 8008be8:	001e847f 	.word	0x001e847f
 8008bec:	003d08ff 	.word	0x003d08ff
 8008bf0:	431bde83 	.word	0x431bde83
 8008bf4:	10624dd3 	.word	0x10624dd3

08008bf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	4608      	mov	r0, r1
 8008c02:	4611      	mov	r1, r2
 8008c04:	461a      	mov	r2, r3
 8008c06:	4603      	mov	r3, r0
 8008c08:	817b      	strh	r3, [r7, #10]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	813b      	strh	r3, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c12:	f7fe fddb 	bl	80077cc <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	f040 80d9 	bne.w	8008dd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2319      	movs	r3, #25
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	496d      	ldr	r1, [pc, #436]	; (8008de4 <HAL_I2C_Mem_Write+0x1ec>)
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f971 	bl	8008f18 <I2C_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e0cc      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_I2C_Mem_Write+0x56>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e0c5      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d007      	beq.n	8008c74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2221      	movs	r2, #33	; 0x21
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a4d      	ldr	r2, [pc, #308]	; (8008de8 <HAL_I2C_Mem_Write+0x1f0>)
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cb6:	88f8      	ldrh	r0, [r7, #6]
 8008cb8:	893a      	ldrh	r2, [r7, #8]
 8008cba:	8979      	ldrh	r1, [r7, #10]
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f890 	bl	8008dec <I2C_RequestMemoryWrite>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d052      	beq.n	8008d78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e081      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f9f2 	bl	80090c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d107      	bne.n	8008cfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e06b      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d11b      	bne.n	8008d78 <HAL_I2C_Mem_Write+0x180>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1aa      	bne.n	8008cd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f9de 	bl	8009146 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d107      	bne.n	8008da8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e016      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e000      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	00100002 	.word	0x00100002
 8008de8:	ffff0000 	.word	0xffff0000

08008dec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	817b      	strh	r3, [r7, #10]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	813b      	strh	r3, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f878 	bl	8008f18 <I2C_WaitOnFlagUntilTimeout>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3c:	d103      	bne.n	8008e46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e05f      	b.n	8008f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e4a:	897b      	ldrh	r3, [r7, #10]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	6a3a      	ldr	r2, [r7, #32]
 8008e5e:	492d      	ldr	r1, [pc, #180]	; (8008f14 <I2C_RequestMemoryWrite+0x128>)
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 f8b0 	bl	8008fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e04c      	b.n	8008f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e88:	6a39      	ldr	r1, [r7, #32]
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 f91a 	bl	80090c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d107      	bne.n	8008eae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e02b      	b.n	8008f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d105      	bne.n	8008ec4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008eb8:	893b      	ldrh	r3, [r7, #8]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	611a      	str	r2, [r3, #16]
 8008ec2:	e021      	b.n	8008f08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ec4:	893b      	ldrh	r3, [r7, #8]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed4:	6a39      	ldr	r1, [r7, #32]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 f8f4 	bl	80090c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d107      	bne.n	8008efa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e005      	b.n	8008f0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008efe:	893b      	ldrh	r3, [r7, #8]
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	00010002 	.word	0x00010002

08008f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f28:	e025      	b.n	8008f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d021      	beq.n	8008f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f32:	f7fe fc4b 	bl	80077cc <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d302      	bcc.n	8008f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d116      	bne.n	8008f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	f043 0220 	orr.w	r2, r3, #32
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e023      	b.n	8008fbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10d      	bne.n	8008f9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	43da      	mvns	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bf0c      	ite	eq
 8008f92:	2301      	moveq	r3, #1
 8008f94:	2300      	movne	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	e00c      	b.n	8008fb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	43da      	mvns	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf0c      	ite	eq
 8008fae:	2301      	moveq	r3, #1
 8008fb0:	2300      	movne	r3, #0
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d0b6      	beq.n	8008f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
 8008fd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fd4:	e051      	b.n	800907a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe4:	d123      	bne.n	800902e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ffe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2220      	movs	r2, #32
 800900a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e046      	b.n	80090bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d021      	beq.n	800907a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009036:	f7fe fbc9 	bl	80077cc <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d116      	bne.n	800907a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2220      	movs	r2, #32
 8009056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f043 0220 	orr.w	r2, r3, #32
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e020      	b.n	80090bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	0c1b      	lsrs	r3, r3, #16
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b01      	cmp	r3, #1
 8009082:	d10c      	bne.n	800909e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	43da      	mvns	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4013      	ands	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	bf14      	ite	ne
 8009096:	2301      	movne	r3, #1
 8009098:	2300      	moveq	r3, #0
 800909a:	b2db      	uxtb	r3, r3
 800909c:	e00b      	b.n	80090b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	43da      	mvns	r2, r3
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4013      	ands	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bf14      	ite	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	2300      	moveq	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d18d      	bne.n	8008fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090d0:	e02d      	b.n	800912e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 f878 	bl	80091c8 <I2C_IsAcknowledgeFailed>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e02d      	b.n	800913e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e8:	d021      	beq.n	800912e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ea:	f7fe fb6f 	bl	80077cc <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d302      	bcc.n	8009100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d116      	bne.n	800912e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f043 0220 	orr.w	r2, r3, #32
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e007      	b.n	800913e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d1ca      	bne.n	80090d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009152:	e02d      	b.n	80091b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 f837 	bl	80091c8 <I2C_IsAcknowledgeFailed>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e02d      	b.n	80091c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916a:	d021      	beq.n	80091b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916c:	f7fe fb2e 	bl	80077cc <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	429a      	cmp	r2, r3
 800917a:	d302      	bcc.n	8009182 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d116      	bne.n	80091b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f043 0220 	orr.w	r2, r3, #32
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e007      	b.n	80091c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d1ca      	bne.n	8009154 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091de:	d11b      	bne.n	8009218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	f043 0204 	orr.w	r2, r3, #4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e000      	b.n	800921a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr

08009224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e272      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8087 	beq.w	8009352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009244:	4b92      	ldr	r3, [pc, #584]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f003 030c 	and.w	r3, r3, #12
 800924c:	2b04      	cmp	r3, #4
 800924e:	d00c      	beq.n	800926a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009250:	4b8f      	ldr	r3, [pc, #572]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f003 030c 	and.w	r3, r3, #12
 8009258:	2b08      	cmp	r3, #8
 800925a:	d112      	bne.n	8009282 <HAL_RCC_OscConfig+0x5e>
 800925c:	4b8c      	ldr	r3, [pc, #560]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009268:	d10b      	bne.n	8009282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800926a:	4b89      	ldr	r3, [pc, #548]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d06c      	beq.n	8009350 <HAL_RCC_OscConfig+0x12c>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d168      	bne.n	8009350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e24c      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800928a:	d106      	bne.n	800929a <HAL_RCC_OscConfig+0x76>
 800928c:	4b80      	ldr	r3, [pc, #512]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a7f      	ldr	r2, [pc, #508]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	e02e      	b.n	80092f8 <HAL_RCC_OscConfig+0xd4>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10c      	bne.n	80092bc <HAL_RCC_OscConfig+0x98>
 80092a2:	4b7b      	ldr	r3, [pc, #492]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a7a      	ldr	r2, [pc, #488]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	4b78      	ldr	r3, [pc, #480]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a77      	ldr	r2, [pc, #476]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	e01d      	b.n	80092f8 <HAL_RCC_OscConfig+0xd4>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092c4:	d10c      	bne.n	80092e0 <HAL_RCC_OscConfig+0xbc>
 80092c6:	4b72      	ldr	r3, [pc, #456]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a71      	ldr	r2, [pc, #452]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	4b6f      	ldr	r3, [pc, #444]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a6e      	ldr	r2, [pc, #440]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	e00b      	b.n	80092f8 <HAL_RCC_OscConfig+0xd4>
 80092e0:	4b6b      	ldr	r3, [pc, #428]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a6a      	ldr	r2, [pc, #424]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	4b68      	ldr	r3, [pc, #416]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a67      	ldr	r2, [pc, #412]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80092f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d013      	beq.n	8009328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009300:	f7fe fa64 	bl	80077cc <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009308:	f7fe fa60 	bl	80077cc <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b64      	cmp	r3, #100	; 0x64
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e200      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931a:	4b5d      	ldr	r3, [pc, #372]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f0      	beq.n	8009308 <HAL_RCC_OscConfig+0xe4>
 8009326:	e014      	b.n	8009352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009328:	f7fe fa50 	bl	80077cc <HAL_GetTick>
 800932c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009330:	f7fe fa4c 	bl	80077cc <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	; 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e1ec      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009342:	4b53      	ldr	r3, [pc, #332]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1f0      	bne.n	8009330 <HAL_RCC_OscConfig+0x10c>
 800934e:	e000      	b.n	8009352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d063      	beq.n	8009426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800935e:	4b4c      	ldr	r3, [pc, #304]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f003 030c 	and.w	r3, r3, #12
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800936a:	4b49      	ldr	r3, [pc, #292]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f003 030c 	and.w	r3, r3, #12
 8009372:	2b08      	cmp	r3, #8
 8009374:	d11c      	bne.n	80093b0 <HAL_RCC_OscConfig+0x18c>
 8009376:	4b46      	ldr	r3, [pc, #280]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d116      	bne.n	80093b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009382:	4b43      	ldr	r3, [pc, #268]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d005      	beq.n	800939a <HAL_RCC_OscConfig+0x176>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d001      	beq.n	800939a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e1c0      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939a:	4b3d      	ldr	r3, [pc, #244]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4939      	ldr	r1, [pc, #228]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093ae:	e03a      	b.n	8009426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d020      	beq.n	80093fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093b8:	4b36      	ldr	r3, [pc, #216]	; (8009494 <HAL_RCC_OscConfig+0x270>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093be:	f7fe fa05 	bl	80077cc <HAL_GetTick>
 80093c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c4:	e008      	b.n	80093d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093c6:	f7fe fa01 	bl	80077cc <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e1a1      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093d8:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0f0      	beq.n	80093c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093e4:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	4927      	ldr	r1, [pc, #156]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	600b      	str	r3, [r1, #0]
 80093f8:	e015      	b.n	8009426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093fa:	4b26      	ldr	r3, [pc, #152]	; (8009494 <HAL_RCC_OscConfig+0x270>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009400:	f7fe f9e4 	bl	80077cc <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009408:	f7fe f9e0 	bl	80077cc <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e180      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800941a:	4b1d      	ldr	r3, [pc, #116]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d03a      	beq.n	80094a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d019      	beq.n	800946e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800943a:	4b17      	ldr	r3, [pc, #92]	; (8009498 <HAL_RCC_OscConfig+0x274>)
 800943c:	2201      	movs	r2, #1
 800943e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009440:	f7fe f9c4 	bl	80077cc <HAL_GetTick>
 8009444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009446:	e008      	b.n	800945a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009448:	f7fe f9c0 	bl	80077cc <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e160      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800945a:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <HAL_RCC_OscConfig+0x26c>)
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009466:	2001      	movs	r0, #1
 8009468:	f000 fad8 	bl	8009a1c <RCC_Delay>
 800946c:	e01c      	b.n	80094a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800946e:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <HAL_RCC_OscConfig+0x274>)
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009474:	f7fe f9aa 	bl	80077cc <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800947a:	e00f      	b.n	800949c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800947c:	f7fe f9a6 	bl	80077cc <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d908      	bls.n	800949c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e146      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
 800948e:	bf00      	nop
 8009490:	40021000 	.word	0x40021000
 8009494:	42420000 	.word	0x42420000
 8009498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800949c:	4b92      	ldr	r3, [pc, #584]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e9      	bne.n	800947c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80a6 	beq.w	8009602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ba:	4b8b      	ldr	r3, [pc, #556]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094c6:	4b88      	ldr	r3, [pc, #544]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	4a87      	ldr	r2, [pc, #540]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80094cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d0:	61d3      	str	r3, [r2, #28]
 80094d2:	4b85      	ldr	r3, [pc, #532]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094e2:	4b82      	ldr	r3, [pc, #520]	; (80096ec <HAL_RCC_OscConfig+0x4c8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d118      	bne.n	8009520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094ee:	4b7f      	ldr	r3, [pc, #508]	; (80096ec <HAL_RCC_OscConfig+0x4c8>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a7e      	ldr	r2, [pc, #504]	; (80096ec <HAL_RCC_OscConfig+0x4c8>)
 80094f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094fa:	f7fe f967 	bl	80077cc <HAL_GetTick>
 80094fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009500:	e008      	b.n	8009514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009502:	f7fe f963 	bl	80077cc <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b64      	cmp	r3, #100	; 0x64
 800950e:	d901      	bls.n	8009514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e103      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009514:	4b75      	ldr	r3, [pc, #468]	; (80096ec <HAL_RCC_OscConfig+0x4c8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0f0      	beq.n	8009502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d106      	bne.n	8009536 <HAL_RCC_OscConfig+0x312>
 8009528:	4b6f      	ldr	r3, [pc, #444]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	4a6e      	ldr	r2, [pc, #440]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	6213      	str	r3, [r2, #32]
 8009534:	e02d      	b.n	8009592 <HAL_RCC_OscConfig+0x36e>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <HAL_RCC_OscConfig+0x334>
 800953e:	4b6a      	ldr	r3, [pc, #424]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	4a69      	ldr	r2, [pc, #420]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	6213      	str	r3, [r2, #32]
 800954a:	4b67      	ldr	r3, [pc, #412]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	4a66      	ldr	r2, [pc, #408]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009550:	f023 0304 	bic.w	r3, r3, #4
 8009554:	6213      	str	r3, [r2, #32]
 8009556:	e01c      	b.n	8009592 <HAL_RCC_OscConfig+0x36e>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2b05      	cmp	r3, #5
 800955e:	d10c      	bne.n	800957a <HAL_RCC_OscConfig+0x356>
 8009560:	4b61      	ldr	r3, [pc, #388]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009562:	6a1b      	ldr	r3, [r3, #32]
 8009564:	4a60      	ldr	r2, [pc, #384]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009566:	f043 0304 	orr.w	r3, r3, #4
 800956a:	6213      	str	r3, [r2, #32]
 800956c:	4b5e      	ldr	r3, [pc, #376]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	4a5d      	ldr	r2, [pc, #372]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	6213      	str	r3, [r2, #32]
 8009578:	e00b      	b.n	8009592 <HAL_RCC_OscConfig+0x36e>
 800957a:	4b5b      	ldr	r3, [pc, #364]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	4a5a      	ldr	r2, [pc, #360]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009580:	f023 0301 	bic.w	r3, r3, #1
 8009584:	6213      	str	r3, [r2, #32]
 8009586:	4b58      	ldr	r3, [pc, #352]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	4a57      	ldr	r2, [pc, #348]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800958c:	f023 0304 	bic.w	r3, r3, #4
 8009590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d015      	beq.n	80095c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800959a:	f7fe f917 	bl	80077cc <HAL_GetTick>
 800959e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a0:	e00a      	b.n	80095b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095a2:	f7fe f913 	bl	80077cc <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e0b1      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b8:	4b4b      	ldr	r3, [pc, #300]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0ee      	beq.n	80095a2 <HAL_RCC_OscConfig+0x37e>
 80095c4:	e014      	b.n	80095f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095c6:	f7fe f901 	bl	80077cc <HAL_GetTick>
 80095ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095cc:	e00a      	b.n	80095e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ce:	f7fe f8fd 	bl	80077cc <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095dc:	4293      	cmp	r3, r2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e09b      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095e4:	4b40      	ldr	r3, [pc, #256]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ee      	bne.n	80095ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d105      	bne.n	8009602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095f6:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	4a3b      	ldr	r2, [pc, #236]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80095fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 8087 	beq.w	800971a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800960c:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f003 030c 	and.w	r3, r3, #12
 8009614:	2b08      	cmp	r3, #8
 8009616:	d061      	beq.n	80096dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d146      	bne.n	80096ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009620:	4b33      	ldr	r3, [pc, #204]	; (80096f0 <HAL_RCC_OscConfig+0x4cc>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009626:	f7fe f8d1 	bl	80077cc <HAL_GetTick>
 800962a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800962c:	e008      	b.n	8009640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800962e:	f7fe f8cd 	bl	80077cc <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b02      	cmp	r3, #2
 800963a:	d901      	bls.n	8009640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e06d      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009640:	4b29      	ldr	r3, [pc, #164]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f0      	bne.n	800962e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009654:	d108      	bne.n	8009668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009656:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	4921      	ldr	r1, [pc, #132]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 8009664:	4313      	orrs	r3, r2
 8009666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009668:	4b1f      	ldr	r3, [pc, #124]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a19      	ldr	r1, [r3, #32]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	430b      	orrs	r3, r1
 800967a:	491b      	ldr	r1, [pc, #108]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 800967c:	4313      	orrs	r3, r2
 800967e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <HAL_RCC_OscConfig+0x4cc>)
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009686:	f7fe f8a1 	bl	80077cc <HAL_GetTick>
 800968a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800968c:	e008      	b.n	80096a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800968e:	f7fe f89d 	bl	80077cc <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e03d      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096a0:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f0      	beq.n	800968e <HAL_RCC_OscConfig+0x46a>
 80096ac:	e035      	b.n	800971a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <HAL_RCC_OscConfig+0x4cc>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b4:	f7fe f88a 	bl	80077cc <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096bc:	f7fe f886 	bl	80077cc <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e026      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <HAL_RCC_OscConfig+0x4c4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <HAL_RCC_OscConfig+0x498>
 80096da:	e01e      	b.n	800971a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d107      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e019      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
 80096e8:	40021000 	.word	0x40021000
 80096ec:	40007000 	.word	0x40007000
 80096f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80096f4:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <HAL_RCC_OscConfig+0x500>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	429a      	cmp	r2, r3
 8009706:	d106      	bne.n	8009716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009712:	429a      	cmp	r2, r3
 8009714:	d001      	beq.n	800971a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000

08009728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e0d0      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800973c:	4b6a      	ldr	r3, [pc, #424]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d910      	bls.n	800976c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974a:	4b67      	ldr	r3, [pc, #412]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f023 0207 	bic.w	r2, r3, #7
 8009752:	4965      	ldr	r1, [pc, #404]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	4313      	orrs	r3, r2
 8009758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800975a:	4b63      	ldr	r3, [pc, #396]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d001      	beq.n	800976c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e0b8      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d020      	beq.n	80097ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009784:	4b59      	ldr	r3, [pc, #356]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4a58      	ldr	r2, [pc, #352]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 800978a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800978e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800979c:	4b53      	ldr	r3, [pc, #332]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a52      	ldr	r2, [pc, #328]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80097a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097a8:	4b50      	ldr	r3, [pc, #320]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	494d      	ldr	r1, [pc, #308]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d040      	beq.n	8009848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d107      	bne.n	80097de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ce:	4b47      	ldr	r3, [pc, #284]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d115      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e07f      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d107      	bne.n	80097f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097e6:	4b41      	ldr	r3, [pc, #260]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e073      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097f6:	4b3d      	ldr	r3, [pc, #244]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e06b      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009806:	4b39      	ldr	r3, [pc, #228]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f023 0203 	bic.w	r2, r3, #3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	4936      	ldr	r1, [pc, #216]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009814:	4313      	orrs	r3, r2
 8009816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009818:	f7fd ffd8 	bl	80077cc <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800981e:	e00a      	b.n	8009836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009820:	f7fd ffd4 	bl	80077cc <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	f241 3288 	movw	r2, #5000	; 0x1388
 800982e:	4293      	cmp	r3, r2
 8009830:	d901      	bls.n	8009836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e053      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009836:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f003 020c 	and.w	r2, r3, #12
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	429a      	cmp	r2, r3
 8009846:	d1eb      	bne.n	8009820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009848:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0307 	and.w	r3, r3, #7
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d210      	bcs.n	8009878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009856:	4b24      	ldr	r3, [pc, #144]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f023 0207 	bic.w	r2, r3, #7
 800985e:	4922      	ldr	r1, [pc, #136]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	4313      	orrs	r3, r2
 8009864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009866:	4b20      	ldr	r3, [pc, #128]	; (80098e8 <HAL_RCC_ClockConfig+0x1c0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d001      	beq.n	8009878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e032      	b.n	80098de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d008      	beq.n	8009896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009884:	4b19      	ldr	r3, [pc, #100]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4916      	ldr	r1, [pc, #88]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 8009892:	4313      	orrs	r3, r2
 8009894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0308 	and.w	r3, r3, #8
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d009      	beq.n	80098b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	490e      	ldr	r1, [pc, #56]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098b6:	f000 f821 	bl	80098fc <HAL_RCC_GetSysClockFreq>
 80098ba:	4602      	mov	r2, r0
 80098bc:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <HAL_RCC_ClockConfig+0x1c4>)
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	091b      	lsrs	r3, r3, #4
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	490a      	ldr	r1, [pc, #40]	; (80098f0 <HAL_RCC_ClockConfig+0x1c8>)
 80098c8:	5ccb      	ldrb	r3, [r1, r3]
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	4a09      	ldr	r2, [pc, #36]	; (80098f4 <HAL_RCC_ClockConfig+0x1cc>)
 80098d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <HAL_RCC_ClockConfig+0x1d0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fd ff36 	bl	8007748 <HAL_InitTick>

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	40022000 	.word	0x40022000
 80098ec:	40021000 	.word	0x40021000
 80098f0:	0800f914 	.word	0x0800f914
 80098f4:	2000000c 	.word	0x2000000c
 80098f8:	2000001c 	.word	0x2000001c

080098fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098fc:	b490      	push	{r4, r7}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009902:	4b29      	ldr	r3, [pc, #164]	; (80099a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8009904:	1d3c      	adds	r4, r7, #4
 8009906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800990c:	f240 2301 	movw	r3, #513	; 0x201
 8009910:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	2300      	movs	r3, #0
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f003 030c 	and.w	r3, r3, #12
 8009932:	2b04      	cmp	r3, #4
 8009934:	d002      	beq.n	800993c <HAL_RCC_GetSysClockFreq+0x40>
 8009936:	2b08      	cmp	r3, #8
 8009938:	d003      	beq.n	8009942 <HAL_RCC_GetSysClockFreq+0x46>
 800993a:	e02b      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800993c:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800993e:	623b      	str	r3, [r7, #32]
      break;
 8009940:	e02b      	b.n	800999a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	0c9b      	lsrs	r3, r3, #18
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	3328      	adds	r3, #40	; 0x28
 800994c:	443b      	add	r3, r7
 800994e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009952:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d012      	beq.n	8009984 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	0c5b      	lsrs	r3, r3, #17
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	3328      	adds	r3, #40	; 0x28
 800996a:	443b      	add	r3, r7
 800996c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009970:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	4a0e      	ldr	r2, [pc, #56]	; (80099b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009976:	fb03 f202 	mul.w	r2, r3, r2
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
 8009982:	e004      	b.n	800998e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4a0b      	ldr	r2, [pc, #44]	; (80099b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009988:	fb02 f303 	mul.w	r3, r2, r3
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	623b      	str	r3, [r7, #32]
      break;
 8009992:	e002      	b.n	800999a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009996:	623b      	str	r3, [r7, #32]
      break;
 8009998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800999a:	6a3b      	ldr	r3, [r7, #32]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3728      	adds	r7, #40	; 0x28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc90      	pop	{r4, r7}
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	0800f8fc 	.word	0x0800f8fc
 80099ac:	40021000 	.word	0x40021000
 80099b0:	007a1200 	.word	0x007a1200
 80099b4:	003d0900 	.word	0x003d0900

080099b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099bc:	4b02      	ldr	r3, [pc, #8]	; (80099c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80099be:	681b      	ldr	r3, [r3, #0]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bc80      	pop	{r7}
 80099c6:	4770      	bx	lr
 80099c8:	2000000c 	.word	0x2000000c

080099cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099d0:	f7ff fff2 	bl	80099b8 <HAL_RCC_GetHCLKFreq>
 80099d4:	4602      	mov	r2, r0
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	0a1b      	lsrs	r3, r3, #8
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	4903      	ldr	r1, [pc, #12]	; (80099f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099e2:	5ccb      	ldrb	r3, [r1, r3]
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	40021000 	.word	0x40021000
 80099f0:	0800f924 	.word	0x0800f924

080099f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80099f8:	f7ff ffde 	bl	80099b8 <HAL_RCC_GetHCLKFreq>
 80099fc:	4602      	mov	r2, r0
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	0adb      	lsrs	r3, r3, #11
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	4903      	ldr	r1, [pc, #12]	; (8009a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a0a:	5ccb      	ldrb	r3, [r1, r3]
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40021000 	.word	0x40021000
 8009a18:	0800f924 	.word	0x0800f924

08009a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <RCC_Delay+0x34>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <RCC_Delay+0x38>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	0a5b      	lsrs	r3, r3, #9
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009a38:	bf00      	nop
  }
  while (Delay --);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1e5a      	subs	r2, r3, #1
 8009a3e:	60fa      	str	r2, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f9      	bne.n	8009a38 <RCC_Delay+0x1c>
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr
 8009a50:	2000000c 	.word	0x2000000c
 8009a54:	10624dd3 	.word	0x10624dd3

08009a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	613b      	str	r3, [r7, #16]
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d07d      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a78:	4b4f      	ldr	r3, [pc, #316]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a84:	4b4c      	ldr	r3, [pc, #304]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	4a4b      	ldr	r2, [pc, #300]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8e:	61d3      	str	r3, [r2, #28]
 8009a90:	4b49      	ldr	r3, [pc, #292]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a98:	60bb      	str	r3, [r7, #8]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aa0:	4b46      	ldr	r3, [pc, #280]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d118      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009aac:	4b43      	ldr	r3, [pc, #268]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a42      	ldr	r2, [pc, #264]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ab8:	f7fd fe88 	bl	80077cc <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009abe:	e008      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac0:	f7fd fe84 	bl	80077cc <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b64      	cmp	r3, #100	; 0x64
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e06d      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ad2:	4b3a      	ldr	r3, [pc, #232]	; (8009bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ade:	4b36      	ldr	r3, [pc, #216]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02e      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d027      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009afc:	4b2e      	ldr	r3, [pc, #184]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b06:	4b2e      	ldr	r3, [pc, #184]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b0c:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009b12:	4a29      	ldr	r2, [pc, #164]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d014      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b22:	f7fd fe53 	bl	80077cc <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b28:	e00a      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b2a:	f7fd fe4f 	bl	80077cc <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d901      	bls.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e036      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b40:	4b1d      	ldr	r3, [pc, #116]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	f003 0302 	and.w	r3, r3, #2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0ee      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b4c:	4b1a      	ldr	r3, [pc, #104]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	4917      	ldr	r1, [pc, #92]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d105      	bne.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b64:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	4a13      	ldr	r2, [pc, #76]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d008      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b7c:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	490b      	ldr	r1, [pc, #44]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d008      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	4904      	ldr	r1, [pc, #16]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	40021000 	.word	0x40021000
 8009bbc:	40007000 	.word	0x40007000
 8009bc0:	42420440 	.word	0x42420440

08009bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e076      	b.n	8009cc4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d108      	bne.n	8009bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009be6:	d009      	beq.n	8009bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	61da      	str	r2, [r3, #28]
 8009bee:	e005      	b.n	8009bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f8 ff28 	bl	8002a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c80:	ea42 0103 	orr.w	r1, r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	0c1a      	lsrs	r2, r3, #16
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f002 0204 	and.w	r2, r2, #4
 8009ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69da      	ldr	r2, [r3, #28]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08c      	sub	sp, #48	; 0x30
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_SPI_TransmitReceive+0x26>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e18a      	b.n	800a008 <HAL_SPI_TransmitReceive+0x33c>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cfa:	f7fd fd67 	bl	80077cc <HAL_GetTick>
 8009cfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009d10:	887b      	ldrh	r3, [r7, #2]
 8009d12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d00f      	beq.n	8009d3c <HAL_SPI_TransmitReceive+0x70>
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d22:	d107      	bne.n	8009d34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d103      	bne.n	8009d34 <HAL_SPI_TransmitReceive+0x68>
 8009d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d003      	beq.n	8009d3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
 8009d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d3a:	e15b      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_SPI_TransmitReceive+0x82>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <HAL_SPI_TransmitReceive+0x82>
 8009d48:	887b      	ldrh	r3, [r7, #2]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d103      	bne.n	8009d56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d54:	e14e      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d003      	beq.n	8009d6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2205      	movs	r2, #5
 8009d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	887a      	ldrh	r2, [r7, #2]
 8009d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	887a      	ldrh	r2, [r7, #2]
 8009d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	887a      	ldrh	r2, [r7, #2]
 8009d8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	887a      	ldrh	r2, [r7, #2]
 8009d92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009daa:	2b40      	cmp	r3, #64	; 0x40
 8009dac:	d007      	beq.n	8009dbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dc6:	d178      	bne.n	8009eba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_SPI_TransmitReceive+0x10a>
 8009dd0:	8b7b      	ldrh	r3, [r7, #26]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d166      	bne.n	8009ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	881a      	ldrh	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de6:	1c9a      	adds	r2, r3, #2
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dfa:	e053      	b.n	8009ea4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f003 0302 	and.w	r3, r3, #2
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d11b      	bne.n	8009e42 <HAL_SPI_TransmitReceive+0x176>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d016      	beq.n	8009e42 <HAL_SPI_TransmitReceive+0x176>
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d113      	bne.n	8009e42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2a:	1c9a      	adds	r2, r3, #2
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d119      	bne.n	8009e84 <HAL_SPI_TransmitReceive+0x1b8>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d014      	beq.n	8009e84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	b292      	uxth	r2, r2
 8009e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	1c9a      	adds	r2, r3, #2
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e80:	2301      	movs	r3, #1
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e84:	f7fd fca2 	bl	80077cc <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d807      	bhi.n	8009ea4 <HAL_SPI_TransmitReceive+0x1d8>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d003      	beq.n	8009ea4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ea2:	e0a7      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1a6      	bne.n	8009dfc <HAL_SPI_TransmitReceive+0x130>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1a1      	bne.n	8009dfc <HAL_SPI_TransmitReceive+0x130>
 8009eb8:	e07c      	b.n	8009fb4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_SPI_TransmitReceive+0x1fc>
 8009ec2:	8b7b      	ldrh	r3, [r7, #26]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d16b      	bne.n	8009fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	330c      	adds	r3, #12
 8009ed2:	7812      	ldrb	r2, [r2, #0]
 8009ed4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eee:	e057      	b.n	8009fa0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d11c      	bne.n	8009f38 <HAL_SPI_TransmitReceive+0x26c>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d017      	beq.n	8009f38 <HAL_SPI_TransmitReceive+0x26c>
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d114      	bne.n	8009f38 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	330c      	adds	r3, #12
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d119      	bne.n	8009f7a <HAL_SPI_TransmitReceive+0x2ae>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d014      	beq.n	8009f7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f76:	2301      	movs	r3, #1
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f7a:	f7fd fc27 	bl	80077cc <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d803      	bhi.n	8009f92 <HAL_SPI_TransmitReceive+0x2c6>
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d102      	bne.n	8009f98 <HAL_SPI_TransmitReceive+0x2cc>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d103      	bne.n	8009fa0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f9e:	e029      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1a2      	bne.n	8009ef0 <HAL_SPI_TransmitReceive+0x224>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d19d      	bne.n	8009ef0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f8b1 	bl	800a120 <SPI_EndRxTxTransaction>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d006      	beq.n	8009fd2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009fd0:	e010      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10b      	bne.n	8009ff2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	e000      	b.n	8009ff4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	4613      	mov	r3, r2
 800a01e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a020:	f7fd fbd4 	bl	80077cc <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	1a9b      	subs	r3, r3, r2
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	4413      	add	r3, r2
 800a02e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a030:	f7fd fbcc 	bl	80077cc <HAL_GetTick>
 800a034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a036:	4b39      	ldr	r3, [pc, #228]	; (800a11c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	015b      	lsls	r3, r3, #5
 800a03c:	0d1b      	lsrs	r3, r3, #20
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	fb02 f303 	mul.w	r3, r2, r3
 800a044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a046:	e054      	b.n	800a0f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d050      	beq.n	800a0f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a050:	f7fd fbbc 	bl	80077cc <HAL_GetTick>
 800a054:	4602      	mov	r2, r0
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d902      	bls.n	800a066 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d13d      	bne.n	800a0e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a07e:	d111      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a088:	d004      	beq.n	800a094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a092:	d107      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ac:	d10f      	bne.n	800a0ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e017      	b.n	800a112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	bf0c      	ite	eq
 800a102:	2301      	moveq	r3, #1
 800a104:	2300      	movne	r3, #0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	461a      	mov	r2, r3
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d19b      	bne.n	800a048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2200      	movs	r2, #0
 800a134:	2180      	movs	r1, #128	; 0x80
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff ff6a 	bl	800a010 <SPI_WaitFlagStateUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a146:	f043 0220 	orr.w	r2, r3, #32
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e000      	b.n	800a154 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e041      	b.n	800a1f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7f9 f8d8 	bl	8003338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f000 fcfc 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e041      	b.n	800a290 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f839 	bl	800a298 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2202      	movs	r2, #2
 800a22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f000 fcad 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bc80      	pop	{r7}
 800a2a8:	4770      	bx	lr
	...

0800a2ac <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <HAL_TIM_OC_Start+0x24>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	bf14      	ite	ne
 800a2c8:	2301      	movne	r3, #1
 800a2ca:	2300      	moveq	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	e022      	b.n	800a316 <HAL_TIM_OC_Start+0x6a>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d109      	bne.n	800a2ea <HAL_TIM_OC_Start+0x3e>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	bf14      	ite	ne
 800a2e2:	2301      	movne	r3, #1
 800a2e4:	2300      	moveq	r3, #0
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	e015      	b.n	800a316 <HAL_TIM_OC_Start+0x6a>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d109      	bne.n	800a304 <HAL_TIM_OC_Start+0x58>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	bf14      	ite	ne
 800a2fc:	2301      	movne	r3, #1
 800a2fe:	2300      	moveq	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	e008      	b.n	800a316 <HAL_TIM_OC_Start+0x6a>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e05e      	b.n	800a3dc <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <HAL_TIM_OC_Start+0x82>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a32c:	e013      	b.n	800a356 <HAL_TIM_OC_Start+0xaa>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b04      	cmp	r3, #4
 800a332:	d104      	bne.n	800a33e <HAL_TIM_OC_Start+0x92>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a33c:	e00b      	b.n	800a356 <HAL_TIM_OC_Start+0xaa>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b08      	cmp	r3, #8
 800a342:	d104      	bne.n	800a34e <HAL_TIM_OC_Start+0xa2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a34c:	e003      	b.n	800a356 <HAL_TIM_OC_Start+0xaa>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 ff28 	bl	800b1b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <HAL_TIM_OC_Start+0x138>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d107      	bne.n	800a37e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a37c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a18      	ldr	r2, [pc, #96]	; (800a3e4 <HAL_TIM_OC_Start+0x138>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d00e      	beq.n	800a3a6 <HAL_TIM_OC_Start+0xfa>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a390:	d009      	beq.n	800a3a6 <HAL_TIM_OC_Start+0xfa>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <HAL_TIM_OC_Start+0x13c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d004      	beq.n	800a3a6 <HAL_TIM_OC_Start+0xfa>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a12      	ldr	r2, [pc, #72]	; (800a3ec <HAL_TIM_OC_Start+0x140>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d111      	bne.n	800a3ca <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0307 	and.w	r3, r3, #7
 800a3b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b06      	cmp	r3, #6
 800a3b6:	d010      	beq.n	800a3da <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c8:	e007      	b.n	800a3da <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f042 0201 	orr.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	40012c00 	.word	0x40012c00
 800a3e8:	40000400 	.word	0x40000400
 800a3ec:	40000800 	.word	0x40000800

0800a3f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e041      	b.n	800a486 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f839 	bl	800a48e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4619      	mov	r1, r3
 800a42e:	4610      	mov	r0, r2
 800a430:	f000 fbb2 	bl	800ab98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bc80      	pop	{r7}
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d109      	bne.n	800a4c4 <HAL_TIM_PWM_Start+0x24>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	e022      	b.n	800a50a <HAL_TIM_PWM_Start+0x6a>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	d109      	bne.n	800a4de <HAL_TIM_PWM_Start+0x3e>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	bf14      	ite	ne
 800a4d6:	2301      	movne	r3, #1
 800a4d8:	2300      	moveq	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	e015      	b.n	800a50a <HAL_TIM_PWM_Start+0x6a>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b08      	cmp	r3, #8
 800a4e2:	d109      	bne.n	800a4f8 <HAL_TIM_PWM_Start+0x58>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	bf14      	ite	ne
 800a4f0:	2301      	movne	r3, #1
 800a4f2:	2300      	moveq	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	e008      	b.n	800a50a <HAL_TIM_PWM_Start+0x6a>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	bf14      	ite	ne
 800a504:	2301      	movne	r3, #1
 800a506:	2300      	moveq	r3, #0
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e05e      	b.n	800a5d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <HAL_TIM_PWM_Start+0x82>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a520:	e013      	b.n	800a54a <HAL_TIM_PWM_Start+0xaa>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b04      	cmp	r3, #4
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start+0x92>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a530:	e00b      	b.n	800a54a <HAL_TIM_PWM_Start+0xaa>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b08      	cmp	r3, #8
 800a536:	d104      	bne.n	800a542 <HAL_TIM_PWM_Start+0xa2>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a540:	e003      	b.n	800a54a <HAL_TIM_PWM_Start+0xaa>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2201      	movs	r2, #1
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fe2e 	bl	800b1b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1e      	ldr	r2, [pc, #120]	; (800a5d8 <HAL_TIM_PWM_Start+0x138>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d107      	bne.n	800a572 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <HAL_TIM_PWM_Start+0x138>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00e      	beq.n	800a59a <HAL_TIM_PWM_Start+0xfa>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a584:	d009      	beq.n	800a59a <HAL_TIM_PWM_Start+0xfa>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a14      	ldr	r2, [pc, #80]	; (800a5dc <HAL_TIM_PWM_Start+0x13c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d004      	beq.n	800a59a <HAL_TIM_PWM_Start+0xfa>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a12      	ldr	r2, [pc, #72]	; (800a5e0 <HAL_TIM_PWM_Start+0x140>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d111      	bne.n	800a5be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b06      	cmp	r3, #6
 800a5aa:	d010      	beq.n	800a5ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5bc:	e007      	b.n	800a5ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0201 	orr.w	r2, r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	40012c00 	.word	0x40012c00
 800a5dc:	40000400 	.word	0x40000400
 800a5e0:	40000800 	.word	0x40000800

0800a5e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fddc 	bl	800b1b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a29      	ldr	r2, [pc, #164]	; (800a6a8 <HAL_TIM_PWM_Stop+0xc4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d117      	bne.n	800a636 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a1a      	ldr	r2, [r3, #32]
 800a60c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a610:	4013      	ands	r3, r2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10f      	bne.n	800a636 <HAL_TIM_PWM_Stop+0x52>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6a1a      	ldr	r2, [r3, #32]
 800a61c:	f240 4344 	movw	r3, #1092	; 0x444
 800a620:	4013      	ands	r3, r2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d107      	bne.n	800a636 <HAL_TIM_PWM_Stop+0x52>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6a1a      	ldr	r2, [r3, #32]
 800a63c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10f      	bne.n	800a666 <HAL_TIM_PWM_Stop+0x82>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6a1a      	ldr	r2, [r3, #32]
 800a64c:	f240 4344 	movw	r3, #1092	; 0x444
 800a650:	4013      	ands	r3, r2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d107      	bne.n	800a666 <HAL_TIM_PWM_Stop+0x82>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f022 0201 	bic.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <HAL_TIM_PWM_Stop+0x92>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a674:	e013      	b.n	800a69e <HAL_TIM_PWM_Stop+0xba>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b04      	cmp	r3, #4
 800a67a:	d104      	bne.n	800a686 <HAL_TIM_PWM_Stop+0xa2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a684:	e00b      	b.n	800a69e <HAL_TIM_PWM_Stop+0xba>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d104      	bne.n	800a696 <HAL_TIM_PWM_Stop+0xb2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a694:	e003      	b.n	800a69e <HAL_TIM_PWM_Stop+0xba>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40012c00 	.word	0x40012c00

0800a6ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e041      	b.n	800a744 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f839 	bl	800a74c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f000 fa53 	bl	800ab98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0208 	bic.w	r2, r2, #8
 800a700:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6819      	ldr	r1, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	bc80      	pop	{r7}
 800a75c:	4770      	bx	lr
	...

0800a760 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a772:	2b01      	cmp	r3, #1
 800a774:	d101      	bne.n	800a77a <HAL_TIM_OC_ConfigChannel+0x1a>
 800a776:	2302      	movs	r3, #2
 800a778:	e046      	b.n	800a808 <HAL_TIM_OC_ConfigChannel+0xa8>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b0c      	cmp	r3, #12
 800a786:	d839      	bhi.n	800a7fc <HAL_TIM_OC_ConfigChannel+0x9c>
 800a788:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <HAL_TIM_OC_ConfigChannel+0x30>)
 800a78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a7c5 	.word	0x0800a7c5
 800a794:	0800a7fd 	.word	0x0800a7fd
 800a798:	0800a7fd 	.word	0x0800a7fd
 800a79c:	0800a7fd 	.word	0x0800a7fd
 800a7a0:	0800a7d3 	.word	0x0800a7d3
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a7fd 	.word	0x0800a7fd
 800a7ac:	0800a7fd 	.word	0x0800a7fd
 800a7b0:	0800a7e1 	.word	0x0800a7e1
 800a7b4:	0800a7fd 	.word	0x0800a7fd
 800a7b8:	0800a7fd 	.word	0x0800a7fd
 800a7bc:	0800a7fd 	.word	0x0800a7fd
 800a7c0:	0800a7ef 	.word	0x0800a7ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fa46 	bl	800ac5c <TIM_OC1_SetConfig>
      break;
 800a7d0:	e015      	b.n	800a7fe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 faa5 	bl	800ad28 <TIM_OC2_SetConfig>
      break;
 800a7de:	e00e      	b.n	800a7fe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fb08 	bl	800adfc <TIM_OC3_SetConfig>
      break;
 800a7ec:	e007      	b.n	800a7fe <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 fb6b 	bl	800aed0 <TIM_OC4_SetConfig>
      break;
 800a7fa:	e000      	b.n	800a7fe <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800a7fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a822:	2b01      	cmp	r3, #1
 800a824:	d101      	bne.n	800a82a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a826:	2302      	movs	r3, #2
 800a828:	e0ac      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b0c      	cmp	r3, #12
 800a836:	f200 809f 	bhi.w	800a978 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a875 	.word	0x0800a875
 800a844:	0800a979 	.word	0x0800a979
 800a848:	0800a979 	.word	0x0800a979
 800a84c:	0800a979 	.word	0x0800a979
 800a850:	0800a8b5 	.word	0x0800a8b5
 800a854:	0800a979 	.word	0x0800a979
 800a858:	0800a979 	.word	0x0800a979
 800a85c:	0800a979 	.word	0x0800a979
 800a860:	0800a8f7 	.word	0x0800a8f7
 800a864:	0800a979 	.word	0x0800a979
 800a868:	0800a979 	.word	0x0800a979
 800a86c:	0800a979 	.word	0x0800a979
 800a870:	0800a937 	.word	0x0800a937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68b9      	ldr	r1, [r7, #8]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f9ee 	bl	800ac5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	699a      	ldr	r2, [r3, #24]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0208 	orr.w	r2, r2, #8
 800a88e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	699a      	ldr	r2, [r3, #24]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0204 	bic.w	r2, r2, #4
 800a89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6999      	ldr	r1, [r3, #24]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	619a      	str	r2, [r3, #24]
      break;
 800a8b2:	e062      	b.n	800a97a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68b9      	ldr	r1, [r7, #8]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 fa34 	bl	800ad28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6999      	ldr	r1, [r3, #24]
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	021a      	lsls	r2, r3, #8
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	619a      	str	r2, [r3, #24]
      break;
 800a8f4:	e041      	b.n	800a97a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68b9      	ldr	r1, [r7, #8]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fa7d 	bl	800adfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	69da      	ldr	r2, [r3, #28]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0208 	orr.w	r2, r2, #8
 800a910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	69da      	ldr	r2, [r3, #28]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0204 	bic.w	r2, r2, #4
 800a920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69d9      	ldr	r1, [r3, #28]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	61da      	str	r2, [r3, #28]
      break;
 800a934:	e021      	b.n	800a97a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fac7 	bl	800aed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	69da      	ldr	r2, [r3, #28]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69da      	ldr	r2, [r3, #28]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69d9      	ldr	r1, [r3, #28]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	021a      	lsls	r2, r3, #8
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	61da      	str	r2, [r3, #28]
      break;
 800a976:	e000      	b.n	800a97a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a978:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIM_ConfigClockSource+0x18>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e0b3      	b.n	800ab0c <HAL_TIM_ConfigClockSource+0x180>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9dc:	d03e      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0xd0>
 800a9de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9e2:	f200 8087 	bhi.w	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800a9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ea:	f000 8085 	beq.w	800aaf8 <HAL_TIM_ConfigClockSource+0x16c>
 800a9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f2:	d87f      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800a9f4:	2b70      	cmp	r3, #112	; 0x70
 800a9f6:	d01a      	beq.n	800aa2e <HAL_TIM_ConfigClockSource+0xa2>
 800a9f8:	2b70      	cmp	r3, #112	; 0x70
 800a9fa:	d87b      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800a9fc:	2b60      	cmp	r3, #96	; 0x60
 800a9fe:	d050      	beq.n	800aaa2 <HAL_TIM_ConfigClockSource+0x116>
 800aa00:	2b60      	cmp	r3, #96	; 0x60
 800aa02:	d877      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800aa04:	2b50      	cmp	r3, #80	; 0x50
 800aa06:	d03c      	beq.n	800aa82 <HAL_TIM_ConfigClockSource+0xf6>
 800aa08:	2b50      	cmp	r3, #80	; 0x50
 800aa0a:	d873      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800aa0c:	2b40      	cmp	r3, #64	; 0x40
 800aa0e:	d058      	beq.n	800aac2 <HAL_TIM_ConfigClockSource+0x136>
 800aa10:	2b40      	cmp	r3, #64	; 0x40
 800aa12:	d86f      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800aa14:	2b30      	cmp	r3, #48	; 0x30
 800aa16:	d064      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x156>
 800aa18:	2b30      	cmp	r3, #48	; 0x30
 800aa1a:	d86b      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d060      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x156>
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	d867      	bhi.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d05c      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x156>
 800aa28:	2b10      	cmp	r3, #16
 800aa2a:	d05a      	beq.n	800aae2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800aa2c:	e062      	b.n	800aaf4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	6899      	ldr	r1, [r3, #8]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f000 fb9a 	bl	800b176 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	609a      	str	r2, [r3, #8]
      break;
 800aa5a:	e04e      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	6899      	ldr	r1, [r3, #8]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f000 fb83 	bl	800b176 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa7e:	609a      	str	r2, [r3, #8]
      break;
 800aa80:	e03b      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6859      	ldr	r1, [r3, #4]
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f000 fafa 	bl	800b088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2150      	movs	r1, #80	; 0x50
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fb51 	bl	800b142 <TIM_ITRx_SetConfig>
      break;
 800aaa0:	e02b      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	6859      	ldr	r1, [r3, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f000 fb18 	bl	800b0e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2160      	movs	r1, #96	; 0x60
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 fb41 	bl	800b142 <TIM_ITRx_SetConfig>
      break;
 800aac0:	e01b      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6859      	ldr	r1, [r3, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	461a      	mov	r2, r3
 800aad0:	f000 fada 	bl	800b088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2140      	movs	r1, #64	; 0x40
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fb31 	bl	800b142 <TIM_ITRx_SetConfig>
      break;
 800aae0:	e00b      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4610      	mov	r0, r2
 800aaee:	f000 fb28 	bl	800b142 <TIM_ITRx_SetConfig>
        break;
 800aaf2:	e002      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aaf4:	bf00      	nop
 800aaf6:	e000      	b.n	800aafa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aaf8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_TIM_SlaveConfigSynchro+0x18>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e031      	b.n	800ab90 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fa14 	bl	800af6c <TIM_SlaveTimer_SetConfig>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e018      	b.n	800ab90 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab6c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab7c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a29      	ldr	r2, [pc, #164]	; (800ac50 <TIM_Base_SetConfig+0xb8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00b      	beq.n	800abc8 <TIM_Base_SetConfig+0x30>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb6:	d007      	beq.n	800abc8 <TIM_Base_SetConfig+0x30>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a26      	ldr	r2, [pc, #152]	; (800ac54 <TIM_Base_SetConfig+0xbc>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d003      	beq.n	800abc8 <TIM_Base_SetConfig+0x30>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a25      	ldr	r2, [pc, #148]	; (800ac58 <TIM_Base_SetConfig+0xc0>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d108      	bne.n	800abda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a1c      	ldr	r2, [pc, #112]	; (800ac50 <TIM_Base_SetConfig+0xb8>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00b      	beq.n	800abfa <TIM_Base_SetConfig+0x62>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d007      	beq.n	800abfa <TIM_Base_SetConfig+0x62>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a19      	ldr	r2, [pc, #100]	; (800ac54 <TIM_Base_SetConfig+0xbc>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_Base_SetConfig+0x62>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a18      	ldr	r2, [pc, #96]	; (800ac58 <TIM_Base_SetConfig+0xc0>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d108      	bne.n	800ac0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a07      	ldr	r2, [pc, #28]	; (800ac50 <TIM_Base_SetConfig+0xb8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d103      	bne.n	800ac40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	691a      	ldr	r2, [r3, #16]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	615a      	str	r2, [r3, #20]
}
 800ac46:	bf00      	nop
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bc80      	pop	{r7}
 800ac4e:	4770      	bx	lr
 800ac50:	40012c00 	.word	0x40012c00
 800ac54:	40000400 	.word	0x40000400
 800ac58:	40000800 	.word	0x40000800

0800ac5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f023 0201 	bic.w	r2, r3, #1
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0303 	bic.w	r3, r3, #3
 800ac92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f023 0302 	bic.w	r3, r3, #2
 800aca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	4313      	orrs	r3, r2
 800acae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1c      	ldr	r2, [pc, #112]	; (800ad24 <TIM_OC1_SetConfig+0xc8>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d10c      	bne.n	800acd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f023 0308 	bic.w	r3, r3, #8
 800acbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f023 0304 	bic.w	r3, r3, #4
 800acd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a13      	ldr	r2, [pc, #76]	; (800ad24 <TIM_OC1_SetConfig+0xc8>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d111      	bne.n	800acfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ace0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ace8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	621a      	str	r2, [r3, #32]
}
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	40012c00 	.word	0x40012c00

0800ad28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	f023 0210 	bic.w	r2, r3, #16
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f023 0320 	bic.w	r3, r3, #32
 800ad72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a1d      	ldr	r2, [pc, #116]	; (800adf8 <TIM_OC2_SetConfig+0xd0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d10d      	bne.n	800ada4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a14      	ldr	r2, [pc, #80]	; (800adf8 <TIM_OC2_SetConfig+0xd0>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d113      	bne.n	800add4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	695b      	ldr	r3, [r3, #20]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	4313      	orrs	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	621a      	str	r2, [r3, #32]
}
 800adee:	bf00      	nop
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr
 800adf8:	40012c00 	.word	0x40012c00

0800adfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a1d      	ldr	r2, [pc, #116]	; (800aecc <TIM_OC3_SetConfig+0xd0>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d10d      	bne.n	800ae76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a14      	ldr	r2, [pc, #80]	; (800aecc <TIM_OC3_SetConfig+0xd0>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d113      	bne.n	800aea6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	621a      	str	r2, [r3, #32]
}
 800aec0:	bf00      	nop
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bc80      	pop	{r7}
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	40012c00 	.word	0x40012c00

0800aed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	031b      	lsls	r3, r3, #12
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	4313      	orrs	r3, r2
 800af26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a0f      	ldr	r2, [pc, #60]	; (800af68 <TIM_OC4_SetConfig+0x98>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d109      	bne.n	800af44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	019b      	lsls	r3, r3, #6
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	621a      	str	r2, [r3, #32]
}
 800af5e:	bf00      	nop
 800af60:	371c      	adds	r7, #28
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr
 800af68:	40012c00 	.word	0x40012c00

0800af6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2b70      	cmp	r3, #112	; 0x70
 800afb0:	d01a      	beq.n	800afe8 <TIM_SlaveTimer_SetConfig+0x7c>
 800afb2:	2b70      	cmp	r3, #112	; 0x70
 800afb4:	d860      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afb6:	2b60      	cmp	r3, #96	; 0x60
 800afb8:	d054      	beq.n	800b064 <TIM_SlaveTimer_SetConfig+0xf8>
 800afba:	2b60      	cmp	r3, #96	; 0x60
 800afbc:	d85c      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afbe:	2b50      	cmp	r3, #80	; 0x50
 800afc0:	d046      	beq.n	800b050 <TIM_SlaveTimer_SetConfig+0xe4>
 800afc2:	2b50      	cmp	r3, #80	; 0x50
 800afc4:	d858      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afc6:	2b40      	cmp	r3, #64	; 0x40
 800afc8:	d019      	beq.n	800affe <TIM_SlaveTimer_SetConfig+0x92>
 800afca:	2b40      	cmp	r3, #64	; 0x40
 800afcc:	d854      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afce:	2b30      	cmp	r3, #48	; 0x30
 800afd0:	d054      	beq.n	800b07c <TIM_SlaveTimer_SetConfig+0x110>
 800afd2:	2b30      	cmp	r3, #48	; 0x30
 800afd4:	d850      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	d050      	beq.n	800b07c <TIM_SlaveTimer_SetConfig+0x110>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d84c      	bhi.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d04c      	beq.n	800b07c <TIM_SlaveTimer_SetConfig+0x110>
 800afe2:	2b10      	cmp	r3, #16
 800afe4:	d04a      	beq.n	800b07c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800afe6:	e047      	b.n	800b078 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	68d9      	ldr	r1, [r3, #12]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	f000 f8bd 	bl	800b176 <TIM_ETR_SetConfig>
      break;
 800affc:	e03f      	b.n	800b07e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d101      	bne.n	800b00a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e03a      	b.n	800b080 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6a1b      	ldr	r3, [r3, #32]
 800b010:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6a1a      	ldr	r2, [r3, #32]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f022 0201 	bic.w	r2, r2, #1
 800b020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b030:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	621a      	str	r2, [r3, #32]
      break;
 800b04e:	e016      	b.n	800b07e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	6899      	ldr	r1, [r3, #8]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	461a      	mov	r2, r3
 800b05e:	f000 f813 	bl	800b088 <TIM_TI1_ConfigInputStage>
      break;
 800b062:	e00c      	b.n	800b07e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	6899      	ldr	r1, [r3, #8]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	461a      	mov	r2, r3
 800b072:	f000 f837 	bl	800b0e4 <TIM_TI2_ConfigInputStage>
      break;
 800b076:	e002      	b.n	800b07e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800b07c:	bf00      	nop
  }
  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	f023 0201 	bic.w	r2, r3, #1
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	011b      	lsls	r3, r3, #4
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f023 030a 	bic.w	r3, r3, #10
 800b0c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr

0800b0e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	f023 0210 	bic.w	r2, r3, #16
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b10e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	031b      	lsls	r3, r3, #12
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	4313      	orrs	r3, r2
 800b118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	621a      	str	r2, [r3, #32]
}
 800b138:	bf00      	nop
 800b13a:	371c      	adds	r7, #28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr

0800b142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4313      	orrs	r3, r2
 800b160:	f043 0307 	orr.w	r3, r3, #7
 800b164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	609a      	str	r2, [r3, #8]
}
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	bc80      	pop	{r7}
 800b174:	4770      	bx	lr

0800b176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b176:	b480      	push	{r7}
 800b178:	b087      	sub	sp, #28
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	021a      	lsls	r2, r3, #8
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	431a      	orrs	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	609a      	str	r2, [r3, #8]
}
 800b1aa:	bf00      	nop
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bc80      	pop	{r7}
 800b1b2:	4770      	bx	lr

0800b1b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f003 031f 	and.w	r3, r3, #31
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6a1a      	ldr	r2, [r3, #32]
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	43db      	mvns	r3, r3
 800b1d6:	401a      	ands	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a1a      	ldr	r2, [r3, #32]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	621a      	str	r2, [r3, #32]
}
 800b1f2:	bf00      	nop
 800b1f4:	371c      	adds	r7, #28
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bc80      	pop	{r7}
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d101      	bne.n	800b214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b210:	2302      	movs	r3, #2
 800b212:	e046      	b.n	800b2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b23a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a16      	ldr	r2, [pc, #88]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d00e      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b260:	d009      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a12      	ldr	r2, [pc, #72]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d004      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d10c      	bne.n	800b290 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4313      	orrs	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bc80      	pop	{r7}
 800b2aa:	4770      	bx	lr
 800b2ac:	40012c00 	.word	0x40012c00
 800b2b0:	40000400 	.word	0x40000400
 800b2b4:	40000800 	.word	0x40000800

0800b2b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d101      	bne.n	800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e03d      	b.n	800b350 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4313      	orrs	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr

0800b35a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e03f      	b.n	800b3ec <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d106      	bne.n	800b386 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7f8 f995 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2224      	movs	r2, #36	; 0x24
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b39c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f904 	bl	800b5ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b20      	cmp	r3, #32
 800b412:	d17c      	bne.n	800b50e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <HAL_UART_Transmit+0x2c>
 800b41a:	88fb      	ldrh	r3, [r7, #6]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	e075      	b.n	800b510 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d101      	bne.n	800b432 <HAL_UART_Transmit+0x3e>
 800b42e:	2302      	movs	r3, #2
 800b430:	e06e      	b.n	800b510 <HAL_UART_Transmit+0x11c>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2221      	movs	r2, #33	; 0x21
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b448:	f7fc f9c0 	bl	80077cc <HAL_GetTick>
 800b44c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	88fa      	ldrh	r2, [r7, #6]
 800b452:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	88fa      	ldrh	r2, [r7, #6]
 800b458:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b462:	d108      	bne.n	800b476 <HAL_UART_Transmit+0x82>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	61bb      	str	r3, [r7, #24]
 800b474:	e003      	b.n	800b47e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b486:	e02a      	b.n	800b4de <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2200      	movs	r2, #0
 800b490:	2180      	movs	r1, #128	; 0x80
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 f840 	bl	800b518 <UART_WaitOnFlagUntilTimeout>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e036      	b.n	800b510 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10b      	bne.n	800b4c0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	61bb      	str	r3, [r7, #24]
 800b4be:	e007      	b.n	800b4d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	781a      	ldrb	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1cf      	bne.n	800b488 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2140      	movs	r1, #64	; 0x40
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 f810 	bl	800b518 <UART_WaitOnFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e006      	b.n	800b510 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2220      	movs	r2, #32
 800b506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e000      	b.n	800b510 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b50e:	2302      	movs	r3, #2
  }
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	4613      	mov	r3, r2
 800b526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b528:	e02c      	b.n	800b584 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b530:	d028      	beq.n	800b584 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <UART_WaitOnFlagUntilTimeout+0x30>
 800b538:	f7fc f948 	bl	80077cc <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	69ba      	ldr	r2, [r7, #24]
 800b544:	429a      	cmp	r2, r3
 800b546:	d21d      	bcs.n	800b584 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b556:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	695a      	ldr	r2, [r3, #20]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f022 0201 	bic.w	r2, r2, #1
 800b566:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e00f      	b.n	800b5a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	4013      	ands	r3, r2
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	429a      	cmp	r2, r3
 800b592:	bf0c      	ite	eq
 800b594:	2301      	moveq	r3, #1
 800b596:	2300      	movne	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	461a      	mov	r2, r3
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d0c3      	beq.n	800b52a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b5e6:	f023 030c 	bic.w	r3, r3, #12
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	430b      	orrs	r3, r1
 800b5f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	699a      	ldr	r2, [r3, #24]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a2c      	ldr	r2, [pc, #176]	; (800b6c0 <UART_SetConfig+0x114>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d103      	bne.n	800b61c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b614:	f7fe f9ee 	bl	80099f4 <HAL_RCC_GetPCLK2Freq>
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	e002      	b.n	800b622 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b61c:	f7fe f9d6 	bl	80099cc <HAL_RCC_GetPCLK1Freq>
 800b620:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	009a      	lsls	r2, r3, #2
 800b62c:	441a      	add	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	fbb2 f3f3 	udiv	r3, r2, r3
 800b638:	4a22      	ldr	r2, [pc, #136]	; (800b6c4 <UART_SetConfig+0x118>)
 800b63a:	fba2 2303 	umull	r2, r3, r2, r3
 800b63e:	095b      	lsrs	r3, r3, #5
 800b640:	0119      	lsls	r1, r3, #4
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009a      	lsls	r2, r3, #2
 800b64c:	441a      	add	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	fbb2 f2f3 	udiv	r2, r2, r3
 800b658:	4b1a      	ldr	r3, [pc, #104]	; (800b6c4 <UART_SetConfig+0x118>)
 800b65a:	fba3 0302 	umull	r0, r3, r3, r2
 800b65e:	095b      	lsrs	r3, r3, #5
 800b660:	2064      	movs	r0, #100	; 0x64
 800b662:	fb00 f303 	mul.w	r3, r0, r3
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	3332      	adds	r3, #50	; 0x32
 800b66c:	4a15      	ldr	r2, [pc, #84]	; (800b6c4 <UART_SetConfig+0x118>)
 800b66e:	fba2 2303 	umull	r2, r3, r2, r3
 800b672:	095b      	lsrs	r3, r3, #5
 800b674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b678:	4419      	add	r1, r3
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009a      	lsls	r2, r3, #2
 800b684:	441a      	add	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b690:	4b0c      	ldr	r3, [pc, #48]	; (800b6c4 <UART_SetConfig+0x118>)
 800b692:	fba3 0302 	umull	r0, r3, r3, r2
 800b696:	095b      	lsrs	r3, r3, #5
 800b698:	2064      	movs	r0, #100	; 0x64
 800b69a:	fb00 f303 	mul.w	r3, r0, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	3332      	adds	r3, #50	; 0x32
 800b6a4:	4a07      	ldr	r2, [pc, #28]	; (800b6c4 <UART_SetConfig+0x118>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	095b      	lsrs	r3, r3, #5
 800b6ac:	f003 020f 	and.w	r2, r3, #15
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	440a      	add	r2, r1
 800b6b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b6b8:	bf00      	nop
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	40013800 	.word	0x40013800
 800b6c4:	51eb851f 	.word	0x51eb851f

0800b6c8 <atoi>:
 800b6c8:	220a      	movs	r2, #10
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f000 be96 	b.w	800c3fc <strtol>

0800b6d0 <__errno>:
 800b6d0:	4b01      	ldr	r3, [pc, #4]	; (800b6d8 <__errno+0x8>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	20000024 	.word	0x20000024

0800b6dc <__libc_init_array>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	2600      	movs	r6, #0
 800b6e0:	4d0c      	ldr	r5, [pc, #48]	; (800b714 <__libc_init_array+0x38>)
 800b6e2:	4c0d      	ldr	r4, [pc, #52]	; (800b718 <__libc_init_array+0x3c>)
 800b6e4:	1b64      	subs	r4, r4, r5
 800b6e6:	10a4      	asrs	r4, r4, #2
 800b6e8:	42a6      	cmp	r6, r4
 800b6ea:	d109      	bne.n	800b700 <__libc_init_array+0x24>
 800b6ec:	f003 feca 	bl	800f484 <_init>
 800b6f0:	2600      	movs	r6, #0
 800b6f2:	4d0a      	ldr	r5, [pc, #40]	; (800b71c <__libc_init_array+0x40>)
 800b6f4:	4c0a      	ldr	r4, [pc, #40]	; (800b720 <__libc_init_array+0x44>)
 800b6f6:	1b64      	subs	r4, r4, r5
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	42a6      	cmp	r6, r4
 800b6fc:	d105      	bne.n	800b70a <__libc_init_array+0x2e>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	f855 3b04 	ldr.w	r3, [r5], #4
 800b704:	4798      	blx	r3
 800b706:	3601      	adds	r6, #1
 800b708:	e7ee      	b.n	800b6e8 <__libc_init_array+0xc>
 800b70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70e:	4798      	blx	r3
 800b710:	3601      	adds	r6, #1
 800b712:	e7f2      	b.n	800b6fa <__libc_init_array+0x1e>
 800b714:	08010fe8 	.word	0x08010fe8
 800b718:	08010fe8 	.word	0x08010fe8
 800b71c:	08010fe8 	.word	0x08010fe8
 800b720:	08010fec 	.word	0x08010fec

0800b724 <malloc>:
 800b724:	4b02      	ldr	r3, [pc, #8]	; (800b730 <malloc+0xc>)
 800b726:	4601      	mov	r1, r0
 800b728:	6818      	ldr	r0, [r3, #0]
 800b72a:	f000 b889 	b.w	800b840 <_malloc_r>
 800b72e:	bf00      	nop
 800b730:	20000024 	.word	0x20000024

0800b734 <free>:
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <free+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 b819 	b.w	800b770 <_free_r>
 800b73e:	bf00      	nop
 800b740:	20000024 	.word	0x20000024

0800b744 <memcpy>:
 800b744:	440a      	add	r2, r1
 800b746:	4291      	cmp	r1, r2
 800b748:	f100 33ff 	add.w	r3, r0, #4294967295
 800b74c:	d100      	bne.n	800b750 <memcpy+0xc>
 800b74e:	4770      	bx	lr
 800b750:	b510      	push	{r4, lr}
 800b752:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b756:	4291      	cmp	r1, r2
 800b758:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b75c:	d1f9      	bne.n	800b752 <memcpy+0xe>
 800b75e:	bd10      	pop	{r4, pc}

0800b760 <memset>:
 800b760:	4603      	mov	r3, r0
 800b762:	4402      	add	r2, r0
 800b764:	4293      	cmp	r3, r2
 800b766:	d100      	bne.n	800b76a <memset+0xa>
 800b768:	4770      	bx	lr
 800b76a:	f803 1b01 	strb.w	r1, [r3], #1
 800b76e:	e7f9      	b.n	800b764 <memset+0x4>

0800b770 <_free_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4605      	mov	r5, r0
 800b774:	2900      	cmp	r1, #0
 800b776:	d040      	beq.n	800b7fa <_free_r+0x8a>
 800b778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b77c:	1f0c      	subs	r4, r1, #4
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bfb8      	it	lt
 800b782:	18e4      	addlt	r4, r4, r3
 800b784:	f001 fcd0 	bl	800d128 <__malloc_lock>
 800b788:	4a1c      	ldr	r2, [pc, #112]	; (800b7fc <_free_r+0x8c>)
 800b78a:	6813      	ldr	r3, [r2, #0]
 800b78c:	b933      	cbnz	r3, 800b79c <_free_r+0x2c>
 800b78e:	6063      	str	r3, [r4, #4]
 800b790:	6014      	str	r4, [r2, #0]
 800b792:	4628      	mov	r0, r5
 800b794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b798:	f001 bccc 	b.w	800d134 <__malloc_unlock>
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	d908      	bls.n	800b7b2 <_free_r+0x42>
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	1821      	adds	r1, r4, r0
 800b7a4:	428b      	cmp	r3, r1
 800b7a6:	bf01      	itttt	eq
 800b7a8:	6819      	ldreq	r1, [r3, #0]
 800b7aa:	685b      	ldreq	r3, [r3, #4]
 800b7ac:	1809      	addeq	r1, r1, r0
 800b7ae:	6021      	streq	r1, [r4, #0]
 800b7b0:	e7ed      	b.n	800b78e <_free_r+0x1e>
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	b10b      	cbz	r3, 800b7bc <_free_r+0x4c>
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	d9fa      	bls.n	800b7b2 <_free_r+0x42>
 800b7bc:	6811      	ldr	r1, [r2, #0]
 800b7be:	1850      	adds	r0, r2, r1
 800b7c0:	42a0      	cmp	r0, r4
 800b7c2:	d10b      	bne.n	800b7dc <_free_r+0x6c>
 800b7c4:	6820      	ldr	r0, [r4, #0]
 800b7c6:	4401      	add	r1, r0
 800b7c8:	1850      	adds	r0, r2, r1
 800b7ca:	4283      	cmp	r3, r0
 800b7cc:	6011      	str	r1, [r2, #0]
 800b7ce:	d1e0      	bne.n	800b792 <_free_r+0x22>
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4401      	add	r1, r0
 800b7d6:	6011      	str	r1, [r2, #0]
 800b7d8:	6053      	str	r3, [r2, #4]
 800b7da:	e7da      	b.n	800b792 <_free_r+0x22>
 800b7dc:	d902      	bls.n	800b7e4 <_free_r+0x74>
 800b7de:	230c      	movs	r3, #12
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	e7d6      	b.n	800b792 <_free_r+0x22>
 800b7e4:	6820      	ldr	r0, [r4, #0]
 800b7e6:	1821      	adds	r1, r4, r0
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	bf01      	itttt	eq
 800b7ec:	6819      	ldreq	r1, [r3, #0]
 800b7ee:	685b      	ldreq	r3, [r3, #4]
 800b7f0:	1809      	addeq	r1, r1, r0
 800b7f2:	6021      	streq	r1, [r4, #0]
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	6054      	str	r4, [r2, #4]
 800b7f8:	e7cb      	b.n	800b792 <_free_r+0x22>
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	20001cf4 	.word	0x20001cf4

0800b800 <sbrk_aligned>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	4e0e      	ldr	r6, [pc, #56]	; (800b83c <sbrk_aligned+0x3c>)
 800b804:	460c      	mov	r4, r1
 800b806:	6831      	ldr	r1, [r6, #0]
 800b808:	4605      	mov	r5, r0
 800b80a:	b911      	cbnz	r1, 800b812 <sbrk_aligned+0x12>
 800b80c:	f000 fcec 	bl	800c1e8 <_sbrk_r>
 800b810:	6030      	str	r0, [r6, #0]
 800b812:	4621      	mov	r1, r4
 800b814:	4628      	mov	r0, r5
 800b816:	f000 fce7 	bl	800c1e8 <_sbrk_r>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d00a      	beq.n	800b834 <sbrk_aligned+0x34>
 800b81e:	1cc4      	adds	r4, r0, #3
 800b820:	f024 0403 	bic.w	r4, r4, #3
 800b824:	42a0      	cmp	r0, r4
 800b826:	d007      	beq.n	800b838 <sbrk_aligned+0x38>
 800b828:	1a21      	subs	r1, r4, r0
 800b82a:	4628      	mov	r0, r5
 800b82c:	f000 fcdc 	bl	800c1e8 <_sbrk_r>
 800b830:	3001      	adds	r0, #1
 800b832:	d101      	bne.n	800b838 <sbrk_aligned+0x38>
 800b834:	f04f 34ff 	mov.w	r4, #4294967295
 800b838:	4620      	mov	r0, r4
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	20001cf8 	.word	0x20001cf8

0800b840 <_malloc_r>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	1ccd      	adds	r5, r1, #3
 800b846:	f025 0503 	bic.w	r5, r5, #3
 800b84a:	3508      	adds	r5, #8
 800b84c:	2d0c      	cmp	r5, #12
 800b84e:	bf38      	it	cc
 800b850:	250c      	movcc	r5, #12
 800b852:	2d00      	cmp	r5, #0
 800b854:	4607      	mov	r7, r0
 800b856:	db01      	blt.n	800b85c <_malloc_r+0x1c>
 800b858:	42a9      	cmp	r1, r5
 800b85a:	d905      	bls.n	800b868 <_malloc_r+0x28>
 800b85c:	230c      	movs	r3, #12
 800b85e:	2600      	movs	r6, #0
 800b860:	603b      	str	r3, [r7, #0]
 800b862:	4630      	mov	r0, r6
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	4e2e      	ldr	r6, [pc, #184]	; (800b924 <_malloc_r+0xe4>)
 800b86a:	f001 fc5d 	bl	800d128 <__malloc_lock>
 800b86e:	6833      	ldr	r3, [r6, #0]
 800b870:	461c      	mov	r4, r3
 800b872:	bb34      	cbnz	r4, 800b8c2 <_malloc_r+0x82>
 800b874:	4629      	mov	r1, r5
 800b876:	4638      	mov	r0, r7
 800b878:	f7ff ffc2 	bl	800b800 <sbrk_aligned>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	4604      	mov	r4, r0
 800b880:	d14d      	bne.n	800b91e <_malloc_r+0xde>
 800b882:	6834      	ldr	r4, [r6, #0]
 800b884:	4626      	mov	r6, r4
 800b886:	2e00      	cmp	r6, #0
 800b888:	d140      	bne.n	800b90c <_malloc_r+0xcc>
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	4631      	mov	r1, r6
 800b88e:	4638      	mov	r0, r7
 800b890:	eb04 0803 	add.w	r8, r4, r3
 800b894:	f000 fca8 	bl	800c1e8 <_sbrk_r>
 800b898:	4580      	cmp	r8, r0
 800b89a:	d13a      	bne.n	800b912 <_malloc_r+0xd2>
 800b89c:	6821      	ldr	r1, [r4, #0]
 800b89e:	3503      	adds	r5, #3
 800b8a0:	1a6d      	subs	r5, r5, r1
 800b8a2:	f025 0503 	bic.w	r5, r5, #3
 800b8a6:	3508      	adds	r5, #8
 800b8a8:	2d0c      	cmp	r5, #12
 800b8aa:	bf38      	it	cc
 800b8ac:	250c      	movcc	r5, #12
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7ff ffa5 	bl	800b800 <sbrk_aligned>
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	d02b      	beq.n	800b912 <_malloc_r+0xd2>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	442b      	add	r3, r5
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	e00e      	b.n	800b8e0 <_malloc_r+0xa0>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	1b52      	subs	r2, r2, r5
 800b8c6:	d41e      	bmi.n	800b906 <_malloc_r+0xc6>
 800b8c8:	2a0b      	cmp	r2, #11
 800b8ca:	d916      	bls.n	800b8fa <_malloc_r+0xba>
 800b8cc:	1961      	adds	r1, r4, r5
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	6025      	str	r5, [r4, #0]
 800b8d2:	bf18      	it	ne
 800b8d4:	6059      	strne	r1, [r3, #4]
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	bf08      	it	eq
 800b8da:	6031      	streq	r1, [r6, #0]
 800b8dc:	5162      	str	r2, [r4, r5]
 800b8de:	604b      	str	r3, [r1, #4]
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f104 060b 	add.w	r6, r4, #11
 800b8e6:	f001 fc25 	bl	800d134 <__malloc_unlock>
 800b8ea:	f026 0607 	bic.w	r6, r6, #7
 800b8ee:	1d23      	adds	r3, r4, #4
 800b8f0:	1af2      	subs	r2, r6, r3
 800b8f2:	d0b6      	beq.n	800b862 <_malloc_r+0x22>
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	50a3      	str	r3, [r4, r2]
 800b8f8:	e7b3      	b.n	800b862 <_malloc_r+0x22>
 800b8fa:	6862      	ldr	r2, [r4, #4]
 800b8fc:	42a3      	cmp	r3, r4
 800b8fe:	bf0c      	ite	eq
 800b900:	6032      	streq	r2, [r6, #0]
 800b902:	605a      	strne	r2, [r3, #4]
 800b904:	e7ec      	b.n	800b8e0 <_malloc_r+0xa0>
 800b906:	4623      	mov	r3, r4
 800b908:	6864      	ldr	r4, [r4, #4]
 800b90a:	e7b2      	b.n	800b872 <_malloc_r+0x32>
 800b90c:	4634      	mov	r4, r6
 800b90e:	6876      	ldr	r6, [r6, #4]
 800b910:	e7b9      	b.n	800b886 <_malloc_r+0x46>
 800b912:	230c      	movs	r3, #12
 800b914:	4638      	mov	r0, r7
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	f001 fc0c 	bl	800d134 <__malloc_unlock>
 800b91c:	e7a1      	b.n	800b862 <_malloc_r+0x22>
 800b91e:	6025      	str	r5, [r4, #0]
 800b920:	e7de      	b.n	800b8e0 <_malloc_r+0xa0>
 800b922:	bf00      	nop
 800b924:	20001cf4 	.word	0x20001cf4

0800b928 <__cvt>:
 800b928:	2b00      	cmp	r3, #0
 800b92a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b92e:	461f      	mov	r7, r3
 800b930:	bfbb      	ittet	lt
 800b932:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b936:	461f      	movlt	r7, r3
 800b938:	2300      	movge	r3, #0
 800b93a:	232d      	movlt	r3, #45	; 0x2d
 800b93c:	b088      	sub	sp, #32
 800b93e:	4614      	mov	r4, r2
 800b940:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b942:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b944:	7013      	strb	r3, [r2, #0]
 800b946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b948:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b94c:	f023 0820 	bic.w	r8, r3, #32
 800b950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b954:	d005      	beq.n	800b962 <__cvt+0x3a>
 800b956:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b95a:	d100      	bne.n	800b95e <__cvt+0x36>
 800b95c:	3501      	adds	r5, #1
 800b95e:	2302      	movs	r3, #2
 800b960:	e000      	b.n	800b964 <__cvt+0x3c>
 800b962:	2303      	movs	r3, #3
 800b964:	aa07      	add	r2, sp, #28
 800b966:	9204      	str	r2, [sp, #16]
 800b968:	aa06      	add	r2, sp, #24
 800b96a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b96e:	e9cd 3500 	strd	r3, r5, [sp]
 800b972:	4622      	mov	r2, r4
 800b974:	463b      	mov	r3, r7
 800b976:	f000 fdd7 	bl	800c528 <_dtoa_r>
 800b97a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b97e:	4606      	mov	r6, r0
 800b980:	d102      	bne.n	800b988 <__cvt+0x60>
 800b982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b984:	07db      	lsls	r3, r3, #31
 800b986:	d522      	bpl.n	800b9ce <__cvt+0xa6>
 800b988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b98c:	eb06 0905 	add.w	r9, r6, r5
 800b990:	d110      	bne.n	800b9b4 <__cvt+0x8c>
 800b992:	7833      	ldrb	r3, [r6, #0]
 800b994:	2b30      	cmp	r3, #48	; 0x30
 800b996:	d10a      	bne.n	800b9ae <__cvt+0x86>
 800b998:	2200      	movs	r2, #0
 800b99a:	2300      	movs	r3, #0
 800b99c:	4620      	mov	r0, r4
 800b99e:	4639      	mov	r1, r7
 800b9a0:	f7f5 f80c 	bl	80009bc <__aeabi_dcmpeq>
 800b9a4:	b918      	cbnz	r0, 800b9ae <__cvt+0x86>
 800b9a6:	f1c5 0501 	rsb	r5, r5, #1
 800b9aa:	f8ca 5000 	str.w	r5, [sl]
 800b9ae:	f8da 3000 	ldr.w	r3, [sl]
 800b9b2:	4499      	add	r9, r3
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	f7f4 fffe 	bl	80009bc <__aeabi_dcmpeq>
 800b9c0:	b108      	cbz	r0, 800b9c6 <__cvt+0x9e>
 800b9c2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9c6:	2230      	movs	r2, #48	; 0x30
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	454b      	cmp	r3, r9
 800b9cc:	d307      	bcc.n	800b9de <__cvt+0xb6>
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	9b07      	ldr	r3, [sp, #28]
 800b9d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9d4:	1b9b      	subs	r3, r3, r6
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	b008      	add	sp, #32
 800b9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9de:	1c59      	adds	r1, r3, #1
 800b9e0:	9107      	str	r1, [sp, #28]
 800b9e2:	701a      	strb	r2, [r3, #0]
 800b9e4:	e7f0      	b.n	800b9c8 <__cvt+0xa0>

0800b9e6 <__exponent>:
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	f803 2b02 	strb.w	r2, [r3], #2
 800b9f0:	bfb6      	itet	lt
 800b9f2:	222d      	movlt	r2, #45	; 0x2d
 800b9f4:	222b      	movge	r2, #43	; 0x2b
 800b9f6:	4249      	neglt	r1, r1
 800b9f8:	2909      	cmp	r1, #9
 800b9fa:	7042      	strb	r2, [r0, #1]
 800b9fc:	dd2b      	ble.n	800ba56 <__exponent+0x70>
 800b9fe:	f10d 0407 	add.w	r4, sp, #7
 800ba02:	46a4      	mov	ip, r4
 800ba04:	270a      	movs	r7, #10
 800ba06:	fb91 f6f7 	sdiv	r6, r1, r7
 800ba0a:	460a      	mov	r2, r1
 800ba0c:	46a6      	mov	lr, r4
 800ba0e:	fb07 1516 	mls	r5, r7, r6, r1
 800ba12:	2a63      	cmp	r2, #99	; 0x63
 800ba14:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ba18:	4631      	mov	r1, r6
 800ba1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ba22:	dcf0      	bgt.n	800ba06 <__exponent+0x20>
 800ba24:	3130      	adds	r1, #48	; 0x30
 800ba26:	f1ae 0502 	sub.w	r5, lr, #2
 800ba2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ba2e:	4629      	mov	r1, r5
 800ba30:	1c44      	adds	r4, r0, #1
 800ba32:	4561      	cmp	r1, ip
 800ba34:	d30a      	bcc.n	800ba4c <__exponent+0x66>
 800ba36:	f10d 0209 	add.w	r2, sp, #9
 800ba3a:	eba2 020e 	sub.w	r2, r2, lr
 800ba3e:	4565      	cmp	r5, ip
 800ba40:	bf88      	it	hi
 800ba42:	2200      	movhi	r2, #0
 800ba44:	4413      	add	r3, r2
 800ba46:	1a18      	subs	r0, r3, r0
 800ba48:	b003      	add	sp, #12
 800ba4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba50:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba54:	e7ed      	b.n	800ba32 <__exponent+0x4c>
 800ba56:	2330      	movs	r3, #48	; 0x30
 800ba58:	3130      	adds	r1, #48	; 0x30
 800ba5a:	7083      	strb	r3, [r0, #2]
 800ba5c:	70c1      	strb	r1, [r0, #3]
 800ba5e:	1d03      	adds	r3, r0, #4
 800ba60:	e7f1      	b.n	800ba46 <__exponent+0x60>
	...

0800ba64 <_printf_float>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	b091      	sub	sp, #68	; 0x44
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ba70:	4616      	mov	r6, r2
 800ba72:	461f      	mov	r7, r3
 800ba74:	4605      	mov	r5, r0
 800ba76:	f001 fb45 	bl	800d104 <_localeconv_r>
 800ba7a:	6803      	ldr	r3, [r0, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	f7f4 fb70 	bl	8000164 <strlen>
 800ba84:	2300      	movs	r3, #0
 800ba86:	930e      	str	r3, [sp, #56]	; 0x38
 800ba88:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8c:	900a      	str	r0, [sp, #40]	; 0x28
 800ba8e:	3307      	adds	r3, #7
 800ba90:	f023 0307 	bic.w	r3, r3, #7
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ba9c:	f8d4 b000 	ldr.w	fp, [r4]
 800baa0:	f8c8 2000 	str.w	r2, [r8]
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800baac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bab0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bab4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	4640      	mov	r0, r8
 800babc:	4b9c      	ldr	r3, [pc, #624]	; (800bd30 <_printf_float+0x2cc>)
 800babe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bac0:	f7f4 ffae 	bl	8000a20 <__aeabi_dcmpun>
 800bac4:	bb70      	cbnz	r0, 800bb24 <_printf_float+0xc0>
 800bac6:	f04f 32ff 	mov.w	r2, #4294967295
 800baca:	4640      	mov	r0, r8
 800bacc:	4b98      	ldr	r3, [pc, #608]	; (800bd30 <_printf_float+0x2cc>)
 800bace:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bad0:	f7f4 ff88 	bl	80009e4 <__aeabi_dcmple>
 800bad4:	bb30      	cbnz	r0, 800bb24 <_printf_float+0xc0>
 800bad6:	2200      	movs	r2, #0
 800bad8:	2300      	movs	r3, #0
 800bada:	4640      	mov	r0, r8
 800badc:	4651      	mov	r1, sl
 800bade:	f7f4 ff77 	bl	80009d0 <__aeabi_dcmplt>
 800bae2:	b110      	cbz	r0, 800baea <_printf_float+0x86>
 800bae4:	232d      	movs	r3, #45	; 0x2d
 800bae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baea:	4b92      	ldr	r3, [pc, #584]	; (800bd34 <_printf_float+0x2d0>)
 800baec:	4892      	ldr	r0, [pc, #584]	; (800bd38 <_printf_float+0x2d4>)
 800baee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800baf2:	bf94      	ite	ls
 800baf4:	4698      	movls	r8, r3
 800baf6:	4680      	movhi	r8, r0
 800baf8:	2303      	movs	r3, #3
 800bafa:	f04f 0a00 	mov.w	sl, #0
 800bafe:	6123      	str	r3, [r4, #16]
 800bb00:	f02b 0304 	bic.w	r3, fp, #4
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	4633      	mov	r3, r6
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	9700      	str	r7, [sp, #0]
 800bb0e:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb10:	f000 f9d4 	bl	800bebc <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f040 8090 	bne.w	800bc3a <_printf_float+0x1d6>
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1e:	b011      	add	sp, #68	; 0x44
 800bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb24:	4642      	mov	r2, r8
 800bb26:	4653      	mov	r3, sl
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	f7f4 ff78 	bl	8000a20 <__aeabi_dcmpun>
 800bb30:	b148      	cbz	r0, 800bb46 <_printf_float+0xe2>
 800bb32:	f1ba 0f00 	cmp.w	sl, #0
 800bb36:	bfb8      	it	lt
 800bb38:	232d      	movlt	r3, #45	; 0x2d
 800bb3a:	4880      	ldr	r0, [pc, #512]	; (800bd3c <_printf_float+0x2d8>)
 800bb3c:	bfb8      	it	lt
 800bb3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb42:	4b7f      	ldr	r3, [pc, #508]	; (800bd40 <_printf_float+0x2dc>)
 800bb44:	e7d3      	b.n	800baee <_printf_float+0x8a>
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	d142      	bne.n	800bbd6 <_printf_float+0x172>
 800bb50:	2306      	movs	r3, #6
 800bb52:	6063      	str	r3, [r4, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	9206      	str	r2, [sp, #24]
 800bb58:	aa0e      	add	r2, sp, #56	; 0x38
 800bb5a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bb5e:	aa0d      	add	r2, sp, #52	; 0x34
 800bb60:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bb64:	9203      	str	r2, [sp, #12]
 800bb66:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bb6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	6863      	ldr	r3, [r4, #4]
 800bb72:	4642      	mov	r2, r8
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	4628      	mov	r0, r5
 800bb78:	4653      	mov	r3, sl
 800bb7a:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb7c:	f7ff fed4 	bl	800b928 <__cvt>
 800bb80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb82:	4680      	mov	r8, r0
 800bb84:	2947      	cmp	r1, #71	; 0x47
 800bb86:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb88:	d108      	bne.n	800bb9c <_printf_float+0x138>
 800bb8a:	1cc8      	adds	r0, r1, #3
 800bb8c:	db02      	blt.n	800bb94 <_printf_float+0x130>
 800bb8e:	6863      	ldr	r3, [r4, #4]
 800bb90:	4299      	cmp	r1, r3
 800bb92:	dd40      	ble.n	800bc16 <_printf_float+0x1b2>
 800bb94:	f1a9 0902 	sub.w	r9, r9, #2
 800bb98:	fa5f f989 	uxtb.w	r9, r9
 800bb9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bba0:	d81f      	bhi.n	800bbe2 <_printf_float+0x17e>
 800bba2:	464a      	mov	r2, r9
 800bba4:	3901      	subs	r1, #1
 800bba6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bbaa:	910d      	str	r1, [sp, #52]	; 0x34
 800bbac:	f7ff ff1b 	bl	800b9e6 <__exponent>
 800bbb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	1813      	adds	r3, r2, r0
 800bbb6:	2a01      	cmp	r2, #1
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	dc02      	bgt.n	800bbc2 <_printf_float+0x15e>
 800bbbc:	6822      	ldr	r2, [r4, #0]
 800bbbe:	07d2      	lsls	r2, r2, #31
 800bbc0:	d501      	bpl.n	800bbc6 <_printf_float+0x162>
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d09b      	beq.n	800bb06 <_printf_float+0xa2>
 800bbce:	232d      	movs	r3, #45	; 0x2d
 800bbd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd4:	e797      	b.n	800bb06 <_printf_float+0xa2>
 800bbd6:	2947      	cmp	r1, #71	; 0x47
 800bbd8:	d1bc      	bne.n	800bb54 <_printf_float+0xf0>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1ba      	bne.n	800bb54 <_printf_float+0xf0>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e7b7      	b.n	800bb52 <_printf_float+0xee>
 800bbe2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bbe6:	d118      	bne.n	800bc1a <_printf_float+0x1b6>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	dd0b      	ble.n	800bc06 <_printf_float+0x1a2>
 800bbee:	6121      	str	r1, [r4, #16]
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_printf_float+0x194>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d502      	bpl.n	800bbfe <_printf_float+0x19a>
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	440b      	add	r3, r1
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	f04f 0a00 	mov.w	sl, #0
 800bc02:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc04:	e7df      	b.n	800bbc6 <_printf_float+0x162>
 800bc06:	b913      	cbnz	r3, 800bc0e <_printf_float+0x1aa>
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	07d2      	lsls	r2, r2, #31
 800bc0c:	d501      	bpl.n	800bc12 <_printf_float+0x1ae>
 800bc0e:	3302      	adds	r3, #2
 800bc10:	e7f4      	b.n	800bbfc <_printf_float+0x198>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e7f2      	b.n	800bbfc <_printf_float+0x198>
 800bc16:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	db05      	blt.n	800bc2c <_printf_float+0x1c8>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	6121      	str	r1, [r4, #16]
 800bc24:	07d8      	lsls	r0, r3, #31
 800bc26:	d5ea      	bpl.n	800bbfe <_printf_float+0x19a>
 800bc28:	1c4b      	adds	r3, r1, #1
 800bc2a:	e7e7      	b.n	800bbfc <_printf_float+0x198>
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	bfcc      	ite	gt
 800bc30:	2201      	movgt	r2, #1
 800bc32:	f1c1 0202 	rsble	r2, r1, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	e7e0      	b.n	800bbfc <_printf_float+0x198>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	055a      	lsls	r2, r3, #21
 800bc3e:	d407      	bmi.n	800bc50 <_printf_float+0x1ec>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	4642      	mov	r2, r8
 800bc44:	4631      	mov	r1, r6
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d12b      	bne.n	800bca6 <_printf_float+0x242>
 800bc4e:	e764      	b.n	800bb1a <_printf_float+0xb6>
 800bc50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc54:	f240 80dd 	bls.w	800be12 <_printf_float+0x3ae>
 800bc58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 feac 	bl	80009bc <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d033      	beq.n	800bcd0 <_printf_float+0x26c>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	4a35      	ldr	r2, [pc, #212]	; (800bd44 <_printf_float+0x2e0>)
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f af51 	beq.w	800bb1a <_printf_float+0xb6>
 800bc78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	db02      	blt.n	800bc86 <_printf_float+0x222>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07d8      	lsls	r0, r3, #31
 800bc84:	d50f      	bpl.n	800bca6 <_printf_float+0x242>
 800bc86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	47b8      	blx	r7
 800bc90:	3001      	adds	r0, #1
 800bc92:	f43f af42 	beq.w	800bb1a <_printf_float+0xb6>
 800bc96:	f04f 0800 	mov.w	r8, #0
 800bc9a:	f104 091a 	add.w	r9, r4, #26
 800bc9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bca0:	3b01      	subs	r3, #1
 800bca2:	4543      	cmp	r3, r8
 800bca4:	dc09      	bgt.n	800bcba <_printf_float+0x256>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	079b      	lsls	r3, r3, #30
 800bcaa:	f100 8102 	bmi.w	800beb2 <_printf_float+0x44e>
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb2:	4298      	cmp	r0, r3
 800bcb4:	bfb8      	it	lt
 800bcb6:	4618      	movlt	r0, r3
 800bcb8:	e731      	b.n	800bb1e <_printf_float+0xba>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	464a      	mov	r2, r9
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f43f af28 	beq.w	800bb1a <_printf_float+0xb6>
 800bcca:	f108 0801 	add.w	r8, r8, #1
 800bcce:	e7e6      	b.n	800bc9e <_printf_float+0x23a>
 800bcd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dc38      	bgt.n	800bd48 <_printf_float+0x2e4>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	4631      	mov	r1, r6
 800bcda:	4628      	mov	r0, r5
 800bcdc:	4a19      	ldr	r2, [pc, #100]	; (800bd44 <_printf_float+0x2e0>)
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	f43f af1a 	beq.w	800bb1a <_printf_float+0xb6>
 800bce6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bcea:	4313      	orrs	r3, r2
 800bcec:	d102      	bne.n	800bcf4 <_printf_float+0x290>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	07d9      	lsls	r1, r3, #31
 800bcf2:	d5d8      	bpl.n	800bca6 <_printf_float+0x242>
 800bcf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	47b8      	blx	r7
 800bcfe:	3001      	adds	r0, #1
 800bd00:	f43f af0b 	beq.w	800bb1a <_printf_float+0xb6>
 800bd04:	f04f 0900 	mov.w	r9, #0
 800bd08:	f104 0a1a 	add.w	sl, r4, #26
 800bd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd0e:	425b      	negs	r3, r3
 800bd10:	454b      	cmp	r3, r9
 800bd12:	dc01      	bgt.n	800bd18 <_printf_float+0x2b4>
 800bd14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd16:	e794      	b.n	800bc42 <_printf_float+0x1de>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	4652      	mov	r2, sl
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	f43f aef9 	beq.w	800bb1a <_printf_float+0xb6>
 800bd28:	f109 0901 	add.w	r9, r9, #1
 800bd2c:	e7ee      	b.n	800bd0c <_printf_float+0x2a8>
 800bd2e:	bf00      	nop
 800bd30:	7fefffff 	.word	0x7fefffff
 800bd34:	08010ce0 	.word	0x08010ce0
 800bd38:	08010ce4 	.word	0x08010ce4
 800bd3c:	08010cec 	.word	0x08010cec
 800bd40:	08010ce8 	.word	0x08010ce8
 800bd44:	08010cf0 	.word	0x08010cf0
 800bd48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	bfa8      	it	ge
 800bd50:	461a      	movge	r2, r3
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	4691      	mov	r9, r2
 800bd56:	dc37      	bgt.n	800bdc8 <_printf_float+0x364>
 800bd58:	f04f 0b00 	mov.w	fp, #0
 800bd5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd60:	f104 021a 	add.w	r2, r4, #26
 800bd64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd68:	ebaa 0309 	sub.w	r3, sl, r9
 800bd6c:	455b      	cmp	r3, fp
 800bd6e:	dc33      	bgt.n	800bdd8 <_printf_float+0x374>
 800bd70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd74:	429a      	cmp	r2, r3
 800bd76:	db3b      	blt.n	800bdf0 <_printf_float+0x38c>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	07da      	lsls	r2, r3, #31
 800bd7c:	d438      	bmi.n	800bdf0 <_printf_float+0x38c>
 800bd7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd80:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd82:	eba3 020a 	sub.w	r2, r3, sl
 800bd86:	eba3 0901 	sub.w	r9, r3, r1
 800bd8a:	4591      	cmp	r9, r2
 800bd8c:	bfa8      	it	ge
 800bd8e:	4691      	movge	r9, r2
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	dc34      	bgt.n	800be00 <_printf_float+0x39c>
 800bd96:	f04f 0800 	mov.w	r8, #0
 800bd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd9e:	f104 0a1a 	add.w	sl, r4, #26
 800bda2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bda6:	1a9b      	subs	r3, r3, r2
 800bda8:	eba3 0309 	sub.w	r3, r3, r9
 800bdac:	4543      	cmp	r3, r8
 800bdae:	f77f af7a 	ble.w	800bca6 <_printf_float+0x242>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	f43f aeac 	beq.w	800bb1a <_printf_float+0xb6>
 800bdc2:	f108 0801 	add.w	r8, r8, #1
 800bdc6:	e7ec      	b.n	800bda2 <_printf_float+0x33e>
 800bdc8:	4613      	mov	r3, r2
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4642      	mov	r2, r8
 800bdce:	4628      	mov	r0, r5
 800bdd0:	47b8      	blx	r7
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d1c0      	bne.n	800bd58 <_printf_float+0x2f4>
 800bdd6:	e6a0      	b.n	800bb1a <_printf_float+0xb6>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	4631      	mov	r1, r6
 800bddc:	4628      	mov	r0, r5
 800bdde:	920b      	str	r2, [sp, #44]	; 0x2c
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f ae99 	beq.w	800bb1a <_printf_float+0xb6>
 800bde8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdea:	f10b 0b01 	add.w	fp, fp, #1
 800bdee:	e7b9      	b.n	800bd64 <_printf_float+0x300>
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d1bf      	bne.n	800bd7e <_printf_float+0x31a>
 800bdfe:	e68c      	b.n	800bb1a <_printf_float+0xb6>
 800be00:	464b      	mov	r3, r9
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	eb08 020a 	add.w	r2, r8, sl
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	d1c2      	bne.n	800bd96 <_printf_float+0x332>
 800be10:	e683      	b.n	800bb1a <_printf_float+0xb6>
 800be12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be14:	2a01      	cmp	r2, #1
 800be16:	dc01      	bgt.n	800be1c <_printf_float+0x3b8>
 800be18:	07db      	lsls	r3, r3, #31
 800be1a:	d537      	bpl.n	800be8c <_printf_float+0x428>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4642      	mov	r2, r8
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	47b8      	blx	r7
 800be26:	3001      	adds	r0, #1
 800be28:	f43f ae77 	beq.w	800bb1a <_printf_float+0xb6>
 800be2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	f43f ae6f 	beq.w	800bb1a <_printf_float+0xb6>
 800be3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be40:	2200      	movs	r2, #0
 800be42:	2300      	movs	r3, #0
 800be44:	f7f4 fdba 	bl	80009bc <__aeabi_dcmpeq>
 800be48:	b9d8      	cbnz	r0, 800be82 <_printf_float+0x41e>
 800be4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be4c:	f108 0201 	add.w	r2, r8, #1
 800be50:	3b01      	subs	r3, #1
 800be52:	4631      	mov	r1, r6
 800be54:	4628      	mov	r0, r5
 800be56:	47b8      	blx	r7
 800be58:	3001      	adds	r0, #1
 800be5a:	d10e      	bne.n	800be7a <_printf_float+0x416>
 800be5c:	e65d      	b.n	800bb1a <_printf_float+0xb6>
 800be5e:	2301      	movs	r3, #1
 800be60:	464a      	mov	r2, r9
 800be62:	4631      	mov	r1, r6
 800be64:	4628      	mov	r0, r5
 800be66:	47b8      	blx	r7
 800be68:	3001      	adds	r0, #1
 800be6a:	f43f ae56 	beq.w	800bb1a <_printf_float+0xb6>
 800be6e:	f108 0801 	add.w	r8, r8, #1
 800be72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be74:	3b01      	subs	r3, #1
 800be76:	4543      	cmp	r3, r8
 800be78:	dcf1      	bgt.n	800be5e <_printf_float+0x3fa>
 800be7a:	4653      	mov	r3, sl
 800be7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be80:	e6e0      	b.n	800bc44 <_printf_float+0x1e0>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	f104 091a 	add.w	r9, r4, #26
 800be8a:	e7f2      	b.n	800be72 <_printf_float+0x40e>
 800be8c:	2301      	movs	r3, #1
 800be8e:	4642      	mov	r2, r8
 800be90:	e7df      	b.n	800be52 <_printf_float+0x3ee>
 800be92:	2301      	movs	r3, #1
 800be94:	464a      	mov	r2, r9
 800be96:	4631      	mov	r1, r6
 800be98:	4628      	mov	r0, r5
 800be9a:	47b8      	blx	r7
 800be9c:	3001      	adds	r0, #1
 800be9e:	f43f ae3c 	beq.w	800bb1a <_printf_float+0xb6>
 800bea2:	f108 0801 	add.w	r8, r8, #1
 800bea6:	68e3      	ldr	r3, [r4, #12]
 800bea8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800beaa:	1a5b      	subs	r3, r3, r1
 800beac:	4543      	cmp	r3, r8
 800beae:	dcf0      	bgt.n	800be92 <_printf_float+0x42e>
 800beb0:	e6fd      	b.n	800bcae <_printf_float+0x24a>
 800beb2:	f04f 0800 	mov.w	r8, #0
 800beb6:	f104 0919 	add.w	r9, r4, #25
 800beba:	e7f4      	b.n	800bea6 <_printf_float+0x442>

0800bebc <_printf_common>:
 800bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	4616      	mov	r6, r2
 800bec2:	4699      	mov	r9, r3
 800bec4:	688a      	ldr	r2, [r1, #8]
 800bec6:	690b      	ldr	r3, [r1, #16]
 800bec8:	4607      	mov	r7, r0
 800beca:	4293      	cmp	r3, r2
 800becc:	bfb8      	it	lt
 800bece:	4613      	movlt	r3, r2
 800bed0:	6033      	str	r3, [r6, #0]
 800bed2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bed6:	460c      	mov	r4, r1
 800bed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bedc:	b10a      	cbz	r2, 800bee2 <_printf_common+0x26>
 800bede:	3301      	adds	r3, #1
 800bee0:	6033      	str	r3, [r6, #0]
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	0699      	lsls	r1, r3, #26
 800bee6:	bf42      	ittt	mi
 800bee8:	6833      	ldrmi	r3, [r6, #0]
 800beea:	3302      	addmi	r3, #2
 800beec:	6033      	strmi	r3, [r6, #0]
 800beee:	6825      	ldr	r5, [r4, #0]
 800bef0:	f015 0506 	ands.w	r5, r5, #6
 800bef4:	d106      	bne.n	800bf04 <_printf_common+0x48>
 800bef6:	f104 0a19 	add.w	sl, r4, #25
 800befa:	68e3      	ldr	r3, [r4, #12]
 800befc:	6832      	ldr	r2, [r6, #0]
 800befe:	1a9b      	subs	r3, r3, r2
 800bf00:	42ab      	cmp	r3, r5
 800bf02:	dc28      	bgt.n	800bf56 <_printf_common+0x9a>
 800bf04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf08:	1e13      	subs	r3, r2, #0
 800bf0a:	6822      	ldr	r2, [r4, #0]
 800bf0c:	bf18      	it	ne
 800bf0e:	2301      	movne	r3, #1
 800bf10:	0692      	lsls	r2, r2, #26
 800bf12:	d42d      	bmi.n	800bf70 <_printf_common+0xb4>
 800bf14:	4649      	mov	r1, r9
 800bf16:	4638      	mov	r0, r7
 800bf18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf1c:	47c0      	blx	r8
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d020      	beq.n	800bf64 <_printf_common+0xa8>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	68e5      	ldr	r5, [r4, #12]
 800bf26:	f003 0306 	and.w	r3, r3, #6
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	bf18      	it	ne
 800bf2e:	2500      	movne	r5, #0
 800bf30:	6832      	ldr	r2, [r6, #0]
 800bf32:	f04f 0600 	mov.w	r6, #0
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	bf08      	it	eq
 800bf3a:	1aad      	subeq	r5, r5, r2
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	bf08      	it	eq
 800bf40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf44:	4293      	cmp	r3, r2
 800bf46:	bfc4      	itt	gt
 800bf48:	1a9b      	subgt	r3, r3, r2
 800bf4a:	18ed      	addgt	r5, r5, r3
 800bf4c:	341a      	adds	r4, #26
 800bf4e:	42b5      	cmp	r5, r6
 800bf50:	d11a      	bne.n	800bf88 <_printf_common+0xcc>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e008      	b.n	800bf68 <_printf_common+0xac>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4652      	mov	r2, sl
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	47c0      	blx	r8
 800bf60:	3001      	adds	r0, #1
 800bf62:	d103      	bne.n	800bf6c <_printf_common+0xb0>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	e7c4      	b.n	800befa <_printf_common+0x3e>
 800bf70:	2030      	movs	r0, #48	; 0x30
 800bf72:	18e1      	adds	r1, r4, r3
 800bf74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf7e:	4422      	add	r2, r4
 800bf80:	3302      	adds	r3, #2
 800bf82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf86:	e7c5      	b.n	800bf14 <_printf_common+0x58>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4649      	mov	r1, r9
 800bf8e:	4638      	mov	r0, r7
 800bf90:	47c0      	blx	r8
 800bf92:	3001      	adds	r0, #1
 800bf94:	d0e6      	beq.n	800bf64 <_printf_common+0xa8>
 800bf96:	3601      	adds	r6, #1
 800bf98:	e7d9      	b.n	800bf4e <_printf_common+0x92>
	...

0800bf9c <_printf_i>:
 800bf9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	7e0f      	ldrb	r7, [r1, #24]
 800bfa2:	4691      	mov	r9, r2
 800bfa4:	2f78      	cmp	r7, #120	; 0x78
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	469a      	mov	sl, r3
 800bfac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfb2:	d807      	bhi.n	800bfc4 <_printf_i+0x28>
 800bfb4:	2f62      	cmp	r7, #98	; 0x62
 800bfb6:	d80a      	bhi.n	800bfce <_printf_i+0x32>
 800bfb8:	2f00      	cmp	r7, #0
 800bfba:	f000 80d9 	beq.w	800c170 <_printf_i+0x1d4>
 800bfbe:	2f58      	cmp	r7, #88	; 0x58
 800bfc0:	f000 80a4 	beq.w	800c10c <_printf_i+0x170>
 800bfc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfcc:	e03a      	b.n	800c044 <_printf_i+0xa8>
 800bfce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfd2:	2b15      	cmp	r3, #21
 800bfd4:	d8f6      	bhi.n	800bfc4 <_printf_i+0x28>
 800bfd6:	a101      	add	r1, pc, #4	; (adr r1, 800bfdc <_printf_i+0x40>)
 800bfd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfdc:	0800c035 	.word	0x0800c035
 800bfe0:	0800c049 	.word	0x0800c049
 800bfe4:	0800bfc5 	.word	0x0800bfc5
 800bfe8:	0800bfc5 	.word	0x0800bfc5
 800bfec:	0800bfc5 	.word	0x0800bfc5
 800bff0:	0800bfc5 	.word	0x0800bfc5
 800bff4:	0800c049 	.word	0x0800c049
 800bff8:	0800bfc5 	.word	0x0800bfc5
 800bffc:	0800bfc5 	.word	0x0800bfc5
 800c000:	0800bfc5 	.word	0x0800bfc5
 800c004:	0800bfc5 	.word	0x0800bfc5
 800c008:	0800c157 	.word	0x0800c157
 800c00c:	0800c079 	.word	0x0800c079
 800c010:	0800c139 	.word	0x0800c139
 800c014:	0800bfc5 	.word	0x0800bfc5
 800c018:	0800bfc5 	.word	0x0800bfc5
 800c01c:	0800c179 	.word	0x0800c179
 800c020:	0800bfc5 	.word	0x0800bfc5
 800c024:	0800c079 	.word	0x0800c079
 800c028:	0800bfc5 	.word	0x0800bfc5
 800c02c:	0800bfc5 	.word	0x0800bfc5
 800c030:	0800c141 	.word	0x0800c141
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	1d1a      	adds	r2, r3, #4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	602a      	str	r2, [r5, #0]
 800c03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c044:	2301      	movs	r3, #1
 800c046:	e0a4      	b.n	800c192 <_printf_i+0x1f6>
 800c048:	6820      	ldr	r0, [r4, #0]
 800c04a:	6829      	ldr	r1, [r5, #0]
 800c04c:	0606      	lsls	r6, r0, #24
 800c04e:	f101 0304 	add.w	r3, r1, #4
 800c052:	d50a      	bpl.n	800c06a <_printf_i+0xce>
 800c054:	680e      	ldr	r6, [r1, #0]
 800c056:	602b      	str	r3, [r5, #0]
 800c058:	2e00      	cmp	r6, #0
 800c05a:	da03      	bge.n	800c064 <_printf_i+0xc8>
 800c05c:	232d      	movs	r3, #45	; 0x2d
 800c05e:	4276      	negs	r6, r6
 800c060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c064:	230a      	movs	r3, #10
 800c066:	485e      	ldr	r0, [pc, #376]	; (800c1e0 <_printf_i+0x244>)
 800c068:	e019      	b.n	800c09e <_printf_i+0x102>
 800c06a:	680e      	ldr	r6, [r1, #0]
 800c06c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	bf18      	it	ne
 800c074:	b236      	sxthne	r6, r6
 800c076:	e7ef      	b.n	800c058 <_printf_i+0xbc>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	6820      	ldr	r0, [r4, #0]
 800c07c:	1d19      	adds	r1, r3, #4
 800c07e:	6029      	str	r1, [r5, #0]
 800c080:	0601      	lsls	r1, r0, #24
 800c082:	d501      	bpl.n	800c088 <_printf_i+0xec>
 800c084:	681e      	ldr	r6, [r3, #0]
 800c086:	e002      	b.n	800c08e <_printf_i+0xf2>
 800c088:	0646      	lsls	r6, r0, #25
 800c08a:	d5fb      	bpl.n	800c084 <_printf_i+0xe8>
 800c08c:	881e      	ldrh	r6, [r3, #0]
 800c08e:	2f6f      	cmp	r7, #111	; 0x6f
 800c090:	bf0c      	ite	eq
 800c092:	2308      	moveq	r3, #8
 800c094:	230a      	movne	r3, #10
 800c096:	4852      	ldr	r0, [pc, #328]	; (800c1e0 <_printf_i+0x244>)
 800c098:	2100      	movs	r1, #0
 800c09a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c09e:	6865      	ldr	r5, [r4, #4]
 800c0a0:	2d00      	cmp	r5, #0
 800c0a2:	bfa8      	it	ge
 800c0a4:	6821      	ldrge	r1, [r4, #0]
 800c0a6:	60a5      	str	r5, [r4, #8]
 800c0a8:	bfa4      	itt	ge
 800c0aa:	f021 0104 	bicge.w	r1, r1, #4
 800c0ae:	6021      	strge	r1, [r4, #0]
 800c0b0:	b90e      	cbnz	r6, 800c0b6 <_printf_i+0x11a>
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	d04d      	beq.n	800c152 <_printf_i+0x1b6>
 800c0b6:	4615      	mov	r5, r2
 800c0b8:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0bc:	fb03 6711 	mls	r7, r3, r1, r6
 800c0c0:	5dc7      	ldrb	r7, [r0, r7]
 800c0c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0c6:	4637      	mov	r7, r6
 800c0c8:	42bb      	cmp	r3, r7
 800c0ca:	460e      	mov	r6, r1
 800c0cc:	d9f4      	bls.n	800c0b8 <_printf_i+0x11c>
 800c0ce:	2b08      	cmp	r3, #8
 800c0d0:	d10b      	bne.n	800c0ea <_printf_i+0x14e>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	07de      	lsls	r6, r3, #31
 800c0d6:	d508      	bpl.n	800c0ea <_printf_i+0x14e>
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	6861      	ldr	r1, [r4, #4]
 800c0dc:	4299      	cmp	r1, r3
 800c0de:	bfde      	ittt	le
 800c0e0:	2330      	movle	r3, #48	; 0x30
 800c0e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0ea:	1b52      	subs	r2, r2, r5
 800c0ec:	6122      	str	r2, [r4, #16]
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	f8cd a000 	str.w	sl, [sp]
 800c0f8:	aa03      	add	r2, sp, #12
 800c0fa:	f7ff fedf 	bl	800bebc <_printf_common>
 800c0fe:	3001      	adds	r0, #1
 800c100:	d14c      	bne.n	800c19c <_printf_i+0x200>
 800c102:	f04f 30ff 	mov.w	r0, #4294967295
 800c106:	b004      	add	sp, #16
 800c108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10c:	4834      	ldr	r0, [pc, #208]	; (800c1e0 <_printf_i+0x244>)
 800c10e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c112:	6829      	ldr	r1, [r5, #0]
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	f851 6b04 	ldr.w	r6, [r1], #4
 800c11a:	6029      	str	r1, [r5, #0]
 800c11c:	061d      	lsls	r5, r3, #24
 800c11e:	d514      	bpl.n	800c14a <_printf_i+0x1ae>
 800c120:	07df      	lsls	r7, r3, #31
 800c122:	bf44      	itt	mi
 800c124:	f043 0320 	orrmi.w	r3, r3, #32
 800c128:	6023      	strmi	r3, [r4, #0]
 800c12a:	b91e      	cbnz	r6, 800c134 <_printf_i+0x198>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	f023 0320 	bic.w	r3, r3, #32
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	2310      	movs	r3, #16
 800c136:	e7af      	b.n	800c098 <_printf_i+0xfc>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	f043 0320 	orr.w	r3, r3, #32
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	2378      	movs	r3, #120	; 0x78
 800c142:	4828      	ldr	r0, [pc, #160]	; (800c1e4 <_printf_i+0x248>)
 800c144:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c148:	e7e3      	b.n	800c112 <_printf_i+0x176>
 800c14a:	0659      	lsls	r1, r3, #25
 800c14c:	bf48      	it	mi
 800c14e:	b2b6      	uxthmi	r6, r6
 800c150:	e7e6      	b.n	800c120 <_printf_i+0x184>
 800c152:	4615      	mov	r5, r2
 800c154:	e7bb      	b.n	800c0ce <_printf_i+0x132>
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	6826      	ldr	r6, [r4, #0]
 800c15a:	1d18      	adds	r0, r3, #4
 800c15c:	6961      	ldr	r1, [r4, #20]
 800c15e:	6028      	str	r0, [r5, #0]
 800c160:	0635      	lsls	r5, r6, #24
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	d501      	bpl.n	800c16a <_printf_i+0x1ce>
 800c166:	6019      	str	r1, [r3, #0]
 800c168:	e002      	b.n	800c170 <_printf_i+0x1d4>
 800c16a:	0670      	lsls	r0, r6, #25
 800c16c:	d5fb      	bpl.n	800c166 <_printf_i+0x1ca>
 800c16e:	8019      	strh	r1, [r3, #0]
 800c170:	2300      	movs	r3, #0
 800c172:	4615      	mov	r5, r2
 800c174:	6123      	str	r3, [r4, #16]
 800c176:	e7ba      	b.n	800c0ee <_printf_i+0x152>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	2100      	movs	r1, #0
 800c17c:	1d1a      	adds	r2, r3, #4
 800c17e:	602a      	str	r2, [r5, #0]
 800c180:	681d      	ldr	r5, [r3, #0]
 800c182:	6862      	ldr	r2, [r4, #4]
 800c184:	4628      	mov	r0, r5
 800c186:	f000 ffc1 	bl	800d10c <memchr>
 800c18a:	b108      	cbz	r0, 800c190 <_printf_i+0x1f4>
 800c18c:	1b40      	subs	r0, r0, r5
 800c18e:	6060      	str	r0, [r4, #4]
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	6123      	str	r3, [r4, #16]
 800c194:	2300      	movs	r3, #0
 800c196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19a:	e7a8      	b.n	800c0ee <_printf_i+0x152>
 800c19c:	462a      	mov	r2, r5
 800c19e:	4649      	mov	r1, r9
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	47d0      	blx	sl
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d0ab      	beq.n	800c102 <_printf_i+0x166>
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	079b      	lsls	r3, r3, #30
 800c1ae:	d413      	bmi.n	800c1d8 <_printf_i+0x23c>
 800c1b0:	68e0      	ldr	r0, [r4, #12]
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	4298      	cmp	r0, r3
 800c1b6:	bfb8      	it	lt
 800c1b8:	4618      	movlt	r0, r3
 800c1ba:	e7a4      	b.n	800c106 <_printf_i+0x16a>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4632      	mov	r2, r6
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	47d0      	blx	sl
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d09b      	beq.n	800c102 <_printf_i+0x166>
 800c1ca:	3501      	adds	r5, #1
 800c1cc:	68e3      	ldr	r3, [r4, #12]
 800c1ce:	9903      	ldr	r1, [sp, #12]
 800c1d0:	1a5b      	subs	r3, r3, r1
 800c1d2:	42ab      	cmp	r3, r5
 800c1d4:	dcf2      	bgt.n	800c1bc <_printf_i+0x220>
 800c1d6:	e7eb      	b.n	800c1b0 <_printf_i+0x214>
 800c1d8:	2500      	movs	r5, #0
 800c1da:	f104 0619 	add.w	r6, r4, #25
 800c1de:	e7f5      	b.n	800c1cc <_printf_i+0x230>
 800c1e0:	08010cf2 	.word	0x08010cf2
 800c1e4:	08010d03 	.word	0x08010d03

0800c1e8 <_sbrk_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	4d05      	ldr	r5, [pc, #20]	; (800c204 <_sbrk_r+0x1c>)
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f6 fde2 	bl	8002dbc <_sbrk>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_sbrk_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_sbrk_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20001cfc 	.word	0x20001cfc

0800c208 <sniprintf>:
 800c208:	b40c      	push	{r2, r3}
 800c20a:	b530      	push	{r4, r5, lr}
 800c20c:	4b17      	ldr	r3, [pc, #92]	; (800c26c <sniprintf+0x64>)
 800c20e:	1e0c      	subs	r4, r1, #0
 800c210:	681d      	ldr	r5, [r3, #0]
 800c212:	b09d      	sub	sp, #116	; 0x74
 800c214:	da08      	bge.n	800c228 <sniprintf+0x20>
 800c216:	238b      	movs	r3, #139	; 0x8b
 800c218:	f04f 30ff 	mov.w	r0, #4294967295
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	b01d      	add	sp, #116	; 0x74
 800c220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c224:	b002      	add	sp, #8
 800c226:	4770      	bx	lr
 800c228:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c22c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c230:	bf0c      	ite	eq
 800c232:	4623      	moveq	r3, r4
 800c234:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	9307      	str	r3, [sp, #28]
 800c23c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c240:	9002      	str	r0, [sp, #8]
 800c242:	9006      	str	r0, [sp, #24]
 800c244:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c248:	4628      	mov	r0, r5
 800c24a:	ab21      	add	r3, sp, #132	; 0x84
 800c24c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c24e:	a902      	add	r1, sp, #8
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	f001 fb67 	bl	800d924 <_svfiprintf_r>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	bfbc      	itt	lt
 800c25a:	238b      	movlt	r3, #139	; 0x8b
 800c25c:	602b      	strlt	r3, [r5, #0]
 800c25e:	2c00      	cmp	r4, #0
 800c260:	d0dd      	beq.n	800c21e <sniprintf+0x16>
 800c262:	2200      	movs	r2, #0
 800c264:	9b02      	ldr	r3, [sp, #8]
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	e7d9      	b.n	800c21e <sniprintf+0x16>
 800c26a:	bf00      	nop
 800c26c:	20000024 	.word	0x20000024

0800c270 <siprintf>:
 800c270:	b40e      	push	{r1, r2, r3}
 800c272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c276:	b500      	push	{lr}
 800c278:	b09c      	sub	sp, #112	; 0x70
 800c27a:	ab1d      	add	r3, sp, #116	; 0x74
 800c27c:	9002      	str	r0, [sp, #8]
 800c27e:	9006      	str	r0, [sp, #24]
 800c280:	9107      	str	r1, [sp, #28]
 800c282:	9104      	str	r1, [sp, #16]
 800c284:	4808      	ldr	r0, [pc, #32]	; (800c2a8 <siprintf+0x38>)
 800c286:	4909      	ldr	r1, [pc, #36]	; (800c2ac <siprintf+0x3c>)
 800c288:	f853 2b04 	ldr.w	r2, [r3], #4
 800c28c:	9105      	str	r1, [sp, #20]
 800c28e:	6800      	ldr	r0, [r0, #0]
 800c290:	a902      	add	r1, sp, #8
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	f001 fb46 	bl	800d924 <_svfiprintf_r>
 800c298:	2200      	movs	r2, #0
 800c29a:	9b02      	ldr	r3, [sp, #8]
 800c29c:	701a      	strb	r2, [r3, #0]
 800c29e:	b01c      	add	sp, #112	; 0x70
 800c2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2a4:	b003      	add	sp, #12
 800c2a6:	4770      	bx	lr
 800c2a8:	20000024 	.word	0x20000024
 800c2ac:	ffff0208 	.word	0xffff0208

0800c2b0 <strncmp>:
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	b510      	push	{r4, lr}
 800c2b4:	b172      	cbz	r2, 800c2d4 <strncmp+0x24>
 800c2b6:	3901      	subs	r1, #1
 800c2b8:	1884      	adds	r4, r0, r2
 800c2ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2c2:	4290      	cmp	r0, r2
 800c2c4:	d101      	bne.n	800c2ca <strncmp+0x1a>
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	d101      	bne.n	800c2ce <strncmp+0x1e>
 800c2ca:	1a80      	subs	r0, r0, r2
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d1f3      	bne.n	800c2ba <strncmp+0xa>
 800c2d2:	e7fa      	b.n	800c2ca <strncmp+0x1a>
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	e7f9      	b.n	800c2cc <strncmp+0x1c>

0800c2d8 <strstr>:
 800c2d8:	780a      	ldrb	r2, [r1, #0]
 800c2da:	b570      	push	{r4, r5, r6, lr}
 800c2dc:	b96a      	cbnz	r2, 800c2fa <strstr+0x22>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d109      	bne.n	800c2f8 <strstr+0x20>
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0f6      	beq.n	800c2de <strstr+0x6>
 800c2f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c2f4:	429e      	cmp	r6, r3
 800c2f6:	d0f7      	beq.n	800c2e8 <strstr+0x10>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	7803      	ldrb	r3, [r0, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1ef      	bne.n	800c2e0 <strstr+0x8>
 800c300:	4618      	mov	r0, r3
 800c302:	e7ec      	b.n	800c2de <strstr+0x6>

0800c304 <_strtol_l.constprop.0>:
 800c304:	2b01      	cmp	r3, #1
 800c306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30a:	4680      	mov	r8, r0
 800c30c:	d001      	beq.n	800c312 <_strtol_l.constprop.0+0xe>
 800c30e:	2b24      	cmp	r3, #36	; 0x24
 800c310:	d906      	bls.n	800c320 <_strtol_l.constprop.0+0x1c>
 800c312:	f7ff f9dd 	bl	800b6d0 <__errno>
 800c316:	2316      	movs	r3, #22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	2000      	movs	r0, #0
 800c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c320:	460d      	mov	r5, r1
 800c322:	4f35      	ldr	r7, [pc, #212]	; (800c3f8 <_strtol_l.constprop.0+0xf4>)
 800c324:	4628      	mov	r0, r5
 800c326:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c32a:	5de6      	ldrb	r6, [r4, r7]
 800c32c:	f016 0608 	ands.w	r6, r6, #8
 800c330:	d1f8      	bne.n	800c324 <_strtol_l.constprop.0+0x20>
 800c332:	2c2d      	cmp	r4, #45	; 0x2d
 800c334:	d12f      	bne.n	800c396 <_strtol_l.constprop.0+0x92>
 800c336:	2601      	movs	r6, #1
 800c338:	782c      	ldrb	r4, [r5, #0]
 800c33a:	1c85      	adds	r5, r0, #2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d057      	beq.n	800c3f0 <_strtol_l.constprop.0+0xec>
 800c340:	2b10      	cmp	r3, #16
 800c342:	d109      	bne.n	800c358 <_strtol_l.constprop.0+0x54>
 800c344:	2c30      	cmp	r4, #48	; 0x30
 800c346:	d107      	bne.n	800c358 <_strtol_l.constprop.0+0x54>
 800c348:	7828      	ldrb	r0, [r5, #0]
 800c34a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c34e:	2858      	cmp	r0, #88	; 0x58
 800c350:	d149      	bne.n	800c3e6 <_strtol_l.constprop.0+0xe2>
 800c352:	2310      	movs	r3, #16
 800c354:	786c      	ldrb	r4, [r5, #1]
 800c356:	3502      	adds	r5, #2
 800c358:	2700      	movs	r7, #0
 800c35a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c35e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c362:	fbbe f9f3 	udiv	r9, lr, r3
 800c366:	4638      	mov	r0, r7
 800c368:	fb03 ea19 	mls	sl, r3, r9, lr
 800c36c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c370:	f1bc 0f09 	cmp.w	ip, #9
 800c374:	d814      	bhi.n	800c3a0 <_strtol_l.constprop.0+0x9c>
 800c376:	4664      	mov	r4, ip
 800c378:	42a3      	cmp	r3, r4
 800c37a:	dd22      	ble.n	800c3c2 <_strtol_l.constprop.0+0xbe>
 800c37c:	2f00      	cmp	r7, #0
 800c37e:	db1d      	blt.n	800c3bc <_strtol_l.constprop.0+0xb8>
 800c380:	4581      	cmp	r9, r0
 800c382:	d31b      	bcc.n	800c3bc <_strtol_l.constprop.0+0xb8>
 800c384:	d101      	bne.n	800c38a <_strtol_l.constprop.0+0x86>
 800c386:	45a2      	cmp	sl, r4
 800c388:	db18      	blt.n	800c3bc <_strtol_l.constprop.0+0xb8>
 800c38a:	2701      	movs	r7, #1
 800c38c:	fb00 4003 	mla	r0, r0, r3, r4
 800c390:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c394:	e7ea      	b.n	800c36c <_strtol_l.constprop.0+0x68>
 800c396:	2c2b      	cmp	r4, #43	; 0x2b
 800c398:	bf04      	itt	eq
 800c39a:	782c      	ldrbeq	r4, [r5, #0]
 800c39c:	1c85      	addeq	r5, r0, #2
 800c39e:	e7cd      	b.n	800c33c <_strtol_l.constprop.0+0x38>
 800c3a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c3a4:	f1bc 0f19 	cmp.w	ip, #25
 800c3a8:	d801      	bhi.n	800c3ae <_strtol_l.constprop.0+0xaa>
 800c3aa:	3c37      	subs	r4, #55	; 0x37
 800c3ac:	e7e4      	b.n	800c378 <_strtol_l.constprop.0+0x74>
 800c3ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c3b2:	f1bc 0f19 	cmp.w	ip, #25
 800c3b6:	d804      	bhi.n	800c3c2 <_strtol_l.constprop.0+0xbe>
 800c3b8:	3c57      	subs	r4, #87	; 0x57
 800c3ba:	e7dd      	b.n	800c378 <_strtol_l.constprop.0+0x74>
 800c3bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c3c0:	e7e6      	b.n	800c390 <_strtol_l.constprop.0+0x8c>
 800c3c2:	2f00      	cmp	r7, #0
 800c3c4:	da07      	bge.n	800c3d6 <_strtol_l.constprop.0+0xd2>
 800c3c6:	2322      	movs	r3, #34	; 0x22
 800c3c8:	4670      	mov	r0, lr
 800c3ca:	f8c8 3000 	str.w	r3, [r8]
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d0a4      	beq.n	800c31c <_strtol_l.constprop.0+0x18>
 800c3d2:	1e69      	subs	r1, r5, #1
 800c3d4:	e005      	b.n	800c3e2 <_strtol_l.constprop.0+0xde>
 800c3d6:	b106      	cbz	r6, 800c3da <_strtol_l.constprop.0+0xd6>
 800c3d8:	4240      	negs	r0, r0
 800c3da:	2a00      	cmp	r2, #0
 800c3dc:	d09e      	beq.n	800c31c <_strtol_l.constprop.0+0x18>
 800c3de:	2f00      	cmp	r7, #0
 800c3e0:	d1f7      	bne.n	800c3d2 <_strtol_l.constprop.0+0xce>
 800c3e2:	6011      	str	r1, [r2, #0]
 800c3e4:	e79a      	b.n	800c31c <_strtol_l.constprop.0+0x18>
 800c3e6:	2430      	movs	r4, #48	; 0x30
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1b5      	bne.n	800c358 <_strtol_l.constprop.0+0x54>
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	e7b3      	b.n	800c358 <_strtol_l.constprop.0+0x54>
 800c3f0:	2c30      	cmp	r4, #48	; 0x30
 800c3f2:	d0a9      	beq.n	800c348 <_strtol_l.constprop.0+0x44>
 800c3f4:	230a      	movs	r3, #10
 800c3f6:	e7af      	b.n	800c358 <_strtol_l.constprop.0+0x54>
 800c3f8:	08010bd9 	.word	0x08010bd9

0800c3fc <strtol>:
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	460a      	mov	r2, r1
 800c400:	4601      	mov	r1, r0
 800c402:	4802      	ldr	r0, [pc, #8]	; (800c40c <strtol+0x10>)
 800c404:	6800      	ldr	r0, [r0, #0]
 800c406:	f7ff bf7d 	b.w	800c304 <_strtol_l.constprop.0>
 800c40a:	bf00      	nop
 800c40c:	20000024 	.word	0x20000024

0800c410 <quorem>:
 800c410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	6903      	ldr	r3, [r0, #16]
 800c416:	690c      	ldr	r4, [r1, #16]
 800c418:	4607      	mov	r7, r0
 800c41a:	42a3      	cmp	r3, r4
 800c41c:	f2c0 8082 	blt.w	800c524 <quorem+0x114>
 800c420:	3c01      	subs	r4, #1
 800c422:	f100 0514 	add.w	r5, r0, #20
 800c426:	f101 0814 	add.w	r8, r1, #20
 800c42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c438:	3301      	adds	r3, #1
 800c43a:	429a      	cmp	r2, r3
 800c43c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c440:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c444:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c448:	d331      	bcc.n	800c4ae <quorem+0x9e>
 800c44a:	f04f 0e00 	mov.w	lr, #0
 800c44e:	4640      	mov	r0, r8
 800c450:	46ac      	mov	ip, r5
 800c452:	46f2      	mov	sl, lr
 800c454:	f850 2b04 	ldr.w	r2, [r0], #4
 800c458:	b293      	uxth	r3, r2
 800c45a:	fb06 e303 	mla	r3, r6, r3, lr
 800c45e:	0c12      	lsrs	r2, r2, #16
 800c460:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c464:	b29b      	uxth	r3, r3
 800c466:	fb06 e202 	mla	r2, r6, r2, lr
 800c46a:	ebaa 0303 	sub.w	r3, sl, r3
 800c46e:	f8dc a000 	ldr.w	sl, [ip]
 800c472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c476:	fa1f fa8a 	uxth.w	sl, sl
 800c47a:	4453      	add	r3, sl
 800c47c:	f8dc a000 	ldr.w	sl, [ip]
 800c480:	b292      	uxth	r2, r2
 800c482:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c486:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c490:	4581      	cmp	r9, r0
 800c492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c496:	f84c 3b04 	str.w	r3, [ip], #4
 800c49a:	d2db      	bcs.n	800c454 <quorem+0x44>
 800c49c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4a0:	b92b      	cbnz	r3, 800c4ae <quorem+0x9e>
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	3b04      	subs	r3, #4
 800c4a6:	429d      	cmp	r5, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	d32f      	bcc.n	800c50c <quorem+0xfc>
 800c4ac:	613c      	str	r4, [r7, #16]
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f001 f8c4 	bl	800d63c <__mcmp>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	db25      	blt.n	800c504 <quorem+0xf4>
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f04f 0c00 	mov.w	ip, #0
 800c4be:	3601      	adds	r6, #1
 800c4c0:	f858 1b04 	ldr.w	r1, [r8], #4
 800c4c4:	f8d0 e000 	ldr.w	lr, [r0]
 800c4c8:	b28b      	uxth	r3, r1
 800c4ca:	ebac 0303 	sub.w	r3, ip, r3
 800c4ce:	fa1f f28e 	uxth.w	r2, lr
 800c4d2:	4413      	add	r3, r2
 800c4d4:	0c0a      	lsrs	r2, r1, #16
 800c4d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e4:	45c1      	cmp	r9, r8
 800c4e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4ea:	f840 3b04 	str.w	r3, [r0], #4
 800c4ee:	d2e7      	bcs.n	800c4c0 <quorem+0xb0>
 800c4f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4f8:	b922      	cbnz	r2, 800c504 <quorem+0xf4>
 800c4fa:	3b04      	subs	r3, #4
 800c4fc:	429d      	cmp	r5, r3
 800c4fe:	461a      	mov	r2, r3
 800c500:	d30a      	bcc.n	800c518 <quorem+0x108>
 800c502:	613c      	str	r4, [r7, #16]
 800c504:	4630      	mov	r0, r6
 800c506:	b003      	add	sp, #12
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	6812      	ldr	r2, [r2, #0]
 800c50e:	3b04      	subs	r3, #4
 800c510:	2a00      	cmp	r2, #0
 800c512:	d1cb      	bne.n	800c4ac <quorem+0x9c>
 800c514:	3c01      	subs	r4, #1
 800c516:	e7c6      	b.n	800c4a6 <quorem+0x96>
 800c518:	6812      	ldr	r2, [r2, #0]
 800c51a:	3b04      	subs	r3, #4
 800c51c:	2a00      	cmp	r2, #0
 800c51e:	d1f0      	bne.n	800c502 <quorem+0xf2>
 800c520:	3c01      	subs	r4, #1
 800c522:	e7eb      	b.n	800c4fc <quorem+0xec>
 800c524:	2000      	movs	r0, #0
 800c526:	e7ee      	b.n	800c506 <quorem+0xf6>

0800c528 <_dtoa_r>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	4616      	mov	r6, r2
 800c52e:	461f      	mov	r7, r3
 800c530:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c532:	b099      	sub	sp, #100	; 0x64
 800c534:	4605      	mov	r5, r0
 800c536:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c53a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c53e:	b974      	cbnz	r4, 800c55e <_dtoa_r+0x36>
 800c540:	2010      	movs	r0, #16
 800c542:	f7ff f8ef 	bl	800b724 <malloc>
 800c546:	4602      	mov	r2, r0
 800c548:	6268      	str	r0, [r5, #36]	; 0x24
 800c54a:	b920      	cbnz	r0, 800c556 <_dtoa_r+0x2e>
 800c54c:	21ea      	movs	r1, #234	; 0xea
 800c54e:	4ba8      	ldr	r3, [pc, #672]	; (800c7f0 <_dtoa_r+0x2c8>)
 800c550:	48a8      	ldr	r0, [pc, #672]	; (800c7f4 <_dtoa_r+0x2cc>)
 800c552:	f001 fae7 	bl	800db24 <__assert_func>
 800c556:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c55a:	6004      	str	r4, [r0, #0]
 800c55c:	60c4      	str	r4, [r0, #12]
 800c55e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c560:	6819      	ldr	r1, [r3, #0]
 800c562:	b151      	cbz	r1, 800c57a <_dtoa_r+0x52>
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	2301      	movs	r3, #1
 800c568:	4093      	lsls	r3, r2
 800c56a:	604a      	str	r2, [r1, #4]
 800c56c:	608b      	str	r3, [r1, #8]
 800c56e:	4628      	mov	r0, r5
 800c570:	f000 fe26 	bl	800d1c0 <_Bfree>
 800c574:	2200      	movs	r2, #0
 800c576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	1e3b      	subs	r3, r7, #0
 800c57c:	bfaf      	iteee	ge
 800c57e:	2300      	movge	r3, #0
 800c580:	2201      	movlt	r2, #1
 800c582:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c586:	9305      	strlt	r3, [sp, #20]
 800c588:	bfa8      	it	ge
 800c58a:	f8c8 3000 	strge.w	r3, [r8]
 800c58e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c592:	4b99      	ldr	r3, [pc, #612]	; (800c7f8 <_dtoa_r+0x2d0>)
 800c594:	bfb8      	it	lt
 800c596:	f8c8 2000 	strlt.w	r2, [r8]
 800c59a:	ea33 0309 	bics.w	r3, r3, r9
 800c59e:	d119      	bne.n	800c5d4 <_dtoa_r+0xac>
 800c5a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5ac:	4333      	orrs	r3, r6
 800c5ae:	f000 857f 	beq.w	800d0b0 <_dtoa_r+0xb88>
 800c5b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5b4:	b953      	cbnz	r3, 800c5cc <_dtoa_r+0xa4>
 800c5b6:	4b91      	ldr	r3, [pc, #580]	; (800c7fc <_dtoa_r+0x2d4>)
 800c5b8:	e022      	b.n	800c600 <_dtoa_r+0xd8>
 800c5ba:	4b91      	ldr	r3, [pc, #580]	; (800c800 <_dtoa_r+0x2d8>)
 800c5bc:	9303      	str	r3, [sp, #12]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	9803      	ldr	r0, [sp, #12]
 800c5c6:	b019      	add	sp, #100	; 0x64
 800c5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5cc:	4b8b      	ldr	r3, [pc, #556]	; (800c7fc <_dtoa_r+0x2d4>)
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	3303      	adds	r3, #3
 800c5d2:	e7f5      	b.n	800c5c0 <_dtoa_r+0x98>
 800c5d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c5d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c5dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f7f4 f9ea 	bl	80009bc <__aeabi_dcmpeq>
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	b158      	cbz	r0, 800c604 <_dtoa_r+0xdc>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 8558 	beq.w	800d0aa <_dtoa_r+0xb82>
 800c5fa:	4882      	ldr	r0, [pc, #520]	; (800c804 <_dtoa_r+0x2dc>)
 800c5fc:	6018      	str	r0, [r3, #0]
 800c5fe:	1e43      	subs	r3, r0, #1
 800c600:	9303      	str	r3, [sp, #12]
 800c602:	e7df      	b.n	800c5c4 <_dtoa_r+0x9c>
 800c604:	ab16      	add	r3, sp, #88	; 0x58
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	ab17      	add	r3, sp, #92	; 0x5c
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	4628      	mov	r0, r5
 800c60e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c612:	f001 f8bb 	bl	800d78c <__d2b>
 800c616:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c61a:	4683      	mov	fp, r0
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	d07f      	beq.n	800c720 <_dtoa_r+0x1f8>
 800c620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c626:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c62a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c62e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c632:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c636:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c63a:	2200      	movs	r2, #0
 800c63c:	4b72      	ldr	r3, [pc, #456]	; (800c808 <_dtoa_r+0x2e0>)
 800c63e:	f7f3 fd9d 	bl	800017c <__aeabi_dsub>
 800c642:	a365      	add	r3, pc, #404	; (adr r3, 800c7d8 <_dtoa_r+0x2b0>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7f3 ff50 	bl	80004ec <__aeabi_dmul>
 800c64c:	a364      	add	r3, pc, #400	; (adr r3, 800c7e0 <_dtoa_r+0x2b8>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fd95 	bl	8000180 <__adddf3>
 800c656:	4606      	mov	r6, r0
 800c658:	4620      	mov	r0, r4
 800c65a:	460f      	mov	r7, r1
 800c65c:	f7f3 fedc 	bl	8000418 <__aeabi_i2d>
 800c660:	a361      	add	r3, pc, #388	; (adr r3, 800c7e8 <_dtoa_r+0x2c0>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 ff41 	bl	80004ec <__aeabi_dmul>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4630      	mov	r0, r6
 800c670:	4639      	mov	r1, r7
 800c672:	f7f3 fd85 	bl	8000180 <__adddf3>
 800c676:	4606      	mov	r6, r0
 800c678:	460f      	mov	r7, r1
 800c67a:	f7f4 f9e7 	bl	8000a4c <__aeabi_d2iz>
 800c67e:	2200      	movs	r2, #0
 800c680:	4682      	mov	sl, r0
 800c682:	2300      	movs	r3, #0
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f4 f9a2 	bl	80009d0 <__aeabi_dcmplt>
 800c68c:	b148      	cbz	r0, 800c6a2 <_dtoa_r+0x17a>
 800c68e:	4650      	mov	r0, sl
 800c690:	f7f3 fec2 	bl	8000418 <__aeabi_i2d>
 800c694:	4632      	mov	r2, r6
 800c696:	463b      	mov	r3, r7
 800c698:	f7f4 f990 	bl	80009bc <__aeabi_dcmpeq>
 800c69c:	b908      	cbnz	r0, 800c6a2 <_dtoa_r+0x17a>
 800c69e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6a2:	f1ba 0f16 	cmp.w	sl, #22
 800c6a6:	d858      	bhi.n	800c75a <_dtoa_r+0x232>
 800c6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6ac:	4b57      	ldr	r3, [pc, #348]	; (800c80c <_dtoa_r+0x2e4>)
 800c6ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f4 f98b 	bl	80009d0 <__aeabi_dcmplt>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d04f      	beq.n	800c75e <_dtoa_r+0x236>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6c8:	1b1c      	subs	r4, r3, r4
 800c6ca:	1e63      	subs	r3, r4, #1
 800c6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ce:	bf49      	itett	mi
 800c6d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800c6d4:	2300      	movpl	r3, #0
 800c6d6:	9306      	strmi	r3, [sp, #24]
 800c6d8:	2300      	movmi	r3, #0
 800c6da:	bf54      	ite	pl
 800c6dc:	9306      	strpl	r3, [sp, #24]
 800c6de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c6e0:	f1ba 0f00 	cmp.w	sl, #0
 800c6e4:	db3d      	blt.n	800c762 <_dtoa_r+0x23a>
 800c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c6ec:	4453      	add	r3, sl
 800c6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c6f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	f200 808c 	bhi.w	800c814 <_dtoa_r+0x2ec>
 800c6fc:	2b05      	cmp	r3, #5
 800c6fe:	bfc4      	itt	gt
 800c700:	3b04      	subgt	r3, #4
 800c702:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c706:	bfc8      	it	gt
 800c708:	2400      	movgt	r4, #0
 800c70a:	f1a3 0302 	sub.w	r3, r3, #2
 800c70e:	bfd8      	it	le
 800c710:	2401      	movle	r4, #1
 800c712:	2b03      	cmp	r3, #3
 800c714:	f200 808a 	bhi.w	800c82c <_dtoa_r+0x304>
 800c718:	e8df f003 	tbb	[pc, r3]
 800c71c:	5b4d4f2d 	.word	0x5b4d4f2d
 800c720:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c724:	441c      	add	r4, r3
 800c726:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	bfc3      	ittte	gt
 800c72e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c732:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c736:	fa09 f303 	lslgt.w	r3, r9, r3
 800c73a:	f1c3 0320 	rsble	r3, r3, #32
 800c73e:	bfc6      	itte	gt
 800c740:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c744:	4318      	orrgt	r0, r3
 800c746:	fa06 f003 	lslle.w	r0, r6, r3
 800c74a:	f7f3 fe55 	bl	80003f8 <__aeabi_ui2d>
 800c74e:	2301      	movs	r3, #1
 800c750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c754:	3c01      	subs	r4, #1
 800c756:	9313      	str	r3, [sp, #76]	; 0x4c
 800c758:	e76f      	b.n	800c63a <_dtoa_r+0x112>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e7b2      	b.n	800c6c4 <_dtoa_r+0x19c>
 800c75e:	900f      	str	r0, [sp, #60]	; 0x3c
 800c760:	e7b1      	b.n	800c6c6 <_dtoa_r+0x19e>
 800c762:	9b06      	ldr	r3, [sp, #24]
 800c764:	eba3 030a 	sub.w	r3, r3, sl
 800c768:	9306      	str	r3, [sp, #24]
 800c76a:	f1ca 0300 	rsb	r3, sl, #0
 800c76e:	930a      	str	r3, [sp, #40]	; 0x28
 800c770:	2300      	movs	r3, #0
 800c772:	930e      	str	r3, [sp, #56]	; 0x38
 800c774:	e7be      	b.n	800c6f4 <_dtoa_r+0x1cc>
 800c776:	2300      	movs	r3, #0
 800c778:	930b      	str	r3, [sp, #44]	; 0x2c
 800c77a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dc58      	bgt.n	800c832 <_dtoa_r+0x30a>
 800c780:	f04f 0901 	mov.w	r9, #1
 800c784:	464b      	mov	r3, r9
 800c786:	f8cd 9020 	str.w	r9, [sp, #32]
 800c78a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800c78e:	2200      	movs	r2, #0
 800c790:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c792:	6042      	str	r2, [r0, #4]
 800c794:	2204      	movs	r2, #4
 800c796:	f102 0614 	add.w	r6, r2, #20
 800c79a:	429e      	cmp	r6, r3
 800c79c:	6841      	ldr	r1, [r0, #4]
 800c79e:	d94e      	bls.n	800c83e <_dtoa_r+0x316>
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f000 fccd 	bl	800d140 <_Balloc>
 800c7a6:	9003      	str	r0, [sp, #12]
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d14c      	bne.n	800c846 <_dtoa_r+0x31e>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7b2:	4b17      	ldr	r3, [pc, #92]	; (800c810 <_dtoa_r+0x2e8>)
 800c7b4:	e6cc      	b.n	800c550 <_dtoa_r+0x28>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7de      	b.n	800c778 <_dtoa_r+0x250>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7c0:	eb0a 0903 	add.w	r9, sl, r3
 800c7c4:	f109 0301 	add.w	r3, r9, #1
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	9308      	str	r3, [sp, #32]
 800c7cc:	bfb8      	it	lt
 800c7ce:	2301      	movlt	r3, #1
 800c7d0:	e7dd      	b.n	800c78e <_dtoa_r+0x266>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e7f2      	b.n	800c7bc <_dtoa_r+0x294>
 800c7d6:	bf00      	nop
 800c7d8:	636f4361 	.word	0x636f4361
 800c7dc:	3fd287a7 	.word	0x3fd287a7
 800c7e0:	8b60c8b3 	.word	0x8b60c8b3
 800c7e4:	3fc68a28 	.word	0x3fc68a28
 800c7e8:	509f79fb 	.word	0x509f79fb
 800c7ec:	3fd34413 	.word	0x3fd34413
 800c7f0:	08010d21 	.word	0x08010d21
 800c7f4:	08010d38 	.word	0x08010d38
 800c7f8:	7ff00000 	.word	0x7ff00000
 800c7fc:	08010d1d 	.word	0x08010d1d
 800c800:	08010d14 	.word	0x08010d14
 800c804:	08010cf1 	.word	0x08010cf1
 800c808:	3ff80000 	.word	0x3ff80000
 800c80c:	08010e28 	.word	0x08010e28
 800c810:	08010d93 	.word	0x08010d93
 800c814:	2401      	movs	r4, #1
 800c816:	2300      	movs	r3, #0
 800c818:	940b      	str	r4, [sp, #44]	; 0x2c
 800c81a:	9322      	str	r3, [sp, #136]	; 0x88
 800c81c:	f04f 39ff 	mov.w	r9, #4294967295
 800c820:	2200      	movs	r2, #0
 800c822:	2312      	movs	r3, #18
 800c824:	f8cd 9020 	str.w	r9, [sp, #32]
 800c828:	9223      	str	r2, [sp, #140]	; 0x8c
 800c82a:	e7b0      	b.n	800c78e <_dtoa_r+0x266>
 800c82c:	2301      	movs	r3, #1
 800c82e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c830:	e7f4      	b.n	800c81c <_dtoa_r+0x2f4>
 800c832:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c836:	464b      	mov	r3, r9
 800c838:	f8cd 9020 	str.w	r9, [sp, #32]
 800c83c:	e7a7      	b.n	800c78e <_dtoa_r+0x266>
 800c83e:	3101      	adds	r1, #1
 800c840:	6041      	str	r1, [r0, #4]
 800c842:	0052      	lsls	r2, r2, #1
 800c844:	e7a7      	b.n	800c796 <_dtoa_r+0x26e>
 800c846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c848:	9a03      	ldr	r2, [sp, #12]
 800c84a:	601a      	str	r2, [r3, #0]
 800c84c:	9b08      	ldr	r3, [sp, #32]
 800c84e:	2b0e      	cmp	r3, #14
 800c850:	f200 80a8 	bhi.w	800c9a4 <_dtoa_r+0x47c>
 800c854:	2c00      	cmp	r4, #0
 800c856:	f000 80a5 	beq.w	800c9a4 <_dtoa_r+0x47c>
 800c85a:	f1ba 0f00 	cmp.w	sl, #0
 800c85e:	dd34      	ble.n	800c8ca <_dtoa_r+0x3a2>
 800c860:	4a9a      	ldr	r2, [pc, #616]	; (800cacc <_dtoa_r+0x5a4>)
 800c862:	f00a 030f 	and.w	r3, sl, #15
 800c866:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c86a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c86e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c872:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c876:	ea4f 142a 	mov.w	r4, sl, asr #4
 800c87a:	d016      	beq.n	800c8aa <_dtoa_r+0x382>
 800c87c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c880:	4b93      	ldr	r3, [pc, #588]	; (800cad0 <_dtoa_r+0x5a8>)
 800c882:	2703      	movs	r7, #3
 800c884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c888:	f7f3 ff5a 	bl	8000740 <__aeabi_ddiv>
 800c88c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c890:	f004 040f 	and.w	r4, r4, #15
 800c894:	4e8e      	ldr	r6, [pc, #568]	; (800cad0 <_dtoa_r+0x5a8>)
 800c896:	b954      	cbnz	r4, 800c8ae <_dtoa_r+0x386>
 800c898:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c89c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a0:	f7f3 ff4e 	bl	8000740 <__aeabi_ddiv>
 800c8a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8a8:	e029      	b.n	800c8fe <_dtoa_r+0x3d6>
 800c8aa:	2702      	movs	r7, #2
 800c8ac:	e7f2      	b.n	800c894 <_dtoa_r+0x36c>
 800c8ae:	07e1      	lsls	r1, r4, #31
 800c8b0:	d508      	bpl.n	800c8c4 <_dtoa_r+0x39c>
 800c8b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8ba:	f7f3 fe17 	bl	80004ec <__aeabi_dmul>
 800c8be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c8c2:	3701      	adds	r7, #1
 800c8c4:	1064      	asrs	r4, r4, #1
 800c8c6:	3608      	adds	r6, #8
 800c8c8:	e7e5      	b.n	800c896 <_dtoa_r+0x36e>
 800c8ca:	f000 80a5 	beq.w	800ca18 <_dtoa_r+0x4f0>
 800c8ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8d2:	f1ca 0400 	rsb	r4, sl, #0
 800c8d6:	4b7d      	ldr	r3, [pc, #500]	; (800cacc <_dtoa_r+0x5a4>)
 800c8d8:	f004 020f 	and.w	r2, r4, #15
 800c8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f7f3 fe02 	bl	80004ec <__aeabi_dmul>
 800c8e8:	2702      	movs	r7, #2
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8f0:	4e77      	ldr	r6, [pc, #476]	; (800cad0 <_dtoa_r+0x5a8>)
 800c8f2:	1124      	asrs	r4, r4, #4
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	f040 8084 	bne.w	800ca02 <_dtoa_r+0x4da>
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1d2      	bne.n	800c8a4 <_dtoa_r+0x37c>
 800c8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 808b 	beq.w	800ca1c <_dtoa_r+0x4f4>
 800c906:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c90a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c90e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c912:	2200      	movs	r2, #0
 800c914:	4b6f      	ldr	r3, [pc, #444]	; (800cad4 <_dtoa_r+0x5ac>)
 800c916:	f7f4 f85b 	bl	80009d0 <__aeabi_dcmplt>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d07e      	beq.n	800ca1c <_dtoa_r+0x4f4>
 800c91e:	9b08      	ldr	r3, [sp, #32]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d07b      	beq.n	800ca1c <_dtoa_r+0x4f4>
 800c924:	f1b9 0f00 	cmp.w	r9, #0
 800c928:	dd38      	ble.n	800c99c <_dtoa_r+0x474>
 800c92a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c92e:	2200      	movs	r2, #0
 800c930:	4b69      	ldr	r3, [pc, #420]	; (800cad8 <_dtoa_r+0x5b0>)
 800c932:	f7f3 fddb 	bl	80004ec <__aeabi_dmul>
 800c936:	464c      	mov	r4, r9
 800c938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c93c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800c940:	3701      	adds	r7, #1
 800c942:	4638      	mov	r0, r7
 800c944:	f7f3 fd68 	bl	8000418 <__aeabi_i2d>
 800c948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c94c:	f7f3 fdce 	bl	80004ec <__aeabi_dmul>
 800c950:	2200      	movs	r2, #0
 800c952:	4b62      	ldr	r3, [pc, #392]	; (800cadc <_dtoa_r+0x5b4>)
 800c954:	f7f3 fc14 	bl	8000180 <__adddf3>
 800c958:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c95c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c960:	9611      	str	r6, [sp, #68]	; 0x44
 800c962:	2c00      	cmp	r4, #0
 800c964:	d15d      	bne.n	800ca22 <_dtoa_r+0x4fa>
 800c966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c96a:	2200      	movs	r2, #0
 800c96c:	4b5c      	ldr	r3, [pc, #368]	; (800cae0 <_dtoa_r+0x5b8>)
 800c96e:	f7f3 fc05 	bl	800017c <__aeabi_dsub>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c97a:	4633      	mov	r3, r6
 800c97c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c97e:	f7f4 f845 	bl	8000a0c <__aeabi_dcmpgt>
 800c982:	2800      	cmp	r0, #0
 800c984:	f040 829c 	bne.w	800cec0 <_dtoa_r+0x998>
 800c988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c98c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c98e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c992:	f7f4 f81d 	bl	80009d0 <__aeabi_dcmplt>
 800c996:	2800      	cmp	r0, #0
 800c998:	f040 8290 	bne.w	800cebc <_dtoa_r+0x994>
 800c99c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c9a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f2c0 8152 	blt.w	800cc50 <_dtoa_r+0x728>
 800c9ac:	f1ba 0f0e 	cmp.w	sl, #14
 800c9b0:	f300 814e 	bgt.w	800cc50 <_dtoa_r+0x728>
 800c9b4:	4b45      	ldr	r3, [pc, #276]	; (800cacc <_dtoa_r+0x5a4>)
 800c9b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c9be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c9c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f280 80db 	bge.w	800cb80 <_dtoa_r+0x658>
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f300 80d7 	bgt.w	800cb80 <_dtoa_r+0x658>
 800c9d2:	f040 8272 	bne.w	800ceba <_dtoa_r+0x992>
 800c9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	4b40      	ldr	r3, [pc, #256]	; (800cae0 <_dtoa_r+0x5b8>)
 800c9de:	f7f3 fd85 	bl	80004ec <__aeabi_dmul>
 800c9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9e6:	f7f4 f807 	bl	80009f8 <__aeabi_dcmpge>
 800c9ea:	9c08      	ldr	r4, [sp, #32]
 800c9ec:	4626      	mov	r6, r4
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f040 8248 	bne.w	800ce84 <_dtoa_r+0x95c>
 800c9f4:	2331      	movs	r3, #49	; 0x31
 800c9f6:	9f03      	ldr	r7, [sp, #12]
 800c9f8:	f10a 0a01 	add.w	sl, sl, #1
 800c9fc:	f807 3b01 	strb.w	r3, [r7], #1
 800ca00:	e244      	b.n	800ce8c <_dtoa_r+0x964>
 800ca02:	07e2      	lsls	r2, r4, #31
 800ca04:	d505      	bpl.n	800ca12 <_dtoa_r+0x4ea>
 800ca06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca0a:	f7f3 fd6f 	bl	80004ec <__aeabi_dmul>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	3701      	adds	r7, #1
 800ca12:	1064      	asrs	r4, r4, #1
 800ca14:	3608      	adds	r6, #8
 800ca16:	e76d      	b.n	800c8f4 <_dtoa_r+0x3cc>
 800ca18:	2702      	movs	r7, #2
 800ca1a:	e770      	b.n	800c8fe <_dtoa_r+0x3d6>
 800ca1c:	46d0      	mov	r8, sl
 800ca1e:	9c08      	ldr	r4, [sp, #32]
 800ca20:	e78f      	b.n	800c942 <_dtoa_r+0x41a>
 800ca22:	9903      	ldr	r1, [sp, #12]
 800ca24:	4b29      	ldr	r3, [pc, #164]	; (800cacc <_dtoa_r+0x5a4>)
 800ca26:	4421      	add	r1, r4
 800ca28:	9112      	str	r1, [sp, #72]	; 0x48
 800ca2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ca34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca38:	2900      	cmp	r1, #0
 800ca3a:	d055      	beq.n	800cae8 <_dtoa_r+0x5c0>
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	4929      	ldr	r1, [pc, #164]	; (800cae4 <_dtoa_r+0x5bc>)
 800ca40:	f7f3 fe7e 	bl	8000740 <__aeabi_ddiv>
 800ca44:	463b      	mov	r3, r7
 800ca46:	4632      	mov	r2, r6
 800ca48:	f7f3 fb98 	bl	800017c <__aeabi_dsub>
 800ca4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ca50:	9f03      	ldr	r7, [sp, #12]
 800ca52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca56:	f7f3 fff9 	bl	8000a4c <__aeabi_d2iz>
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	f7f3 fcdc 	bl	8000418 <__aeabi_i2d>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca68:	f7f3 fb88 	bl	800017c <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	3430      	adds	r4, #48	; 0x30
 800ca72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca7a:	f807 4b01 	strb.w	r4, [r7], #1
 800ca7e:	f7f3 ffa7 	bl	80009d0 <__aeabi_dcmplt>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d174      	bne.n	800cb70 <_dtoa_r+0x648>
 800ca86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	4911      	ldr	r1, [pc, #68]	; (800cad4 <_dtoa_r+0x5ac>)
 800ca8e:	f7f3 fb75 	bl	800017c <__aeabi_dsub>
 800ca92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca96:	f7f3 ff9b 	bl	80009d0 <__aeabi_dcmplt>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	f040 80b7 	bne.w	800cc0e <_dtoa_r+0x6e6>
 800caa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800caa2:	429f      	cmp	r7, r3
 800caa4:	f43f af7a 	beq.w	800c99c <_dtoa_r+0x474>
 800caa8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800caac:	2200      	movs	r2, #0
 800caae:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <_dtoa_r+0x5b0>)
 800cab0:	f7f3 fd1c 	bl	80004ec <__aeabi_dmul>
 800cab4:	2200      	movs	r2, #0
 800cab6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800caba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cabe:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <_dtoa_r+0x5b0>)
 800cac0:	f7f3 fd14 	bl	80004ec <__aeabi_dmul>
 800cac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cac8:	e7c3      	b.n	800ca52 <_dtoa_r+0x52a>
 800caca:	bf00      	nop
 800cacc:	08010e28 	.word	0x08010e28
 800cad0:	08010e00 	.word	0x08010e00
 800cad4:	3ff00000 	.word	0x3ff00000
 800cad8:	40240000 	.word	0x40240000
 800cadc:	401c0000 	.word	0x401c0000
 800cae0:	40140000 	.word	0x40140000
 800cae4:	3fe00000 	.word	0x3fe00000
 800cae8:	4630      	mov	r0, r6
 800caea:	4639      	mov	r1, r7
 800caec:	f7f3 fcfe 	bl	80004ec <__aeabi_dmul>
 800caf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800caf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800caf6:	9c03      	ldr	r4, [sp, #12]
 800caf8:	9314      	str	r3, [sp, #80]	; 0x50
 800cafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cafe:	f7f3 ffa5 	bl	8000a4c <__aeabi_d2iz>
 800cb02:	9015      	str	r0, [sp, #84]	; 0x54
 800cb04:	f7f3 fc88 	bl	8000418 <__aeabi_i2d>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb10:	f7f3 fb34 	bl	800017c <__aeabi_dsub>
 800cb14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb16:	4606      	mov	r6, r0
 800cb18:	3330      	adds	r3, #48	; 0x30
 800cb1a:	f804 3b01 	strb.w	r3, [r4], #1
 800cb1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb20:	460f      	mov	r7, r1
 800cb22:	429c      	cmp	r4, r3
 800cb24:	f04f 0200 	mov.w	r2, #0
 800cb28:	d124      	bne.n	800cb74 <_dtoa_r+0x64c>
 800cb2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb2e:	4bb0      	ldr	r3, [pc, #704]	; (800cdf0 <_dtoa_r+0x8c8>)
 800cb30:	f7f3 fb26 	bl	8000180 <__adddf3>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 ff66 	bl	8000a0c <__aeabi_dcmpgt>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d163      	bne.n	800cc0c <_dtoa_r+0x6e4>
 800cb44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb48:	2000      	movs	r0, #0
 800cb4a:	49a9      	ldr	r1, [pc, #676]	; (800cdf0 <_dtoa_r+0x8c8>)
 800cb4c:	f7f3 fb16 	bl	800017c <__aeabi_dsub>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4630      	mov	r0, r6
 800cb56:	4639      	mov	r1, r7
 800cb58:	f7f3 ff3a 	bl	80009d0 <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	f43f af1d 	beq.w	800c99c <_dtoa_r+0x474>
 800cb62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cb64:	1e7b      	subs	r3, r7, #1
 800cb66:	9314      	str	r3, [sp, #80]	; 0x50
 800cb68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cb6c:	2b30      	cmp	r3, #48	; 0x30
 800cb6e:	d0f8      	beq.n	800cb62 <_dtoa_r+0x63a>
 800cb70:	46c2      	mov	sl, r8
 800cb72:	e03b      	b.n	800cbec <_dtoa_r+0x6c4>
 800cb74:	4b9f      	ldr	r3, [pc, #636]	; (800cdf4 <_dtoa_r+0x8cc>)
 800cb76:	f7f3 fcb9 	bl	80004ec <__aeabi_dmul>
 800cb7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb7e:	e7bc      	b.n	800cafa <_dtoa_r+0x5d2>
 800cb80:	9f03      	ldr	r7, [sp, #12]
 800cb82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cb86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	f7f3 fdd7 	bl	8000740 <__aeabi_ddiv>
 800cb92:	f7f3 ff5b 	bl	8000a4c <__aeabi_d2iz>
 800cb96:	4604      	mov	r4, r0
 800cb98:	f7f3 fc3e 	bl	8000418 <__aeabi_i2d>
 800cb9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cba0:	f7f3 fca4 	bl	80004ec <__aeabi_dmul>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	4640      	mov	r0, r8
 800cbaa:	4649      	mov	r1, r9
 800cbac:	f7f3 fae6 	bl	800017c <__aeabi_dsub>
 800cbb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cbb4:	f807 6b01 	strb.w	r6, [r7], #1
 800cbb8:	9e03      	ldr	r6, [sp, #12]
 800cbba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cbbe:	1bbe      	subs	r6, r7, r6
 800cbc0:	45b4      	cmp	ip, r6
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	d136      	bne.n	800cc36 <_dtoa_r+0x70e>
 800cbc8:	f7f3 fada 	bl	8000180 <__adddf3>
 800cbcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4689      	mov	r9, r1
 800cbd4:	f7f3 ff1a 	bl	8000a0c <__aeabi_dcmpgt>
 800cbd8:	bb58      	cbnz	r0, 800cc32 <_dtoa_r+0x70a>
 800cbda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbde:	4640      	mov	r0, r8
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	f7f3 feeb 	bl	80009bc <__aeabi_dcmpeq>
 800cbe6:	b108      	cbz	r0, 800cbec <_dtoa_r+0x6c4>
 800cbe8:	07e1      	lsls	r1, r4, #31
 800cbea:	d422      	bmi.n	800cc32 <_dtoa_r+0x70a>
 800cbec:	4628      	mov	r0, r5
 800cbee:	4659      	mov	r1, fp
 800cbf0:	f000 fae6 	bl	800d1c0 <_Bfree>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	703b      	strb	r3, [r7, #0]
 800cbf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cbfa:	f10a 0001 	add.w	r0, sl, #1
 800cbfe:	6018      	str	r0, [r3, #0]
 800cc00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f43f acde 	beq.w	800c5c4 <_dtoa_r+0x9c>
 800cc08:	601f      	str	r7, [r3, #0]
 800cc0a:	e4db      	b.n	800c5c4 <_dtoa_r+0x9c>
 800cc0c:	4627      	mov	r7, r4
 800cc0e:	463b      	mov	r3, r7
 800cc10:	461f      	mov	r7, r3
 800cc12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc16:	2a39      	cmp	r2, #57	; 0x39
 800cc18:	d107      	bne.n	800cc2a <_dtoa_r+0x702>
 800cc1a:	9a03      	ldr	r2, [sp, #12]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d1f7      	bne.n	800cc10 <_dtoa_r+0x6e8>
 800cc20:	2230      	movs	r2, #48	; 0x30
 800cc22:	9903      	ldr	r1, [sp, #12]
 800cc24:	f108 0801 	add.w	r8, r8, #1
 800cc28:	700a      	strb	r2, [r1, #0]
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	3201      	adds	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	e79e      	b.n	800cb70 <_dtoa_r+0x648>
 800cc32:	46d0      	mov	r8, sl
 800cc34:	e7eb      	b.n	800cc0e <_dtoa_r+0x6e6>
 800cc36:	2200      	movs	r2, #0
 800cc38:	4b6e      	ldr	r3, [pc, #440]	; (800cdf4 <_dtoa_r+0x8cc>)
 800cc3a:	f7f3 fc57 	bl	80004ec <__aeabi_dmul>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2300      	movs	r3, #0
 800cc42:	4680      	mov	r8, r0
 800cc44:	4689      	mov	r9, r1
 800cc46:	f7f3 feb9 	bl	80009bc <__aeabi_dcmpeq>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d09b      	beq.n	800cb86 <_dtoa_r+0x65e>
 800cc4e:	e7cd      	b.n	800cbec <_dtoa_r+0x6c4>
 800cc50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc52:	2a00      	cmp	r2, #0
 800cc54:	f000 80d0 	beq.w	800cdf8 <_dtoa_r+0x8d0>
 800cc58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cc5a:	2a01      	cmp	r2, #1
 800cc5c:	f300 80ae 	bgt.w	800cdbc <_dtoa_r+0x894>
 800cc60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc62:	2a00      	cmp	r2, #0
 800cc64:	f000 80a6 	beq.w	800cdb4 <_dtoa_r+0x88c>
 800cc68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc6e:	9f06      	ldr	r7, [sp, #24]
 800cc70:	9a06      	ldr	r2, [sp, #24]
 800cc72:	2101      	movs	r1, #1
 800cc74:	441a      	add	r2, r3
 800cc76:	9206      	str	r2, [sp, #24]
 800cc78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	441a      	add	r2, r3
 800cc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc80:	f000 fb54 	bl	800d32c <__i2b>
 800cc84:	4606      	mov	r6, r0
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	dd0c      	ble.n	800cca4 <_dtoa_r+0x77c>
 800cc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd09      	ble.n	800cca4 <_dtoa_r+0x77c>
 800cc90:	42bb      	cmp	r3, r7
 800cc92:	bfa8      	it	ge
 800cc94:	463b      	movge	r3, r7
 800cc96:	9a06      	ldr	r2, [sp, #24]
 800cc98:	1aff      	subs	r7, r7, r3
 800cc9a:	1ad2      	subs	r2, r2, r3
 800cc9c:	9206      	str	r2, [sp, #24]
 800cc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	9309      	str	r3, [sp, #36]	; 0x24
 800cca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca6:	b1f3      	cbz	r3, 800cce6 <_dtoa_r+0x7be>
 800cca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 80a8 	beq.w	800ce00 <_dtoa_r+0x8d8>
 800ccb0:	2c00      	cmp	r4, #0
 800ccb2:	dd10      	ble.n	800ccd6 <_dtoa_r+0x7ae>
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 fbf5 	bl	800d4a8 <__pow5mult>
 800ccbe:	465a      	mov	r2, fp
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	f000 fb47 	bl	800d358 <__multiply>
 800ccca:	4680      	mov	r8, r0
 800cccc:	4659      	mov	r1, fp
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 fa76 	bl	800d1c0 <_Bfree>
 800ccd4:	46c3      	mov	fp, r8
 800ccd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd8:	1b1a      	subs	r2, r3, r4
 800ccda:	d004      	beq.n	800cce6 <_dtoa_r+0x7be>
 800ccdc:	4659      	mov	r1, fp
 800ccde:	4628      	mov	r0, r5
 800cce0:	f000 fbe2 	bl	800d4a8 <__pow5mult>
 800cce4:	4683      	mov	fp, r0
 800cce6:	2101      	movs	r1, #1
 800cce8:	4628      	mov	r0, r5
 800ccea:	f000 fb1f 	bl	800d32c <__i2b>
 800ccee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f340 8086 	ble.w	800ce04 <_dtoa_r+0x8dc>
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f000 fbd3 	bl	800d4a8 <__pow5mult>
 800cd02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd04:	4604      	mov	r4, r0
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	dd7f      	ble.n	800ce0a <_dtoa_r+0x8e2>
 800cd0a:	f04f 0800 	mov.w	r8, #0
 800cd0e:	6923      	ldr	r3, [r4, #16]
 800cd10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd14:	6918      	ldr	r0, [r3, #16]
 800cd16:	f000 fabb 	bl	800d290 <__hi0bits>
 800cd1a:	f1c0 0020 	rsb	r0, r0, #32
 800cd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd20:	4418      	add	r0, r3
 800cd22:	f010 001f 	ands.w	r0, r0, #31
 800cd26:	f000 8092 	beq.w	800ce4e <_dtoa_r+0x926>
 800cd2a:	f1c0 0320 	rsb	r3, r0, #32
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	f340 808a 	ble.w	800ce48 <_dtoa_r+0x920>
 800cd34:	f1c0 001c 	rsb	r0, r0, #28
 800cd38:	9b06      	ldr	r3, [sp, #24]
 800cd3a:	4407      	add	r7, r0
 800cd3c:	4403      	add	r3, r0
 800cd3e:	9306      	str	r3, [sp, #24]
 800cd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd42:	4403      	add	r3, r0
 800cd44:	9309      	str	r3, [sp, #36]	; 0x24
 800cd46:	9b06      	ldr	r3, [sp, #24]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	dd05      	ble.n	800cd58 <_dtoa_r+0x830>
 800cd4c:	4659      	mov	r1, fp
 800cd4e:	461a      	mov	r2, r3
 800cd50:	4628      	mov	r0, r5
 800cd52:	f000 fc03 	bl	800d55c <__lshift>
 800cd56:	4683      	mov	fp, r0
 800cd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dd05      	ble.n	800cd6a <_dtoa_r+0x842>
 800cd5e:	4621      	mov	r1, r4
 800cd60:	461a      	mov	r2, r3
 800cd62:	4628      	mov	r0, r5
 800cd64:	f000 fbfa 	bl	800d55c <__lshift>
 800cd68:	4604      	mov	r4, r0
 800cd6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d070      	beq.n	800ce52 <_dtoa_r+0x92a>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4658      	mov	r0, fp
 800cd74:	f000 fc62 	bl	800d63c <__mcmp>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	da6a      	bge.n	800ce52 <_dtoa_r+0x92a>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4659      	mov	r1, fp
 800cd80:	220a      	movs	r2, #10
 800cd82:	4628      	mov	r0, r5
 800cd84:	f000 fa3e 	bl	800d204 <__multadd>
 800cd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd8a:	4683      	mov	fp, r0
 800cd8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 8194 	beq.w	800d0be <_dtoa_r+0xb96>
 800cd96:	4631      	mov	r1, r6
 800cd98:	2300      	movs	r3, #0
 800cd9a:	220a      	movs	r2, #10
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	f000 fa31 	bl	800d204 <__multadd>
 800cda2:	f1b9 0f00 	cmp.w	r9, #0
 800cda6:	4606      	mov	r6, r0
 800cda8:	f300 8093 	bgt.w	800ced2 <_dtoa_r+0x9aa>
 800cdac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	dc57      	bgt.n	800ce62 <_dtoa_r+0x93a>
 800cdb2:	e08e      	b.n	800ced2 <_dtoa_r+0x9aa>
 800cdb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cdb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdba:	e757      	b.n	800cc6c <_dtoa_r+0x744>
 800cdbc:	9b08      	ldr	r3, [sp, #32]
 800cdbe:	1e5c      	subs	r4, r3, #1
 800cdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc2:	42a3      	cmp	r3, r4
 800cdc4:	bfb7      	itett	lt
 800cdc6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cdc8:	1b1c      	subge	r4, r3, r4
 800cdca:	1ae2      	sublt	r2, r4, r3
 800cdcc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cdce:	bfbe      	ittt	lt
 800cdd0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cdd2:	189b      	addlt	r3, r3, r2
 800cdd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cdd6:	9b08      	ldr	r3, [sp, #32]
 800cdd8:	bfb8      	it	lt
 800cdda:	2400      	movlt	r4, #0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bfbb      	ittet	lt
 800cde0:	9b06      	ldrlt	r3, [sp, #24]
 800cde2:	9a08      	ldrlt	r2, [sp, #32]
 800cde4:	9f06      	ldrge	r7, [sp, #24]
 800cde6:	1a9f      	sublt	r7, r3, r2
 800cde8:	bfac      	ite	ge
 800cdea:	9b08      	ldrge	r3, [sp, #32]
 800cdec:	2300      	movlt	r3, #0
 800cdee:	e73f      	b.n	800cc70 <_dtoa_r+0x748>
 800cdf0:	3fe00000 	.word	0x3fe00000
 800cdf4:	40240000 	.word	0x40240000
 800cdf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdfa:	9f06      	ldr	r7, [sp, #24]
 800cdfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cdfe:	e742      	b.n	800cc86 <_dtoa_r+0x75e>
 800ce00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce02:	e76b      	b.n	800ccdc <_dtoa_r+0x7b4>
 800ce04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	dc19      	bgt.n	800ce3e <_dtoa_r+0x916>
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	b9bb      	cbnz	r3, 800ce3e <_dtoa_r+0x916>
 800ce0e:	9b05      	ldr	r3, [sp, #20]
 800ce10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce14:	b99b      	cbnz	r3, 800ce3e <_dtoa_r+0x916>
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce1c:	0d1b      	lsrs	r3, r3, #20
 800ce1e:	051b      	lsls	r3, r3, #20
 800ce20:	b183      	cbz	r3, 800ce44 <_dtoa_r+0x91c>
 800ce22:	f04f 0801 	mov.w	r8, #1
 800ce26:	9b06      	ldr	r3, [sp, #24]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	9306      	str	r3, [sp, #24]
 800ce2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2e:	3301      	adds	r3, #1
 800ce30:	9309      	str	r3, [sp, #36]	; 0x24
 800ce32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f47f af6a 	bne.w	800cd0e <_dtoa_r+0x7e6>
 800ce3a:	2001      	movs	r0, #1
 800ce3c:	e76f      	b.n	800cd1e <_dtoa_r+0x7f6>
 800ce3e:	f04f 0800 	mov.w	r8, #0
 800ce42:	e7f6      	b.n	800ce32 <_dtoa_r+0x90a>
 800ce44:	4698      	mov	r8, r3
 800ce46:	e7f4      	b.n	800ce32 <_dtoa_r+0x90a>
 800ce48:	f43f af7d 	beq.w	800cd46 <_dtoa_r+0x81e>
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	301c      	adds	r0, #28
 800ce50:	e772      	b.n	800cd38 <_dtoa_r+0x810>
 800ce52:	9b08      	ldr	r3, [sp, #32]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dc36      	bgt.n	800cec6 <_dtoa_r+0x99e>
 800ce58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	dd33      	ble.n	800cec6 <_dtoa_r+0x99e>
 800ce5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce62:	f1b9 0f00 	cmp.w	r9, #0
 800ce66:	d10d      	bne.n	800ce84 <_dtoa_r+0x95c>
 800ce68:	4621      	mov	r1, r4
 800ce6a:	464b      	mov	r3, r9
 800ce6c:	2205      	movs	r2, #5
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f000 f9c8 	bl	800d204 <__multadd>
 800ce74:	4601      	mov	r1, r0
 800ce76:	4604      	mov	r4, r0
 800ce78:	4658      	mov	r0, fp
 800ce7a:	f000 fbdf 	bl	800d63c <__mcmp>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f73f adb8 	bgt.w	800c9f4 <_dtoa_r+0x4cc>
 800ce84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce86:	9f03      	ldr	r7, [sp, #12]
 800ce88:	ea6f 0a03 	mvn.w	sl, r3
 800ce8c:	f04f 0800 	mov.w	r8, #0
 800ce90:	4621      	mov	r1, r4
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 f994 	bl	800d1c0 <_Bfree>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	f43f aea7 	beq.w	800cbec <_dtoa_r+0x6c4>
 800ce9e:	f1b8 0f00 	cmp.w	r8, #0
 800cea2:	d005      	beq.n	800ceb0 <_dtoa_r+0x988>
 800cea4:	45b0      	cmp	r8, r6
 800cea6:	d003      	beq.n	800ceb0 <_dtoa_r+0x988>
 800cea8:	4641      	mov	r1, r8
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f000 f988 	bl	800d1c0 <_Bfree>
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f000 f984 	bl	800d1c0 <_Bfree>
 800ceb8:	e698      	b.n	800cbec <_dtoa_r+0x6c4>
 800ceba:	2400      	movs	r4, #0
 800cebc:	4626      	mov	r6, r4
 800cebe:	e7e1      	b.n	800ce84 <_dtoa_r+0x95c>
 800cec0:	46c2      	mov	sl, r8
 800cec2:	4626      	mov	r6, r4
 800cec4:	e596      	b.n	800c9f4 <_dtoa_r+0x4cc>
 800cec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 80fd 	beq.w	800d0cc <_dtoa_r+0xba4>
 800ced2:	2f00      	cmp	r7, #0
 800ced4:	dd05      	ble.n	800cee2 <_dtoa_r+0x9ba>
 800ced6:	4631      	mov	r1, r6
 800ced8:	463a      	mov	r2, r7
 800ceda:	4628      	mov	r0, r5
 800cedc:	f000 fb3e 	bl	800d55c <__lshift>
 800cee0:	4606      	mov	r6, r0
 800cee2:	f1b8 0f00 	cmp.w	r8, #0
 800cee6:	d05c      	beq.n	800cfa2 <_dtoa_r+0xa7a>
 800cee8:	4628      	mov	r0, r5
 800ceea:	6871      	ldr	r1, [r6, #4]
 800ceec:	f000 f928 	bl	800d140 <_Balloc>
 800cef0:	4607      	mov	r7, r0
 800cef2:	b928      	cbnz	r0, 800cf00 <_dtoa_r+0x9d8>
 800cef4:	4602      	mov	r2, r0
 800cef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cefa:	4b7f      	ldr	r3, [pc, #508]	; (800d0f8 <_dtoa_r+0xbd0>)
 800cefc:	f7ff bb28 	b.w	800c550 <_dtoa_r+0x28>
 800cf00:	6932      	ldr	r2, [r6, #16]
 800cf02:	f106 010c 	add.w	r1, r6, #12
 800cf06:	3202      	adds	r2, #2
 800cf08:	0092      	lsls	r2, r2, #2
 800cf0a:	300c      	adds	r0, #12
 800cf0c:	f7fe fc1a 	bl	800b744 <memcpy>
 800cf10:	2201      	movs	r2, #1
 800cf12:	4639      	mov	r1, r7
 800cf14:	4628      	mov	r0, r5
 800cf16:	f000 fb21 	bl	800d55c <__lshift>
 800cf1a:	46b0      	mov	r8, r6
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	3301      	adds	r3, #1
 800cf22:	9308      	str	r3, [sp, #32]
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	444b      	add	r3, r9
 800cf28:	930a      	str	r3, [sp, #40]	; 0x28
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	9309      	str	r3, [sp, #36]	; 0x24
 800cf32:	9b08      	ldr	r3, [sp, #32]
 800cf34:	4621      	mov	r1, r4
 800cf36:	3b01      	subs	r3, #1
 800cf38:	4658      	mov	r0, fp
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	f7ff fa68 	bl	800c410 <quorem>
 800cf40:	4603      	mov	r3, r0
 800cf42:	4641      	mov	r1, r8
 800cf44:	3330      	adds	r3, #48	; 0x30
 800cf46:	9006      	str	r0, [sp, #24]
 800cf48:	4658      	mov	r0, fp
 800cf4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf4c:	f000 fb76 	bl	800d63c <__mcmp>
 800cf50:	4632      	mov	r2, r6
 800cf52:	4681      	mov	r9, r0
 800cf54:	4621      	mov	r1, r4
 800cf56:	4628      	mov	r0, r5
 800cf58:	f000 fb8c 	bl	800d674 <__mdiff>
 800cf5c:	68c2      	ldr	r2, [r0, #12]
 800cf5e:	4607      	mov	r7, r0
 800cf60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf62:	bb02      	cbnz	r2, 800cfa6 <_dtoa_r+0xa7e>
 800cf64:	4601      	mov	r1, r0
 800cf66:	4658      	mov	r0, fp
 800cf68:	f000 fb68 	bl	800d63c <__mcmp>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf70:	4639      	mov	r1, r7
 800cf72:	4628      	mov	r0, r5
 800cf74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cf78:	f000 f922 	bl	800d1c0 <_Bfree>
 800cf7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf80:	9f08      	ldr	r7, [sp, #32]
 800cf82:	ea43 0102 	orr.w	r1, r3, r2
 800cf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf88:	430b      	orrs	r3, r1
 800cf8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf8c:	d10d      	bne.n	800cfaa <_dtoa_r+0xa82>
 800cf8e:	2b39      	cmp	r3, #57	; 0x39
 800cf90:	d029      	beq.n	800cfe6 <_dtoa_r+0xabe>
 800cf92:	f1b9 0f00 	cmp.w	r9, #0
 800cf96:	dd01      	ble.n	800cf9c <_dtoa_r+0xa74>
 800cf98:	9b06      	ldr	r3, [sp, #24]
 800cf9a:	3331      	adds	r3, #49	; 0x31
 800cf9c:	9a04      	ldr	r2, [sp, #16]
 800cf9e:	7013      	strb	r3, [r2, #0]
 800cfa0:	e776      	b.n	800ce90 <_dtoa_r+0x968>
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	e7b9      	b.n	800cf1a <_dtoa_r+0x9f2>
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	e7e2      	b.n	800cf70 <_dtoa_r+0xa48>
 800cfaa:	f1b9 0f00 	cmp.w	r9, #0
 800cfae:	db06      	blt.n	800cfbe <_dtoa_r+0xa96>
 800cfb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800cfb2:	ea41 0909 	orr.w	r9, r1, r9
 800cfb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfb8:	ea59 0101 	orrs.w	r1, r9, r1
 800cfbc:	d120      	bne.n	800d000 <_dtoa_r+0xad8>
 800cfbe:	2a00      	cmp	r2, #0
 800cfc0:	ddec      	ble.n	800cf9c <_dtoa_r+0xa74>
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	9308      	str	r3, [sp, #32]
 800cfca:	f000 fac7 	bl	800d55c <__lshift>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4683      	mov	fp, r0
 800cfd2:	f000 fb33 	bl	800d63c <__mcmp>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	dc02      	bgt.n	800cfe2 <_dtoa_r+0xaba>
 800cfdc:	d1de      	bne.n	800cf9c <_dtoa_r+0xa74>
 800cfde:	07da      	lsls	r2, r3, #31
 800cfe0:	d5dc      	bpl.n	800cf9c <_dtoa_r+0xa74>
 800cfe2:	2b39      	cmp	r3, #57	; 0x39
 800cfe4:	d1d8      	bne.n	800cf98 <_dtoa_r+0xa70>
 800cfe6:	2339      	movs	r3, #57	; 0x39
 800cfe8:	9a04      	ldr	r2, [sp, #16]
 800cfea:	7013      	strb	r3, [r2, #0]
 800cfec:	463b      	mov	r3, r7
 800cfee:	461f      	mov	r7, r3
 800cff0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800cff4:	3b01      	subs	r3, #1
 800cff6:	2a39      	cmp	r2, #57	; 0x39
 800cff8:	d050      	beq.n	800d09c <_dtoa_r+0xb74>
 800cffa:	3201      	adds	r2, #1
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	e747      	b.n	800ce90 <_dtoa_r+0x968>
 800d000:	2a00      	cmp	r2, #0
 800d002:	dd03      	ble.n	800d00c <_dtoa_r+0xae4>
 800d004:	2b39      	cmp	r3, #57	; 0x39
 800d006:	d0ee      	beq.n	800cfe6 <_dtoa_r+0xabe>
 800d008:	3301      	adds	r3, #1
 800d00a:	e7c7      	b.n	800cf9c <_dtoa_r+0xa74>
 800d00c:	9a08      	ldr	r2, [sp, #32]
 800d00e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d010:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d014:	428a      	cmp	r2, r1
 800d016:	d02a      	beq.n	800d06e <_dtoa_r+0xb46>
 800d018:	4659      	mov	r1, fp
 800d01a:	2300      	movs	r3, #0
 800d01c:	220a      	movs	r2, #10
 800d01e:	4628      	mov	r0, r5
 800d020:	f000 f8f0 	bl	800d204 <__multadd>
 800d024:	45b0      	cmp	r8, r6
 800d026:	4683      	mov	fp, r0
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	f04f 020a 	mov.w	r2, #10
 800d030:	4641      	mov	r1, r8
 800d032:	4628      	mov	r0, r5
 800d034:	d107      	bne.n	800d046 <_dtoa_r+0xb1e>
 800d036:	f000 f8e5 	bl	800d204 <__multadd>
 800d03a:	4680      	mov	r8, r0
 800d03c:	4606      	mov	r6, r0
 800d03e:	9b08      	ldr	r3, [sp, #32]
 800d040:	3301      	adds	r3, #1
 800d042:	9308      	str	r3, [sp, #32]
 800d044:	e775      	b.n	800cf32 <_dtoa_r+0xa0a>
 800d046:	f000 f8dd 	bl	800d204 <__multadd>
 800d04a:	4631      	mov	r1, r6
 800d04c:	4680      	mov	r8, r0
 800d04e:	2300      	movs	r3, #0
 800d050:	220a      	movs	r2, #10
 800d052:	4628      	mov	r0, r5
 800d054:	f000 f8d6 	bl	800d204 <__multadd>
 800d058:	4606      	mov	r6, r0
 800d05a:	e7f0      	b.n	800d03e <_dtoa_r+0xb16>
 800d05c:	f1b9 0f00 	cmp.w	r9, #0
 800d060:	bfcc      	ite	gt
 800d062:	464f      	movgt	r7, r9
 800d064:	2701      	movle	r7, #1
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	9a03      	ldr	r2, [sp, #12]
 800d06c:	4417      	add	r7, r2
 800d06e:	4659      	mov	r1, fp
 800d070:	2201      	movs	r2, #1
 800d072:	4628      	mov	r0, r5
 800d074:	9308      	str	r3, [sp, #32]
 800d076:	f000 fa71 	bl	800d55c <__lshift>
 800d07a:	4621      	mov	r1, r4
 800d07c:	4683      	mov	fp, r0
 800d07e:	f000 fadd 	bl	800d63c <__mcmp>
 800d082:	2800      	cmp	r0, #0
 800d084:	dcb2      	bgt.n	800cfec <_dtoa_r+0xac4>
 800d086:	d102      	bne.n	800d08e <_dtoa_r+0xb66>
 800d088:	9b08      	ldr	r3, [sp, #32]
 800d08a:	07db      	lsls	r3, r3, #31
 800d08c:	d4ae      	bmi.n	800cfec <_dtoa_r+0xac4>
 800d08e:	463b      	mov	r3, r7
 800d090:	461f      	mov	r7, r3
 800d092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d096:	2a30      	cmp	r2, #48	; 0x30
 800d098:	d0fa      	beq.n	800d090 <_dtoa_r+0xb68>
 800d09a:	e6f9      	b.n	800ce90 <_dtoa_r+0x968>
 800d09c:	9a03      	ldr	r2, [sp, #12]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d1a5      	bne.n	800cfee <_dtoa_r+0xac6>
 800d0a2:	2331      	movs	r3, #49	; 0x31
 800d0a4:	f10a 0a01 	add.w	sl, sl, #1
 800d0a8:	e779      	b.n	800cf9e <_dtoa_r+0xa76>
 800d0aa:	4b14      	ldr	r3, [pc, #80]	; (800d0fc <_dtoa_r+0xbd4>)
 800d0ac:	f7ff baa8 	b.w	800c600 <_dtoa_r+0xd8>
 800d0b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f47f aa81 	bne.w	800c5ba <_dtoa_r+0x92>
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <_dtoa_r+0xbd8>)
 800d0ba:	f7ff baa1 	b.w	800c600 <_dtoa_r+0xd8>
 800d0be:	f1b9 0f00 	cmp.w	r9, #0
 800d0c2:	dc03      	bgt.n	800d0cc <_dtoa_r+0xba4>
 800d0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	f73f aecb 	bgt.w	800ce62 <_dtoa_r+0x93a>
 800d0cc:	9f03      	ldr	r7, [sp, #12]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4658      	mov	r0, fp
 800d0d2:	f7ff f99d 	bl	800c410 <quorem>
 800d0d6:	9a03      	ldr	r2, [sp, #12]
 800d0d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d0dc:	f807 3b01 	strb.w	r3, [r7], #1
 800d0e0:	1aba      	subs	r2, r7, r2
 800d0e2:	4591      	cmp	r9, r2
 800d0e4:	ddba      	ble.n	800d05c <_dtoa_r+0xb34>
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	220a      	movs	r2, #10
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f000 f889 	bl	800d204 <__multadd>
 800d0f2:	4683      	mov	fp, r0
 800d0f4:	e7eb      	b.n	800d0ce <_dtoa_r+0xba6>
 800d0f6:	bf00      	nop
 800d0f8:	08010d93 	.word	0x08010d93
 800d0fc:	08010cf0 	.word	0x08010cf0
 800d100:	08010d14 	.word	0x08010d14

0800d104 <_localeconv_r>:
 800d104:	4800      	ldr	r0, [pc, #0]	; (800d108 <_localeconv_r+0x4>)
 800d106:	4770      	bx	lr
 800d108:	20000178 	.word	0x20000178

0800d10c <memchr>:
 800d10c:	4603      	mov	r3, r0
 800d10e:	b510      	push	{r4, lr}
 800d110:	b2c9      	uxtb	r1, r1
 800d112:	4402      	add	r2, r0
 800d114:	4293      	cmp	r3, r2
 800d116:	4618      	mov	r0, r3
 800d118:	d101      	bne.n	800d11e <memchr+0x12>
 800d11a:	2000      	movs	r0, #0
 800d11c:	e003      	b.n	800d126 <memchr+0x1a>
 800d11e:	7804      	ldrb	r4, [r0, #0]
 800d120:	3301      	adds	r3, #1
 800d122:	428c      	cmp	r4, r1
 800d124:	d1f6      	bne.n	800d114 <memchr+0x8>
 800d126:	bd10      	pop	{r4, pc}

0800d128 <__malloc_lock>:
 800d128:	4801      	ldr	r0, [pc, #4]	; (800d130 <__malloc_lock+0x8>)
 800d12a:	f000 bd2c 	b.w	800db86 <__retarget_lock_acquire_recursive>
 800d12e:	bf00      	nop
 800d130:	20001d00 	.word	0x20001d00

0800d134 <__malloc_unlock>:
 800d134:	4801      	ldr	r0, [pc, #4]	; (800d13c <__malloc_unlock+0x8>)
 800d136:	f000 bd27 	b.w	800db88 <__retarget_lock_release_recursive>
 800d13a:	bf00      	nop
 800d13c:	20001d00 	.word	0x20001d00

0800d140 <_Balloc>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d144:	4604      	mov	r4, r0
 800d146:	460d      	mov	r5, r1
 800d148:	b976      	cbnz	r6, 800d168 <_Balloc+0x28>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f7fe faea 	bl	800b724 <malloc>
 800d150:	4602      	mov	r2, r0
 800d152:	6260      	str	r0, [r4, #36]	; 0x24
 800d154:	b920      	cbnz	r0, 800d160 <_Balloc+0x20>
 800d156:	2166      	movs	r1, #102	; 0x66
 800d158:	4b17      	ldr	r3, [pc, #92]	; (800d1b8 <_Balloc+0x78>)
 800d15a:	4818      	ldr	r0, [pc, #96]	; (800d1bc <_Balloc+0x7c>)
 800d15c:	f000 fce2 	bl	800db24 <__assert_func>
 800d160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d164:	6006      	str	r6, [r0, #0]
 800d166:	60c6      	str	r6, [r0, #12]
 800d168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d16a:	68f3      	ldr	r3, [r6, #12]
 800d16c:	b183      	cbz	r3, 800d190 <_Balloc+0x50>
 800d16e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d176:	b9b8      	cbnz	r0, 800d1a8 <_Balloc+0x68>
 800d178:	2101      	movs	r1, #1
 800d17a:	fa01 f605 	lsl.w	r6, r1, r5
 800d17e:	1d72      	adds	r2, r6, #5
 800d180:	4620      	mov	r0, r4
 800d182:	0092      	lsls	r2, r2, #2
 800d184:	f000 fb5e 	bl	800d844 <_calloc_r>
 800d188:	b160      	cbz	r0, 800d1a4 <_Balloc+0x64>
 800d18a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d18e:	e00e      	b.n	800d1ae <_Balloc+0x6e>
 800d190:	2221      	movs	r2, #33	; 0x21
 800d192:	2104      	movs	r1, #4
 800d194:	4620      	mov	r0, r4
 800d196:	f000 fb55 	bl	800d844 <_calloc_r>
 800d19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d19c:	60f0      	str	r0, [r6, #12]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e4      	bne.n	800d16e <_Balloc+0x2e>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	6802      	ldr	r2, [r0, #0]
 800d1aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1b4:	e7f7      	b.n	800d1a6 <_Balloc+0x66>
 800d1b6:	bf00      	nop
 800d1b8:	08010d21 	.word	0x08010d21
 800d1bc:	08010da4 	.word	0x08010da4

0800d1c0 <_Bfree>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	b976      	cbnz	r6, 800d1e8 <_Bfree+0x28>
 800d1ca:	2010      	movs	r0, #16
 800d1cc:	f7fe faaa 	bl	800b724 <malloc>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1d4:	b920      	cbnz	r0, 800d1e0 <_Bfree+0x20>
 800d1d6:	218a      	movs	r1, #138	; 0x8a
 800d1d8:	4b08      	ldr	r3, [pc, #32]	; (800d1fc <_Bfree+0x3c>)
 800d1da:	4809      	ldr	r0, [pc, #36]	; (800d200 <_Bfree+0x40>)
 800d1dc:	f000 fca2 	bl	800db24 <__assert_func>
 800d1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1e4:	6006      	str	r6, [r0, #0]
 800d1e6:	60c6      	str	r6, [r0, #12]
 800d1e8:	b13c      	cbz	r4, 800d1fa <_Bfree+0x3a>
 800d1ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1ec:	6862      	ldr	r2, [r4, #4]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1f4:	6021      	str	r1, [r4, #0]
 800d1f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	08010d21 	.word	0x08010d21
 800d200:	08010da4 	.word	0x08010da4

0800d204 <__multadd>:
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	4607      	mov	r7, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	461e      	mov	r6, r3
 800d20e:	2000      	movs	r0, #0
 800d210:	690d      	ldr	r5, [r1, #16]
 800d212:	f101 0c14 	add.w	ip, r1, #20
 800d216:	f8dc 3000 	ldr.w	r3, [ip]
 800d21a:	3001      	adds	r0, #1
 800d21c:	b299      	uxth	r1, r3
 800d21e:	fb02 6101 	mla	r1, r2, r1, r6
 800d222:	0c1e      	lsrs	r6, r3, #16
 800d224:	0c0b      	lsrs	r3, r1, #16
 800d226:	fb02 3306 	mla	r3, r2, r6, r3
 800d22a:	b289      	uxth	r1, r1
 800d22c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d230:	4285      	cmp	r5, r0
 800d232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d236:	f84c 1b04 	str.w	r1, [ip], #4
 800d23a:	dcec      	bgt.n	800d216 <__multadd+0x12>
 800d23c:	b30e      	cbz	r6, 800d282 <__multadd+0x7e>
 800d23e:	68a3      	ldr	r3, [r4, #8]
 800d240:	42ab      	cmp	r3, r5
 800d242:	dc19      	bgt.n	800d278 <__multadd+0x74>
 800d244:	6861      	ldr	r1, [r4, #4]
 800d246:	4638      	mov	r0, r7
 800d248:	3101      	adds	r1, #1
 800d24a:	f7ff ff79 	bl	800d140 <_Balloc>
 800d24e:	4680      	mov	r8, r0
 800d250:	b928      	cbnz	r0, 800d25e <__multadd+0x5a>
 800d252:	4602      	mov	r2, r0
 800d254:	21b5      	movs	r1, #181	; 0xb5
 800d256:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <__multadd+0x84>)
 800d258:	480c      	ldr	r0, [pc, #48]	; (800d28c <__multadd+0x88>)
 800d25a:	f000 fc63 	bl	800db24 <__assert_func>
 800d25e:	6922      	ldr	r2, [r4, #16]
 800d260:	f104 010c 	add.w	r1, r4, #12
 800d264:	3202      	adds	r2, #2
 800d266:	0092      	lsls	r2, r2, #2
 800d268:	300c      	adds	r0, #12
 800d26a:	f7fe fa6b 	bl	800b744 <memcpy>
 800d26e:	4621      	mov	r1, r4
 800d270:	4638      	mov	r0, r7
 800d272:	f7ff ffa5 	bl	800d1c0 <_Bfree>
 800d276:	4644      	mov	r4, r8
 800d278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d27c:	3501      	adds	r5, #1
 800d27e:	615e      	str	r6, [r3, #20]
 800d280:	6125      	str	r5, [r4, #16]
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	08010d93 	.word	0x08010d93
 800d28c:	08010da4 	.word	0x08010da4

0800d290 <__hi0bits>:
 800d290:	0c02      	lsrs	r2, r0, #16
 800d292:	0412      	lsls	r2, r2, #16
 800d294:	4603      	mov	r3, r0
 800d296:	b9ca      	cbnz	r2, 800d2cc <__hi0bits+0x3c>
 800d298:	0403      	lsls	r3, r0, #16
 800d29a:	2010      	movs	r0, #16
 800d29c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d2a0:	bf04      	itt	eq
 800d2a2:	021b      	lsleq	r3, r3, #8
 800d2a4:	3008      	addeq	r0, #8
 800d2a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2aa:	bf04      	itt	eq
 800d2ac:	011b      	lsleq	r3, r3, #4
 800d2ae:	3004      	addeq	r0, #4
 800d2b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2b4:	bf04      	itt	eq
 800d2b6:	009b      	lsleq	r3, r3, #2
 800d2b8:	3002      	addeq	r0, #2
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	db05      	blt.n	800d2ca <__hi0bits+0x3a>
 800d2be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d2c2:	f100 0001 	add.w	r0, r0, #1
 800d2c6:	bf08      	it	eq
 800d2c8:	2020      	moveq	r0, #32
 800d2ca:	4770      	bx	lr
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	e7e5      	b.n	800d29c <__hi0bits+0xc>

0800d2d0 <__lo0bits>:
 800d2d0:	6803      	ldr	r3, [r0, #0]
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	f013 0007 	ands.w	r0, r3, #7
 800d2d8:	d00b      	beq.n	800d2f2 <__lo0bits+0x22>
 800d2da:	07d9      	lsls	r1, r3, #31
 800d2dc:	d421      	bmi.n	800d322 <__lo0bits+0x52>
 800d2de:	0798      	lsls	r0, r3, #30
 800d2e0:	bf49      	itett	mi
 800d2e2:	085b      	lsrmi	r3, r3, #1
 800d2e4:	089b      	lsrpl	r3, r3, #2
 800d2e6:	2001      	movmi	r0, #1
 800d2e8:	6013      	strmi	r3, [r2, #0]
 800d2ea:	bf5c      	itt	pl
 800d2ec:	2002      	movpl	r0, #2
 800d2ee:	6013      	strpl	r3, [r2, #0]
 800d2f0:	4770      	bx	lr
 800d2f2:	b299      	uxth	r1, r3
 800d2f4:	b909      	cbnz	r1, 800d2fa <__lo0bits+0x2a>
 800d2f6:	2010      	movs	r0, #16
 800d2f8:	0c1b      	lsrs	r3, r3, #16
 800d2fa:	b2d9      	uxtb	r1, r3
 800d2fc:	b909      	cbnz	r1, 800d302 <__lo0bits+0x32>
 800d2fe:	3008      	adds	r0, #8
 800d300:	0a1b      	lsrs	r3, r3, #8
 800d302:	0719      	lsls	r1, r3, #28
 800d304:	bf04      	itt	eq
 800d306:	091b      	lsreq	r3, r3, #4
 800d308:	3004      	addeq	r0, #4
 800d30a:	0799      	lsls	r1, r3, #30
 800d30c:	bf04      	itt	eq
 800d30e:	089b      	lsreq	r3, r3, #2
 800d310:	3002      	addeq	r0, #2
 800d312:	07d9      	lsls	r1, r3, #31
 800d314:	d403      	bmi.n	800d31e <__lo0bits+0x4e>
 800d316:	085b      	lsrs	r3, r3, #1
 800d318:	f100 0001 	add.w	r0, r0, #1
 800d31c:	d003      	beq.n	800d326 <__lo0bits+0x56>
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	4770      	bx	lr
 800d322:	2000      	movs	r0, #0
 800d324:	4770      	bx	lr
 800d326:	2020      	movs	r0, #32
 800d328:	4770      	bx	lr
	...

0800d32c <__i2b>:
 800d32c:	b510      	push	{r4, lr}
 800d32e:	460c      	mov	r4, r1
 800d330:	2101      	movs	r1, #1
 800d332:	f7ff ff05 	bl	800d140 <_Balloc>
 800d336:	4602      	mov	r2, r0
 800d338:	b928      	cbnz	r0, 800d346 <__i2b+0x1a>
 800d33a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d33e:	4b04      	ldr	r3, [pc, #16]	; (800d350 <__i2b+0x24>)
 800d340:	4804      	ldr	r0, [pc, #16]	; (800d354 <__i2b+0x28>)
 800d342:	f000 fbef 	bl	800db24 <__assert_func>
 800d346:	2301      	movs	r3, #1
 800d348:	6144      	str	r4, [r0, #20]
 800d34a:	6103      	str	r3, [r0, #16]
 800d34c:	bd10      	pop	{r4, pc}
 800d34e:	bf00      	nop
 800d350:	08010d93 	.word	0x08010d93
 800d354:	08010da4 	.word	0x08010da4

0800d358 <__multiply>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	4691      	mov	r9, r2
 800d35e:	690a      	ldr	r2, [r1, #16]
 800d360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d364:	460c      	mov	r4, r1
 800d366:	429a      	cmp	r2, r3
 800d368:	bfbe      	ittt	lt
 800d36a:	460b      	movlt	r3, r1
 800d36c:	464c      	movlt	r4, r9
 800d36e:	4699      	movlt	r9, r3
 800d370:	6927      	ldr	r7, [r4, #16]
 800d372:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d376:	68a3      	ldr	r3, [r4, #8]
 800d378:	6861      	ldr	r1, [r4, #4]
 800d37a:	eb07 060a 	add.w	r6, r7, sl
 800d37e:	42b3      	cmp	r3, r6
 800d380:	b085      	sub	sp, #20
 800d382:	bfb8      	it	lt
 800d384:	3101      	addlt	r1, #1
 800d386:	f7ff fedb 	bl	800d140 <_Balloc>
 800d38a:	b930      	cbnz	r0, 800d39a <__multiply+0x42>
 800d38c:	4602      	mov	r2, r0
 800d38e:	f240 115d 	movw	r1, #349	; 0x15d
 800d392:	4b43      	ldr	r3, [pc, #268]	; (800d4a0 <__multiply+0x148>)
 800d394:	4843      	ldr	r0, [pc, #268]	; (800d4a4 <__multiply+0x14c>)
 800d396:	f000 fbc5 	bl	800db24 <__assert_func>
 800d39a:	f100 0514 	add.w	r5, r0, #20
 800d39e:	462b      	mov	r3, r5
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3a6:	4543      	cmp	r3, r8
 800d3a8:	d321      	bcc.n	800d3ee <__multiply+0x96>
 800d3aa:	f104 0314 	add.w	r3, r4, #20
 800d3ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3b2:	f109 0314 	add.w	r3, r9, #20
 800d3b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d3ba:	9202      	str	r2, [sp, #8]
 800d3bc:	1b3a      	subs	r2, r7, r4
 800d3be:	3a15      	subs	r2, #21
 800d3c0:	f022 0203 	bic.w	r2, r2, #3
 800d3c4:	3204      	adds	r2, #4
 800d3c6:	f104 0115 	add.w	r1, r4, #21
 800d3ca:	428f      	cmp	r7, r1
 800d3cc:	bf38      	it	cc
 800d3ce:	2204      	movcc	r2, #4
 800d3d0:	9201      	str	r2, [sp, #4]
 800d3d2:	9a02      	ldr	r2, [sp, #8]
 800d3d4:	9303      	str	r3, [sp, #12]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d80c      	bhi.n	800d3f4 <__multiply+0x9c>
 800d3da:	2e00      	cmp	r6, #0
 800d3dc:	dd03      	ble.n	800d3e6 <__multiply+0x8e>
 800d3de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d059      	beq.n	800d49a <__multiply+0x142>
 800d3e6:	6106      	str	r6, [r0, #16]
 800d3e8:	b005      	add	sp, #20
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ee:	f843 2b04 	str.w	r2, [r3], #4
 800d3f2:	e7d8      	b.n	800d3a6 <__multiply+0x4e>
 800d3f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3f8:	f1ba 0f00 	cmp.w	sl, #0
 800d3fc:	d023      	beq.n	800d446 <__multiply+0xee>
 800d3fe:	46a9      	mov	r9, r5
 800d400:	f04f 0c00 	mov.w	ip, #0
 800d404:	f104 0e14 	add.w	lr, r4, #20
 800d408:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d40c:	f8d9 1000 	ldr.w	r1, [r9]
 800d410:	fa1f fb82 	uxth.w	fp, r2
 800d414:	b289      	uxth	r1, r1
 800d416:	fb0a 110b 	mla	r1, sl, fp, r1
 800d41a:	4461      	add	r1, ip
 800d41c:	f8d9 c000 	ldr.w	ip, [r9]
 800d420:	0c12      	lsrs	r2, r2, #16
 800d422:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d426:	fb0a c202 	mla	r2, sl, r2, ip
 800d42a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d42e:	b289      	uxth	r1, r1
 800d430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d434:	4577      	cmp	r7, lr
 800d436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d43a:	f849 1b04 	str.w	r1, [r9], #4
 800d43e:	d8e3      	bhi.n	800d408 <__multiply+0xb0>
 800d440:	9a01      	ldr	r2, [sp, #4]
 800d442:	f845 c002 	str.w	ip, [r5, r2]
 800d446:	9a03      	ldr	r2, [sp, #12]
 800d448:	3304      	adds	r3, #4
 800d44a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d44e:	f1b9 0f00 	cmp.w	r9, #0
 800d452:	d020      	beq.n	800d496 <__multiply+0x13e>
 800d454:	46ae      	mov	lr, r5
 800d456:	f04f 0a00 	mov.w	sl, #0
 800d45a:	6829      	ldr	r1, [r5, #0]
 800d45c:	f104 0c14 	add.w	ip, r4, #20
 800d460:	f8bc b000 	ldrh.w	fp, [ip]
 800d464:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d468:	b289      	uxth	r1, r1
 800d46a:	fb09 220b 	mla	r2, r9, fp, r2
 800d46e:	4492      	add	sl, r2
 800d470:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d474:	f84e 1b04 	str.w	r1, [lr], #4
 800d478:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d47c:	f8be 1000 	ldrh.w	r1, [lr]
 800d480:	0c12      	lsrs	r2, r2, #16
 800d482:	fb09 1102 	mla	r1, r9, r2, r1
 800d486:	4567      	cmp	r7, ip
 800d488:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d48c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d490:	d8e6      	bhi.n	800d460 <__multiply+0x108>
 800d492:	9a01      	ldr	r2, [sp, #4]
 800d494:	50a9      	str	r1, [r5, r2]
 800d496:	3504      	adds	r5, #4
 800d498:	e79b      	b.n	800d3d2 <__multiply+0x7a>
 800d49a:	3e01      	subs	r6, #1
 800d49c:	e79d      	b.n	800d3da <__multiply+0x82>
 800d49e:	bf00      	nop
 800d4a0:	08010d93 	.word	0x08010d93
 800d4a4:	08010da4 	.word	0x08010da4

0800d4a8 <__pow5mult>:
 800d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ac:	4615      	mov	r5, r2
 800d4ae:	f012 0203 	ands.w	r2, r2, #3
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	d007      	beq.n	800d4c8 <__pow5mult+0x20>
 800d4b8:	4c25      	ldr	r4, [pc, #148]	; (800d550 <__pow5mult+0xa8>)
 800d4ba:	3a01      	subs	r2, #1
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4c2:	f7ff fe9f 	bl	800d204 <__multadd>
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	10ad      	asrs	r5, r5, #2
 800d4ca:	d03d      	beq.n	800d548 <__pow5mult+0xa0>
 800d4cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4ce:	b97c      	cbnz	r4, 800d4f0 <__pow5mult+0x48>
 800d4d0:	2010      	movs	r0, #16
 800d4d2:	f7fe f927 	bl	800b724 <malloc>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d4da:	b928      	cbnz	r0, 800d4e8 <__pow5mult+0x40>
 800d4dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4e0:	4b1c      	ldr	r3, [pc, #112]	; (800d554 <__pow5mult+0xac>)
 800d4e2:	481d      	ldr	r0, [pc, #116]	; (800d558 <__pow5mult+0xb0>)
 800d4e4:	f000 fb1e 	bl	800db24 <__assert_func>
 800d4e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4ec:	6004      	str	r4, [r0, #0]
 800d4ee:	60c4      	str	r4, [r0, #12]
 800d4f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4f8:	b94c      	cbnz	r4, 800d50e <__pow5mult+0x66>
 800d4fa:	f240 2171 	movw	r1, #625	; 0x271
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7ff ff14 	bl	800d32c <__i2b>
 800d504:	2300      	movs	r3, #0
 800d506:	4604      	mov	r4, r0
 800d508:	f8c8 0008 	str.w	r0, [r8, #8]
 800d50c:	6003      	str	r3, [r0, #0]
 800d50e:	f04f 0900 	mov.w	r9, #0
 800d512:	07eb      	lsls	r3, r5, #31
 800d514:	d50a      	bpl.n	800d52c <__pow5mult+0x84>
 800d516:	4639      	mov	r1, r7
 800d518:	4622      	mov	r2, r4
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7ff ff1c 	bl	800d358 <__multiply>
 800d520:	4680      	mov	r8, r0
 800d522:	4639      	mov	r1, r7
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff fe4b 	bl	800d1c0 <_Bfree>
 800d52a:	4647      	mov	r7, r8
 800d52c:	106d      	asrs	r5, r5, #1
 800d52e:	d00b      	beq.n	800d548 <__pow5mult+0xa0>
 800d530:	6820      	ldr	r0, [r4, #0]
 800d532:	b938      	cbnz	r0, 800d544 <__pow5mult+0x9c>
 800d534:	4622      	mov	r2, r4
 800d536:	4621      	mov	r1, r4
 800d538:	4630      	mov	r0, r6
 800d53a:	f7ff ff0d 	bl	800d358 <__multiply>
 800d53e:	6020      	str	r0, [r4, #0]
 800d540:	f8c0 9000 	str.w	r9, [r0]
 800d544:	4604      	mov	r4, r0
 800d546:	e7e4      	b.n	800d512 <__pow5mult+0x6a>
 800d548:	4638      	mov	r0, r7
 800d54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d54e:	bf00      	nop
 800d550:	08010ef0 	.word	0x08010ef0
 800d554:	08010d21 	.word	0x08010d21
 800d558:	08010da4 	.word	0x08010da4

0800d55c <__lshift>:
 800d55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d560:	460c      	mov	r4, r1
 800d562:	4607      	mov	r7, r0
 800d564:	4691      	mov	r9, r2
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	6849      	ldr	r1, [r1, #4]
 800d56a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d574:	f108 0601 	add.w	r6, r8, #1
 800d578:	42b3      	cmp	r3, r6
 800d57a:	db0b      	blt.n	800d594 <__lshift+0x38>
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff fddf 	bl	800d140 <_Balloc>
 800d582:	4605      	mov	r5, r0
 800d584:	b948      	cbnz	r0, 800d59a <__lshift+0x3e>
 800d586:	4602      	mov	r2, r0
 800d588:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d58c:	4b29      	ldr	r3, [pc, #164]	; (800d634 <__lshift+0xd8>)
 800d58e:	482a      	ldr	r0, [pc, #168]	; (800d638 <__lshift+0xdc>)
 800d590:	f000 fac8 	bl	800db24 <__assert_func>
 800d594:	3101      	adds	r1, #1
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	e7ee      	b.n	800d578 <__lshift+0x1c>
 800d59a:	2300      	movs	r3, #0
 800d59c:	f100 0114 	add.w	r1, r0, #20
 800d5a0:	f100 0210 	add.w	r2, r0, #16
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	4553      	cmp	r3, sl
 800d5a8:	db37      	blt.n	800d61a <__lshift+0xbe>
 800d5aa:	6920      	ldr	r0, [r4, #16]
 800d5ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5b0:	f104 0314 	add.w	r3, r4, #20
 800d5b4:	f019 091f 	ands.w	r9, r9, #31
 800d5b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d5c0:	d02f      	beq.n	800d622 <__lshift+0xc6>
 800d5c2:	468a      	mov	sl, r1
 800d5c4:	f04f 0c00 	mov.w	ip, #0
 800d5c8:	f1c9 0e20 	rsb	lr, r9, #32
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	fa02 f209 	lsl.w	r2, r2, r9
 800d5d2:	ea42 020c 	orr.w	r2, r2, ip
 800d5d6:	f84a 2b04 	str.w	r2, [sl], #4
 800d5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5de:	4298      	cmp	r0, r3
 800d5e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d5e4:	d8f2      	bhi.n	800d5cc <__lshift+0x70>
 800d5e6:	1b03      	subs	r3, r0, r4
 800d5e8:	3b15      	subs	r3, #21
 800d5ea:	f023 0303 	bic.w	r3, r3, #3
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	f104 0215 	add.w	r2, r4, #21
 800d5f4:	4290      	cmp	r0, r2
 800d5f6:	bf38      	it	cc
 800d5f8:	2304      	movcc	r3, #4
 800d5fa:	f841 c003 	str.w	ip, [r1, r3]
 800d5fe:	f1bc 0f00 	cmp.w	ip, #0
 800d602:	d001      	beq.n	800d608 <__lshift+0xac>
 800d604:	f108 0602 	add.w	r6, r8, #2
 800d608:	3e01      	subs	r6, #1
 800d60a:	4638      	mov	r0, r7
 800d60c:	4621      	mov	r1, r4
 800d60e:	612e      	str	r6, [r5, #16]
 800d610:	f7ff fdd6 	bl	800d1c0 <_Bfree>
 800d614:	4628      	mov	r0, r5
 800d616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d61a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d61e:	3301      	adds	r3, #1
 800d620:	e7c1      	b.n	800d5a6 <__lshift+0x4a>
 800d622:	3904      	subs	r1, #4
 800d624:	f853 2b04 	ldr.w	r2, [r3], #4
 800d628:	4298      	cmp	r0, r3
 800d62a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d62e:	d8f9      	bhi.n	800d624 <__lshift+0xc8>
 800d630:	e7ea      	b.n	800d608 <__lshift+0xac>
 800d632:	bf00      	nop
 800d634:	08010d93 	.word	0x08010d93
 800d638:	08010da4 	.word	0x08010da4

0800d63c <__mcmp>:
 800d63c:	4603      	mov	r3, r0
 800d63e:	690a      	ldr	r2, [r1, #16]
 800d640:	6900      	ldr	r0, [r0, #16]
 800d642:	b530      	push	{r4, r5, lr}
 800d644:	1a80      	subs	r0, r0, r2
 800d646:	d10d      	bne.n	800d664 <__mcmp+0x28>
 800d648:	3314      	adds	r3, #20
 800d64a:	3114      	adds	r1, #20
 800d64c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d65c:	4295      	cmp	r5, r2
 800d65e:	d002      	beq.n	800d666 <__mcmp+0x2a>
 800d660:	d304      	bcc.n	800d66c <__mcmp+0x30>
 800d662:	2001      	movs	r0, #1
 800d664:	bd30      	pop	{r4, r5, pc}
 800d666:	42a3      	cmp	r3, r4
 800d668:	d3f4      	bcc.n	800d654 <__mcmp+0x18>
 800d66a:	e7fb      	b.n	800d664 <__mcmp+0x28>
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295
 800d670:	e7f8      	b.n	800d664 <__mcmp+0x28>
	...

0800d674 <__mdiff>:
 800d674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	460d      	mov	r5, r1
 800d67a:	4607      	mov	r7, r0
 800d67c:	4611      	mov	r1, r2
 800d67e:	4628      	mov	r0, r5
 800d680:	4614      	mov	r4, r2
 800d682:	f7ff ffdb 	bl	800d63c <__mcmp>
 800d686:	1e06      	subs	r6, r0, #0
 800d688:	d111      	bne.n	800d6ae <__mdiff+0x3a>
 800d68a:	4631      	mov	r1, r6
 800d68c:	4638      	mov	r0, r7
 800d68e:	f7ff fd57 	bl	800d140 <_Balloc>
 800d692:	4602      	mov	r2, r0
 800d694:	b928      	cbnz	r0, 800d6a2 <__mdiff+0x2e>
 800d696:	f240 2132 	movw	r1, #562	; 0x232
 800d69a:	4b3a      	ldr	r3, [pc, #232]	; (800d784 <__mdiff+0x110>)
 800d69c:	483a      	ldr	r0, [pc, #232]	; (800d788 <__mdiff+0x114>)
 800d69e:	f000 fa41 	bl	800db24 <__assert_func>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ae:	bfa4      	itt	ge
 800d6b0:	4623      	movge	r3, r4
 800d6b2:	462c      	movge	r4, r5
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	6861      	ldr	r1, [r4, #4]
 800d6b8:	bfa6      	itte	ge
 800d6ba:	461d      	movge	r5, r3
 800d6bc:	2600      	movge	r6, #0
 800d6be:	2601      	movlt	r6, #1
 800d6c0:	f7ff fd3e 	bl	800d140 <_Balloc>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	b918      	cbnz	r0, 800d6d0 <__mdiff+0x5c>
 800d6c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6cc:	4b2d      	ldr	r3, [pc, #180]	; (800d784 <__mdiff+0x110>)
 800d6ce:	e7e5      	b.n	800d69c <__mdiff+0x28>
 800d6d0:	f102 0814 	add.w	r8, r2, #20
 800d6d4:	46c2      	mov	sl, r8
 800d6d6:	f04f 0c00 	mov.w	ip, #0
 800d6da:	6927      	ldr	r7, [r4, #16]
 800d6dc:	60c6      	str	r6, [r0, #12]
 800d6de:	692e      	ldr	r6, [r5, #16]
 800d6e0:	f104 0014 	add.w	r0, r4, #20
 800d6e4:	f105 0914 	add.w	r9, r5, #20
 800d6e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d6ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6f0:	3410      	adds	r4, #16
 800d6f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d6f6:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6fa:	fa1f f18b 	uxth.w	r1, fp
 800d6fe:	448c      	add	ip, r1
 800d700:	b299      	uxth	r1, r3
 800d702:	0c1b      	lsrs	r3, r3, #16
 800d704:	ebac 0101 	sub.w	r1, ip, r1
 800d708:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d70c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d710:	b289      	uxth	r1, r1
 800d712:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d716:	454e      	cmp	r6, r9
 800d718:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d71c:	f84a 3b04 	str.w	r3, [sl], #4
 800d720:	d8e7      	bhi.n	800d6f2 <__mdiff+0x7e>
 800d722:	1b73      	subs	r3, r6, r5
 800d724:	3b15      	subs	r3, #21
 800d726:	f023 0303 	bic.w	r3, r3, #3
 800d72a:	3515      	adds	r5, #21
 800d72c:	3304      	adds	r3, #4
 800d72e:	42ae      	cmp	r6, r5
 800d730:	bf38      	it	cc
 800d732:	2304      	movcc	r3, #4
 800d734:	4418      	add	r0, r3
 800d736:	4443      	add	r3, r8
 800d738:	461e      	mov	r6, r3
 800d73a:	4605      	mov	r5, r0
 800d73c:	4575      	cmp	r5, lr
 800d73e:	d30e      	bcc.n	800d75e <__mdiff+0xea>
 800d740:	f10e 0103 	add.w	r1, lr, #3
 800d744:	1a09      	subs	r1, r1, r0
 800d746:	f021 0103 	bic.w	r1, r1, #3
 800d74a:	3803      	subs	r0, #3
 800d74c:	4586      	cmp	lr, r0
 800d74e:	bf38      	it	cc
 800d750:	2100      	movcc	r1, #0
 800d752:	4419      	add	r1, r3
 800d754:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d758:	b18b      	cbz	r3, 800d77e <__mdiff+0x10a>
 800d75a:	6117      	str	r7, [r2, #16]
 800d75c:	e7a4      	b.n	800d6a8 <__mdiff+0x34>
 800d75e:	f855 8b04 	ldr.w	r8, [r5], #4
 800d762:	fa1f f188 	uxth.w	r1, r8
 800d766:	4461      	add	r1, ip
 800d768:	140c      	asrs	r4, r1, #16
 800d76a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d76e:	b289      	uxth	r1, r1
 800d770:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d774:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d778:	f846 1b04 	str.w	r1, [r6], #4
 800d77c:	e7de      	b.n	800d73c <__mdiff+0xc8>
 800d77e:	3f01      	subs	r7, #1
 800d780:	e7e8      	b.n	800d754 <__mdiff+0xe0>
 800d782:	bf00      	nop
 800d784:	08010d93 	.word	0x08010d93
 800d788:	08010da4 	.word	0x08010da4

0800d78c <__d2b>:
 800d78c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d790:	2101      	movs	r1, #1
 800d792:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d796:	4690      	mov	r8, r2
 800d798:	461d      	mov	r5, r3
 800d79a:	f7ff fcd1 	bl	800d140 <_Balloc>
 800d79e:	4604      	mov	r4, r0
 800d7a0:	b930      	cbnz	r0, 800d7b0 <__d2b+0x24>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	f240 310a 	movw	r1, #778	; 0x30a
 800d7a8:	4b24      	ldr	r3, [pc, #144]	; (800d83c <__d2b+0xb0>)
 800d7aa:	4825      	ldr	r0, [pc, #148]	; (800d840 <__d2b+0xb4>)
 800d7ac:	f000 f9ba 	bl	800db24 <__assert_func>
 800d7b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d7b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d7b8:	bb2d      	cbnz	r5, 800d806 <__d2b+0x7a>
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	f1b8 0300 	subs.w	r3, r8, #0
 800d7c0:	d026      	beq.n	800d810 <__d2b+0x84>
 800d7c2:	4668      	mov	r0, sp
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	f7ff fd83 	bl	800d2d0 <__lo0bits>
 800d7ca:	9900      	ldr	r1, [sp, #0]
 800d7cc:	b1f0      	cbz	r0, 800d80c <__d2b+0x80>
 800d7ce:	9a01      	ldr	r2, [sp, #4]
 800d7d0:	f1c0 0320 	rsb	r3, r0, #32
 800d7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d8:	430b      	orrs	r3, r1
 800d7da:	40c2      	lsrs	r2, r0
 800d7dc:	6163      	str	r3, [r4, #20]
 800d7de:	9201      	str	r2, [sp, #4]
 800d7e0:	9b01      	ldr	r3, [sp, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf14      	ite	ne
 800d7e6:	2102      	movne	r1, #2
 800d7e8:	2101      	moveq	r1, #1
 800d7ea:	61a3      	str	r3, [r4, #24]
 800d7ec:	6121      	str	r1, [r4, #16]
 800d7ee:	b1c5      	cbz	r5, 800d822 <__d2b+0x96>
 800d7f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7f4:	4405      	add	r5, r0
 800d7f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7fa:	603d      	str	r5, [r7, #0]
 800d7fc:	6030      	str	r0, [r6, #0]
 800d7fe:	4620      	mov	r0, r4
 800d800:	b002      	add	sp, #8
 800d802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d80a:	e7d6      	b.n	800d7ba <__d2b+0x2e>
 800d80c:	6161      	str	r1, [r4, #20]
 800d80e:	e7e7      	b.n	800d7e0 <__d2b+0x54>
 800d810:	a801      	add	r0, sp, #4
 800d812:	f7ff fd5d 	bl	800d2d0 <__lo0bits>
 800d816:	2101      	movs	r1, #1
 800d818:	9b01      	ldr	r3, [sp, #4]
 800d81a:	6121      	str	r1, [r4, #16]
 800d81c:	6163      	str	r3, [r4, #20]
 800d81e:	3020      	adds	r0, #32
 800d820:	e7e5      	b.n	800d7ee <__d2b+0x62>
 800d822:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d826:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d82a:	6038      	str	r0, [r7, #0]
 800d82c:	6918      	ldr	r0, [r3, #16]
 800d82e:	f7ff fd2f 	bl	800d290 <__hi0bits>
 800d832:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d836:	6031      	str	r1, [r6, #0]
 800d838:	e7e1      	b.n	800d7fe <__d2b+0x72>
 800d83a:	bf00      	nop
 800d83c:	08010d93 	.word	0x08010d93
 800d840:	08010da4 	.word	0x08010da4

0800d844 <_calloc_r>:
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	fba1 5402 	umull	r5, r4, r1, r2
 800d84a:	b934      	cbnz	r4, 800d85a <_calloc_r+0x16>
 800d84c:	4629      	mov	r1, r5
 800d84e:	f7fd fff7 	bl	800b840 <_malloc_r>
 800d852:	4606      	mov	r6, r0
 800d854:	b928      	cbnz	r0, 800d862 <_calloc_r+0x1e>
 800d856:	4630      	mov	r0, r6
 800d858:	bd70      	pop	{r4, r5, r6, pc}
 800d85a:	220c      	movs	r2, #12
 800d85c:	2600      	movs	r6, #0
 800d85e:	6002      	str	r2, [r0, #0]
 800d860:	e7f9      	b.n	800d856 <_calloc_r+0x12>
 800d862:	462a      	mov	r2, r5
 800d864:	4621      	mov	r1, r4
 800d866:	f7fd ff7b 	bl	800b760 <memset>
 800d86a:	e7f4      	b.n	800d856 <_calloc_r+0x12>

0800d86c <__ssputs_r>:
 800d86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d870:	688e      	ldr	r6, [r1, #8]
 800d872:	4682      	mov	sl, r0
 800d874:	429e      	cmp	r6, r3
 800d876:	460c      	mov	r4, r1
 800d878:	4690      	mov	r8, r2
 800d87a:	461f      	mov	r7, r3
 800d87c:	d838      	bhi.n	800d8f0 <__ssputs_r+0x84>
 800d87e:	898a      	ldrh	r2, [r1, #12]
 800d880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d884:	d032      	beq.n	800d8ec <__ssputs_r+0x80>
 800d886:	6825      	ldr	r5, [r4, #0]
 800d888:	6909      	ldr	r1, [r1, #16]
 800d88a:	3301      	adds	r3, #1
 800d88c:	eba5 0901 	sub.w	r9, r5, r1
 800d890:	6965      	ldr	r5, [r4, #20]
 800d892:	444b      	add	r3, r9
 800d894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d89c:	106d      	asrs	r5, r5, #1
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	bf38      	it	cc
 800d8a2:	461d      	movcc	r5, r3
 800d8a4:	0553      	lsls	r3, r2, #21
 800d8a6:	d531      	bpl.n	800d90c <__ssputs_r+0xa0>
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7fd ffc9 	bl	800b840 <_malloc_r>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	b950      	cbnz	r0, 800d8c8 <__ssputs_r+0x5c>
 800d8b2:	230c      	movs	r3, #12
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b8:	f8ca 3000 	str.w	r3, [sl]
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c8:	464a      	mov	r2, r9
 800d8ca:	6921      	ldr	r1, [r4, #16]
 800d8cc:	f7fd ff3a 	bl	800b744 <memcpy>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	6126      	str	r6, [r4, #16]
 800d8de:	444e      	add	r6, r9
 800d8e0:	6026      	str	r6, [r4, #0]
 800d8e2:	463e      	mov	r6, r7
 800d8e4:	6165      	str	r5, [r4, #20]
 800d8e6:	eba5 0509 	sub.w	r5, r5, r9
 800d8ea:	60a5      	str	r5, [r4, #8]
 800d8ec:	42be      	cmp	r6, r7
 800d8ee:	d900      	bls.n	800d8f2 <__ssputs_r+0x86>
 800d8f0:	463e      	mov	r6, r7
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	6820      	ldr	r0, [r4, #0]
 800d8f8:	f000 f959 	bl	800dbae <memmove>
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	2000      	movs	r0, #0
 800d900:	1b9b      	subs	r3, r3, r6
 800d902:	60a3      	str	r3, [r4, #8]
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	4433      	add	r3, r6
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	e7db      	b.n	800d8c4 <__ssputs_r+0x58>
 800d90c:	462a      	mov	r2, r5
 800d90e:	f000 f968 	bl	800dbe2 <_realloc_r>
 800d912:	4606      	mov	r6, r0
 800d914:	2800      	cmp	r0, #0
 800d916:	d1e1      	bne.n	800d8dc <__ssputs_r+0x70>
 800d918:	4650      	mov	r0, sl
 800d91a:	6921      	ldr	r1, [r4, #16]
 800d91c:	f7fd ff28 	bl	800b770 <_free_r>
 800d920:	e7c7      	b.n	800d8b2 <__ssputs_r+0x46>
	...

0800d924 <_svfiprintf_r>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	4698      	mov	r8, r3
 800d92a:	898b      	ldrh	r3, [r1, #12]
 800d92c:	4607      	mov	r7, r0
 800d92e:	061b      	lsls	r3, r3, #24
 800d930:	460d      	mov	r5, r1
 800d932:	4614      	mov	r4, r2
 800d934:	b09d      	sub	sp, #116	; 0x74
 800d936:	d50e      	bpl.n	800d956 <_svfiprintf_r+0x32>
 800d938:	690b      	ldr	r3, [r1, #16]
 800d93a:	b963      	cbnz	r3, 800d956 <_svfiprintf_r+0x32>
 800d93c:	2140      	movs	r1, #64	; 0x40
 800d93e:	f7fd ff7f 	bl	800b840 <_malloc_r>
 800d942:	6028      	str	r0, [r5, #0]
 800d944:	6128      	str	r0, [r5, #16]
 800d946:	b920      	cbnz	r0, 800d952 <_svfiprintf_r+0x2e>
 800d948:	230c      	movs	r3, #12
 800d94a:	603b      	str	r3, [r7, #0]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	e0d1      	b.n	800daf6 <_svfiprintf_r+0x1d2>
 800d952:	2340      	movs	r3, #64	; 0x40
 800d954:	616b      	str	r3, [r5, #20]
 800d956:	2300      	movs	r3, #0
 800d958:	9309      	str	r3, [sp, #36]	; 0x24
 800d95a:	2320      	movs	r3, #32
 800d95c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d960:	2330      	movs	r3, #48	; 0x30
 800d962:	f04f 0901 	mov.w	r9, #1
 800d966:	f8cd 800c 	str.w	r8, [sp, #12]
 800d96a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db10 <_svfiprintf_r+0x1ec>
 800d96e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d972:	4623      	mov	r3, r4
 800d974:	469a      	mov	sl, r3
 800d976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97a:	b10a      	cbz	r2, 800d980 <_svfiprintf_r+0x5c>
 800d97c:	2a25      	cmp	r2, #37	; 0x25
 800d97e:	d1f9      	bne.n	800d974 <_svfiprintf_r+0x50>
 800d980:	ebba 0b04 	subs.w	fp, sl, r4
 800d984:	d00b      	beq.n	800d99e <_svfiprintf_r+0x7a>
 800d986:	465b      	mov	r3, fp
 800d988:	4622      	mov	r2, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ff6d 	bl	800d86c <__ssputs_r>
 800d992:	3001      	adds	r0, #1
 800d994:	f000 80aa 	beq.w	800daec <_svfiprintf_r+0x1c8>
 800d998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d99a:	445a      	add	r2, fp
 800d99c:	9209      	str	r2, [sp, #36]	; 0x24
 800d99e:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 80a2 	beq.w	800daec <_svfiprintf_r+0x1c8>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b2:	f10a 0a01 	add.w	sl, sl, #1
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	9307      	str	r3, [sp, #28]
 800d9ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9be:	931a      	str	r3, [sp, #104]	; 0x68
 800d9c0:	4654      	mov	r4, sl
 800d9c2:	2205      	movs	r2, #5
 800d9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c8:	4851      	ldr	r0, [pc, #324]	; (800db10 <_svfiprintf_r+0x1ec>)
 800d9ca:	f7ff fb9f 	bl	800d10c <memchr>
 800d9ce:	9a04      	ldr	r2, [sp, #16]
 800d9d0:	b9d8      	cbnz	r0, 800da0a <_svfiprintf_r+0xe6>
 800d9d2:	06d0      	lsls	r0, r2, #27
 800d9d4:	bf44      	itt	mi
 800d9d6:	2320      	movmi	r3, #32
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9dc:	0711      	lsls	r1, r2, #28
 800d9de:	bf44      	itt	mi
 800d9e0:	232b      	movmi	r3, #43	; 0x2b
 800d9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ec:	d015      	beq.n	800da1a <_svfiprintf_r+0xf6>
 800d9ee:	4654      	mov	r4, sl
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f04f 0c0a 	mov.w	ip, #10
 800d9f6:	9a07      	ldr	r2, [sp, #28]
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9fe:	3b30      	subs	r3, #48	; 0x30
 800da00:	2b09      	cmp	r3, #9
 800da02:	d94e      	bls.n	800daa2 <_svfiprintf_r+0x17e>
 800da04:	b1b0      	cbz	r0, 800da34 <_svfiprintf_r+0x110>
 800da06:	9207      	str	r2, [sp, #28]
 800da08:	e014      	b.n	800da34 <_svfiprintf_r+0x110>
 800da0a:	eba0 0308 	sub.w	r3, r0, r8
 800da0e:	fa09 f303 	lsl.w	r3, r9, r3
 800da12:	4313      	orrs	r3, r2
 800da14:	46a2      	mov	sl, r4
 800da16:	9304      	str	r3, [sp, #16]
 800da18:	e7d2      	b.n	800d9c0 <_svfiprintf_r+0x9c>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d19      	adds	r1, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9103      	str	r1, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfbb      	ittet	lt
 800da26:	425b      	neglt	r3, r3
 800da28:	f042 0202 	orrlt.w	r2, r2, #2
 800da2c:	9307      	strge	r3, [sp, #28]
 800da2e:	9307      	strlt	r3, [sp, #28]
 800da30:	bfb8      	it	lt
 800da32:	9204      	strlt	r2, [sp, #16]
 800da34:	7823      	ldrb	r3, [r4, #0]
 800da36:	2b2e      	cmp	r3, #46	; 0x2e
 800da38:	d10c      	bne.n	800da54 <_svfiprintf_r+0x130>
 800da3a:	7863      	ldrb	r3, [r4, #1]
 800da3c:	2b2a      	cmp	r3, #42	; 0x2a
 800da3e:	d135      	bne.n	800daac <_svfiprintf_r+0x188>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	3402      	adds	r4, #2
 800da44:	1d1a      	adds	r2, r3, #4
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	9203      	str	r2, [sp, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bfb8      	it	lt
 800da4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800db14 <_svfiprintf_r+0x1f0>
 800da58:	2203      	movs	r2, #3
 800da5a:	4650      	mov	r0, sl
 800da5c:	7821      	ldrb	r1, [r4, #0]
 800da5e:	f7ff fb55 	bl	800d10c <memchr>
 800da62:	b140      	cbz	r0, 800da76 <_svfiprintf_r+0x152>
 800da64:	2340      	movs	r3, #64	; 0x40
 800da66:	eba0 000a 	sub.w	r0, r0, sl
 800da6a:	fa03 f000 	lsl.w	r0, r3, r0
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	3401      	adds	r4, #1
 800da72:	4303      	orrs	r3, r0
 800da74:	9304      	str	r3, [sp, #16]
 800da76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7a:	2206      	movs	r2, #6
 800da7c:	4826      	ldr	r0, [pc, #152]	; (800db18 <_svfiprintf_r+0x1f4>)
 800da7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da82:	f7ff fb43 	bl	800d10c <memchr>
 800da86:	2800      	cmp	r0, #0
 800da88:	d038      	beq.n	800dafc <_svfiprintf_r+0x1d8>
 800da8a:	4b24      	ldr	r3, [pc, #144]	; (800db1c <_svfiprintf_r+0x1f8>)
 800da8c:	bb1b      	cbnz	r3, 800dad6 <_svfiprintf_r+0x1b2>
 800da8e:	9b03      	ldr	r3, [sp, #12]
 800da90:	3307      	adds	r3, #7
 800da92:	f023 0307 	bic.w	r3, r3, #7
 800da96:	3308      	adds	r3, #8
 800da98:	9303      	str	r3, [sp, #12]
 800da9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9c:	4433      	add	r3, r6
 800da9e:	9309      	str	r3, [sp, #36]	; 0x24
 800daa0:	e767      	b.n	800d972 <_svfiprintf_r+0x4e>
 800daa2:	460c      	mov	r4, r1
 800daa4:	2001      	movs	r0, #1
 800daa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800daaa:	e7a5      	b.n	800d9f8 <_svfiprintf_r+0xd4>
 800daac:	2300      	movs	r3, #0
 800daae:	f04f 0c0a 	mov.w	ip, #10
 800dab2:	4619      	mov	r1, r3
 800dab4:	3401      	adds	r4, #1
 800dab6:	9305      	str	r3, [sp, #20]
 800dab8:	4620      	mov	r0, r4
 800daba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dabe:	3a30      	subs	r2, #48	; 0x30
 800dac0:	2a09      	cmp	r2, #9
 800dac2:	d903      	bls.n	800dacc <_svfiprintf_r+0x1a8>
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0c5      	beq.n	800da54 <_svfiprintf_r+0x130>
 800dac8:	9105      	str	r1, [sp, #20]
 800daca:	e7c3      	b.n	800da54 <_svfiprintf_r+0x130>
 800dacc:	4604      	mov	r4, r0
 800dace:	2301      	movs	r3, #1
 800dad0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dad4:	e7f0      	b.n	800dab8 <_svfiprintf_r+0x194>
 800dad6:	ab03      	add	r3, sp, #12
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	462a      	mov	r2, r5
 800dadc:	4638      	mov	r0, r7
 800dade:	4b10      	ldr	r3, [pc, #64]	; (800db20 <_svfiprintf_r+0x1fc>)
 800dae0:	a904      	add	r1, sp, #16
 800dae2:	f7fd ffbf 	bl	800ba64 <_printf_float>
 800dae6:	1c42      	adds	r2, r0, #1
 800dae8:	4606      	mov	r6, r0
 800daea:	d1d6      	bne.n	800da9a <_svfiprintf_r+0x176>
 800daec:	89ab      	ldrh	r3, [r5, #12]
 800daee:	065b      	lsls	r3, r3, #25
 800daf0:	f53f af2c 	bmi.w	800d94c <_svfiprintf_r+0x28>
 800daf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daf6:	b01d      	add	sp, #116	; 0x74
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	ab03      	add	r3, sp, #12
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	462a      	mov	r2, r5
 800db02:	4638      	mov	r0, r7
 800db04:	4b06      	ldr	r3, [pc, #24]	; (800db20 <_svfiprintf_r+0x1fc>)
 800db06:	a904      	add	r1, sp, #16
 800db08:	f7fe fa48 	bl	800bf9c <_printf_i>
 800db0c:	e7eb      	b.n	800dae6 <_svfiprintf_r+0x1c2>
 800db0e:	bf00      	nop
 800db10:	08010efc 	.word	0x08010efc
 800db14:	08010f02 	.word	0x08010f02
 800db18:	08010f06 	.word	0x08010f06
 800db1c:	0800ba65 	.word	0x0800ba65
 800db20:	0800d86d 	.word	0x0800d86d

0800db24 <__assert_func>:
 800db24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db26:	4614      	mov	r4, r2
 800db28:	461a      	mov	r2, r3
 800db2a:	4b09      	ldr	r3, [pc, #36]	; (800db50 <__assert_func+0x2c>)
 800db2c:	4605      	mov	r5, r0
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68d8      	ldr	r0, [r3, #12]
 800db32:	b14c      	cbz	r4, 800db48 <__assert_func+0x24>
 800db34:	4b07      	ldr	r3, [pc, #28]	; (800db54 <__assert_func+0x30>)
 800db36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db3a:	9100      	str	r1, [sp, #0]
 800db3c:	462b      	mov	r3, r5
 800db3e:	4906      	ldr	r1, [pc, #24]	; (800db58 <__assert_func+0x34>)
 800db40:	f000 f80e 	bl	800db60 <fiprintf>
 800db44:	f000 faa2 	bl	800e08c <abort>
 800db48:	4b04      	ldr	r3, [pc, #16]	; (800db5c <__assert_func+0x38>)
 800db4a:	461c      	mov	r4, r3
 800db4c:	e7f3      	b.n	800db36 <__assert_func+0x12>
 800db4e:	bf00      	nop
 800db50:	20000024 	.word	0x20000024
 800db54:	08010f0d 	.word	0x08010f0d
 800db58:	08010f1a 	.word	0x08010f1a
 800db5c:	08010f48 	.word	0x08010f48

0800db60 <fiprintf>:
 800db60:	b40e      	push	{r1, r2, r3}
 800db62:	b503      	push	{r0, r1, lr}
 800db64:	4601      	mov	r1, r0
 800db66:	ab03      	add	r3, sp, #12
 800db68:	4805      	ldr	r0, [pc, #20]	; (800db80 <fiprintf+0x20>)
 800db6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db6e:	6800      	ldr	r0, [r0, #0]
 800db70:	9301      	str	r3, [sp, #4]
 800db72:	f000 f88d 	bl	800dc90 <_vfiprintf_r>
 800db76:	b002      	add	sp, #8
 800db78:	f85d eb04 	ldr.w	lr, [sp], #4
 800db7c:	b003      	add	sp, #12
 800db7e:	4770      	bx	lr
 800db80:	20000024 	.word	0x20000024

0800db84 <__retarget_lock_init_recursive>:
 800db84:	4770      	bx	lr

0800db86 <__retarget_lock_acquire_recursive>:
 800db86:	4770      	bx	lr

0800db88 <__retarget_lock_release_recursive>:
 800db88:	4770      	bx	lr

0800db8a <__ascii_mbtowc>:
 800db8a:	b082      	sub	sp, #8
 800db8c:	b901      	cbnz	r1, 800db90 <__ascii_mbtowc+0x6>
 800db8e:	a901      	add	r1, sp, #4
 800db90:	b142      	cbz	r2, 800dba4 <__ascii_mbtowc+0x1a>
 800db92:	b14b      	cbz	r3, 800dba8 <__ascii_mbtowc+0x1e>
 800db94:	7813      	ldrb	r3, [r2, #0]
 800db96:	600b      	str	r3, [r1, #0]
 800db98:	7812      	ldrb	r2, [r2, #0]
 800db9a:	1e10      	subs	r0, r2, #0
 800db9c:	bf18      	it	ne
 800db9e:	2001      	movne	r0, #1
 800dba0:	b002      	add	sp, #8
 800dba2:	4770      	bx	lr
 800dba4:	4610      	mov	r0, r2
 800dba6:	e7fb      	b.n	800dba0 <__ascii_mbtowc+0x16>
 800dba8:	f06f 0001 	mvn.w	r0, #1
 800dbac:	e7f8      	b.n	800dba0 <__ascii_mbtowc+0x16>

0800dbae <memmove>:
 800dbae:	4288      	cmp	r0, r1
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	eb01 0402 	add.w	r4, r1, r2
 800dbb6:	d902      	bls.n	800dbbe <memmove+0x10>
 800dbb8:	4284      	cmp	r4, r0
 800dbba:	4623      	mov	r3, r4
 800dbbc:	d807      	bhi.n	800dbce <memmove+0x20>
 800dbbe:	1e43      	subs	r3, r0, #1
 800dbc0:	42a1      	cmp	r1, r4
 800dbc2:	d008      	beq.n	800dbd6 <memmove+0x28>
 800dbc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbcc:	e7f8      	b.n	800dbc0 <memmove+0x12>
 800dbce:	4601      	mov	r1, r0
 800dbd0:	4402      	add	r2, r0
 800dbd2:	428a      	cmp	r2, r1
 800dbd4:	d100      	bne.n	800dbd8 <memmove+0x2a>
 800dbd6:	bd10      	pop	{r4, pc}
 800dbd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbe0:	e7f7      	b.n	800dbd2 <memmove+0x24>

0800dbe2 <_realloc_r>:
 800dbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4614      	mov	r4, r2
 800dbea:	460e      	mov	r6, r1
 800dbec:	b921      	cbnz	r1, 800dbf8 <_realloc_r+0x16>
 800dbee:	4611      	mov	r1, r2
 800dbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf4:	f7fd be24 	b.w	800b840 <_malloc_r>
 800dbf8:	b92a      	cbnz	r2, 800dc06 <_realloc_r+0x24>
 800dbfa:	f7fd fdb9 	bl	800b770 <_free_r>
 800dbfe:	4625      	mov	r5, r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc06:	f000 fc61 	bl	800e4cc <_malloc_usable_size_r>
 800dc0a:	4284      	cmp	r4, r0
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	d802      	bhi.n	800dc16 <_realloc_r+0x34>
 800dc10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc14:	d812      	bhi.n	800dc3c <_realloc_r+0x5a>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4640      	mov	r0, r8
 800dc1a:	f7fd fe11 	bl	800b840 <_malloc_r>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d0ed      	beq.n	800dc00 <_realloc_r+0x1e>
 800dc24:	42bc      	cmp	r4, r7
 800dc26:	4622      	mov	r2, r4
 800dc28:	4631      	mov	r1, r6
 800dc2a:	bf28      	it	cs
 800dc2c:	463a      	movcs	r2, r7
 800dc2e:	f7fd fd89 	bl	800b744 <memcpy>
 800dc32:	4631      	mov	r1, r6
 800dc34:	4640      	mov	r0, r8
 800dc36:	f7fd fd9b 	bl	800b770 <_free_r>
 800dc3a:	e7e1      	b.n	800dc00 <_realloc_r+0x1e>
 800dc3c:	4635      	mov	r5, r6
 800dc3e:	e7df      	b.n	800dc00 <_realloc_r+0x1e>

0800dc40 <__sfputc_r>:
 800dc40:	6893      	ldr	r3, [r2, #8]
 800dc42:	b410      	push	{r4}
 800dc44:	3b01      	subs	r3, #1
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	6093      	str	r3, [r2, #8]
 800dc4a:	da07      	bge.n	800dc5c <__sfputc_r+0x1c>
 800dc4c:	6994      	ldr	r4, [r2, #24]
 800dc4e:	42a3      	cmp	r3, r4
 800dc50:	db01      	blt.n	800dc56 <__sfputc_r+0x16>
 800dc52:	290a      	cmp	r1, #10
 800dc54:	d102      	bne.n	800dc5c <__sfputc_r+0x1c>
 800dc56:	bc10      	pop	{r4}
 800dc58:	f000 b94a 	b.w	800def0 <__swbuf_r>
 800dc5c:	6813      	ldr	r3, [r2, #0]
 800dc5e:	1c58      	adds	r0, r3, #1
 800dc60:	6010      	str	r0, [r2, #0]
 800dc62:	7019      	strb	r1, [r3, #0]
 800dc64:	4608      	mov	r0, r1
 800dc66:	bc10      	pop	{r4}
 800dc68:	4770      	bx	lr

0800dc6a <__sfputs_r>:
 800dc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	460f      	mov	r7, r1
 800dc70:	4614      	mov	r4, r2
 800dc72:	18d5      	adds	r5, r2, r3
 800dc74:	42ac      	cmp	r4, r5
 800dc76:	d101      	bne.n	800dc7c <__sfputs_r+0x12>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e007      	b.n	800dc8c <__sfputs_r+0x22>
 800dc7c:	463a      	mov	r2, r7
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	f7ff ffdc 	bl	800dc40 <__sfputc_r>
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	d1f3      	bne.n	800dc74 <__sfputs_r+0xa>
 800dc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc90 <_vfiprintf_r>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	460d      	mov	r5, r1
 800dc96:	4614      	mov	r4, r2
 800dc98:	4698      	mov	r8, r3
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	b09d      	sub	sp, #116	; 0x74
 800dc9e:	b118      	cbz	r0, 800dca8 <_vfiprintf_r+0x18>
 800dca0:	6983      	ldr	r3, [r0, #24]
 800dca2:	b90b      	cbnz	r3, 800dca8 <_vfiprintf_r+0x18>
 800dca4:	f000 fb10 	bl	800e2c8 <__sinit>
 800dca8:	4b89      	ldr	r3, [pc, #548]	; (800ded0 <_vfiprintf_r+0x240>)
 800dcaa:	429d      	cmp	r5, r3
 800dcac:	d11b      	bne.n	800dce6 <_vfiprintf_r+0x56>
 800dcae:	6875      	ldr	r5, [r6, #4]
 800dcb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcb2:	07d9      	lsls	r1, r3, #31
 800dcb4:	d405      	bmi.n	800dcc2 <_vfiprintf_r+0x32>
 800dcb6:	89ab      	ldrh	r3, [r5, #12]
 800dcb8:	059a      	lsls	r2, r3, #22
 800dcba:	d402      	bmi.n	800dcc2 <_vfiprintf_r+0x32>
 800dcbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcbe:	f7ff ff62 	bl	800db86 <__retarget_lock_acquire_recursive>
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	071b      	lsls	r3, r3, #28
 800dcc6:	d501      	bpl.n	800dccc <_vfiprintf_r+0x3c>
 800dcc8:	692b      	ldr	r3, [r5, #16]
 800dcca:	b9eb      	cbnz	r3, 800dd08 <_vfiprintf_r+0x78>
 800dccc:	4629      	mov	r1, r5
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f000 f96e 	bl	800dfb0 <__swsetup_r>
 800dcd4:	b1c0      	cbz	r0, 800dd08 <_vfiprintf_r+0x78>
 800dcd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcd8:	07dc      	lsls	r4, r3, #31
 800dcda:	d50e      	bpl.n	800dcfa <_vfiprintf_r+0x6a>
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	b01d      	add	sp, #116	; 0x74
 800dce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce6:	4b7b      	ldr	r3, [pc, #492]	; (800ded4 <_vfiprintf_r+0x244>)
 800dce8:	429d      	cmp	r5, r3
 800dcea:	d101      	bne.n	800dcf0 <_vfiprintf_r+0x60>
 800dcec:	68b5      	ldr	r5, [r6, #8]
 800dcee:	e7df      	b.n	800dcb0 <_vfiprintf_r+0x20>
 800dcf0:	4b79      	ldr	r3, [pc, #484]	; (800ded8 <_vfiprintf_r+0x248>)
 800dcf2:	429d      	cmp	r5, r3
 800dcf4:	bf08      	it	eq
 800dcf6:	68f5      	ldreq	r5, [r6, #12]
 800dcf8:	e7da      	b.n	800dcb0 <_vfiprintf_r+0x20>
 800dcfa:	89ab      	ldrh	r3, [r5, #12]
 800dcfc:	0598      	lsls	r0, r3, #22
 800dcfe:	d4ed      	bmi.n	800dcdc <_vfiprintf_r+0x4c>
 800dd00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd02:	f7ff ff41 	bl	800db88 <__retarget_lock_release_recursive>
 800dd06:	e7e9      	b.n	800dcdc <_vfiprintf_r+0x4c>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd0c:	2320      	movs	r3, #32
 800dd0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd12:	2330      	movs	r3, #48	; 0x30
 800dd14:	f04f 0901 	mov.w	r9, #1
 800dd18:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dedc <_vfiprintf_r+0x24c>
 800dd20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd24:	4623      	mov	r3, r4
 800dd26:	469a      	mov	sl, r3
 800dd28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd2c:	b10a      	cbz	r2, 800dd32 <_vfiprintf_r+0xa2>
 800dd2e:	2a25      	cmp	r2, #37	; 0x25
 800dd30:	d1f9      	bne.n	800dd26 <_vfiprintf_r+0x96>
 800dd32:	ebba 0b04 	subs.w	fp, sl, r4
 800dd36:	d00b      	beq.n	800dd50 <_vfiprintf_r+0xc0>
 800dd38:	465b      	mov	r3, fp
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f7ff ff93 	bl	800dc6a <__sfputs_r>
 800dd44:	3001      	adds	r0, #1
 800dd46:	f000 80aa 	beq.w	800de9e <_vfiprintf_r+0x20e>
 800dd4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd4c:	445a      	add	r2, fp
 800dd4e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd50:	f89a 3000 	ldrb.w	r3, [sl]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 80a2 	beq.w	800de9e <_vfiprintf_r+0x20e>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd64:	f10a 0a01 	add.w	sl, sl, #1
 800dd68:	9304      	str	r3, [sp, #16]
 800dd6a:	9307      	str	r3, [sp, #28]
 800dd6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd70:	931a      	str	r3, [sp, #104]	; 0x68
 800dd72:	4654      	mov	r4, sl
 800dd74:	2205      	movs	r2, #5
 800dd76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7a:	4858      	ldr	r0, [pc, #352]	; (800dedc <_vfiprintf_r+0x24c>)
 800dd7c:	f7ff f9c6 	bl	800d10c <memchr>
 800dd80:	9a04      	ldr	r2, [sp, #16]
 800dd82:	b9d8      	cbnz	r0, 800ddbc <_vfiprintf_r+0x12c>
 800dd84:	06d1      	lsls	r1, r2, #27
 800dd86:	bf44      	itt	mi
 800dd88:	2320      	movmi	r3, #32
 800dd8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd8e:	0713      	lsls	r3, r2, #28
 800dd90:	bf44      	itt	mi
 800dd92:	232b      	movmi	r3, #43	; 0x2b
 800dd94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd98:	f89a 3000 	ldrb.w	r3, [sl]
 800dd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd9e:	d015      	beq.n	800ddcc <_vfiprintf_r+0x13c>
 800dda0:	4654      	mov	r4, sl
 800dda2:	2000      	movs	r0, #0
 800dda4:	f04f 0c0a 	mov.w	ip, #10
 800dda8:	9a07      	ldr	r2, [sp, #28]
 800ddaa:	4621      	mov	r1, r4
 800ddac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb0:	3b30      	subs	r3, #48	; 0x30
 800ddb2:	2b09      	cmp	r3, #9
 800ddb4:	d94e      	bls.n	800de54 <_vfiprintf_r+0x1c4>
 800ddb6:	b1b0      	cbz	r0, 800dde6 <_vfiprintf_r+0x156>
 800ddb8:	9207      	str	r2, [sp, #28]
 800ddba:	e014      	b.n	800dde6 <_vfiprintf_r+0x156>
 800ddbc:	eba0 0308 	sub.w	r3, r0, r8
 800ddc0:	fa09 f303 	lsl.w	r3, r9, r3
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	46a2      	mov	sl, r4
 800ddc8:	9304      	str	r3, [sp, #16]
 800ddca:	e7d2      	b.n	800dd72 <_vfiprintf_r+0xe2>
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	1d19      	adds	r1, r3, #4
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	9103      	str	r1, [sp, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	bfbb      	ittet	lt
 800ddd8:	425b      	neglt	r3, r3
 800ddda:	f042 0202 	orrlt.w	r2, r2, #2
 800ddde:	9307      	strge	r3, [sp, #28]
 800dde0:	9307      	strlt	r3, [sp, #28]
 800dde2:	bfb8      	it	lt
 800dde4:	9204      	strlt	r2, [sp, #16]
 800dde6:	7823      	ldrb	r3, [r4, #0]
 800dde8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddea:	d10c      	bne.n	800de06 <_vfiprintf_r+0x176>
 800ddec:	7863      	ldrb	r3, [r4, #1]
 800ddee:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf0:	d135      	bne.n	800de5e <_vfiprintf_r+0x1ce>
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	3402      	adds	r4, #2
 800ddf6:	1d1a      	adds	r2, r3, #4
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	9203      	str	r2, [sp, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bfb8      	it	lt
 800de00:	f04f 33ff 	movlt.w	r3, #4294967295
 800de04:	9305      	str	r3, [sp, #20]
 800de06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dee0 <_vfiprintf_r+0x250>
 800de0a:	2203      	movs	r2, #3
 800de0c:	4650      	mov	r0, sl
 800de0e:	7821      	ldrb	r1, [r4, #0]
 800de10:	f7ff f97c 	bl	800d10c <memchr>
 800de14:	b140      	cbz	r0, 800de28 <_vfiprintf_r+0x198>
 800de16:	2340      	movs	r3, #64	; 0x40
 800de18:	eba0 000a 	sub.w	r0, r0, sl
 800de1c:	fa03 f000 	lsl.w	r0, r3, r0
 800de20:	9b04      	ldr	r3, [sp, #16]
 800de22:	3401      	adds	r4, #1
 800de24:	4303      	orrs	r3, r0
 800de26:	9304      	str	r3, [sp, #16]
 800de28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de2c:	2206      	movs	r2, #6
 800de2e:	482d      	ldr	r0, [pc, #180]	; (800dee4 <_vfiprintf_r+0x254>)
 800de30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de34:	f7ff f96a 	bl	800d10c <memchr>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d03f      	beq.n	800debc <_vfiprintf_r+0x22c>
 800de3c:	4b2a      	ldr	r3, [pc, #168]	; (800dee8 <_vfiprintf_r+0x258>)
 800de3e:	bb1b      	cbnz	r3, 800de88 <_vfiprintf_r+0x1f8>
 800de40:	9b03      	ldr	r3, [sp, #12]
 800de42:	3307      	adds	r3, #7
 800de44:	f023 0307 	bic.w	r3, r3, #7
 800de48:	3308      	adds	r3, #8
 800de4a:	9303      	str	r3, [sp, #12]
 800de4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de4e:	443b      	add	r3, r7
 800de50:	9309      	str	r3, [sp, #36]	; 0x24
 800de52:	e767      	b.n	800dd24 <_vfiprintf_r+0x94>
 800de54:	460c      	mov	r4, r1
 800de56:	2001      	movs	r0, #1
 800de58:	fb0c 3202 	mla	r2, ip, r2, r3
 800de5c:	e7a5      	b.n	800ddaa <_vfiprintf_r+0x11a>
 800de5e:	2300      	movs	r3, #0
 800de60:	f04f 0c0a 	mov.w	ip, #10
 800de64:	4619      	mov	r1, r3
 800de66:	3401      	adds	r4, #1
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	4620      	mov	r0, r4
 800de6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de70:	3a30      	subs	r2, #48	; 0x30
 800de72:	2a09      	cmp	r2, #9
 800de74:	d903      	bls.n	800de7e <_vfiprintf_r+0x1ee>
 800de76:	2b00      	cmp	r3, #0
 800de78:	d0c5      	beq.n	800de06 <_vfiprintf_r+0x176>
 800de7a:	9105      	str	r1, [sp, #20]
 800de7c:	e7c3      	b.n	800de06 <_vfiprintf_r+0x176>
 800de7e:	4604      	mov	r4, r0
 800de80:	2301      	movs	r3, #1
 800de82:	fb0c 2101 	mla	r1, ip, r1, r2
 800de86:	e7f0      	b.n	800de6a <_vfiprintf_r+0x1da>
 800de88:	ab03      	add	r3, sp, #12
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	462a      	mov	r2, r5
 800de8e:	4630      	mov	r0, r6
 800de90:	4b16      	ldr	r3, [pc, #88]	; (800deec <_vfiprintf_r+0x25c>)
 800de92:	a904      	add	r1, sp, #16
 800de94:	f7fd fde6 	bl	800ba64 <_printf_float>
 800de98:	4607      	mov	r7, r0
 800de9a:	1c78      	adds	r0, r7, #1
 800de9c:	d1d6      	bne.n	800de4c <_vfiprintf_r+0x1bc>
 800de9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea0:	07d9      	lsls	r1, r3, #31
 800dea2:	d405      	bmi.n	800deb0 <_vfiprintf_r+0x220>
 800dea4:	89ab      	ldrh	r3, [r5, #12]
 800dea6:	059a      	lsls	r2, r3, #22
 800dea8:	d402      	bmi.n	800deb0 <_vfiprintf_r+0x220>
 800deaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deac:	f7ff fe6c 	bl	800db88 <__retarget_lock_release_recursive>
 800deb0:	89ab      	ldrh	r3, [r5, #12]
 800deb2:	065b      	lsls	r3, r3, #25
 800deb4:	f53f af12 	bmi.w	800dcdc <_vfiprintf_r+0x4c>
 800deb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deba:	e711      	b.n	800dce0 <_vfiprintf_r+0x50>
 800debc:	ab03      	add	r3, sp, #12
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	462a      	mov	r2, r5
 800dec2:	4630      	mov	r0, r6
 800dec4:	4b09      	ldr	r3, [pc, #36]	; (800deec <_vfiprintf_r+0x25c>)
 800dec6:	a904      	add	r1, sp, #16
 800dec8:	f7fe f868 	bl	800bf9c <_printf_i>
 800decc:	e7e4      	b.n	800de98 <_vfiprintf_r+0x208>
 800dece:	bf00      	nop
 800ded0:	08010f74 	.word	0x08010f74
 800ded4:	08010f94 	.word	0x08010f94
 800ded8:	08010f54 	.word	0x08010f54
 800dedc:	08010efc 	.word	0x08010efc
 800dee0:	08010f02 	.word	0x08010f02
 800dee4:	08010f06 	.word	0x08010f06
 800dee8:	0800ba65 	.word	0x0800ba65
 800deec:	0800dc6b 	.word	0x0800dc6b

0800def0 <__swbuf_r>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	460e      	mov	r6, r1
 800def4:	4614      	mov	r4, r2
 800def6:	4605      	mov	r5, r0
 800def8:	b118      	cbz	r0, 800df02 <__swbuf_r+0x12>
 800defa:	6983      	ldr	r3, [r0, #24]
 800defc:	b90b      	cbnz	r3, 800df02 <__swbuf_r+0x12>
 800defe:	f000 f9e3 	bl	800e2c8 <__sinit>
 800df02:	4b21      	ldr	r3, [pc, #132]	; (800df88 <__swbuf_r+0x98>)
 800df04:	429c      	cmp	r4, r3
 800df06:	d12b      	bne.n	800df60 <__swbuf_r+0x70>
 800df08:	686c      	ldr	r4, [r5, #4]
 800df0a:	69a3      	ldr	r3, [r4, #24]
 800df0c:	60a3      	str	r3, [r4, #8]
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	071a      	lsls	r2, r3, #28
 800df12:	d52f      	bpl.n	800df74 <__swbuf_r+0x84>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	b36b      	cbz	r3, 800df74 <__swbuf_r+0x84>
 800df18:	6923      	ldr	r3, [r4, #16]
 800df1a:	6820      	ldr	r0, [r4, #0]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	1ac0      	subs	r0, r0, r3
 800df20:	6963      	ldr	r3, [r4, #20]
 800df22:	4637      	mov	r7, r6
 800df24:	4283      	cmp	r3, r0
 800df26:	dc04      	bgt.n	800df32 <__swbuf_r+0x42>
 800df28:	4621      	mov	r1, r4
 800df2a:	4628      	mov	r0, r5
 800df2c:	f000 f938 	bl	800e1a0 <_fflush_r>
 800df30:	bb30      	cbnz	r0, 800df80 <__swbuf_r+0x90>
 800df32:	68a3      	ldr	r3, [r4, #8]
 800df34:	3001      	adds	r0, #1
 800df36:	3b01      	subs	r3, #1
 800df38:	60a3      	str	r3, [r4, #8]
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	6022      	str	r2, [r4, #0]
 800df40:	701e      	strb	r6, [r3, #0]
 800df42:	6963      	ldr	r3, [r4, #20]
 800df44:	4283      	cmp	r3, r0
 800df46:	d004      	beq.n	800df52 <__swbuf_r+0x62>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	07db      	lsls	r3, r3, #31
 800df4c:	d506      	bpl.n	800df5c <__swbuf_r+0x6c>
 800df4e:	2e0a      	cmp	r6, #10
 800df50:	d104      	bne.n	800df5c <__swbuf_r+0x6c>
 800df52:	4621      	mov	r1, r4
 800df54:	4628      	mov	r0, r5
 800df56:	f000 f923 	bl	800e1a0 <_fflush_r>
 800df5a:	b988      	cbnz	r0, 800df80 <__swbuf_r+0x90>
 800df5c:	4638      	mov	r0, r7
 800df5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df60:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <__swbuf_r+0x9c>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d101      	bne.n	800df6a <__swbuf_r+0x7a>
 800df66:	68ac      	ldr	r4, [r5, #8]
 800df68:	e7cf      	b.n	800df0a <__swbuf_r+0x1a>
 800df6a:	4b09      	ldr	r3, [pc, #36]	; (800df90 <__swbuf_r+0xa0>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	bf08      	it	eq
 800df70:	68ec      	ldreq	r4, [r5, #12]
 800df72:	e7ca      	b.n	800df0a <__swbuf_r+0x1a>
 800df74:	4621      	mov	r1, r4
 800df76:	4628      	mov	r0, r5
 800df78:	f000 f81a 	bl	800dfb0 <__swsetup_r>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d0cb      	beq.n	800df18 <__swbuf_r+0x28>
 800df80:	f04f 37ff 	mov.w	r7, #4294967295
 800df84:	e7ea      	b.n	800df5c <__swbuf_r+0x6c>
 800df86:	bf00      	nop
 800df88:	08010f74 	.word	0x08010f74
 800df8c:	08010f94 	.word	0x08010f94
 800df90:	08010f54 	.word	0x08010f54

0800df94 <__ascii_wctomb>:
 800df94:	4603      	mov	r3, r0
 800df96:	4608      	mov	r0, r1
 800df98:	b141      	cbz	r1, 800dfac <__ascii_wctomb+0x18>
 800df9a:	2aff      	cmp	r2, #255	; 0xff
 800df9c:	d904      	bls.n	800dfa8 <__ascii_wctomb+0x14>
 800df9e:	228a      	movs	r2, #138	; 0x8a
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	4770      	bx	lr
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	700a      	strb	r2, [r1, #0]
 800dfac:	4770      	bx	lr
	...

0800dfb0 <__swsetup_r>:
 800dfb0:	4b32      	ldr	r3, [pc, #200]	; (800e07c <__swsetup_r+0xcc>)
 800dfb2:	b570      	push	{r4, r5, r6, lr}
 800dfb4:	681d      	ldr	r5, [r3, #0]
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	460c      	mov	r4, r1
 800dfba:	b125      	cbz	r5, 800dfc6 <__swsetup_r+0x16>
 800dfbc:	69ab      	ldr	r3, [r5, #24]
 800dfbe:	b913      	cbnz	r3, 800dfc6 <__swsetup_r+0x16>
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f000 f981 	bl	800e2c8 <__sinit>
 800dfc6:	4b2e      	ldr	r3, [pc, #184]	; (800e080 <__swsetup_r+0xd0>)
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	d10f      	bne.n	800dfec <__swsetup_r+0x3c>
 800dfcc:	686c      	ldr	r4, [r5, #4]
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd4:	0719      	lsls	r1, r3, #28
 800dfd6:	d42c      	bmi.n	800e032 <__swsetup_r+0x82>
 800dfd8:	06dd      	lsls	r5, r3, #27
 800dfda:	d411      	bmi.n	800e000 <__swsetup_r+0x50>
 800dfdc:	2309      	movs	r3, #9
 800dfde:	6033      	str	r3, [r6, #0]
 800dfe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	e03e      	b.n	800e06a <__swsetup_r+0xba>
 800dfec:	4b25      	ldr	r3, [pc, #148]	; (800e084 <__swsetup_r+0xd4>)
 800dfee:	429c      	cmp	r4, r3
 800dff0:	d101      	bne.n	800dff6 <__swsetup_r+0x46>
 800dff2:	68ac      	ldr	r4, [r5, #8]
 800dff4:	e7eb      	b.n	800dfce <__swsetup_r+0x1e>
 800dff6:	4b24      	ldr	r3, [pc, #144]	; (800e088 <__swsetup_r+0xd8>)
 800dff8:	429c      	cmp	r4, r3
 800dffa:	bf08      	it	eq
 800dffc:	68ec      	ldreq	r4, [r5, #12]
 800dffe:	e7e6      	b.n	800dfce <__swsetup_r+0x1e>
 800e000:	0758      	lsls	r0, r3, #29
 800e002:	d512      	bpl.n	800e02a <__swsetup_r+0x7a>
 800e004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e006:	b141      	cbz	r1, 800e01a <__swsetup_r+0x6a>
 800e008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e00c:	4299      	cmp	r1, r3
 800e00e:	d002      	beq.n	800e016 <__swsetup_r+0x66>
 800e010:	4630      	mov	r0, r6
 800e012:	f7fd fbad 	bl	800b770 <_free_r>
 800e016:	2300      	movs	r3, #0
 800e018:	6363      	str	r3, [r4, #52]	; 0x34
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e020:	81a3      	strh	r3, [r4, #12]
 800e022:	2300      	movs	r3, #0
 800e024:	6063      	str	r3, [r4, #4]
 800e026:	6923      	ldr	r3, [r4, #16]
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	89a3      	ldrh	r3, [r4, #12]
 800e02c:	f043 0308 	orr.w	r3, r3, #8
 800e030:	81a3      	strh	r3, [r4, #12]
 800e032:	6923      	ldr	r3, [r4, #16]
 800e034:	b94b      	cbnz	r3, 800e04a <__swsetup_r+0x9a>
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e040:	d003      	beq.n	800e04a <__swsetup_r+0x9a>
 800e042:	4621      	mov	r1, r4
 800e044:	4630      	mov	r0, r6
 800e046:	f000 fa01 	bl	800e44c <__smakebuf_r>
 800e04a:	89a0      	ldrh	r0, [r4, #12]
 800e04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e050:	f010 0301 	ands.w	r3, r0, #1
 800e054:	d00a      	beq.n	800e06c <__swsetup_r+0xbc>
 800e056:	2300      	movs	r3, #0
 800e058:	60a3      	str	r3, [r4, #8]
 800e05a:	6963      	ldr	r3, [r4, #20]
 800e05c:	425b      	negs	r3, r3
 800e05e:	61a3      	str	r3, [r4, #24]
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	b943      	cbnz	r3, 800e076 <__swsetup_r+0xc6>
 800e064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e068:	d1ba      	bne.n	800dfe0 <__swsetup_r+0x30>
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	0781      	lsls	r1, r0, #30
 800e06e:	bf58      	it	pl
 800e070:	6963      	ldrpl	r3, [r4, #20]
 800e072:	60a3      	str	r3, [r4, #8]
 800e074:	e7f4      	b.n	800e060 <__swsetup_r+0xb0>
 800e076:	2000      	movs	r0, #0
 800e078:	e7f7      	b.n	800e06a <__swsetup_r+0xba>
 800e07a:	bf00      	nop
 800e07c:	20000024 	.word	0x20000024
 800e080:	08010f74 	.word	0x08010f74
 800e084:	08010f94 	.word	0x08010f94
 800e088:	08010f54 	.word	0x08010f54

0800e08c <abort>:
 800e08c:	2006      	movs	r0, #6
 800e08e:	b508      	push	{r3, lr}
 800e090:	f000 fa4c 	bl	800e52c <raise>
 800e094:	2001      	movs	r0, #1
 800e096:	f7f4 fe1e 	bl	8002cd6 <_exit>
	...

0800e09c <__sflush_r>:
 800e09c:	898a      	ldrh	r2, [r1, #12]
 800e09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	0710      	lsls	r0, r2, #28
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	d457      	bmi.n	800e158 <__sflush_r+0xbc>
 800e0a8:	684b      	ldr	r3, [r1, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	dc04      	bgt.n	800e0b8 <__sflush_r+0x1c>
 800e0ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	dc01      	bgt.n	800e0b8 <__sflush_r+0x1c>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0ba:	2e00      	cmp	r6, #0
 800e0bc:	d0fa      	beq.n	800e0b4 <__sflush_r+0x18>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0c4:	682f      	ldr	r7, [r5, #0]
 800e0c6:	602b      	str	r3, [r5, #0]
 800e0c8:	d032      	beq.n	800e130 <__sflush_r+0x94>
 800e0ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	075a      	lsls	r2, r3, #29
 800e0d0:	d505      	bpl.n	800e0de <__sflush_r+0x42>
 800e0d2:	6863      	ldr	r3, [r4, #4]
 800e0d4:	1ac0      	subs	r0, r0, r3
 800e0d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0d8:	b10b      	cbz	r3, 800e0de <__sflush_r+0x42>
 800e0da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0dc:	1ac0      	subs	r0, r0, r3
 800e0de:	2300      	movs	r3, #0
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	6a21      	ldr	r1, [r4, #32]
 800e0e8:	47b0      	blx	r6
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	d106      	bne.n	800e0fe <__sflush_r+0x62>
 800e0f0:	6829      	ldr	r1, [r5, #0]
 800e0f2:	291d      	cmp	r1, #29
 800e0f4:	d82c      	bhi.n	800e150 <__sflush_r+0xb4>
 800e0f6:	4a29      	ldr	r2, [pc, #164]	; (800e19c <__sflush_r+0x100>)
 800e0f8:	40ca      	lsrs	r2, r1
 800e0fa:	07d6      	lsls	r6, r2, #31
 800e0fc:	d528      	bpl.n	800e150 <__sflush_r+0xb4>
 800e0fe:	2200      	movs	r2, #0
 800e100:	6062      	str	r2, [r4, #4]
 800e102:	6922      	ldr	r2, [r4, #16]
 800e104:	04d9      	lsls	r1, r3, #19
 800e106:	6022      	str	r2, [r4, #0]
 800e108:	d504      	bpl.n	800e114 <__sflush_r+0x78>
 800e10a:	1c42      	adds	r2, r0, #1
 800e10c:	d101      	bne.n	800e112 <__sflush_r+0x76>
 800e10e:	682b      	ldr	r3, [r5, #0]
 800e110:	b903      	cbnz	r3, 800e114 <__sflush_r+0x78>
 800e112:	6560      	str	r0, [r4, #84]	; 0x54
 800e114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e116:	602f      	str	r7, [r5, #0]
 800e118:	2900      	cmp	r1, #0
 800e11a:	d0cb      	beq.n	800e0b4 <__sflush_r+0x18>
 800e11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e120:	4299      	cmp	r1, r3
 800e122:	d002      	beq.n	800e12a <__sflush_r+0x8e>
 800e124:	4628      	mov	r0, r5
 800e126:	f7fd fb23 	bl	800b770 <_free_r>
 800e12a:	2000      	movs	r0, #0
 800e12c:	6360      	str	r0, [r4, #52]	; 0x34
 800e12e:	e7c2      	b.n	800e0b6 <__sflush_r+0x1a>
 800e130:	6a21      	ldr	r1, [r4, #32]
 800e132:	2301      	movs	r3, #1
 800e134:	4628      	mov	r0, r5
 800e136:	47b0      	blx	r6
 800e138:	1c41      	adds	r1, r0, #1
 800e13a:	d1c7      	bne.n	800e0cc <__sflush_r+0x30>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0c4      	beq.n	800e0cc <__sflush_r+0x30>
 800e142:	2b1d      	cmp	r3, #29
 800e144:	d001      	beq.n	800e14a <__sflush_r+0xae>
 800e146:	2b16      	cmp	r3, #22
 800e148:	d101      	bne.n	800e14e <__sflush_r+0xb2>
 800e14a:	602f      	str	r7, [r5, #0]
 800e14c:	e7b2      	b.n	800e0b4 <__sflush_r+0x18>
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e154:	81a3      	strh	r3, [r4, #12]
 800e156:	e7ae      	b.n	800e0b6 <__sflush_r+0x1a>
 800e158:	690f      	ldr	r7, [r1, #16]
 800e15a:	2f00      	cmp	r7, #0
 800e15c:	d0aa      	beq.n	800e0b4 <__sflush_r+0x18>
 800e15e:	0793      	lsls	r3, r2, #30
 800e160:	bf18      	it	ne
 800e162:	2300      	movne	r3, #0
 800e164:	680e      	ldr	r6, [r1, #0]
 800e166:	bf08      	it	eq
 800e168:	694b      	ldreq	r3, [r1, #20]
 800e16a:	1bf6      	subs	r6, r6, r7
 800e16c:	600f      	str	r7, [r1, #0]
 800e16e:	608b      	str	r3, [r1, #8]
 800e170:	2e00      	cmp	r6, #0
 800e172:	dd9f      	ble.n	800e0b4 <__sflush_r+0x18>
 800e174:	4633      	mov	r3, r6
 800e176:	463a      	mov	r2, r7
 800e178:	4628      	mov	r0, r5
 800e17a:	6a21      	ldr	r1, [r4, #32]
 800e17c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e180:	47e0      	blx	ip
 800e182:	2800      	cmp	r0, #0
 800e184:	dc06      	bgt.n	800e194 <__sflush_r+0xf8>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e190:	81a3      	strh	r3, [r4, #12]
 800e192:	e790      	b.n	800e0b6 <__sflush_r+0x1a>
 800e194:	4407      	add	r7, r0
 800e196:	1a36      	subs	r6, r6, r0
 800e198:	e7ea      	b.n	800e170 <__sflush_r+0xd4>
 800e19a:	bf00      	nop
 800e19c:	20400001 	.word	0x20400001

0800e1a0 <_fflush_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	690b      	ldr	r3, [r1, #16]
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	b913      	cbnz	r3, 800e1b0 <_fflush_r+0x10>
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	b118      	cbz	r0, 800e1ba <_fflush_r+0x1a>
 800e1b2:	6983      	ldr	r3, [r0, #24]
 800e1b4:	b90b      	cbnz	r3, 800e1ba <_fflush_r+0x1a>
 800e1b6:	f000 f887 	bl	800e2c8 <__sinit>
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <_fflush_r+0x6c>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	d11b      	bne.n	800e1f8 <_fflush_r+0x58>
 800e1c0:	686c      	ldr	r4, [r5, #4]
 800e1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0ef      	beq.n	800e1aa <_fflush_r+0xa>
 800e1ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1cc:	07d0      	lsls	r0, r2, #31
 800e1ce:	d404      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d0:	0599      	lsls	r1, r3, #22
 800e1d2:	d402      	bmi.n	800e1da <_fflush_r+0x3a>
 800e1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d6:	f7ff fcd6 	bl	800db86 <__retarget_lock_acquire_recursive>
 800e1da:	4628      	mov	r0, r5
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f7ff ff5d 	bl	800e09c <__sflush_r>
 800e1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d4e0      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	d4dd      	bmi.n	800e1ac <_fflush_r+0xc>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f7ff fcc9 	bl	800db88 <__retarget_lock_release_recursive>
 800e1f6:	e7d9      	b.n	800e1ac <_fflush_r+0xc>
 800e1f8:	4b05      	ldr	r3, [pc, #20]	; (800e210 <_fflush_r+0x70>)
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	d101      	bne.n	800e202 <_fflush_r+0x62>
 800e1fe:	68ac      	ldr	r4, [r5, #8]
 800e200:	e7df      	b.n	800e1c2 <_fflush_r+0x22>
 800e202:	4b04      	ldr	r3, [pc, #16]	; (800e214 <_fflush_r+0x74>)
 800e204:	429c      	cmp	r4, r3
 800e206:	bf08      	it	eq
 800e208:	68ec      	ldreq	r4, [r5, #12]
 800e20a:	e7da      	b.n	800e1c2 <_fflush_r+0x22>
 800e20c:	08010f74 	.word	0x08010f74
 800e210:	08010f94 	.word	0x08010f94
 800e214:	08010f54 	.word	0x08010f54

0800e218 <std>:
 800e218:	2300      	movs	r3, #0
 800e21a:	b510      	push	{r4, lr}
 800e21c:	4604      	mov	r4, r0
 800e21e:	e9c0 3300 	strd	r3, r3, [r0]
 800e222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e226:	6083      	str	r3, [r0, #8]
 800e228:	8181      	strh	r1, [r0, #12]
 800e22a:	6643      	str	r3, [r0, #100]	; 0x64
 800e22c:	81c2      	strh	r2, [r0, #14]
 800e22e:	6183      	str	r3, [r0, #24]
 800e230:	4619      	mov	r1, r3
 800e232:	2208      	movs	r2, #8
 800e234:	305c      	adds	r0, #92	; 0x5c
 800e236:	f7fd fa93 	bl	800b760 <memset>
 800e23a:	4b05      	ldr	r3, [pc, #20]	; (800e250 <std+0x38>)
 800e23c:	6224      	str	r4, [r4, #32]
 800e23e:	6263      	str	r3, [r4, #36]	; 0x24
 800e240:	4b04      	ldr	r3, [pc, #16]	; (800e254 <std+0x3c>)
 800e242:	62a3      	str	r3, [r4, #40]	; 0x28
 800e244:	4b04      	ldr	r3, [pc, #16]	; (800e258 <std+0x40>)
 800e246:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e248:	4b04      	ldr	r3, [pc, #16]	; (800e25c <std+0x44>)
 800e24a:	6323      	str	r3, [r4, #48]	; 0x30
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	0800e565 	.word	0x0800e565
 800e254:	0800e587 	.word	0x0800e587
 800e258:	0800e5bf 	.word	0x0800e5bf
 800e25c:	0800e5e3 	.word	0x0800e5e3

0800e260 <_cleanup_r>:
 800e260:	4901      	ldr	r1, [pc, #4]	; (800e268 <_cleanup_r+0x8>)
 800e262:	f000 b8af 	b.w	800e3c4 <_fwalk_reent>
 800e266:	bf00      	nop
 800e268:	0800e1a1 	.word	0x0800e1a1

0800e26c <__sfmoreglue>:
 800e26c:	2268      	movs	r2, #104	; 0x68
 800e26e:	b570      	push	{r4, r5, r6, lr}
 800e270:	1e4d      	subs	r5, r1, #1
 800e272:	4355      	muls	r5, r2
 800e274:	460e      	mov	r6, r1
 800e276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e27a:	f7fd fae1 	bl	800b840 <_malloc_r>
 800e27e:	4604      	mov	r4, r0
 800e280:	b140      	cbz	r0, 800e294 <__sfmoreglue+0x28>
 800e282:	2100      	movs	r1, #0
 800e284:	e9c0 1600 	strd	r1, r6, [r0]
 800e288:	300c      	adds	r0, #12
 800e28a:	60a0      	str	r0, [r4, #8]
 800e28c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e290:	f7fd fa66 	bl	800b760 <memset>
 800e294:	4620      	mov	r0, r4
 800e296:	bd70      	pop	{r4, r5, r6, pc}

0800e298 <__sfp_lock_acquire>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__sfp_lock_acquire+0x8>)
 800e29a:	f7ff bc74 	b.w	800db86 <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20001d01 	.word	0x20001d01

0800e2a4 <__sfp_lock_release>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	; (800e2ac <__sfp_lock_release+0x8>)
 800e2a6:	f7ff bc6f 	b.w	800db88 <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20001d01 	.word	0x20001d01

0800e2b0 <__sinit_lock_acquire>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__sinit_lock_acquire+0x8>)
 800e2b2:	f7ff bc68 	b.w	800db86 <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20001d02 	.word	0x20001d02

0800e2bc <__sinit_lock_release>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__sinit_lock_release+0x8>)
 800e2be:	f7ff bc63 	b.w	800db88 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	20001d02 	.word	0x20001d02

0800e2c8 <__sinit>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f7ff fff0 	bl	800e2b0 <__sinit_lock_acquire>
 800e2d0:	69a3      	ldr	r3, [r4, #24]
 800e2d2:	b11b      	cbz	r3, 800e2dc <__sinit+0x14>
 800e2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d8:	f7ff bff0 	b.w	800e2bc <__sinit_lock_release>
 800e2dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2e2:	4b13      	ldr	r3, [pc, #76]	; (800e330 <__sinit+0x68>)
 800e2e4:	4a13      	ldr	r2, [pc, #76]	; (800e334 <__sinit+0x6c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	bf08      	it	eq
 800e2ee:	2301      	moveq	r3, #1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	bf08      	it	eq
 800e2f4:	61a3      	streq	r3, [r4, #24]
 800e2f6:	f000 f81f 	bl	800e338 <__sfp>
 800e2fa:	6060      	str	r0, [r4, #4]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f000 f81b 	bl	800e338 <__sfp>
 800e302:	60a0      	str	r0, [r4, #8]
 800e304:	4620      	mov	r0, r4
 800e306:	f000 f817 	bl	800e338 <__sfp>
 800e30a:	2200      	movs	r2, #0
 800e30c:	2104      	movs	r1, #4
 800e30e:	60e0      	str	r0, [r4, #12]
 800e310:	6860      	ldr	r0, [r4, #4]
 800e312:	f7ff ff81 	bl	800e218 <std>
 800e316:	2201      	movs	r2, #1
 800e318:	2109      	movs	r1, #9
 800e31a:	68a0      	ldr	r0, [r4, #8]
 800e31c:	f7ff ff7c 	bl	800e218 <std>
 800e320:	2202      	movs	r2, #2
 800e322:	2112      	movs	r1, #18
 800e324:	68e0      	ldr	r0, [r4, #12]
 800e326:	f7ff ff77 	bl	800e218 <std>
 800e32a:	2301      	movs	r3, #1
 800e32c:	61a3      	str	r3, [r4, #24]
 800e32e:	e7d1      	b.n	800e2d4 <__sinit+0xc>
 800e330:	08010cdc 	.word	0x08010cdc
 800e334:	0800e261 	.word	0x0800e261

0800e338 <__sfp>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	4607      	mov	r7, r0
 800e33c:	f7ff ffac 	bl	800e298 <__sfp_lock_acquire>
 800e340:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <__sfp+0x84>)
 800e342:	681e      	ldr	r6, [r3, #0]
 800e344:	69b3      	ldr	r3, [r6, #24]
 800e346:	b913      	cbnz	r3, 800e34e <__sfp+0x16>
 800e348:	4630      	mov	r0, r6
 800e34a:	f7ff ffbd 	bl	800e2c8 <__sinit>
 800e34e:	3648      	adds	r6, #72	; 0x48
 800e350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e354:	3b01      	subs	r3, #1
 800e356:	d503      	bpl.n	800e360 <__sfp+0x28>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	b30b      	cbz	r3, 800e3a0 <__sfp+0x68>
 800e35c:	6836      	ldr	r6, [r6, #0]
 800e35e:	e7f7      	b.n	800e350 <__sfp+0x18>
 800e360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e364:	b9d5      	cbnz	r5, 800e39c <__sfp+0x64>
 800e366:	4b16      	ldr	r3, [pc, #88]	; (800e3c0 <__sfp+0x88>)
 800e368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e36c:	60e3      	str	r3, [r4, #12]
 800e36e:	6665      	str	r5, [r4, #100]	; 0x64
 800e370:	f7ff fc08 	bl	800db84 <__retarget_lock_init_recursive>
 800e374:	f7ff ff96 	bl	800e2a4 <__sfp_lock_release>
 800e378:	2208      	movs	r2, #8
 800e37a:	4629      	mov	r1, r5
 800e37c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e384:	6025      	str	r5, [r4, #0]
 800e386:	61a5      	str	r5, [r4, #24]
 800e388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e38c:	f7fd f9e8 	bl	800b760 <memset>
 800e390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e398:	4620      	mov	r0, r4
 800e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39c:	3468      	adds	r4, #104	; 0x68
 800e39e:	e7d9      	b.n	800e354 <__sfp+0x1c>
 800e3a0:	2104      	movs	r1, #4
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f7ff ff62 	bl	800e26c <__sfmoreglue>
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	6030      	str	r0, [r6, #0]
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d1d5      	bne.n	800e35c <__sfp+0x24>
 800e3b0:	f7ff ff78 	bl	800e2a4 <__sfp_lock_release>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	e7ee      	b.n	800e398 <__sfp+0x60>
 800e3ba:	bf00      	nop
 800e3bc:	08010cdc 	.word	0x08010cdc
 800e3c0:	ffff0001 	.word	0xffff0001

0800e3c4 <_fwalk_reent>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	4688      	mov	r8, r1
 800e3cc:	2700      	movs	r7, #0
 800e3ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3d6:	f1b9 0901 	subs.w	r9, r9, #1
 800e3da:	d505      	bpl.n	800e3e8 <_fwalk_reent+0x24>
 800e3dc:	6824      	ldr	r4, [r4, #0]
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	d1f7      	bne.n	800e3d2 <_fwalk_reent+0xe>
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e8:	89ab      	ldrh	r3, [r5, #12]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d907      	bls.n	800e3fe <_fwalk_reent+0x3a>
 800e3ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	d003      	beq.n	800e3fe <_fwalk_reent+0x3a>
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	47c0      	blx	r8
 800e3fc:	4307      	orrs	r7, r0
 800e3fe:	3568      	adds	r5, #104	; 0x68
 800e400:	e7e9      	b.n	800e3d6 <_fwalk_reent+0x12>

0800e402 <__swhatbuf_r>:
 800e402:	b570      	push	{r4, r5, r6, lr}
 800e404:	460e      	mov	r6, r1
 800e406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e40a:	4614      	mov	r4, r2
 800e40c:	2900      	cmp	r1, #0
 800e40e:	461d      	mov	r5, r3
 800e410:	b096      	sub	sp, #88	; 0x58
 800e412:	da08      	bge.n	800e426 <__swhatbuf_r+0x24>
 800e414:	2200      	movs	r2, #0
 800e416:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e41a:	602a      	str	r2, [r5, #0]
 800e41c:	061a      	lsls	r2, r3, #24
 800e41e:	d410      	bmi.n	800e442 <__swhatbuf_r+0x40>
 800e420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e424:	e00e      	b.n	800e444 <__swhatbuf_r+0x42>
 800e426:	466a      	mov	r2, sp
 800e428:	f000 f902 	bl	800e630 <_fstat_r>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	dbf1      	blt.n	800e414 <__swhatbuf_r+0x12>
 800e430:	9a01      	ldr	r2, [sp, #4]
 800e432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e43a:	425a      	negs	r2, r3
 800e43c:	415a      	adcs	r2, r3
 800e43e:	602a      	str	r2, [r5, #0]
 800e440:	e7ee      	b.n	800e420 <__swhatbuf_r+0x1e>
 800e442:	2340      	movs	r3, #64	; 0x40
 800e444:	2000      	movs	r0, #0
 800e446:	6023      	str	r3, [r4, #0]
 800e448:	b016      	add	sp, #88	; 0x58
 800e44a:	bd70      	pop	{r4, r5, r6, pc}

0800e44c <__smakebuf_r>:
 800e44c:	898b      	ldrh	r3, [r1, #12]
 800e44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e450:	079d      	lsls	r5, r3, #30
 800e452:	4606      	mov	r6, r0
 800e454:	460c      	mov	r4, r1
 800e456:	d507      	bpl.n	800e468 <__smakebuf_r+0x1c>
 800e458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	6123      	str	r3, [r4, #16]
 800e460:	2301      	movs	r3, #1
 800e462:	6163      	str	r3, [r4, #20]
 800e464:	b002      	add	sp, #8
 800e466:	bd70      	pop	{r4, r5, r6, pc}
 800e468:	466a      	mov	r2, sp
 800e46a:	ab01      	add	r3, sp, #4
 800e46c:	f7ff ffc9 	bl	800e402 <__swhatbuf_r>
 800e470:	9900      	ldr	r1, [sp, #0]
 800e472:	4605      	mov	r5, r0
 800e474:	4630      	mov	r0, r6
 800e476:	f7fd f9e3 	bl	800b840 <_malloc_r>
 800e47a:	b948      	cbnz	r0, 800e490 <__smakebuf_r+0x44>
 800e47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e480:	059a      	lsls	r2, r3, #22
 800e482:	d4ef      	bmi.n	800e464 <__smakebuf_r+0x18>
 800e484:	f023 0303 	bic.w	r3, r3, #3
 800e488:	f043 0302 	orr.w	r3, r3, #2
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	e7e3      	b.n	800e458 <__smakebuf_r+0xc>
 800e490:	4b0d      	ldr	r3, [pc, #52]	; (800e4c8 <__smakebuf_r+0x7c>)
 800e492:	62b3      	str	r3, [r6, #40]	; 0x28
 800e494:	89a3      	ldrh	r3, [r4, #12]
 800e496:	6020      	str	r0, [r4, #0]
 800e498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e49c:	81a3      	strh	r3, [r4, #12]
 800e49e:	9b00      	ldr	r3, [sp, #0]
 800e4a0:	6120      	str	r0, [r4, #16]
 800e4a2:	6163      	str	r3, [r4, #20]
 800e4a4:	9b01      	ldr	r3, [sp, #4]
 800e4a6:	b15b      	cbz	r3, 800e4c0 <__smakebuf_r+0x74>
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4ae:	f000 f8d1 	bl	800e654 <_isatty_r>
 800e4b2:	b128      	cbz	r0, 800e4c0 <__smakebuf_r+0x74>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f023 0303 	bic.w	r3, r3, #3
 800e4ba:	f043 0301 	orr.w	r3, r3, #1
 800e4be:	81a3      	strh	r3, [r4, #12]
 800e4c0:	89a0      	ldrh	r0, [r4, #12]
 800e4c2:	4305      	orrs	r5, r0
 800e4c4:	81a5      	strh	r5, [r4, #12]
 800e4c6:	e7cd      	b.n	800e464 <__smakebuf_r+0x18>
 800e4c8:	0800e261 	.word	0x0800e261

0800e4cc <_malloc_usable_size_r>:
 800e4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d0:	1f18      	subs	r0, r3, #4
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bfbc      	itt	lt
 800e4d6:	580b      	ldrlt	r3, [r1, r0]
 800e4d8:	18c0      	addlt	r0, r0, r3
 800e4da:	4770      	bx	lr

0800e4dc <_raise_r>:
 800e4dc:	291f      	cmp	r1, #31
 800e4de:	b538      	push	{r3, r4, r5, lr}
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	460d      	mov	r5, r1
 800e4e4:	d904      	bls.n	800e4f0 <_raise_r+0x14>
 800e4e6:	2316      	movs	r3, #22
 800e4e8:	6003      	str	r3, [r0, #0]
 800e4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ee:	bd38      	pop	{r3, r4, r5, pc}
 800e4f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4f2:	b112      	cbz	r2, 800e4fa <_raise_r+0x1e>
 800e4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4f8:	b94b      	cbnz	r3, 800e50e <_raise_r+0x32>
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f000 f830 	bl	800e560 <_getpid_r>
 800e500:	462a      	mov	r2, r5
 800e502:	4601      	mov	r1, r0
 800e504:	4620      	mov	r0, r4
 800e506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e50a:	f000 b817 	b.w	800e53c <_kill_r>
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d00a      	beq.n	800e528 <_raise_r+0x4c>
 800e512:	1c59      	adds	r1, r3, #1
 800e514:	d103      	bne.n	800e51e <_raise_r+0x42>
 800e516:	2316      	movs	r3, #22
 800e518:	6003      	str	r3, [r0, #0]
 800e51a:	2001      	movs	r0, #1
 800e51c:	e7e7      	b.n	800e4ee <_raise_r+0x12>
 800e51e:	2400      	movs	r4, #0
 800e520:	4628      	mov	r0, r5
 800e522:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e526:	4798      	blx	r3
 800e528:	2000      	movs	r0, #0
 800e52a:	e7e0      	b.n	800e4ee <_raise_r+0x12>

0800e52c <raise>:
 800e52c:	4b02      	ldr	r3, [pc, #8]	; (800e538 <raise+0xc>)
 800e52e:	4601      	mov	r1, r0
 800e530:	6818      	ldr	r0, [r3, #0]
 800e532:	f7ff bfd3 	b.w	800e4dc <_raise_r>
 800e536:	bf00      	nop
 800e538:	20000024 	.word	0x20000024

0800e53c <_kill_r>:
 800e53c:	b538      	push	{r3, r4, r5, lr}
 800e53e:	2300      	movs	r3, #0
 800e540:	4d06      	ldr	r5, [pc, #24]	; (800e55c <_kill_r+0x20>)
 800e542:	4604      	mov	r4, r0
 800e544:	4608      	mov	r0, r1
 800e546:	4611      	mov	r1, r2
 800e548:	602b      	str	r3, [r5, #0]
 800e54a:	f7f4 fbb4 	bl	8002cb6 <_kill>
 800e54e:	1c43      	adds	r3, r0, #1
 800e550:	d102      	bne.n	800e558 <_kill_r+0x1c>
 800e552:	682b      	ldr	r3, [r5, #0]
 800e554:	b103      	cbz	r3, 800e558 <_kill_r+0x1c>
 800e556:	6023      	str	r3, [r4, #0]
 800e558:	bd38      	pop	{r3, r4, r5, pc}
 800e55a:	bf00      	nop
 800e55c:	20001cfc 	.word	0x20001cfc

0800e560 <_getpid_r>:
 800e560:	f7f4 bba2 	b.w	8002ca8 <_getpid>

0800e564 <__sread>:
 800e564:	b510      	push	{r4, lr}
 800e566:	460c      	mov	r4, r1
 800e568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56c:	f000 f894 	bl	800e698 <_read_r>
 800e570:	2800      	cmp	r0, #0
 800e572:	bfab      	itete	ge
 800e574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e576:	89a3      	ldrhlt	r3, [r4, #12]
 800e578:	181b      	addge	r3, r3, r0
 800e57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e57e:	bfac      	ite	ge
 800e580:	6563      	strge	r3, [r4, #84]	; 0x54
 800e582:	81a3      	strhlt	r3, [r4, #12]
 800e584:	bd10      	pop	{r4, pc}

0800e586 <__swrite>:
 800e586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e58a:	461f      	mov	r7, r3
 800e58c:	898b      	ldrh	r3, [r1, #12]
 800e58e:	4605      	mov	r5, r0
 800e590:	05db      	lsls	r3, r3, #23
 800e592:	460c      	mov	r4, r1
 800e594:	4616      	mov	r6, r2
 800e596:	d505      	bpl.n	800e5a4 <__swrite+0x1e>
 800e598:	2302      	movs	r3, #2
 800e59a:	2200      	movs	r2, #0
 800e59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a0:	f000 f868 	bl	800e674 <_lseek_r>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	4632      	mov	r2, r6
 800e5a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	463b      	mov	r3, r7
 800e5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ba:	f000 b817 	b.w	800e5ec <_write_r>

0800e5be <__sseek>:
 800e5be:	b510      	push	{r4, lr}
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c6:	f000 f855 	bl	800e674 <_lseek_r>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	bf15      	itete	ne
 800e5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5da:	81a3      	strheq	r3, [r4, #12]
 800e5dc:	bf18      	it	ne
 800e5de:	81a3      	strhne	r3, [r4, #12]
 800e5e0:	bd10      	pop	{r4, pc}

0800e5e2 <__sclose>:
 800e5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e6:	f000 b813 	b.w	800e610 <_close_r>
	...

0800e5ec <_write_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	4608      	mov	r0, r1
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4d05      	ldr	r5, [pc, #20]	; (800e60c <_write_r+0x20>)
 800e5f8:	602a      	str	r2, [r5, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f7f4 fb92 	bl	8002d24 <_write>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_write_r+0x1e>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b103      	cbz	r3, 800e60a <_write_r+0x1e>
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	20001cfc 	.word	0x20001cfc

0800e610 <_close_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	2300      	movs	r3, #0
 800e614:	4d05      	ldr	r5, [pc, #20]	; (800e62c <_close_r+0x1c>)
 800e616:	4604      	mov	r4, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	602b      	str	r3, [r5, #0]
 800e61c:	f7f4 fb9e 	bl	8002d5c <_close>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_close_r+0x1a>
 800e624:	682b      	ldr	r3, [r5, #0]
 800e626:	b103      	cbz	r3, 800e62a <_close_r+0x1a>
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	20001cfc 	.word	0x20001cfc

0800e630 <_fstat_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	2300      	movs	r3, #0
 800e634:	4d06      	ldr	r5, [pc, #24]	; (800e650 <_fstat_r+0x20>)
 800e636:	4604      	mov	r4, r0
 800e638:	4608      	mov	r0, r1
 800e63a:	4611      	mov	r1, r2
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	f7f4 fb98 	bl	8002d72 <_fstat>
 800e642:	1c43      	adds	r3, r0, #1
 800e644:	d102      	bne.n	800e64c <_fstat_r+0x1c>
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	b103      	cbz	r3, 800e64c <_fstat_r+0x1c>
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	bd38      	pop	{r3, r4, r5, pc}
 800e64e:	bf00      	nop
 800e650:	20001cfc 	.word	0x20001cfc

0800e654 <_isatty_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	2300      	movs	r3, #0
 800e658:	4d05      	ldr	r5, [pc, #20]	; (800e670 <_isatty_r+0x1c>)
 800e65a:	4604      	mov	r4, r0
 800e65c:	4608      	mov	r0, r1
 800e65e:	602b      	str	r3, [r5, #0]
 800e660:	f7f4 fb96 	bl	8002d90 <_isatty>
 800e664:	1c43      	adds	r3, r0, #1
 800e666:	d102      	bne.n	800e66e <_isatty_r+0x1a>
 800e668:	682b      	ldr	r3, [r5, #0]
 800e66a:	b103      	cbz	r3, 800e66e <_isatty_r+0x1a>
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	20001cfc 	.word	0x20001cfc

0800e674 <_lseek_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	4604      	mov	r4, r0
 800e678:	4608      	mov	r0, r1
 800e67a:	4611      	mov	r1, r2
 800e67c:	2200      	movs	r2, #0
 800e67e:	4d05      	ldr	r5, [pc, #20]	; (800e694 <_lseek_r+0x20>)
 800e680:	602a      	str	r2, [r5, #0]
 800e682:	461a      	mov	r2, r3
 800e684:	f7f4 fb8e 	bl	8002da4 <_lseek>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_lseek_r+0x1e>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_lseek_r+0x1e>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	20001cfc 	.word	0x20001cfc

0800e698 <_read_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	4611      	mov	r1, r2
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	4d05      	ldr	r5, [pc, #20]	; (800e6b8 <_read_r+0x20>)
 800e6a4:	602a      	str	r2, [r5, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f7f4 fb1f 	bl	8002cea <_read>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_read_r+0x1e>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_read_r+0x1e>
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	20001cfc 	.word	0x20001cfc

0800e6bc <pow>:
 800e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	4614      	mov	r4, r2
 800e6c2:	461d      	mov	r5, r3
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	4689      	mov	r9, r1
 800e6c8:	f000 f862 	bl	800e790 <__ieee754_pow>
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	460f      	mov	r7, r1
 800e6d2:	462b      	mov	r3, r5
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7f2 f9a2 	bl	8000a20 <__aeabi_dcmpun>
 800e6dc:	bbc8      	cbnz	r0, 800e752 <pow+0x96>
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	4649      	mov	r1, r9
 800e6e6:	f7f2 f969 	bl	80009bc <__aeabi_dcmpeq>
 800e6ea:	b1b8      	cbz	r0, 800e71c <pow+0x60>
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f7f2 f962 	bl	80009bc <__aeabi_dcmpeq>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d141      	bne.n	800e780 <pow+0xc4>
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	4629      	mov	r1, r5
 800e700:	f000 fe3b 	bl	800f37a <finite>
 800e704:	b328      	cbz	r0, 800e752 <pow+0x96>
 800e706:	2200      	movs	r2, #0
 800e708:	2300      	movs	r3, #0
 800e70a:	4620      	mov	r0, r4
 800e70c:	4629      	mov	r1, r5
 800e70e:	f7f2 f95f 	bl	80009d0 <__aeabi_dcmplt>
 800e712:	b1f0      	cbz	r0, 800e752 <pow+0x96>
 800e714:	f7fc ffdc 	bl	800b6d0 <__errno>
 800e718:	2322      	movs	r3, #34	; 0x22
 800e71a:	e019      	b.n	800e750 <pow+0x94>
 800e71c:	4630      	mov	r0, r6
 800e71e:	4639      	mov	r1, r7
 800e720:	f000 fe2b 	bl	800f37a <finite>
 800e724:	b9c8      	cbnz	r0, 800e75a <pow+0x9e>
 800e726:	4640      	mov	r0, r8
 800e728:	4649      	mov	r1, r9
 800e72a:	f000 fe26 	bl	800f37a <finite>
 800e72e:	b1a0      	cbz	r0, 800e75a <pow+0x9e>
 800e730:	4620      	mov	r0, r4
 800e732:	4629      	mov	r1, r5
 800e734:	f000 fe21 	bl	800f37a <finite>
 800e738:	b178      	cbz	r0, 800e75a <pow+0x9e>
 800e73a:	4632      	mov	r2, r6
 800e73c:	463b      	mov	r3, r7
 800e73e:	4630      	mov	r0, r6
 800e740:	4639      	mov	r1, r7
 800e742:	f7f2 f96d 	bl	8000a20 <__aeabi_dcmpun>
 800e746:	2800      	cmp	r0, #0
 800e748:	d0e4      	beq.n	800e714 <pow+0x58>
 800e74a:	f7fc ffc1 	bl	800b6d0 <__errno>
 800e74e:	2321      	movs	r3, #33	; 0x21
 800e750:	6003      	str	r3, [r0, #0]
 800e752:	4630      	mov	r0, r6
 800e754:	4639      	mov	r1, r7
 800e756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e75a:	2200      	movs	r2, #0
 800e75c:	2300      	movs	r3, #0
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f2 f92b 	bl	80009bc <__aeabi_dcmpeq>
 800e766:	2800      	cmp	r0, #0
 800e768:	d0f3      	beq.n	800e752 <pow+0x96>
 800e76a:	4640      	mov	r0, r8
 800e76c:	4649      	mov	r1, r9
 800e76e:	f000 fe04 	bl	800f37a <finite>
 800e772:	2800      	cmp	r0, #0
 800e774:	d0ed      	beq.n	800e752 <pow+0x96>
 800e776:	4620      	mov	r0, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	f000 fdfe 	bl	800f37a <finite>
 800e77e:	e7c8      	b.n	800e712 <pow+0x56>
 800e780:	2600      	movs	r6, #0
 800e782:	4f01      	ldr	r7, [pc, #4]	; (800e788 <pow+0xcc>)
 800e784:	e7e5      	b.n	800e752 <pow+0x96>
 800e786:	bf00      	nop
 800e788:	3ff00000 	.word	0x3ff00000
 800e78c:	00000000 	.word	0x00000000

0800e790 <__ieee754_pow>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	b093      	sub	sp, #76	; 0x4c
 800e796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e79a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800e79e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e7a2:	4689      	mov	r9, r1
 800e7a4:	ea56 0102 	orrs.w	r1, r6, r2
 800e7a8:	4680      	mov	r8, r0
 800e7aa:	d111      	bne.n	800e7d0 <__ieee754_pow+0x40>
 800e7ac:	1803      	adds	r3, r0, r0
 800e7ae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800e7b2:	4152      	adcs	r2, r2
 800e7b4:	4299      	cmp	r1, r3
 800e7b6:	4b82      	ldr	r3, [pc, #520]	; (800e9c0 <__ieee754_pow+0x230>)
 800e7b8:	4193      	sbcs	r3, r2
 800e7ba:	f080 84b9 	bcs.w	800f130 <__ieee754_pow+0x9a0>
 800e7be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	f7f1 fcdb 	bl	8000180 <__adddf3>
 800e7ca:	4683      	mov	fp, r0
 800e7cc:	468c      	mov	ip, r1
 800e7ce:	e06f      	b.n	800e8b0 <__ieee754_pow+0x120>
 800e7d0:	4b7c      	ldr	r3, [pc, #496]	; (800e9c4 <__ieee754_pow+0x234>)
 800e7d2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800e7d6:	429c      	cmp	r4, r3
 800e7d8:	464d      	mov	r5, r9
 800e7da:	4682      	mov	sl, r0
 800e7dc:	dc06      	bgt.n	800e7ec <__ieee754_pow+0x5c>
 800e7de:	d101      	bne.n	800e7e4 <__ieee754_pow+0x54>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	d1ec      	bne.n	800e7be <__ieee754_pow+0x2e>
 800e7e4:	429e      	cmp	r6, r3
 800e7e6:	dc01      	bgt.n	800e7ec <__ieee754_pow+0x5c>
 800e7e8:	d10f      	bne.n	800e80a <__ieee754_pow+0x7a>
 800e7ea:	b172      	cbz	r2, 800e80a <__ieee754_pow+0x7a>
 800e7ec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e7f0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e7f4:	ea55 050a 	orrs.w	r5, r5, sl
 800e7f8:	d1e1      	bne.n	800e7be <__ieee754_pow+0x2e>
 800e7fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7fe:	18db      	adds	r3, r3, r3
 800e800:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e804:	4152      	adcs	r2, r2
 800e806:	429d      	cmp	r5, r3
 800e808:	e7d5      	b.n	800e7b6 <__ieee754_pow+0x26>
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	da39      	bge.n	800e882 <__ieee754_pow+0xf2>
 800e80e:	4b6e      	ldr	r3, [pc, #440]	; (800e9c8 <__ieee754_pow+0x238>)
 800e810:	429e      	cmp	r6, r3
 800e812:	dc52      	bgt.n	800e8ba <__ieee754_pow+0x12a>
 800e814:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e818:	429e      	cmp	r6, r3
 800e81a:	f340 849c 	ble.w	800f156 <__ieee754_pow+0x9c6>
 800e81e:	1533      	asrs	r3, r6, #20
 800e820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e824:	2b14      	cmp	r3, #20
 800e826:	dd0f      	ble.n	800e848 <__ieee754_pow+0xb8>
 800e828:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e82c:	fa22 f103 	lsr.w	r1, r2, r3
 800e830:	fa01 f303 	lsl.w	r3, r1, r3
 800e834:	4293      	cmp	r3, r2
 800e836:	f040 848e 	bne.w	800f156 <__ieee754_pow+0x9c6>
 800e83a:	f001 0101 	and.w	r1, r1, #1
 800e83e:	f1c1 0302 	rsb	r3, r1, #2
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	b182      	cbz	r2, 800e868 <__ieee754_pow+0xd8>
 800e846:	e05d      	b.n	800e904 <__ieee754_pow+0x174>
 800e848:	2a00      	cmp	r2, #0
 800e84a:	d159      	bne.n	800e900 <__ieee754_pow+0x170>
 800e84c:	f1c3 0314 	rsb	r3, r3, #20
 800e850:	fa46 f103 	asr.w	r1, r6, r3
 800e854:	fa01 f303 	lsl.w	r3, r1, r3
 800e858:	42b3      	cmp	r3, r6
 800e85a:	f040 8479 	bne.w	800f150 <__ieee754_pow+0x9c0>
 800e85e:	f001 0101 	and.w	r1, r1, #1
 800e862:	f1c1 0302 	rsb	r3, r1, #2
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	4b58      	ldr	r3, [pc, #352]	; (800e9cc <__ieee754_pow+0x23c>)
 800e86a:	429e      	cmp	r6, r3
 800e86c:	d132      	bne.n	800e8d4 <__ieee754_pow+0x144>
 800e86e:	2f00      	cmp	r7, #0
 800e870:	f280 846a 	bge.w	800f148 <__ieee754_pow+0x9b8>
 800e874:	4642      	mov	r2, r8
 800e876:	464b      	mov	r3, r9
 800e878:	2000      	movs	r0, #0
 800e87a:	4954      	ldr	r1, [pc, #336]	; (800e9cc <__ieee754_pow+0x23c>)
 800e87c:	f7f1 ff60 	bl	8000740 <__aeabi_ddiv>
 800e880:	e7a3      	b.n	800e7ca <__ieee754_pow+0x3a>
 800e882:	2300      	movs	r3, #0
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	2a00      	cmp	r2, #0
 800e888:	d13c      	bne.n	800e904 <__ieee754_pow+0x174>
 800e88a:	4b4e      	ldr	r3, [pc, #312]	; (800e9c4 <__ieee754_pow+0x234>)
 800e88c:	429e      	cmp	r6, r3
 800e88e:	d1eb      	bne.n	800e868 <__ieee754_pow+0xd8>
 800e890:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e894:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e898:	ea53 030a 	orrs.w	r3, r3, sl
 800e89c:	f000 8448 	beq.w	800f130 <__ieee754_pow+0x9a0>
 800e8a0:	4b4b      	ldr	r3, [pc, #300]	; (800e9d0 <__ieee754_pow+0x240>)
 800e8a2:	429c      	cmp	r4, r3
 800e8a4:	dd0b      	ble.n	800e8be <__ieee754_pow+0x12e>
 800e8a6:	2f00      	cmp	r7, #0
 800e8a8:	f2c0 8448 	blt.w	800f13c <__ieee754_pow+0x9ac>
 800e8ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800e8b0:	4658      	mov	r0, fp
 800e8b2:	4661      	mov	r1, ip
 800e8b4:	b013      	add	sp, #76	; 0x4c
 800e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e7e2      	b.n	800e884 <__ieee754_pow+0xf4>
 800e8be:	2f00      	cmp	r7, #0
 800e8c0:	f04f 0b00 	mov.w	fp, #0
 800e8c4:	f04f 0c00 	mov.w	ip, #0
 800e8c8:	daf2      	bge.n	800e8b0 <__ieee754_pow+0x120>
 800e8ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e8ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e8d2:	e7ed      	b.n	800e8b0 <__ieee754_pow+0x120>
 800e8d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e8d8:	d106      	bne.n	800e8e8 <__ieee754_pow+0x158>
 800e8da:	4642      	mov	r2, r8
 800e8dc:	464b      	mov	r3, r9
 800e8de:	4640      	mov	r0, r8
 800e8e0:	4649      	mov	r1, r9
 800e8e2:	f7f1 fe03 	bl	80004ec <__aeabi_dmul>
 800e8e6:	e770      	b.n	800e7ca <__ieee754_pow+0x3a>
 800e8e8:	4b3a      	ldr	r3, [pc, #232]	; (800e9d4 <__ieee754_pow+0x244>)
 800e8ea:	429f      	cmp	r7, r3
 800e8ec:	d10a      	bne.n	800e904 <__ieee754_pow+0x174>
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	db08      	blt.n	800e904 <__ieee754_pow+0x174>
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	b013      	add	sp, #76	; 0x4c
 800e8f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fc:	f000 bc5e 	b.w	800f1bc <__ieee754_sqrt>
 800e900:	2300      	movs	r3, #0
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4640      	mov	r0, r8
 800e906:	4649      	mov	r1, r9
 800e908:	f000 fd34 	bl	800f374 <fabs>
 800e90c:	4683      	mov	fp, r0
 800e90e:	468c      	mov	ip, r1
 800e910:	f1ba 0f00 	cmp.w	sl, #0
 800e914:	d128      	bne.n	800e968 <__ieee754_pow+0x1d8>
 800e916:	b124      	cbz	r4, 800e922 <__ieee754_pow+0x192>
 800e918:	4b2c      	ldr	r3, [pc, #176]	; (800e9cc <__ieee754_pow+0x23c>)
 800e91a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e91e:	429a      	cmp	r2, r3
 800e920:	d122      	bne.n	800e968 <__ieee754_pow+0x1d8>
 800e922:	2f00      	cmp	r7, #0
 800e924:	da07      	bge.n	800e936 <__ieee754_pow+0x1a6>
 800e926:	465a      	mov	r2, fp
 800e928:	4663      	mov	r3, ip
 800e92a:	2000      	movs	r0, #0
 800e92c:	4927      	ldr	r1, [pc, #156]	; (800e9cc <__ieee754_pow+0x23c>)
 800e92e:	f7f1 ff07 	bl	8000740 <__aeabi_ddiv>
 800e932:	4683      	mov	fp, r0
 800e934:	468c      	mov	ip, r1
 800e936:	2d00      	cmp	r5, #0
 800e938:	daba      	bge.n	800e8b0 <__ieee754_pow+0x120>
 800e93a:	9b00      	ldr	r3, [sp, #0]
 800e93c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e940:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e944:	4323      	orrs	r3, r4
 800e946:	d108      	bne.n	800e95a <__ieee754_pow+0x1ca>
 800e948:	465a      	mov	r2, fp
 800e94a:	4663      	mov	r3, ip
 800e94c:	4658      	mov	r0, fp
 800e94e:	4661      	mov	r1, ip
 800e950:	f7f1 fc14 	bl	800017c <__aeabi_dsub>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	e790      	b.n	800e87c <__ieee754_pow+0xec>
 800e95a:	9b00      	ldr	r3, [sp, #0]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d1a7      	bne.n	800e8b0 <__ieee754_pow+0x120>
 800e960:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e964:	469c      	mov	ip, r3
 800e966:	e7a3      	b.n	800e8b0 <__ieee754_pow+0x120>
 800e968:	0feb      	lsrs	r3, r5, #31
 800e96a:	3b01      	subs	r3, #1
 800e96c:	930c      	str	r3, [sp, #48]	; 0x30
 800e96e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e970:	9b00      	ldr	r3, [sp, #0]
 800e972:	4313      	orrs	r3, r2
 800e974:	d104      	bne.n	800e980 <__ieee754_pow+0x1f0>
 800e976:	4642      	mov	r2, r8
 800e978:	464b      	mov	r3, r9
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	e7e7      	b.n	800e950 <__ieee754_pow+0x1c0>
 800e980:	4b15      	ldr	r3, [pc, #84]	; (800e9d8 <__ieee754_pow+0x248>)
 800e982:	429e      	cmp	r6, r3
 800e984:	f340 80f6 	ble.w	800eb74 <__ieee754_pow+0x3e4>
 800e988:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e98c:	429e      	cmp	r6, r3
 800e98e:	4b10      	ldr	r3, [pc, #64]	; (800e9d0 <__ieee754_pow+0x240>)
 800e990:	dd09      	ble.n	800e9a6 <__ieee754_pow+0x216>
 800e992:	429c      	cmp	r4, r3
 800e994:	dc0c      	bgt.n	800e9b0 <__ieee754_pow+0x220>
 800e996:	2f00      	cmp	r7, #0
 800e998:	da0c      	bge.n	800e9b4 <__ieee754_pow+0x224>
 800e99a:	2000      	movs	r0, #0
 800e99c:	b013      	add	sp, #76	; 0x4c
 800e99e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a2:	f000 bce2 	b.w	800f36a <__math_oflow>
 800e9a6:	429c      	cmp	r4, r3
 800e9a8:	dbf5      	blt.n	800e996 <__ieee754_pow+0x206>
 800e9aa:	4b08      	ldr	r3, [pc, #32]	; (800e9cc <__ieee754_pow+0x23c>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	dd15      	ble.n	800e9dc <__ieee754_pow+0x24c>
 800e9b0:	2f00      	cmp	r7, #0
 800e9b2:	dcf2      	bgt.n	800e99a <__ieee754_pow+0x20a>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	b013      	add	sp, #76	; 0x4c
 800e9b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	f000 bcd0 	b.w	800f360 <__math_uflow>
 800e9c0:	fff00000 	.word	0xfff00000
 800e9c4:	7ff00000 	.word	0x7ff00000
 800e9c8:	433fffff 	.word	0x433fffff
 800e9cc:	3ff00000 	.word	0x3ff00000
 800e9d0:	3fefffff 	.word	0x3fefffff
 800e9d4:	3fe00000 	.word	0x3fe00000
 800e9d8:	41e00000 	.word	0x41e00000
 800e9dc:	4661      	mov	r1, ip
 800e9de:	2200      	movs	r2, #0
 800e9e0:	4658      	mov	r0, fp
 800e9e2:	4b5f      	ldr	r3, [pc, #380]	; (800eb60 <__ieee754_pow+0x3d0>)
 800e9e4:	f7f1 fbca 	bl	800017c <__aeabi_dsub>
 800e9e8:	a355      	add	r3, pc, #340	; (adr r3, 800eb40 <__ieee754_pow+0x3b0>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	460d      	mov	r5, r1
 800e9f2:	f7f1 fd7b 	bl	80004ec <__aeabi_dmul>
 800e9f6:	a354      	add	r3, pc, #336	; (adr r3, 800eb48 <__ieee754_pow+0x3b8>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	460f      	mov	r7, r1
 800ea00:	4620      	mov	r0, r4
 800ea02:	4629      	mov	r1, r5
 800ea04:	f7f1 fd72 	bl	80004ec <__aeabi_dmul>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4682      	mov	sl, r0
 800ea0c:	468b      	mov	fp, r1
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	4b54      	ldr	r3, [pc, #336]	; (800eb64 <__ieee754_pow+0x3d4>)
 800ea14:	f7f1 fd6a 	bl	80004ec <__aeabi_dmul>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	a14c      	add	r1, pc, #304	; (adr r1, 800eb50 <__ieee754_pow+0x3c0>)
 800ea1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea22:	f7f1 fbab 	bl	800017c <__aeabi_dsub>
 800ea26:	4622      	mov	r2, r4
 800ea28:	462b      	mov	r3, r5
 800ea2a:	f7f1 fd5f 	bl	80004ec <__aeabi_dmul>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	2000      	movs	r0, #0
 800ea34:	494c      	ldr	r1, [pc, #304]	; (800eb68 <__ieee754_pow+0x3d8>)
 800ea36:	f7f1 fba1 	bl	800017c <__aeabi_dsub>
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	462b      	mov	r3, r5
 800ea3e:	4680      	mov	r8, r0
 800ea40:	4689      	mov	r9, r1
 800ea42:	4620      	mov	r0, r4
 800ea44:	4629      	mov	r1, r5
 800ea46:	f7f1 fd51 	bl	80004ec <__aeabi_dmul>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4640      	mov	r0, r8
 800ea50:	4649      	mov	r1, r9
 800ea52:	f7f1 fd4b 	bl	80004ec <__aeabi_dmul>
 800ea56:	a340      	add	r3, pc, #256	; (adr r3, 800eb58 <__ieee754_pow+0x3c8>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	f7f1 fd46 	bl	80004ec <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4650      	mov	r0, sl
 800ea66:	4659      	mov	r1, fp
 800ea68:	f7f1 fb88 	bl	800017c <__aeabi_dsub>
 800ea6c:	f04f 0a00 	mov.w	sl, #0
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	4604      	mov	r4, r0
 800ea76:	460d      	mov	r5, r1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	f7f1 fb80 	bl	8000180 <__adddf3>
 800ea80:	4632      	mov	r2, r6
 800ea82:	463b      	mov	r3, r7
 800ea84:	4650      	mov	r0, sl
 800ea86:	468b      	mov	fp, r1
 800ea88:	f7f1 fb78 	bl	800017c <__aeabi_dsub>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4620      	mov	r0, r4
 800ea92:	4629      	mov	r1, r5
 800ea94:	f7f1 fb72 	bl	800017c <__aeabi_dsub>
 800ea98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	f04f 0600 	mov.w	r6, #0
 800eaa8:	f04f 0200 	mov.w	r2, #0
 800eaac:	bf0c      	ite	eq
 800eaae:	4b2f      	ldreq	r3, [pc, #188]	; (800eb6c <__ieee754_pow+0x3dc>)
 800eab0:	4b2b      	ldrne	r3, [pc, #172]	; (800eb60 <__ieee754_pow+0x3d0>)
 800eab2:	4604      	mov	r4, r0
 800eab4:	460d      	mov	r5, r1
 800eab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaba:	e9cd 2300 	strd	r2, r3, [sp]
 800eabe:	4632      	mov	r2, r6
 800eac0:	463b      	mov	r3, r7
 800eac2:	f7f1 fb5b 	bl	800017c <__aeabi_dsub>
 800eac6:	4652      	mov	r2, sl
 800eac8:	465b      	mov	r3, fp
 800eaca:	f7f1 fd0f 	bl	80004ec <__aeabi_dmul>
 800eace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ead2:	4680      	mov	r8, r0
 800ead4:	4689      	mov	r9, r1
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fd07 	bl	80004ec <__aeabi_dmul>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4640      	mov	r0, r8
 800eae4:	4649      	mov	r1, r9
 800eae6:	f7f1 fb4b 	bl	8000180 <__adddf3>
 800eaea:	4632      	mov	r2, r6
 800eaec:	463b      	mov	r3, r7
 800eaee:	4680      	mov	r8, r0
 800eaf0:	4689      	mov	r9, r1
 800eaf2:	4650      	mov	r0, sl
 800eaf4:	4659      	mov	r1, fp
 800eaf6:	f7f1 fcf9 	bl	80004ec <__aeabi_dmul>
 800eafa:	4604      	mov	r4, r0
 800eafc:	460d      	mov	r5, r1
 800eafe:	460b      	mov	r3, r1
 800eb00:	4602      	mov	r2, r0
 800eb02:	4649      	mov	r1, r9
 800eb04:	4640      	mov	r0, r8
 800eb06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800eb0a:	f7f1 fb39 	bl	8000180 <__adddf3>
 800eb0e:	4b18      	ldr	r3, [pc, #96]	; (800eb70 <__ieee754_pow+0x3e0>)
 800eb10:	4682      	mov	sl, r0
 800eb12:	4299      	cmp	r1, r3
 800eb14:	460f      	mov	r7, r1
 800eb16:	460e      	mov	r6, r1
 800eb18:	f340 82e5 	ble.w	800f0e6 <__ieee754_pow+0x956>
 800eb1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eb20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eb24:	4303      	orrs	r3, r0
 800eb26:	f000 81df 	beq.w	800eee8 <__ieee754_pow+0x758>
 800eb2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2300      	movs	r3, #0
 800eb32:	f7f1 ff4d 	bl	80009d0 <__aeabi_dcmplt>
 800eb36:	3800      	subs	r0, #0
 800eb38:	bf18      	it	ne
 800eb3a:	2001      	movne	r0, #1
 800eb3c:	e72e      	b.n	800e99c <__ieee754_pow+0x20c>
 800eb3e:	bf00      	nop
 800eb40:	60000000 	.word	0x60000000
 800eb44:	3ff71547 	.word	0x3ff71547
 800eb48:	f85ddf44 	.word	0xf85ddf44
 800eb4c:	3e54ae0b 	.word	0x3e54ae0b
 800eb50:	55555555 	.word	0x55555555
 800eb54:	3fd55555 	.word	0x3fd55555
 800eb58:	652b82fe 	.word	0x652b82fe
 800eb5c:	3ff71547 	.word	0x3ff71547
 800eb60:	3ff00000 	.word	0x3ff00000
 800eb64:	3fd00000 	.word	0x3fd00000
 800eb68:	3fe00000 	.word	0x3fe00000
 800eb6c:	bff00000 	.word	0xbff00000
 800eb70:	408fffff 	.word	0x408fffff
 800eb74:	4bd2      	ldr	r3, [pc, #840]	; (800eec0 <__ieee754_pow+0x730>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	402b      	ands	r3, r5
 800eb7a:	b943      	cbnz	r3, 800eb8e <__ieee754_pow+0x3fe>
 800eb7c:	4658      	mov	r0, fp
 800eb7e:	4661      	mov	r1, ip
 800eb80:	4bd0      	ldr	r3, [pc, #832]	; (800eec4 <__ieee754_pow+0x734>)
 800eb82:	f7f1 fcb3 	bl	80004ec <__aeabi_dmul>
 800eb86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb8a:	4683      	mov	fp, r0
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	1523      	asrs	r3, r4, #20
 800eb90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb94:	4413      	add	r3, r2
 800eb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb98:	4bcb      	ldr	r3, [pc, #812]	; (800eec8 <__ieee754_pow+0x738>)
 800eb9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eba2:	429c      	cmp	r4, r3
 800eba4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eba8:	dd08      	ble.n	800ebbc <__ieee754_pow+0x42c>
 800ebaa:	4bc8      	ldr	r3, [pc, #800]	; (800eecc <__ieee754_pow+0x73c>)
 800ebac:	429c      	cmp	r4, r3
 800ebae:	f340 8199 	ble.w	800eee4 <__ieee754_pow+0x754>
 800ebb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebb4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ebb8:	3301      	adds	r3, #1
 800ebba:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	00f3      	lsls	r3, r6, #3
 800ebc0:	930d      	str	r3, [sp, #52]	; 0x34
 800ebc2:	4bc3      	ldr	r3, [pc, #780]	; (800eed0 <__ieee754_pow+0x740>)
 800ebc4:	4658      	mov	r0, fp
 800ebc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ebca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ebce:	4629      	mov	r1, r5
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ebd6:	4623      	mov	r3, r4
 800ebd8:	f7f1 fad0 	bl	800017c <__aeabi_dsub>
 800ebdc:	46da      	mov	sl, fp
 800ebde:	462b      	mov	r3, r5
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ebe6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebea:	f7f1 fac9 	bl	8000180 <__adddf3>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	49b7      	ldr	r1, [pc, #732]	; (800eed4 <__ieee754_pow+0x744>)
 800ebf6:	f7f1 fda3 	bl	8000740 <__aeabi_ddiv>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ec02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ec06:	f7f1 fc71 	bl	80004ec <__aeabi_dmul>
 800ec0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ec12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ec16:	2300      	movs	r3, #0
 800ec18:	2200      	movs	r2, #0
 800ec1a:	46ab      	mov	fp, r5
 800ec1c:	106d      	asrs	r5, r5, #1
 800ec1e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ec28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ec2c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ec30:	4640      	mov	r0, r8
 800ec32:	4649      	mov	r1, r9
 800ec34:	4614      	mov	r4, r2
 800ec36:	461d      	mov	r5, r3
 800ec38:	f7f1 fc58 	bl	80004ec <__aeabi_dmul>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ec44:	f7f1 fa9a 	bl	800017c <__aeabi_dsub>
 800ec48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	460f      	mov	r7, r1
 800ec50:	4620      	mov	r0, r4
 800ec52:	4629      	mov	r1, r5
 800ec54:	f7f1 fa92 	bl	800017c <__aeabi_dsub>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4650      	mov	r0, sl
 800ec5e:	4659      	mov	r1, fp
 800ec60:	f7f1 fa8c 	bl	800017c <__aeabi_dsub>
 800ec64:	4642      	mov	r2, r8
 800ec66:	464b      	mov	r3, r9
 800ec68:	f7f1 fc40 	bl	80004ec <__aeabi_dmul>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	460b      	mov	r3, r1
 800ec70:	4630      	mov	r0, r6
 800ec72:	4639      	mov	r1, r7
 800ec74:	f7f1 fa82 	bl	800017c <__aeabi_dsub>
 800ec78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec7c:	f7f1 fc36 	bl	80004ec <__aeabi_dmul>
 800ec80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec88:	4610      	mov	r0, r2
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	f7f1 fc2e 	bl	80004ec <__aeabi_dmul>
 800ec90:	a379      	add	r3, pc, #484	; (adr r3, 800ee78 <__ieee754_pow+0x6e8>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	4604      	mov	r4, r0
 800ec98:	460d      	mov	r5, r1
 800ec9a:	f7f1 fc27 	bl	80004ec <__aeabi_dmul>
 800ec9e:	a378      	add	r3, pc, #480	; (adr r3, 800ee80 <__ieee754_pow+0x6f0>)
 800eca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca4:	f7f1 fa6c 	bl	8000180 <__adddf3>
 800eca8:	4622      	mov	r2, r4
 800ecaa:	462b      	mov	r3, r5
 800ecac:	f7f1 fc1e 	bl	80004ec <__aeabi_dmul>
 800ecb0:	a375      	add	r3, pc, #468	; (adr r3, 800ee88 <__ieee754_pow+0x6f8>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fa63 	bl	8000180 <__adddf3>
 800ecba:	4622      	mov	r2, r4
 800ecbc:	462b      	mov	r3, r5
 800ecbe:	f7f1 fc15 	bl	80004ec <__aeabi_dmul>
 800ecc2:	a373      	add	r3, pc, #460	; (adr r3, 800ee90 <__ieee754_pow+0x700>)
 800ecc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc8:	f7f1 fa5a 	bl	8000180 <__adddf3>
 800eccc:	4622      	mov	r2, r4
 800ecce:	462b      	mov	r3, r5
 800ecd0:	f7f1 fc0c 	bl	80004ec <__aeabi_dmul>
 800ecd4:	a370      	add	r3, pc, #448	; (adr r3, 800ee98 <__ieee754_pow+0x708>)
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	f7f1 fa51 	bl	8000180 <__adddf3>
 800ecde:	4622      	mov	r2, r4
 800ece0:	462b      	mov	r3, r5
 800ece2:	f7f1 fc03 	bl	80004ec <__aeabi_dmul>
 800ece6:	a36e      	add	r3, pc, #440	; (adr r3, 800eea0 <__ieee754_pow+0x710>)
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	f7f1 fa48 	bl	8000180 <__adddf3>
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	460f      	mov	r7, r1
 800ecf6:	462b      	mov	r3, r5
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	f7f1 fbf6 	bl	80004ec <__aeabi_dmul>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4630      	mov	r0, r6
 800ed06:	4639      	mov	r1, r7
 800ed08:	f7f1 fbf0 	bl	80004ec <__aeabi_dmul>
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed14:	4642      	mov	r2, r8
 800ed16:	464b      	mov	r3, r9
 800ed18:	f7f1 fa32 	bl	8000180 <__adddf3>
 800ed1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ed20:	f7f1 fbe4 	bl	80004ec <__aeabi_dmul>
 800ed24:	4622      	mov	r2, r4
 800ed26:	462b      	mov	r3, r5
 800ed28:	f7f1 fa2a 	bl	8000180 <__adddf3>
 800ed2c:	4642      	mov	r2, r8
 800ed2e:	4606      	mov	r6, r0
 800ed30:	460f      	mov	r7, r1
 800ed32:	464b      	mov	r3, r9
 800ed34:	4640      	mov	r0, r8
 800ed36:	4649      	mov	r1, r9
 800ed38:	f7f1 fbd8 	bl	80004ec <__aeabi_dmul>
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4b66      	ldr	r3, [pc, #408]	; (800eed8 <__ieee754_pow+0x748>)
 800ed40:	4682      	mov	sl, r0
 800ed42:	468b      	mov	fp, r1
 800ed44:	f7f1 fa1c 	bl	8000180 <__adddf3>
 800ed48:	4632      	mov	r2, r6
 800ed4a:	463b      	mov	r3, r7
 800ed4c:	f7f1 fa18 	bl	8000180 <__adddf3>
 800ed50:	2400      	movs	r4, #0
 800ed52:	460d      	mov	r5, r1
 800ed54:	4622      	mov	r2, r4
 800ed56:	460b      	mov	r3, r1
 800ed58:	4640      	mov	r0, r8
 800ed5a:	4649      	mov	r1, r9
 800ed5c:	f7f1 fbc6 	bl	80004ec <__aeabi_dmul>
 800ed60:	2200      	movs	r2, #0
 800ed62:	4680      	mov	r8, r0
 800ed64:	4689      	mov	r9, r1
 800ed66:	4620      	mov	r0, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	4b5b      	ldr	r3, [pc, #364]	; (800eed8 <__ieee754_pow+0x748>)
 800ed6c:	f7f1 fa06 	bl	800017c <__aeabi_dsub>
 800ed70:	4652      	mov	r2, sl
 800ed72:	465b      	mov	r3, fp
 800ed74:	f7f1 fa02 	bl	800017c <__aeabi_dsub>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	4639      	mov	r1, r7
 800ed80:	f7f1 f9fc 	bl	800017c <__aeabi_dsub>
 800ed84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed88:	f7f1 fbb0 	bl	80004ec <__aeabi_dmul>
 800ed8c:	4622      	mov	r2, r4
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ed96:	462b      	mov	r3, r5
 800ed98:	f7f1 fba8 	bl	80004ec <__aeabi_dmul>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	460b      	mov	r3, r1
 800eda0:	4630      	mov	r0, r6
 800eda2:	4639      	mov	r1, r7
 800eda4:	f7f1 f9ec 	bl	8000180 <__adddf3>
 800eda8:	2400      	movs	r4, #0
 800edaa:	4606      	mov	r6, r0
 800edac:	460f      	mov	r7, r1
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	4640      	mov	r0, r8
 800edb4:	4649      	mov	r1, r9
 800edb6:	f7f1 f9e3 	bl	8000180 <__adddf3>
 800edba:	a33b      	add	r3, pc, #236	; (adr r3, 800eea8 <__ieee754_pow+0x718>)
 800edbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc0:	4620      	mov	r0, r4
 800edc2:	460d      	mov	r5, r1
 800edc4:	f7f1 fb92 	bl	80004ec <__aeabi_dmul>
 800edc8:	4642      	mov	r2, r8
 800edca:	464b      	mov	r3, r9
 800edcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800edd0:	4620      	mov	r0, r4
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7f1 f9d2 	bl	800017c <__aeabi_dsub>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4630      	mov	r0, r6
 800edde:	4639      	mov	r1, r7
 800ede0:	f7f1 f9cc 	bl	800017c <__aeabi_dsub>
 800ede4:	a332      	add	r3, pc, #200	; (adr r3, 800eeb0 <__ieee754_pow+0x720>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	f7f1 fb7f 	bl	80004ec <__aeabi_dmul>
 800edee:	a332      	add	r3, pc, #200	; (adr r3, 800eeb8 <__ieee754_pow+0x728>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	4606      	mov	r6, r0
 800edf6:	460f      	mov	r7, r1
 800edf8:	4620      	mov	r0, r4
 800edfa:	4629      	mov	r1, r5
 800edfc:	f7f1 fb76 	bl	80004ec <__aeabi_dmul>
 800ee00:	4602      	mov	r2, r0
 800ee02:	460b      	mov	r3, r1
 800ee04:	4630      	mov	r0, r6
 800ee06:	4639      	mov	r1, r7
 800ee08:	f7f1 f9ba 	bl	8000180 <__adddf3>
 800ee0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee0e:	4b33      	ldr	r3, [pc, #204]	; (800eedc <__ieee754_pow+0x74c>)
 800ee10:	f04f 0a00 	mov.w	sl, #0
 800ee14:	4413      	add	r3, r2
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	f7f1 f9b1 	bl	8000180 <__adddf3>
 800ee1e:	4680      	mov	r8, r0
 800ee20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee22:	4689      	mov	r9, r1
 800ee24:	f7f1 faf8 	bl	8000418 <__aeabi_i2d>
 800ee28:	4604      	mov	r4, r0
 800ee2a:	460d      	mov	r5, r1
 800ee2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee2e:	4b2c      	ldr	r3, [pc, #176]	; (800eee0 <__ieee754_pow+0x750>)
 800ee30:	4413      	add	r3, r2
 800ee32:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ee36:	4642      	mov	r2, r8
 800ee38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee3c:	464b      	mov	r3, r9
 800ee3e:	f7f1 f99f 	bl	8000180 <__adddf3>
 800ee42:	4632      	mov	r2, r6
 800ee44:	463b      	mov	r3, r7
 800ee46:	f7f1 f99b 	bl	8000180 <__adddf3>
 800ee4a:	4622      	mov	r2, r4
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	f7f1 f997 	bl	8000180 <__adddf3>
 800ee52:	4622      	mov	r2, r4
 800ee54:	462b      	mov	r3, r5
 800ee56:	4650      	mov	r0, sl
 800ee58:	468b      	mov	fp, r1
 800ee5a:	f7f1 f98f 	bl	800017c <__aeabi_dsub>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	463b      	mov	r3, r7
 800ee62:	f7f1 f98b 	bl	800017c <__aeabi_dsub>
 800ee66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee6a:	f7f1 f987 	bl	800017c <__aeabi_dsub>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4640      	mov	r0, r8
 800ee74:	4649      	mov	r1, r9
 800ee76:	e60d      	b.n	800ea94 <__ieee754_pow+0x304>
 800ee78:	4a454eef 	.word	0x4a454eef
 800ee7c:	3fca7e28 	.word	0x3fca7e28
 800ee80:	93c9db65 	.word	0x93c9db65
 800ee84:	3fcd864a 	.word	0x3fcd864a
 800ee88:	a91d4101 	.word	0xa91d4101
 800ee8c:	3fd17460 	.word	0x3fd17460
 800ee90:	518f264d 	.word	0x518f264d
 800ee94:	3fd55555 	.word	0x3fd55555
 800ee98:	db6fabff 	.word	0xdb6fabff
 800ee9c:	3fdb6db6 	.word	0x3fdb6db6
 800eea0:	33333303 	.word	0x33333303
 800eea4:	3fe33333 	.word	0x3fe33333
 800eea8:	e0000000 	.word	0xe0000000
 800eeac:	3feec709 	.word	0x3feec709
 800eeb0:	dc3a03fd 	.word	0xdc3a03fd
 800eeb4:	3feec709 	.word	0x3feec709
 800eeb8:	145b01f5 	.word	0x145b01f5
 800eebc:	be3e2fe0 	.word	0xbe3e2fe0
 800eec0:	7ff00000 	.word	0x7ff00000
 800eec4:	43400000 	.word	0x43400000
 800eec8:	0003988e 	.word	0x0003988e
 800eecc:	000bb679 	.word	0x000bb679
 800eed0:	08010fb8 	.word	0x08010fb8
 800eed4:	3ff00000 	.word	0x3ff00000
 800eed8:	40080000 	.word	0x40080000
 800eedc:	08010fd8 	.word	0x08010fd8
 800eee0:	08010fc8 	.word	0x08010fc8
 800eee4:	2601      	movs	r6, #1
 800eee6:	e66a      	b.n	800ebbe <__ieee754_pow+0x42e>
 800eee8:	a39d      	add	r3, pc, #628	; (adr r3, 800f160 <__ieee754_pow+0x9d0>)
 800eeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeee:	4640      	mov	r0, r8
 800eef0:	4649      	mov	r1, r9
 800eef2:	f7f1 f945 	bl	8000180 <__adddf3>
 800eef6:	4622      	mov	r2, r4
 800eef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eefc:	462b      	mov	r3, r5
 800eefe:	4650      	mov	r0, sl
 800ef00:	4639      	mov	r1, r7
 800ef02:	f7f1 f93b 	bl	800017c <__aeabi_dsub>
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef0e:	f7f1 fd7d 	bl	8000a0c <__aeabi_dcmpgt>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	f47f ae09 	bne.w	800eb2a <__ieee754_pow+0x39a>
 800ef18:	4aa3      	ldr	r2, [pc, #652]	; (800f1a8 <__ieee754_pow+0xa18>)
 800ef1a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	f340 8101 	ble.w	800f126 <__ieee754_pow+0x996>
 800ef24:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ef28:	2000      	movs	r0, #0
 800ef2a:	151b      	asrs	r3, r3, #20
 800ef2c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ef30:	fa4a f303 	asr.w	r3, sl, r3
 800ef34:	4433      	add	r3, r6
 800ef36:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ef3a:	4f9c      	ldr	r7, [pc, #624]	; (800f1ac <__ieee754_pow+0xa1c>)
 800ef3c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef40:	4117      	asrs	r7, r2
 800ef42:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ef46:	ea23 0107 	bic.w	r1, r3, r7
 800ef4a:	f1c2 0214 	rsb	r2, r2, #20
 800ef4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ef52:	460b      	mov	r3, r1
 800ef54:	fa4a fa02 	asr.w	sl, sl, r2
 800ef58:	2e00      	cmp	r6, #0
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4620      	mov	r0, r4
 800ef60:	bfb8      	it	lt
 800ef62:	f1ca 0a00 	rsblt	sl, sl, #0
 800ef66:	f7f1 f909 	bl	800017c <__aeabi_dsub>
 800ef6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef72:	2400      	movs	r4, #0
 800ef74:	4642      	mov	r2, r8
 800ef76:	464b      	mov	r3, r9
 800ef78:	f7f1 f902 	bl	8000180 <__adddf3>
 800ef7c:	a37a      	add	r3, pc, #488	; (adr r3, 800f168 <__ieee754_pow+0x9d8>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	4620      	mov	r0, r4
 800ef84:	460d      	mov	r5, r1
 800ef86:	f7f1 fab1 	bl	80004ec <__aeabi_dmul>
 800ef8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef8e:	4606      	mov	r6, r0
 800ef90:	460f      	mov	r7, r1
 800ef92:	4620      	mov	r0, r4
 800ef94:	4629      	mov	r1, r5
 800ef96:	f7f1 f8f1 	bl	800017c <__aeabi_dsub>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	4640      	mov	r0, r8
 800efa0:	4649      	mov	r1, r9
 800efa2:	f7f1 f8eb 	bl	800017c <__aeabi_dsub>
 800efa6:	a372      	add	r3, pc, #456	; (adr r3, 800f170 <__ieee754_pow+0x9e0>)
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	f7f1 fa9e 	bl	80004ec <__aeabi_dmul>
 800efb0:	a371      	add	r3, pc, #452	; (adr r3, 800f178 <__ieee754_pow+0x9e8>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	4680      	mov	r8, r0
 800efb8:	4689      	mov	r9, r1
 800efba:	4620      	mov	r0, r4
 800efbc:	4629      	mov	r1, r5
 800efbe:	f7f1 fa95 	bl	80004ec <__aeabi_dmul>
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4640      	mov	r0, r8
 800efc8:	4649      	mov	r1, r9
 800efca:	f7f1 f8d9 	bl	8000180 <__adddf3>
 800efce:	4604      	mov	r4, r0
 800efd0:	460d      	mov	r5, r1
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4630      	mov	r0, r6
 800efd8:	4639      	mov	r1, r7
 800efda:	f7f1 f8d1 	bl	8000180 <__adddf3>
 800efde:	4632      	mov	r2, r6
 800efe0:	463b      	mov	r3, r7
 800efe2:	4680      	mov	r8, r0
 800efe4:	4689      	mov	r9, r1
 800efe6:	f7f1 f8c9 	bl	800017c <__aeabi_dsub>
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	4620      	mov	r0, r4
 800eff0:	4629      	mov	r1, r5
 800eff2:	f7f1 f8c3 	bl	800017c <__aeabi_dsub>
 800eff6:	4642      	mov	r2, r8
 800eff8:	4606      	mov	r6, r0
 800effa:	460f      	mov	r7, r1
 800effc:	464b      	mov	r3, r9
 800effe:	4640      	mov	r0, r8
 800f000:	4649      	mov	r1, r9
 800f002:	f7f1 fa73 	bl	80004ec <__aeabi_dmul>
 800f006:	a35e      	add	r3, pc, #376	; (adr r3, 800f180 <__ieee754_pow+0x9f0>)
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	4604      	mov	r4, r0
 800f00e:	460d      	mov	r5, r1
 800f010:	f7f1 fa6c 	bl	80004ec <__aeabi_dmul>
 800f014:	a35c      	add	r3, pc, #368	; (adr r3, 800f188 <__ieee754_pow+0x9f8>)
 800f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01a:	f7f1 f8af 	bl	800017c <__aeabi_dsub>
 800f01e:	4622      	mov	r2, r4
 800f020:	462b      	mov	r3, r5
 800f022:	f7f1 fa63 	bl	80004ec <__aeabi_dmul>
 800f026:	a35a      	add	r3, pc, #360	; (adr r3, 800f190 <__ieee754_pow+0xa00>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f8a8 	bl	8000180 <__adddf3>
 800f030:	4622      	mov	r2, r4
 800f032:	462b      	mov	r3, r5
 800f034:	f7f1 fa5a 	bl	80004ec <__aeabi_dmul>
 800f038:	a357      	add	r3, pc, #348	; (adr r3, 800f198 <__ieee754_pow+0xa08>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 f89d 	bl	800017c <__aeabi_dsub>
 800f042:	4622      	mov	r2, r4
 800f044:	462b      	mov	r3, r5
 800f046:	f7f1 fa51 	bl	80004ec <__aeabi_dmul>
 800f04a:	a355      	add	r3, pc, #340	; (adr r3, 800f1a0 <__ieee754_pow+0xa10>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f7f1 f896 	bl	8000180 <__adddf3>
 800f054:	4622      	mov	r2, r4
 800f056:	462b      	mov	r3, r5
 800f058:	f7f1 fa48 	bl	80004ec <__aeabi_dmul>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4640      	mov	r0, r8
 800f062:	4649      	mov	r1, r9
 800f064:	f7f1 f88a 	bl	800017c <__aeabi_dsub>
 800f068:	4604      	mov	r4, r0
 800f06a:	460d      	mov	r5, r1
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4640      	mov	r0, r8
 800f072:	4649      	mov	r1, r9
 800f074:	f7f1 fa3a 	bl	80004ec <__aeabi_dmul>
 800f078:	2200      	movs	r2, #0
 800f07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f07e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f082:	4620      	mov	r0, r4
 800f084:	4629      	mov	r1, r5
 800f086:	f7f1 f879 	bl	800017c <__aeabi_dsub>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f092:	f7f1 fb55 	bl	8000740 <__aeabi_ddiv>
 800f096:	4632      	mov	r2, r6
 800f098:	4604      	mov	r4, r0
 800f09a:	460d      	mov	r5, r1
 800f09c:	463b      	mov	r3, r7
 800f09e:	4640      	mov	r0, r8
 800f0a0:	4649      	mov	r1, r9
 800f0a2:	f7f1 fa23 	bl	80004ec <__aeabi_dmul>
 800f0a6:	4632      	mov	r2, r6
 800f0a8:	463b      	mov	r3, r7
 800f0aa:	f7f1 f869 	bl	8000180 <__adddf3>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	f7f1 f861 	bl	800017c <__aeabi_dsub>
 800f0ba:	4642      	mov	r2, r8
 800f0bc:	464b      	mov	r3, r9
 800f0be:	f7f1 f85d 	bl	800017c <__aeabi_dsub>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	4939      	ldr	r1, [pc, #228]	; (800f1b0 <__ieee754_pow+0xa20>)
 800f0ca:	f7f1 f857 	bl	800017c <__aeabi_dsub>
 800f0ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f0d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f0d6:	da29      	bge.n	800f12c <__ieee754_pow+0x99c>
 800f0d8:	4652      	mov	r2, sl
 800f0da:	f000 f955 	bl	800f388 <scalbn>
 800f0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0e2:	f7ff bbfe 	b.w	800e8e2 <__ieee754_pow+0x152>
 800f0e6:	4b33      	ldr	r3, [pc, #204]	; (800f1b4 <__ieee754_pow+0xa24>)
 800f0e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f0ec:	429f      	cmp	r7, r3
 800f0ee:	f77f af13 	ble.w	800ef18 <__ieee754_pow+0x788>
 800f0f2:	4b31      	ldr	r3, [pc, #196]	; (800f1b8 <__ieee754_pow+0xa28>)
 800f0f4:	440b      	add	r3, r1
 800f0f6:	4303      	orrs	r3, r0
 800f0f8:	d009      	beq.n	800f10e <__ieee754_pow+0x97e>
 800f0fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0fe:	2200      	movs	r2, #0
 800f100:	2300      	movs	r3, #0
 800f102:	f7f1 fc65 	bl	80009d0 <__aeabi_dcmplt>
 800f106:	3800      	subs	r0, #0
 800f108:	bf18      	it	ne
 800f10a:	2001      	movne	r0, #1
 800f10c:	e453      	b.n	800e9b6 <__ieee754_pow+0x226>
 800f10e:	4622      	mov	r2, r4
 800f110:	462b      	mov	r3, r5
 800f112:	f7f1 f833 	bl	800017c <__aeabi_dsub>
 800f116:	4642      	mov	r2, r8
 800f118:	464b      	mov	r3, r9
 800f11a:	f7f1 fc6d 	bl	80009f8 <__aeabi_dcmpge>
 800f11e:	2800      	cmp	r0, #0
 800f120:	f43f aefa 	beq.w	800ef18 <__ieee754_pow+0x788>
 800f124:	e7e9      	b.n	800f0fa <__ieee754_pow+0x96a>
 800f126:	f04f 0a00 	mov.w	sl, #0
 800f12a:	e720      	b.n	800ef6e <__ieee754_pow+0x7de>
 800f12c:	4621      	mov	r1, r4
 800f12e:	e7d6      	b.n	800f0de <__ieee754_pow+0x94e>
 800f130:	f04f 0b00 	mov.w	fp, #0
 800f134:	f8df c078 	ldr.w	ip, [pc, #120]	; 800f1b0 <__ieee754_pow+0xa20>
 800f138:	f7ff bbba 	b.w	800e8b0 <__ieee754_pow+0x120>
 800f13c:	f04f 0b00 	mov.w	fp, #0
 800f140:	f04f 0c00 	mov.w	ip, #0
 800f144:	f7ff bbb4 	b.w	800e8b0 <__ieee754_pow+0x120>
 800f148:	4640      	mov	r0, r8
 800f14a:	4649      	mov	r1, r9
 800f14c:	f7ff bb3d 	b.w	800e7ca <__ieee754_pow+0x3a>
 800f150:	9200      	str	r2, [sp, #0]
 800f152:	f7ff bb89 	b.w	800e868 <__ieee754_pow+0xd8>
 800f156:	2300      	movs	r3, #0
 800f158:	f7ff bb73 	b.w	800e842 <__ieee754_pow+0xb2>
 800f15c:	f3af 8000 	nop.w
 800f160:	652b82fe 	.word	0x652b82fe
 800f164:	3c971547 	.word	0x3c971547
 800f168:	00000000 	.word	0x00000000
 800f16c:	3fe62e43 	.word	0x3fe62e43
 800f170:	fefa39ef 	.word	0xfefa39ef
 800f174:	3fe62e42 	.word	0x3fe62e42
 800f178:	0ca86c39 	.word	0x0ca86c39
 800f17c:	be205c61 	.word	0xbe205c61
 800f180:	72bea4d0 	.word	0x72bea4d0
 800f184:	3e663769 	.word	0x3e663769
 800f188:	c5d26bf1 	.word	0xc5d26bf1
 800f18c:	3ebbbd41 	.word	0x3ebbbd41
 800f190:	af25de2c 	.word	0xaf25de2c
 800f194:	3f11566a 	.word	0x3f11566a
 800f198:	16bebd93 	.word	0x16bebd93
 800f19c:	3f66c16c 	.word	0x3f66c16c
 800f1a0:	5555553e 	.word	0x5555553e
 800f1a4:	3fc55555 	.word	0x3fc55555
 800f1a8:	3fe00000 	.word	0x3fe00000
 800f1ac:	000fffff 	.word	0x000fffff
 800f1b0:	3ff00000 	.word	0x3ff00000
 800f1b4:	4090cbff 	.word	0x4090cbff
 800f1b8:	3f6f3400 	.word	0x3f6f3400

0800f1bc <__ieee754_sqrt>:
 800f1bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800f318 <__ieee754_sqrt+0x15c>
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	ea3c 0c01 	bics.w	ip, ip, r1
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	460a      	mov	r2, r1
 800f1d0:	4607      	mov	r7, r0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	d10f      	bne.n	800f1f6 <__ieee754_sqrt+0x3a>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	f7f1 f987 	bl	80004ec <__aeabi_dmul>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	f7f0 ffcb 	bl	8000180 <__adddf3>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460d      	mov	r5, r1
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	dc0e      	bgt.n	800f218 <__ieee754_sqrt+0x5c>
 800f1fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f1fe:	ea5c 0707 	orrs.w	r7, ip, r7
 800f202:	d0f4      	beq.n	800f1ee <__ieee754_sqrt+0x32>
 800f204:	b141      	cbz	r1, 800f218 <__ieee754_sqrt+0x5c>
 800f206:	4602      	mov	r2, r0
 800f208:	460b      	mov	r3, r1
 800f20a:	f7f0 ffb7 	bl	800017c <__aeabi_dsub>
 800f20e:	4602      	mov	r2, r0
 800f210:	460b      	mov	r3, r1
 800f212:	f7f1 fa95 	bl	8000740 <__aeabi_ddiv>
 800f216:	e7e8      	b.n	800f1ea <__ieee754_sqrt+0x2e>
 800f218:	1521      	asrs	r1, r4, #20
 800f21a:	d075      	beq.n	800f308 <__ieee754_sqrt+0x14c>
 800f21c:	07cc      	lsls	r4, r1, #31
 800f21e:	f04f 0400 	mov.w	r4, #0
 800f222:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f226:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800f22a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f22e:	bf5e      	ittt	pl
 800f230:	0fd9      	lsrpl	r1, r3, #31
 800f232:	005b      	lslpl	r3, r3, #1
 800f234:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800f238:	0fd9      	lsrs	r1, r3, #31
 800f23a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f23e:	2516      	movs	r5, #22
 800f240:	4620      	mov	r0, r4
 800f242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f246:	107f      	asrs	r7, r7, #1
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	1846      	adds	r6, r0, r1
 800f24c:	4296      	cmp	r6, r2
 800f24e:	bfde      	ittt	le
 800f250:	1b92      	suble	r2, r2, r6
 800f252:	1870      	addle	r0, r6, r1
 800f254:	1864      	addle	r4, r4, r1
 800f256:	0052      	lsls	r2, r2, #1
 800f258:	3d01      	subs	r5, #1
 800f25a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f25e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f266:	d1f0      	bne.n	800f24a <__ieee754_sqrt+0x8e>
 800f268:	4629      	mov	r1, r5
 800f26a:	f04f 0e20 	mov.w	lr, #32
 800f26e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f272:	4282      	cmp	r2, r0
 800f274:	eb06 0c05 	add.w	ip, r6, r5
 800f278:	dc02      	bgt.n	800f280 <__ieee754_sqrt+0xc4>
 800f27a:	d113      	bne.n	800f2a4 <__ieee754_sqrt+0xe8>
 800f27c:	459c      	cmp	ip, r3
 800f27e:	d811      	bhi.n	800f2a4 <__ieee754_sqrt+0xe8>
 800f280:	f1bc 0f00 	cmp.w	ip, #0
 800f284:	eb0c 0506 	add.w	r5, ip, r6
 800f288:	da43      	bge.n	800f312 <__ieee754_sqrt+0x156>
 800f28a:	2d00      	cmp	r5, #0
 800f28c:	db41      	blt.n	800f312 <__ieee754_sqrt+0x156>
 800f28e:	f100 0801 	add.w	r8, r0, #1
 800f292:	1a12      	subs	r2, r2, r0
 800f294:	4640      	mov	r0, r8
 800f296:	459c      	cmp	ip, r3
 800f298:	bf88      	it	hi
 800f29a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f29e:	eba3 030c 	sub.w	r3, r3, ip
 800f2a2:	4431      	add	r1, r6
 800f2a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f2a8:	f1be 0e01 	subs.w	lr, lr, #1
 800f2ac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800f2b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f2b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f2b8:	d1db      	bne.n	800f272 <__ieee754_sqrt+0xb6>
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	d006      	beq.n	800f2cc <__ieee754_sqrt+0x110>
 800f2be:	1c48      	adds	r0, r1, #1
 800f2c0:	bf0b      	itete	eq
 800f2c2:	4671      	moveq	r1, lr
 800f2c4:	3101      	addne	r1, #1
 800f2c6:	3401      	addeq	r4, #1
 800f2c8:	f021 0101 	bicne.w	r1, r1, #1
 800f2cc:	1063      	asrs	r3, r4, #1
 800f2ce:	0849      	lsrs	r1, r1, #1
 800f2d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f2d4:	07e2      	lsls	r2, r4, #31
 800f2d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f2da:	bf48      	it	mi
 800f2dc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f2e0:	460e      	mov	r6, r1
 800f2e2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f2e6:	e782      	b.n	800f1ee <__ieee754_sqrt+0x32>
 800f2e8:	0ada      	lsrs	r2, r3, #11
 800f2ea:	3815      	subs	r0, #21
 800f2ec:	055b      	lsls	r3, r3, #21
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	d0fa      	beq.n	800f2e8 <__ieee754_sqrt+0x12c>
 800f2f2:	02d5      	lsls	r5, r2, #11
 800f2f4:	d50a      	bpl.n	800f30c <__ieee754_sqrt+0x150>
 800f2f6:	f1c1 0420 	rsb	r4, r1, #32
 800f2fa:	fa23 f404 	lsr.w	r4, r3, r4
 800f2fe:	1e4d      	subs	r5, r1, #1
 800f300:	408b      	lsls	r3, r1
 800f302:	4322      	orrs	r2, r4
 800f304:	1b41      	subs	r1, r0, r5
 800f306:	e789      	b.n	800f21c <__ieee754_sqrt+0x60>
 800f308:	4608      	mov	r0, r1
 800f30a:	e7f0      	b.n	800f2ee <__ieee754_sqrt+0x132>
 800f30c:	0052      	lsls	r2, r2, #1
 800f30e:	3101      	adds	r1, #1
 800f310:	e7ef      	b.n	800f2f2 <__ieee754_sqrt+0x136>
 800f312:	4680      	mov	r8, r0
 800f314:	e7bd      	b.n	800f292 <__ieee754_sqrt+0xd6>
 800f316:	bf00      	nop
 800f318:	7ff00000 	.word	0x7ff00000

0800f31c <with_errno>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	4616      	mov	r6, r2
 800f324:	f7fc f9d4 	bl	800b6d0 <__errno>
 800f328:	4629      	mov	r1, r5
 800f32a:	6006      	str	r6, [r0, #0]
 800f32c:	4620      	mov	r0, r4
 800f32e:	bd70      	pop	{r4, r5, r6, pc}

0800f330 <xflow>:
 800f330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f332:	4615      	mov	r5, r2
 800f334:	461c      	mov	r4, r3
 800f336:	b180      	cbz	r0, 800f35a <xflow+0x2a>
 800f338:	4610      	mov	r0, r2
 800f33a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f33e:	e9cd 0100 	strd	r0, r1, [sp]
 800f342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f346:	4628      	mov	r0, r5
 800f348:	4621      	mov	r1, r4
 800f34a:	f7f1 f8cf 	bl	80004ec <__aeabi_dmul>
 800f34e:	2222      	movs	r2, #34	; 0x22
 800f350:	b003      	add	sp, #12
 800f352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f356:	f7ff bfe1 	b.w	800f31c <with_errno>
 800f35a:	4610      	mov	r0, r2
 800f35c:	4619      	mov	r1, r3
 800f35e:	e7ee      	b.n	800f33e <xflow+0xe>

0800f360 <__math_uflow>:
 800f360:	2200      	movs	r2, #0
 800f362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f366:	f7ff bfe3 	b.w	800f330 <xflow>

0800f36a <__math_oflow>:
 800f36a:	2200      	movs	r2, #0
 800f36c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f370:	f7ff bfde 	b.w	800f330 <xflow>

0800f374 <fabs>:
 800f374:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f378:	4770      	bx	lr

0800f37a <finite>:
 800f37a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800f37e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f382:	0fc0      	lsrs	r0, r0, #31
 800f384:	4770      	bx	lr
	...

0800f388 <scalbn>:
 800f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f38e:	4604      	mov	r4, r0
 800f390:	460d      	mov	r5, r1
 800f392:	4617      	mov	r7, r2
 800f394:	460b      	mov	r3, r1
 800f396:	b996      	cbnz	r6, 800f3be <scalbn+0x36>
 800f398:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f39c:	4303      	orrs	r3, r0
 800f39e:	d039      	beq.n	800f414 <scalbn+0x8c>
 800f3a0:	4b33      	ldr	r3, [pc, #204]	; (800f470 <scalbn+0xe8>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f7f1 f8a2 	bl	80004ec <__aeabi_dmul>
 800f3a8:	4b32      	ldr	r3, [pc, #200]	; (800f474 <scalbn+0xec>)
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	429f      	cmp	r7, r3
 800f3ae:	460d      	mov	r5, r1
 800f3b0:	da0f      	bge.n	800f3d2 <scalbn+0x4a>
 800f3b2:	a32b      	add	r3, pc, #172	; (adr r3, 800f460 <scalbn+0xd8>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f7f1 f898 	bl	80004ec <__aeabi_dmul>
 800f3bc:	e006      	b.n	800f3cc <scalbn+0x44>
 800f3be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f3c2:	4296      	cmp	r6, r2
 800f3c4:	d10a      	bne.n	800f3dc <scalbn+0x54>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	f7f0 feda 	bl	8000180 <__adddf3>
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	e020      	b.n	800f414 <scalbn+0x8c>
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f3d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f3dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f3e0:	19b9      	adds	r1, r7, r6
 800f3e2:	4291      	cmp	r1, r2
 800f3e4:	dd0e      	ble.n	800f404 <scalbn+0x7c>
 800f3e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f3ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f3ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f3f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f3f6:	4820      	ldr	r0, [pc, #128]	; (800f478 <scalbn+0xf0>)
 800f3f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f3fc:	a31a      	add	r3, pc, #104	; (adr r3, 800f468 <scalbn+0xe0>)
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	e7d9      	b.n	800f3b8 <scalbn+0x30>
 800f404:	2900      	cmp	r1, #0
 800f406:	dd08      	ble.n	800f41a <scalbn+0x92>
 800f408:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f40c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f410:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f414:	4620      	mov	r0, r4
 800f416:	4629      	mov	r1, r5
 800f418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f41a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f41e:	da12      	bge.n	800f446 <scalbn+0xbe>
 800f420:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f424:	429f      	cmp	r7, r3
 800f426:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f42a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800f42e:	dcdc      	bgt.n	800f3ea <scalbn+0x62>
 800f430:	a30b      	add	r3, pc, #44	; (adr r3, 800f460 <scalbn+0xd8>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800f43a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800f43e:	480f      	ldr	r0, [pc, #60]	; (800f47c <scalbn+0xf4>)
 800f440:	f041 011f 	orr.w	r1, r1, #31
 800f444:	e7b8      	b.n	800f3b8 <scalbn+0x30>
 800f446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f44a:	3136      	adds	r1, #54	; 0x36
 800f44c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f450:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f454:	4620      	mov	r0, r4
 800f456:	4629      	mov	r1, r5
 800f458:	2200      	movs	r2, #0
 800f45a:	4b09      	ldr	r3, [pc, #36]	; (800f480 <scalbn+0xf8>)
 800f45c:	e7ac      	b.n	800f3b8 <scalbn+0x30>
 800f45e:	bf00      	nop
 800f460:	c2f8f359 	.word	0xc2f8f359
 800f464:	01a56e1f 	.word	0x01a56e1f
 800f468:	8800759c 	.word	0x8800759c
 800f46c:	7e37e43c 	.word	0x7e37e43c
 800f470:	43500000 	.word	0x43500000
 800f474:	ffff3cb0 	.word	0xffff3cb0
 800f478:	8800759c 	.word	0x8800759c
 800f47c:	c2f8f359 	.word	0xc2f8f359
 800f480:	3c900000 	.word	0x3c900000

0800f484 <_init>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	bf00      	nop
 800f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f48a:	bc08      	pop	{r3}
 800f48c:	469e      	mov	lr, r3
 800f48e:	4770      	bx	lr

0800f490 <_fini>:
 800f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f492:	bf00      	nop
 800f494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f496:	bc08      	pop	{r3}
 800f498:	469e      	mov	lr, r3
 800f49a:	4770      	bx	lr
